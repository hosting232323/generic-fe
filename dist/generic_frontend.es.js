var sm = Object.defineProperty;
var lm = (t, e, n) => e in t ? sm(t, e, { enumerable: !0, configurable: !0, writable: !0, value: n }) : t[e] = n;
var Vc = (t, e, n) => (lm(t, typeof e != "symbol" ? e + "" : e, n), n);
import { ref as Z, onMounted as nt, onUnmounted as Bd, openBlock as H, createElementBlock as Te, normalizeStyle as mt, createElementVNode as ve, onBeforeUnmount as vt, Fragment as de, reactive as Fn, computed as x, watchEffect as Ht, toRefs as Fd, capitalize as lo, isVNode as cm, Comment as um, unref as O, warn as pr, provide as it, inject as Ne, shallowRef as q, defineComponent as dm, camelize as kd, h as ma, getCurrentInstance as hm, isRef as co, createVNode as C, mergeProps as se, toRef as te, Text as fm, Transition as ri, watch as Q, onBeforeMount as nl, nextTick as je, withDirectives as Ze, resolveDirective as Jt, vShow as ui, onScopeDispose as Tt, effectScope as il, toRaw as di, TransitionGroup as gm, readonly as al, resolveDynamicComponent as Od, Teleport as mm, cloneVNode as vm, createTextVNode as ct, withCtx as Y, createBlock as fe, normalizeProps as Bc, toDisplayString as st, createCommentVNode as Ae, renderList as Rt, withModifiers as Wa, onDeactivated as Cm, onActivated as ym, vModelText as pm, normalizeClass as Fc } from "vue";
import { defineStore as uo, storeToRefs as Kt } from "pinia";
const ol = "https://generic-be-test.replit.app/", _m = "https://fastsite-be-test.replit.app/", Sm = (t, e, n) => {
  const i = new URL(`${_m}${t}`);
  Object.keys(e).forEach((a) => i.searchParams.append(a, e[a])), fetch(i, {
    method: "GET",
    headers: { "Content-Type": "application/json" }
  }).then((a) => {
    if (!a.ok)
      throw new Error(`Errore nella risposta del server: ${a.status} - ${a.statusText}`);
    return a.json();
  }).then((a) => {
    n(a);
  }).catch((a) => {
    console.error("Errore nella richiesta:", a);
  });
}, bm = (t, e, n, i = "POST", a = void 0) => {
  fetch(`${ol}${t}`, {
    method: i,
    headers: rl(),
    body: JSON.stringify(e)
  }).then((o) => {
    if (!o.ok)
      throw new Error(`Errore nella risposta del server: ${o.status} - ${o.statusText}`);
    return o.json();
  }).then((o) => {
    sl(o, n, a);
  }).catch((o) => {
    console.error("Errore nella richiesta:", o);
  });
}, Mm = (t, e, n, i = "POST", a = void 0) => {
  const o = new FormData();
  o.append("file", e), fetch(`${ol}${t}`, {
    method: i,
    headers: rl(!0),
    body: o
  }).then((r) => {
    if (!r.ok)
      throw new Error(`Errore nella risposta del server: ${r.status} - ${r.statusText}`);
    return r.json();
  }).then((r) => {
    sl(r, n, a);
  }).catch((r) => {
    console.error("Errore nella richiesta:", r);
  });
}, xm = (t, e, n, i = "GET", a = void 0) => {
  const o = new URL(`${ol}${t}`);
  Object.keys(e).forEach((r) => o.searchParams.append(r, e[r])), fetch(o, {
    method: i,
    headers: rl()
  }).then((r) => {
    if (!r.ok)
      throw new Error(`Errore nella risposta del server: ${r.status} - ${r.statusText}`);
    return r.json();
  }).then((r) => {
    sl(r, n, a);
  }).catch((r) => {
    console.error("Errore nella richiesta:", r);
  });
}, rl = (t = !1) => {
  let e = {
    Token: localStorage.getItem("token")
  };
  return t ? e.Accept = "*/*" : e["Content-Type"] = "application/json", e;
}, sl = (t, e, n) => {
  t.status == "session" ? (alert("Sessione scaduta"), n.push("/")) : e(t);
}, ll = {
  getRequest: Sm,
  postRequestGenericBE: bm,
  postRequestFileGenericBE: Mm,
  getRequestGenericBE: xm
}, Pm = [
  "Chatty",
  "VirtualTour",
  "Multilingual"
], Tm = [
  {
    content: {
      type: "automatic",
      images: [
        "https://fastsitepictures.s3.eu-north-1.amazonaws.com/Sviluppatoredisitiwebgallery0.png",
        {
          desktop: "https://fastsitepictures.s3.eu-north-1.amazonaws.com/Sviluppatoredisitiwebgallery1.png",
          mobile: "https://fastsitepictures.s3.eu-north-1.amazonaws.com/Sviluppatoredisitiwebadvantages0.png"
        }
      ]
    },
    menu: {
      it: "Carosello",
      gb: "Carusel"
    },
    type: "gallery"
  },
  {
    content: {
      type: "manual",
      images: [
        "https://fastsitepictures.s3.eu-north-1.amazonaws.com/Sviluppatoredisitiwebgallery0.png",
        {
          desktop: "https://fastsitepictures.s3.eu-north-1.amazonaws.com/Sviluppatoredisitiwebgallery1.png",
          mobile: "https://fastsitepictures.s3.eu-north-1.amazonaws.com/Sviluppatoredisitiwebadvantages0.png"
        }
      ]
    },
    menu: "Galleria",
    type: "gallery"
  },
  {
    content: {
      brands: [
        "img-01.png",
        "img-02.png",
        "img-03.png",
        "img-04.png"
      ]
    },
    menu: "Brandlist",
    type: "brandlist"
  },
  {
    content: {
      title: {
        it: "Vantaggi",
        gb: "Advantages"
      },
      advantages: [
        {
          description: {
            it: "Creiamo siti web unici e personalizzati per ogni cliente, garantendo un'immagine distintiva e professionale.",
            gb: "We create unique and personalized websites for each client, ensuring a distinctive and professional image."
          },
          image: {
            desktop: "https://fastsitepictures.s3.eu-north-1.amazonaws.com/Sviluppatoredisitiwebadvantages0.png",
            mobile: "https://fastsitepictures.s3.eu-north-1.amazonaws.com/Sviluppatoredisitiwebadvantages1.png"
          },
          name: {
            it: "Design Personalizzato",
            gb: "Pers Design"
          }
        },
        {
          description: {
            it: "Implementiamo le migliori pratiche SEO per migliorare la visibilità online dei siti web che sviluppiamo, garantendo un posizionamento migliore sui motori di ricerca.",
            gb: "We implement the best SEO practices to improve the online visibility of the websites we develop, ensuring better ranking in search engines."
          },
          image: "https://fastsitepictures.s3.eu-north-1.amazonaws.com/Sviluppatoredisitiwebadvantages1.png",
          name: "SEO Ottimizzato"
        },
        {
          description: {
            it: "I siti web che progettiamo sono completamente responsive, garantendo un'esperienza utente ottimale su tutti i dispositivi, come desktop, tablet e smartphone.",
            gb: "The websites we design are fully responsive, ensuring an optimal user experience across all devices such as desktop, tablet, and smartphone."
          },
          image: "https://fastsitepictures.s3.eu-north-1.amazonaws.com/Sviluppatoredisitiwebadvantages2.png",
          name: "Responsive Design"
        },
        {
          description: {
            it: "Ci assicuriamo che i siti web siano ottimizzati per la velocità di caricamento, migliorando l'esperienza dell'utente e favorendo il posizionamento sui motori di ricerca.",
            gb: "We ensure that websites are optimized for loading speed, improving user experience and supporting better search engine ranking."
          },
          image: [
            "https://fastsitepictures.s3.eu-north-1.amazonaws.com/Sviluppatoredisitiwebadvantages2.png",
            "https://fastsitepictures.s3.eu-north-1.amazonaws.com/Sviluppatoredisitiwebadvantages3.png"
          ],
          name: "Velocità di Caricamento Ottimale"
        }
      ]
    },
    menu: "Vantaggi",
    type: "advantages"
  },
  {
    type: "line"
  },
  {
    content: {
      title: "Servizi",
      services: [
        {
          description: "Creazione di un sito web vetrina personalizzato per presentare i tuoi servizi e prodotti in modo professionale e accattivante.",
          name: "Sito Web Vetrina"
        },
        {
          description: "Realizzazione di un sito web e-commerce completo di funzionalità di shopping online, gestione dei pagamenti e catalogo prodotti.",
          name: "Sito Web E-commerce"
        },
        {
          description: "Analisi e ottimizzazione del sito web per i motori di ricerca al fine di migliorare la visibilità online e aumentare il traffico organico.",
          name: "Ottimizzazione SEO"
        },
        {
          description: "Aggiornamento regolare dei contenuti del sito web, inclusi testi, immagini e prodotti, per garantire un'esperienza utente sempre fresca.",
          name: "Gestione Contenuti"
        },
        {
          description: "Creazione di soluzioni web personalizzate e innovative in base alle esigenze specifiche del cliente per ottenere un sito web unico e funzionale.",
          name: "Sviluppo Web Personalizzato"
        }
      ]
    },
    menu: "Servizi",
    type: "services"
  },
  {
    type: "line"
  },
  {
    content: {
      button: {
        it: "Cliccami!",
        gb: "Click on me!"
      },
      description: "Offriamo servizi di sviluppo web personalizzati per soddisfare le esigenze dei nostri clienti. Dalla creazione di siti web statici alla realizzazione di piattaforme web complesse e scalabili, garantiamo soluzioni di alta qualità e user-friendly.",
      image: {
        desktop: "https://fastsitepictures.s3.eu-north-1.amazonaws.com/Sviluppatoredisitiwebbase0.png",
        mobile: "https://fastsitepictures.s3.eu-north-1.amazonaws.com/Sviluppatoredisitiwebadvantages1.png"
      },
      orientationDesktop: "left",
      orientationMobile: "top",
      subtitle: "Da siti statici a piattaforme complesse",
      title: "Servizi di Sviluppo Web",
      url: "https://fastsitepictures.s3.eu-north-1.amazonaws.com/Sviluppatoredisitiwebbase0.png"
    },
    menu: "Sezione doppia",
    type: "dualSection"
  },
  {
    content: {
      title: "I nostri contatti",
      subtitle: "Contattaci direttamente con questo form",
      contacts: [
        {
          icon: "mdi-email",
          title: "giovanni.colasanto@fastsite.it"
        },
        {
          icon: "mdi-phone",
          title: "+39 347 876 8340"
        },
        {
          icon: "mdi-facebook",
          title: {
            it: "Seguici su Facebook",
            gb: "Follow us on Facebook"
          },
          url: "https://www.facebook.com/"
        },
        {
          icon: "mdi-instagram",
          title: "Seguici su Instagram",
          url: "https://www.instagram.com/"
        },
        {
          icon: "mdi-linkedin",
          title: "Seguici su LinkedIn",
          url: "https://www.linkedin.com/in/nomeprofilo"
        },
        {
          icon: "mdi-twitter",
          title: "Seguici su X (Twitter)",
          url: "https://twitter.com/profilo"
        },
        {
          icon: "mdi-youtube",
          title: "Guarda il nostro canale YouTube",
          url: "https://www.youtube.com/@canale"
        },
        {
          icon: "mdi-music",
          title: "Seguici su TikTok",
          url: "https://www.tiktok.com/@utente"
        }
      ]
    },
    menu: "Contatti",
    type: "contacts"
  },
  {
    content: {
      title: "Puoi venirci a conoscere qui",
      coordinates: [
        16.882818,
        41.09665
      ],
      zoom: 9
    },
    type: "map"
  }
], wm = {
  name: "FastSite",
  logo: "https://imgur.com/mNAxeqq.png",
  logoMode: "both",
  primaryColor: "#2F4F4F",
  secondaryColor: "#D2B48C",
  chattyId: 10,
  locales: [
    "it",
    "gb"
  ],
  socialBubbles: [
    {
      icon: "mdi-whatsapp",
      url: "https://twitter.com/profilo"
    },
    {
      icon: "mdi-instagram",
      url: "https://twitter.com/profilo"
    },
    {
      icon: "mdi-facebook",
      url: "https://twitter.com/profilo"
    }
  ]
}, Em = {
  username: "bro.users.info@gmail.com",
  password: "Ciao1234",
  addressMode: 1,
  province: "Barletta-Andria-Trani",
  cities: [
    "Lanzo Torinese",
    "Cafasse"
  ]
}, Am = {
  addOn: Pm,
  components: Tm,
  info: wm,
  store: Em
}, Wn = uo("data", {
  state: () => ({
    data: {},
    ready: !1
  }),
  actions: {
    initData(t = void 0) {
      t ? ll.getRequest(`get-data/${t}`, {}, (e) => {
        this.updateData(e.data);
      }) : this.updateData(Am);
    },
    initDataByJson(t) {
      this.updateData(t);
    },
    updateData(t) {
      this.data = t, this.ready = !0;
    }
  }
});
const ho = (t, e) => {
  const n = t.__vccOpts || t;
  for (const [i, a] of e)
    n[i] = a;
  return n;
}, Rm = {
  __name: "UpArrow",
  props: {
    bottomOffset: {
      type: Number,
      default: 20
    },
    info: {
      default: null
    }
  },
  setup(t) {
    const e = Wn(), { data: n } = Kt(e), i = t, a = i.info ? i.info : n.value.info, o = Z(null), r = () => {
      window.scrollTo({
        top: 0,
        behavior: "smooth"
      });
    }, s = () => {
      window.scrollY >= 250 ? o.value.classList.add("visible") : o.value.classList.remove("visible");
    };
    return nt(() => {
      const l = document.getElementById("UpArrow");
      l && (l.style.color = a.primaryColor), window.addEventListener("scroll", s);
    }), Bd(() => {
      window.removeEventListener("scroll", s);
    }), (l, c) => (H(), Te("div", {
      class: "sup-container shadown",
      style: mt({ bottom: `${i.bottomOffset}px` }),
      ref_key: "topButton",
      ref: o,
      onClick: r
    }, c[0] || (c[0] = [
      ve("i", {
        class: "fas fa-arrow-up",
        id: "UpArrow"
      }, null, -1)
    ]), 4));
  }
}, Im = /* @__PURE__ */ ho(Rm, [["__scopeId", "data-v-d96537b5"]]), Dd = uo("address", {
  state: () => ({
    firstname: "",
    lastname: "",
    region: "",
    province: "",
    city: "",
    address: ""
  }),
  actions: {
    updateField(t, e) {
      this[t] = e;
    },
    clearAll() {
      this.firstname = "", this.lastname = "", this.region = "", this.province = "", this.city = "", this.address = "";
    },
    getFullAddress() {
      var t = `${this.firstname} ${this.lastname}, ${this.address}, ${this.city}, ${this.province}, ${this.region}`;
      return this.firstname && this.lastname && this.address && this.city && this.province && this.region ? (this.clearAll(), t) : !1;
    }
  },
  persist: {
    enabled: !0,
    storage: localStorage
  }
}), Gd = uo("order", {
  state: () => ({
    products: []
  }),
  actions: {
    addProduct(t) {
      const e = this.products.find((n) => n.product === t.product);
      e ? e.quantity += 1 : (t.quantity = 1, this.products.push(t));
    },
    removeProduct(t) {
      const e = this.products.find((n) => n.product === t.product);
      e && (e.quantity > 1 ? e.quantity -= 1 : this.products = this.products.filter((n) => n.product !== t.product));
    },
    removeAllProduct() {
      this.products = [], Dd().clearAll();
    }
  },
  persist: !0
});
function va() {
  const t = Z(!1), e = () => {
    t.value = window.innerWidth < 600;
  };
  return nt(() => {
    e(), window.addEventListener("resize", e);
  }), vt(() => {
    window.removeEventListener("resize", e);
  }), { isMobile: t, resolveImg: (i) => typeof i == "string" ? i : typeof i == "object" ? t.value ? i.mobile : i.desktop : "" };
}
const zm = {
  Torino: [
    "Reano",
    "Usseaux",
    "Salassa",
    "Brandizzo",
    "Pertusio",
    "Cavour",
    "Ivrea",
    "Azeglio",
    "Rivarossa",
    "Salbertrand",
    "Ciconio",
    "Villastellone",
    "Borgiallo",
    "Alpignano",
    "Torre Canavese",
    "Cintano",
    "Cuorgnè",
    "Rivoli",
    "Cantalupa",
    "Brosso",
    "Cafasse",
    "Lanzo Torinese",
    "Romano Canavese",
    "Novalesa",
    "San Carlo Canavese",
    "Rueglio",
    "San Martino Canavese",
    "Lessolo",
    "Rocca Canavese",
    "San Pietro Val Lemina",
    "Giaglione",
    "Orio Canavese",
    "Ceres",
    "Chiaverano",
    "Cumiana",
    "Osasio",
    "Scalenghe",
    "Mercenasco",
    "Candia Canavese",
    "Isolabella",
    "Noasca",
    "Groscavallo",
    "Ribordone",
    "Druento",
    "Cossano Canavese",
    "Villar Perosa",
    "Locana",
    "Piverone",
    "Front",
    "Levone",
    "Settimo Torinese",
    "Alpette",
    "San Giusto Canavese",
    "Bardonecchia",
    "Verolengo",
    "Fenestrelle",
    "Sauze d'Oulx",
    "Colleretto Castelnuovo",
    "Rivara",
    "Macello",
    "Barbania",
    "Gravere",
    "Corio",
    "Valprato Soana",
    "Chianocco",
    "Sestriere",
    "Montalto Dora",
    "Coazze",
    "Meana di Susa",
    "None",
    "Cantoira",
    "Chialamberto",
    "Settimo Rottaro",
    "Arignano",
    "Mombello di Torino",
    "Prali",
    "Busano",
    "Lemie",
    "Val di Chy",
    "Moncalieri",
    "Banchette",
    "Chiesanuova",
    "Borgaro Torinese",
    "Favria",
    "Grosso",
    "San Maurizio Canavese",
    "Albiano d'Ivrea",
    "Rorà",
    "Garzigliana",
    "Exilles",
    "Buriasco",
    "Villar Focchiardo",
    "Castagneto Po",
    "Agliè",
    "Sant'Ambrogio di Torino",
    "Balangero",
    "Rivarolo Canavese",
    "Rivalta di Torino",
    "Andezeno",
    "Cambiano",
    "Beinasco",
    "Valperga",
    "Prarostino",
    "Pinerolo",
    "Vische",
    "Bobbio Pellice",
    "Mattie",
    "Valchiusa",
    "Lombriasco",
    "Baldissero Torinese",
    "Virle Piemonte",
    "Venaria Reale",
    "Mappano",
    "Bollengo",
    "Lusernetta",
    "San Benigno Canavese",
    "Borgone Susa",
    "Balme",
    "Borgofranco d'Ivrea",
    "Montalenghe",
    "Rubiana",
    "Villar Pellice",
    "Ala di Stura",
    "Carignano",
    "Castagnole Piemonte",
    "Villafranca Piemonte",
    "Casalborgone",
    "Perrero",
    "Mathi",
    "Barone Canavese",
    "Mazzè",
    "Brozolo",
    "Roletto",
    "Carema",
    "Germagnano",
    "Trofarello",
    "Issiglio",
    "Perosa Canavese",
    "Montaldo Torinese",
    "Mompantero",
    "Bruino",
    "Villar Dora",
    "Rivalba",
    "Vialfrè",
    "Tavagnasco",
    "Luserna San Giovanni",
    "San Francesco al Campo",
    "Lombardore",
    "Brusasco",
    "Mezzenile",
    "Salza di Pinerolo",
    "Verrua Savoia",
    "Leini",
    "Caselette",
    "Pratiglione",
    "Bibiana",
    "Traves",
    "Condove",
    "Castellamonte",
    "Gassino Torinese",
    "Sauze di Cesana",
    "Givoletto",
    "Carmagnola",
    "Usseglio",
    "Ronco Canavese",
    "Caluso",
    "Loranzè",
    "Forno Canavese",
    "Canischio",
    "Bairo",
    "Sant'Antonino di Susa",
    "Moriondo Torinese",
    "Settimo Vittone",
    "Airasca",
    "Lauriano",
    "Piscina",
    "Andrate",
    "Inverso Pinasca",
    "Rosta",
    "San Giorgio Canavese",
    "Colleretto Giacosa",
    "Caprie",
    "Samone",
    "Roure",
    "Volpiano",
    "Vaie",
    "Grugliasco",
    "Pomaretto",
    "San Germano Chisone",
    "Ceresole Reale",
    "Vallo Torinese",
    "Fiano",
    "San Giorio di Susa",
    "Caravino",
    "Cesana Torinese",
    "Varisella",
    "Bosconero",
    "Monteu da Po",
    "Burolo",
    "Cascinette d'Ivrea",
    "Sciolze",
    "Borgomasino",
    "Pecetto Torinese",
    "Massello",
    "La Loggia",
    "Ozegna",
    "Sparone",
    "Pessinetto",
    "San Gillio",
    "Feletto",
    "Pralormo",
    "Maglione",
    "Caselle Torinese",
    "Torrazza Piemonte",
    "Oglianico",
    "Coassolo Torinese",
    "Viù",
    "Chiomonte",
    "Strambinello",
    "Susa",
    "Frossasco",
    "Porte",
    "Vinovo",
    "Vauda Canavese",
    "Pragelato",
    "Parella",
    "Villarbasse",
    "Traversella",
    "Vigone",
    "Chivasso",
    "Cercenasco",
    "Santena",
    "Giaveno",
    "Pianezza",
    "Riva presso Chieri",
    "Cinzano",
    "Fiorano Canavese",
    "Volvera",
    "Cuceglio",
    "Candiolo",
    "Torre Pellice",
    "Almese",
    "Castiglione Torinese",
    "Piobesi Torinese",
    "Quincinetto",
    "Vistrorio",
    "San Didero",
    "Collegno",
    "Villareggia",
    "Pavone Canavese",
    "Venaus",
    "San Colombano Belmonte",
    "Bussoleno",
    "Oulx",
    "Nichelino",
    "Foglizzo",
    "Baldissero Canavese",
    "San Secondo di Pinerolo",
    "Ingria",
    "Scarmagno",
    "Bruzolo",
    "Quassolo",
    "Moncenisio",
    "Trana",
    "Cavagnolo",
    "San Sebastiano da Po",
    "Poirino",
    "Nomaglio",
    "Chiusa di San Michele",
    "Nole",
    "Vestignè",
    "Angrogna",
    "Robassomero",
    "Vidracco",
    "Val della Torre",
    "Avigliana",
    "Bricherasio",
    "Strambino",
    "Castelnuovo Nigra",
    "Montanaro",
    "Salerano Canavese",
    "Valgioie",
    "Marentino",
    "Ciriè",
    "Campiglione Fenile",
    "Osasco",
    "Orbassano",
    "Prascorsano",
    "Torino",
    "Perosa Argentina",
    "Pont Canavese",
    "Monastero di Lanzo",
    "La Cassa",
    "Pinasca",
    "San Mauro Torinese",
    "Sangano",
    "Pavarolo",
    "Buttigliera Alta",
    "Palazzo Canavese",
    "Quagliuzzo",
    "Claviere",
    "Villanova Canavese",
    "Piossasco",
    "Lusigliè",
    "Pino Torinese",
    "Pancalieri",
    "Chieri",
    "Frassinetto",
    "Pramollo",
    "San Ponso",
    "San Raffaele Cimena",
    "Rondissone"
  ],
  Vercelli: [
    "Albano Vercellese",
    "Moncrivello",
    "Villata",
    "Asigliano Vercellese",
    "Alice Castello",
    "Cellio con Breia",
    "Lenta",
    "Mollia",
    "Vocca",
    "Desana",
    "Varallo",
    "Bianzè",
    "Palazzolo Vercellese",
    "Ronsecco",
    "Collobiano",
    "Balmuccia",
    "Campertogno",
    "Valduggia",
    "Cravagliana",
    "Rovasenda",
    "Casanova Elvo",
    "Balocco",
    "Salasco",
    "Formigliana",
    "Pezzana",
    "Gattinara",
    "Olcenengo",
    "Roasio",
    "Crova",
    "Arborio",
    "Rimella",
    "Alagna Valsesia",
    "Piode",
    "Scopello",
    "Costanzana",
    "Carisio",
    "Ghislarengo",
    "Quarona",
    "Villarboit",
    "Boccioleto",
    "Lozzolo",
    "Borgo d'Ale",
    "Prarolo",
    "Serravalle Sesia",
    "Trino",
    "San Giacomo Vercellese",
    "Caresana",
    "Civiasco",
    "Caresanablot",
    "Santhià",
    "Scopa",
    "Fontanetto Po",
    "Cervatto",
    "Buronzo",
    "Carcoforo",
    "Saluggia",
    "Greggio",
    "Alto Sermenza",
    "Oldenico",
    "Quinto Vercellese",
    "Pertengo",
    "Sali Vercellese",
    "Crescentino",
    "Motta de' Conti",
    "Cigliano",
    "Rassa",
    "Lignana",
    "Rossa",
    "Vercelli",
    "Rive",
    "Livorno Ferraris",
    "Tricerro",
    "Tronzano Vercellese",
    "Borgosesia",
    "San Germano Vercellese",
    "Fobello",
    "Pila",
    "Lamporo",
    "Borgo Vercelli",
    "Stroppiana",
    "Guardabosone",
    "Postua"
  ],
  Novara: [
    "Fara Novarese",
    "Vaprio d'Agogna",
    "Mandello Vitta",
    "Invorio",
    "Landiona",
    "Divignano",
    "Mezzomerico",
    "Caltignaga",
    "Castellazzo Novarese",
    "Soriso",
    "Vespolate",
    "Cavaglio d'Agogna",
    "Cureggio",
    "Borgolavezzaro",
    "Pella",
    "Casalbeltrame",
    "Pettenasco",
    "Biandrate",
    "Cavallirio",
    "Meina",
    "Casalvolone",
    "Nebbiuno",
    "Oleggio",
    "Varallo Pombia",
    "Casalino",
    "San Pietro Mosezzo",
    "Boca",
    "Ameno",
    "Miasino",
    "Trecate",
    "Carpignano Sesia",
    "Garbagna Novarese",
    "Pogno",
    "Briga Novarese",
    "Grignasco",
    "Gargallo",
    "Vinzaglio",
    "Agrate Conturbia",
    "Vicolungo",
    "Bogogno",
    "Cerano",
    "Marano Ticino",
    "Gattico-Veruno",
    "Barengo",
    "Cameri",
    "Paruzzaro",
    "Suno",
    "Massino Visconti",
    "Prato Sesia",
    "Armeno",
    "Ghemme",
    "Bolzano Novarese",
    "Dormelletto",
    "San Maurizio d'Opaglio",
    "Borgo Ticino",
    "Oleggio Castello",
    "Nibbiola",
    "Colazza",
    "Recetto",
    "Gozzano",
    "Sizzano",
    "Pombia",
    "Fontaneto d'Agogna",
    "Romentino",
    "Comignago",
    "Bellinzago Novarese",
    "Momo",
    "Castelletto sopra Ticino",
    "Lesa",
    "Arona",
    "Romagnano Sesia",
    "Borgomanero",
    "Maggiora",
    "Sillavengo",
    "Briona",
    "Casaleggio Novara",
    "Cressa",
    "Cavaglietto",
    "Pisano",
    "Granozzo con Monticello",
    "Novara",
    "Sozzago",
    "Galliate",
    "Tornaco",
    "Terdobbiate",
    "San Nazzaro Sesia",
    "Orta San Giulio"
  ],
  Cuneo: [
    "Baldissero d'Alba",
    "Bergolo",
    "Mango",
    "Margarita",
    "Pamparato",
    "Neviglie",
    "Montelupo Albese",
    "Govone",
    "Farigliano",
    "Castiglione Tinella",
    "Lesegno",
    "Villar San Costanzo",
    "Castellinaldo d'Alba",
    "Venasca",
    "Oncino",
    "Limone Piemonte",
    "Rocca Cigliè",
    "Torre San Giorgio",
    "Sambuco",
    "Rodello",
    "Santo Stefano Roero",
    "Battifollo",
    "Torre Bormida",
    "Cuneo",
    "Casteldelfino",
    "Castelletto Stura",
    "Serralunga d'Alba",
    "Genola",
    "Perletto",
    "Barge",
    "Entracque",
    "Robilante",
    "Busca",
    "Corneliano d'Alba",
    "Canosio",
    "Castellino Tanaro",
    "Guarene",
    "Garessio",
    "Cardè",
    "Lisio",
    "Neive",
    "Niella Tanaro",
    "Rittana",
    "Roccavione",
    "Carrù",
    "Canale",
    "Rossana",
    "Mondovì",
    "Bagnolo Piemonte",
    "Treiso",
    "Vicoforte",
    "Roccabruna",
    "Cigliè",
    "Monasterolo di Savigliano",
    "Monasterolo Casotto",
    "Crissolo",
    "Bra",
    "Pezzolo Valle Uzzone",
    "Scagnello",
    "Prazzo",
    "Sale delle Langhe",
    "Frassino",
    "Pietraporzio",
    "Rocca de' Baldi",
    "Rocchetta Belbo",
    "Valloriate",
    "Villanova Solaro",
    "Boves",
    "Pontechianale",
    "Pianfei",
    "Revello",
    "Montezemolo",
    "Polonghera",
    "Villafalletto",
    "Moretta",
    "Paesana",
    "Sanfrè",
    "Racconigi",
    "Saliceto",
    "Tarantasca",
    "Barolo",
    "Gottasecca",
    "Fossano",
    "Narzole",
    "Montà",
    "Prunetto",
    "Alba",
    "Castelletto Uzzone",
    "Morozzo",
    "Belvedere Langhe",
    "Costigliole Saluzzo",
    "Briga Alta",
    "Monterosso Grana",
    "Piasco",
    "Cervasca",
    "San Michele Mondovì",
    "Moiola",
    "Albaretto della Torre",
    "Borgomale",
    "Roascio",
    "Gaiola",
    "Magliano Alpi",
    "Saluzzo",
    "Trezzo Tinella",
    "Cavallerleone",
    "Nucetto",
    "Lagnasco",
    "Isasca",
    "Bene Vagienna",
    "Verzuolo",
    "Monesiglio",
    "Martiniana Po",
    "Argentera",
    "Valdieri",
    "Marene",
    "Villanova Mondovì",
    "Ceva",
    "Frabosa Sottana",
    "Cossano Belbo",
    "Cortemilia",
    "Montemale di Cuneo",
    "Santa Vittoria d'Alba",
    "Gambasca",
    "Casalgrasso",
    "Ceresole Alba",
    "Frabosa Soprana",
    "Perlo",
    "Bellino",
    "Aisone",
    "Macra",
    "Montaldo di Mondovì",
    "Chiusa di Pesio",
    "Arguello",
    "Piozzo",
    "Stroppo",
    "Caprauna",
    "Elva",
    "Priola",
    "Santo Stefano Belbo",
    "Cravanzana",
    "Brondello",
    "Demonte",
    "Mombasiglio",
    "La Morra",
    "Roccasparvera",
    "Sommariva Perno",
    "Sale San Giovanni",
    "Grinzane Cavour",
    "Savigliano",
    "Murazzano",
    "Verduno",
    "Acceglio",
    "Monchiero",
    "Cherasco",
    "Roburent",
    "Melle",
    "Vernante",
    "Sant'Albano Stura",
    "Monastero di Vasco",
    "Castiglione Falletto",
    "Montaldo Roero",
    "Roccaforte Mondovì",
    "Vottignasco",
    "Sinio",
    "Viola",
    "Borgo San Dalmazzo",
    "Scarnafigi",
    "Niella Belbo",
    "Bagnasco",
    "Cartignano",
    "Envie",
    "Gorzegno",
    "Murello",
    "Lequio Berria",
    "Cavallermaggiore",
    "Marsaglia",
    "Manta",
    "Barbaresco",
    "Camerana",
    "Sampeyre",
    "Sanfront",
    "Rifreddo",
    "Vignolo",
    "Beinette",
    "Benevello",
    "Feisoglio",
    "Cervere",
    "Cerretto Langhe",
    "San Damiano Macra",
    "Caramagna Piemonte",
    "Roddi",
    "Roaschia",
    "Serravalle Langhe",
    "Valgrana",
    "Vinadio",
    "Lequio Tanaro",
    "Dronero",
    "Ostana",
    "Salmour",
    "Mombarcaro",
    "Bossolasco",
    "Castagnito",
    "Centallo",
    "Magliano Alfieri",
    "Torresina",
    "Pradleves",
    "Igliano",
    "Priero",
    "Pocapaglia",
    "Marmora",
    "Dogliani",
    "Alto",
    "Bernezzo",
    "Bonvicino",
    "Monforte d'Alba",
    "Castelnuovo di Ceva",
    "Vezza d'Alba",
    "Novello",
    "Sommariva del Bosco",
    "Briaglia",
    "Torre Mondovì",
    "Bastia Mondovì",
    "Roddino",
    "Monticello d'Alba",
    "Caraglio",
    "Castelmagno",
    "Faule",
    "Diano d'Alba",
    "Monteu Roero",
    "Castino",
    "Somano",
    "Pagno",
    "Piobesi d'Alba",
    "Ruffia",
    "Brossasco",
    "Priocca",
    "Cissone",
    "Bosia",
    "Paroldo",
    "Levice",
    "Clavesana",
    "Montanera",
    "San Benedetto Belbo",
    "Peveragno",
    "Trinità",
    "Celle di Macra",
    "Ormea"
  ],
  Asti: [
    "Incisa Scapaccino",
    "Scurzolengo",
    "Villa San Secondo",
    "Cerro Tanaro",
    "Montiglio Monferrato",
    "Cortanze",
    "Baldichieri d'Asti",
    "Belveglio",
    "Villanova d'Asti",
    "Isola d'Asti",
    "San Paolo Solbrito",
    "Quaranti",
    "Grazzano Badoglio",
    "Cocconato",
    "Serole",
    "Sessame",
    "Cassinasco",
    "Moasca",
    "Moransengo-Tonengo",
    "Calosso",
    "Passerano Marmorito",
    "Camerano Casasco",
    "Corsione",
    "Bruno",
    "Celle Enomondo",
    "Cerreto d'Asti",
    "Vinchio",
    "Coazzolo",
    "Cortiglione",
    "Cossombrato",
    "Monastero Bormida",
    "Castell'Alfero",
    "Asti",
    "Cellarengo",
    "Cantarana",
    "Dusino San Michele",
    "Roccaverano",
    "Berzano di San Pietro",
    "Montabone",
    "San Giorgio Scarampi",
    "Montegrosso d'Asti",
    "Fontanile",
    "Frinco",
    "Vaglio Serra",
    "Buttigliera d'Asti",
    "Tonco",
    "Montemagno Monferrato",
    "Capriglio",
    "Bubbio",
    "Villafranca d'Asti",
    "Viarigi",
    "Penango",
    "Maranzana",
    "Rocca d'Arazzo",
    "San Martino Alfieri",
    "Aramengo",
    "Costigliole d'Asti",
    "Rocchetta Palafea",
    "Castelnuovo Belbo",
    "Soglio",
    "Cisterna d'Asti",
    "Castelnuovo Don Bosco",
    "Castello di Annone",
    "Refrancore",
    "Revigliasco d'Asti",
    "Rocchetta Tanaro",
    "Nizza Monferrato",
    "Piea",
    "Cunico",
    "Ferrere",
    "Montafia",
    "Robella",
    "Canelli",
    "Grana Monferrato",
    "Calamandrana",
    "Calliano Monferrato",
    "Albugnano",
    "Montaldo Scarampi",
    "Olmo Gentile",
    "Castel Boglione",
    "Mombercelli",
    "Antignano",
    "Mongardino",
    "Portacomaro",
    "San Marzano Oliveto",
    "Azzano d'Asti",
    "Castellero",
    "Roatto",
    "Maretto",
    "Cortazzone",
    "Casorzo Monferrato",
    "Castelnuovo Calcea",
    "Tigliole",
    "Moncucco Torinese",
    "Settime",
    "Moncalvo",
    "Castelletto Molina",
    "Cinaglio",
    "Castagnole Monferrato",
    "Pino d'Asti",
    "Piovà Massaia",
    "Cessole",
    "Valfenera",
    "Mombaldone",
    "Mombaruzzo",
    "Montechiaro d'Asti",
    "Chiusano d'Asti",
    "Vigliano d'Asti",
    "Loazzolo",
    "Vesime",
    "Monale",
    "Viale",
    "Castagnole delle Lanze",
    "Agliano Terme",
    "Cortandone",
    "Castel Rocchero",
    "San Damiano d'Asti"
  ],
  Alessandria: [
    "Cereseto",
    "Malvicino",
    "Volpeglino",
    "Avolasca",
    "Fubine Monferrato",
    "Vignole Borbera",
    "Alice Bel Colle",
    "Pareto",
    "Gamalero",
    "Melazzo",
    "Bosco Marengo",
    "Montegioco",
    "Conzano",
    "Alluvioni Piovera",
    "Felizzano",
    "Sala Monferrato",
    "Acqui Terme",
    "Prasco",
    "Tagliolo Monferrato",
    "Borgo San Martino",
    "Gremiasco",
    "Masio",
    "Castelnuovo Scrivia",
    "Casale Monferrato",
    "Fabbrica Curone",
    "Valmacca",
    "Morsasco",
    "Valenza",
    "Pomaro Monferrato",
    "Dernice",
    "Molare",
    "Borghetto di Borbera",
    "Basaluzzo",
    "Carrosio",
    "Castelletto Merli",
    "Monleale",
    "Ponti",
    "Trisobbio",
    "Cerreto Grue",
    "Montechiaro d'Acqui",
    "Cella Monte",
    "Merana",
    "Cavatore",
    "Spigno Monferrato",
    "Orsara Bormida",
    "Bozzole",
    "San Giorgio Monferrato",
    "Occimiano",
    "Villamiroglio",
    "Carentino",
    "Pontestura",
    "Oviglio",
    "Terzo",
    "Balzola",
    "Voltaggio",
    "Carbonara Scrivia",
    "Rocchetta Ligure",
    "Sarezzano",
    "Rocca Grimalda",
    "Morano sul Po",
    "Ticineto",
    "Stazzano",
    "Fresonara",
    "Strevi",
    "Berzano di Tortona",
    "Serralunga di Crea",
    "Terruggia",
    "Ponzano Monferrato",
    "Arquata Scrivia",
    "Tassarolo",
    "Solero",
    "Cantalupo Ligure",
    "Cremolino",
    "Bassignana",
    "Frugarolo",
    "Ponzone",
    "Silvano d'Orba",
    "Denice",
    "Casal Cermelli",
    "Rivarone",
    "Solonghello",
    "Brignano-Frascata",
    "Montaldeo",
    "Castelletto d'Erro",
    "Francavilla Bisio",
    "Pozzolo Formigaro",
    "Molino dei Torti",
    "Villalvernia",
    "Volpedo",
    "Capriata d'Orba",
    "Carrega Ligure",
    "Momperone",
    "Viguzzolo",
    "Mornese",
    "Villanova Monferrato",
    "Cartosio",
    "Fraconalto",
    "Grognardo",
    "Montecastello",
    "Pecetto di Valenza",
    "Lu e Cuccaro Monferrato",
    "Albera Ligure",
    "Bistagno",
    "Belforte Monferrato",
    "Frassineto Po",
    "Guazzora",
    "Ozzano Monferrato",
    "Visone",
    "Casaleggio Boiro",
    "Cassinelle",
    "Grondona",
    "Altavilla Monferrato",
    "Garbagna",
    "Sezzadio",
    "Murisengo",
    "Castelspina",
    "Ricaldone",
    "Castelnuovo Bormida",
    "Isola Sant'Antonio",
    "Castelletto d'Orba",
    "Montacuto",
    "Sant'Agata Fossili",
    "Villadeati",
    "Vignale Monferrato",
    "Tortona",
    "Castellar Guidobono",
    "Ovada",
    "Bergamasco",
    "Pozzol Groppo",
    "Quattordio",
    "Rivalta Bormida",
    "Quargnento",
    "Alessandria",
    "Alzano Scrivia",
    "Treville",
    "Villaromagnano",
    "Camino",
    "Novi Ligure",
    "Rosignano Monferrato",
    "Montaldo Bormida",
    "Carezzano",
    "Montemarzino",
    "Serravalle Scrivia",
    "Coniolo",
    "San Salvatore Monferrato",
    "Roccaforte Ligure",
    "Predosa",
    "Spineto Scrivia",
    "Odalengo Piccolo",
    "San Sebastiano Curone",
    "Cassano Spinola",
    "Giarole",
    "Cabella Ligure",
    "Moncestino",
    "Carpeneto",
    "Gavi",
    "Sardigliano",
    "Olivola",
    "Frascaro",
    "Ottiglio",
    "Costa Vescovato",
    "Casalnoceto",
    "Gabiano",
    "Odalengo Grande",
    "Casasco",
    "Castellazzo Bormida",
    "Paderna",
    "Bosio",
    "San Cristoforo",
    "Mirabello Monferrato",
    "Frassinello Monferrato",
    "Mongiardino Ligure",
    "Sale",
    "Castellania Coppi",
    "Borgoratto Alessandrino",
    "Pontecurone",
    "Camagna Monferrato",
    "Castelletto Monferrato",
    "Pietra Marazzi",
    "Cerrina Monferrato",
    "Lerma",
    "Cassine",
    "Mombello Monferrato",
    "Alfiano Natta",
    "Parodi Ligure",
    "Morbello",
    "Pasturana"
  ],
  Biella: [
    "Crevacuore",
    "Cavaglià",
    "Ponderano",
    "Viverone",
    "Quaregna Cerreto",
    "Sagliano Micca",
    "Miagliano",
    "Vigliano Biellese",
    "Camandona",
    "Piatto",
    "Massazza",
    "Campiglia Cervo",
    "Bioglio",
    "Rosazza",
    "Veglio",
    "Salussola",
    "Vallanzengo",
    "Graglia",
    "Zubiena",
    "Benna",
    "Camburzano",
    "Portula",
    "Coggiola",
    "Verrone",
    "Strona",
    "Ailoche",
    "Sala Biellese",
    "Muzzano",
    "Cossato",
    "Andorno Micca",
    "Castelletto Cervo",
    "Dorzano",
    "Villa del Bosco",
    "Magnano",
    "Sandigliano",
    "Zumaglia",
    "Brusnengo",
    "Biella",
    "Gifflenga",
    "Zimone",
    "Mongrando",
    "Sordevolo",
    "Donato",
    "Valle San Nicolao",
    "Villanova Biellese",
    "Candelo",
    "Caprile",
    "Pettinengo",
    "Curino",
    "Tollegno",
    "Valdengo",
    "Cerrione",
    "Occhieppo Inferiore",
    "Pralungo",
    "Ronco Biellese",
    "Netro",
    "Callabiana",
    "Roppolo",
    "Masserano",
    "Mezzana Mortigliengo",
    "Tavigliano",
    "Occhieppo Superiore",
    "Lessona",
    "Piedicavallo",
    "Mottalciata",
    "Valdilana",
    "Torrazzo",
    "Ternengo",
    "Casapinta",
    "Sostegno",
    "Gaglianico",
    "Borriana",
    "Pollone",
    "Pray"
  ],
  "Verbano-Cusio-Ossola": [
    "Belgirate",
    "Domodossola",
    "Bognanco",
    "Macugnaga",
    "Ornavasso",
    "Nonio",
    "Premia",
    "Vignone",
    "Santa Maria Maggiore",
    "Beura-Cardezza",
    "Caprezzo",
    "Villadossola",
    "Valstrona",
    "Omegna",
    "Trontano",
    "Formazza",
    "Germagno",
    "Toceno",
    "Bannio Anzino",
    "Stresa",
    "Madonna del Sasso",
    "Arola",
    "Cossogno",
    "Oggebbio",
    "Piedimulera",
    "Aurano",
    "Druogno",
    "Pieve Vergonte",
    "Anzola d'Ossola",
    "Craveggia",
    "Gravellona Toce",
    "Intragna",
    "Cannero Riviera",
    "Baceno",
    "Quarna Sotto",
    "Varzo",
    "Masera",
    "Verbania",
    "Crodo",
    "Gurro",
    "Crevoladossola",
    "Miazzina",
    "Premosello-Chiovenda",
    "Cannobio",
    "Massiola",
    "Quarna Sopra",
    "Montescheno",
    "Pallanzeno",
    "Vogogna",
    "Gignese",
    "Mergozzo",
    "Premeno",
    "Ceppo Morelli",
    "Cambiasca",
    "Arizzano",
    "Montecrestese",
    "Re",
    "Valle Cannobina",
    "Antrona Schieranco",
    "Ghiffa",
    "Loreglia",
    "Trasquera",
    "Villette",
    "Bee",
    "Trarego Viggiona",
    "Malesco",
    "Baveno",
    "Borgomezzavalle",
    "Brovello-Carpugnino",
    "Cesara",
    "San Bernardino Verbano",
    "Casale Corte Cerro",
    "Vanzone con San Carlo",
    "Calasca-Castiglione"
  ]
}, Lm = {
  Imperia: [
    "Mendatica",
    "Borghetto d'Arroscia",
    "Montalto Carpasio",
    "Vallebona",
    "Aurigo",
    "Perinaldo",
    "Diano Castello",
    "Rezzo",
    "Borgomaro",
    "Civezza",
    "Ventimiglia",
    "Pietrabruna",
    "Chiusavecchia",
    "Dolceacqua",
    "Cervo",
    "Villa Faraldi",
    "San Biagio della Cima",
    "Molini di Triora",
    "Diano Marina",
    "Vallecrosia",
    "Diano Arentino",
    "Imperia",
    "Dolcedo",
    "Pontedassio",
    "Pieve di Teco",
    "Pornassio",
    "Airole",
    "Camporosso",
    "Bordighera",
    "Isolabona",
    "Vessalico",
    "Ceriana",
    "Triora",
    "Cesio",
    "Caravonica",
    "Taggia",
    "San Lorenzo al Mare",
    "Ranzo",
    "Armo",
    "Pompeiana",
    "Cosio d'Arroscia",
    "Montegrosso Pian Latte",
    "Riva Ligure",
    "Rocchetta Nervina",
    "San Bartolomeo al Mare",
    "Chiusanico",
    "Sanremo",
    "Prelà",
    "Ospedaletti",
    "Castel Vittorio",
    "Santo Stefano al Mare",
    "Costarainera",
    "Apricale",
    "Aquila d'Arroscia",
    "Castellaro",
    "Cipressa",
    "Seborga",
    "Lucinasco",
    "Diano San Pietro",
    "Soldano",
    "Terzorio",
    "Vasia",
    "Pigna",
    "Badalucco",
    "Bajardo",
    "Olivetta San Michele"
  ],
  Savona: [
    "Piana Crixia",
    "Balestrino",
    "Osiglia",
    "Spotorno",
    "Calice Ligure",
    "Varazze",
    "Vezzi Portio",
    "Cengio",
    "Albissola Marina",
    "Alassio",
    "Noli",
    "Roccavignale",
    "Ceriale",
    "Murialdo",
    "Villanova d'Albenga",
    "Zuccarello",
    "Bormida",
    "Andora",
    "Boissano",
    "Borgio Verezzi",
    "Plodio",
    "Rialto",
    "Vado Ligure",
    "Bergeggi",
    "Orco Feglino",
    "Urbe",
    "Erli",
    "Savona",
    "Giusvalla",
    "Laigueglia",
    "Testico",
    "Cairo Montenotte",
    "Altare",
    "Nasino",
    "Onzo",
    "Quiliano",
    "Bardineto",
    "Mioglia",
    "Tovo San Giacomo",
    "Casanova Lerrone",
    "Borghetto Santo Spirito",
    "Arnasco",
    "Pontinvrea",
    "Calizzano",
    "Giustenice",
    "Cosseria",
    "Garlenda",
    "Mallare",
    "Millesimo",
    "Toirano",
    "Albisola Superiore",
    "Stella",
    "Celle Ligure",
    "Castelbianco",
    "Magliolo",
    "Sassello",
    "Pietra Ligure",
    "Vendone",
    "Carcare",
    "Castelvecchio di Rocca Barbena",
    "Finale Ligure",
    "Loano",
    "Albenga",
    "Massimino",
    "Cisano sul Neva",
    "Pallare",
    "Stellanello",
    "Ortovero",
    "Dego"
  ],
  Genova: [
    "Rapallo",
    "Santa Margherita Ligure",
    "Lumarzo",
    "Moneglia",
    "Rondanina",
    "Sori",
    "Isola del Cantone",
    "Favale di Malvaro",
    "Propata",
    "Fascia",
    "Mezzanego",
    "Borzonasca",
    "Campo Ligure",
    "San Colombano Certenoli",
    "Campomorone",
    "Pieve Ligure",
    "Montoggio",
    "Carasco",
    "Rezzoaglio",
    "Ronco Scrivia",
    "Rossiglione",
    "Chiavari",
    "Gorreto",
    "Tribogna",
    "Arenzano",
    "Masone",
    "Bargagli",
    "Sant'Olcese",
    "Genova",
    "Cogoleto",
    "Serra Riccò",
    "Savignone",
    "Valbrevenna",
    "Lorsica",
    "Moconesi",
    "Uscio",
    "Coreglia Ligure",
    "Davagna",
    "Orero",
    "Cogorno",
    "Tiglieto",
    "Mignanego",
    "Casella",
    "Castiglione Chiavarese",
    "Recco",
    "Torriglia",
    "Montebruno",
    "Leivi",
    "Sestri Levante",
    "Ceranesi",
    "Zoagli",
    "Santo Stefano d'Aveto",
    "Ne",
    "Lavagna",
    "Rovegno",
    "Mele",
    "Avegno",
    "Vobbia",
    "Neirone",
    "Casarza Ligure",
    "Busalla",
    "Portofino",
    "Cicagna",
    "Camogli",
    "Fontanigorda",
    "Bogliasco",
    "Crocefieschi"
  ],
  "La Spezia": [
    "Calice al Cornoviglio",
    "Lerici",
    "Ameglia",
    "Carro",
    "Framura",
    "La Spezia",
    "Zignago",
    "Santo Stefano di Magra",
    "Castelnuovo Magra",
    "Carrodano",
    "Rocchetta di Vara",
    "Borghetto di Vara",
    "Beverino",
    "Follo",
    "Riomaggiore",
    "Luni",
    "Pignone",
    "Portovenere",
    "Bolano",
    "Sarzana",
    "Maissana",
    "Riccò del Golfo di Spezia",
    "Vezzano Ligure",
    "Bonassola",
    "Levanto",
    "Vernazza",
    "Deiva Marina",
    "Varese Ligure",
    "Sesta Godano",
    "Arcola",
    "Monterosso al Mare",
    "Brugnato"
  ]
}, Vm = {
  Varese: [
    "Castronno",
    "Lavena Ponte Tresa",
    "Olgiate Olona",
    "Cassano Valcuvia",
    "Gallarate",
    "Leggiuno",
    "Caronno Pertusella",
    "Sangiano",
    "Origgio",
    "Casciago",
    "Lonate Ceppino",
    "Bardello con Malgesso e Bregano",
    "Cadegliano-Viconago",
    "Cavaria con Premezzo",
    "Cuvio",
    "Cazzago Brabbia",
    "Venegono Inferiore",
    "Albizzate",
    "Buguggiate",
    "Cadrezzate con Osmate",
    "Bisuschio",
    "Varese",
    "Busto Arsizio",
    "Luino",
    "Gazzada Schianno",
    "Vedano Olona",
    "Cantello",
    "Arcisate",
    "Bedero Valcuvia",
    "Agra",
    "Orino",
    "Uboldo",
    "Brezzo di Bedero",
    "Marnate",
    "Masciago Primo",
    "Angera",
    "Gavirate",
    "Jerago con Orago",
    "Brunello",
    "Crosio della Valle",
    "Carnago",
    "Mercallo",
    "Montegrino Valtravaglia",
    "Cocquio-Trevisago",
    "Comerio",
    "Venegono Superiore",
    "Cugliate-Fabiasco",
    "Induno Olona",
    "Cuveglio",
    "Cairate",
    "Valganna",
    "Cunardo",
    "Castello Cabiaglio",
    "Saronno",
    "Morazzone",
    "Mesenzana",
    "Sesto Calende",
    "Luvinate",
    "Besozzo",
    "Caronno Varesino",
    "Mornago",
    "Brinzio",
    "Besnate",
    "Cittiglio",
    "Dumenza",
    "Brusimpiano",
    "Curiglia con Monteviasco",
    "Ranco",
    "Ferno",
    "Samarate",
    "Vergiate",
    "Clivio",
    "Gerenzano",
    "Gorla Minore",
    "Lonate Pozzolo",
    "Maccagno con Pino e Veddasca",
    "Marzio",
    "Golasecca",
    "Cassano Magnago",
    "Brebbia",
    "Ispra",
    "Biandronno",
    "Gemonio",
    "Marchirolo",
    "Tronzano Lago Maggiore",
    "Fagnano Olona",
    "Gornate Olona",
    "Duno",
    "Brissago-Valtravaglia",
    "Sumirago",
    "Azzio",
    "Castelseprio",
    "Viggiù",
    "Inarzo",
    "Cislago",
    "Taino",
    "Solbiate Olona",
    "Casorate Sempione",
    "Casale Litta",
    "Azzate",
    "Oggiona con Santo Stefano",
    "Gorla Maggiore",
    "Besano",
    "Barasso",
    "Ferrera di Varese",
    "Castiglione Olona",
    "Varano Borghi",
    "Comabbio",
    "Cremenaga",
    "Ternate",
    "Castelveccana",
    "Germignaga",
    "Castellanza",
    "Somma Lombardo",
    "Brenta",
    "Saltrio",
    "Monvalle",
    "Laveno-Mombello",
    "Malnate",
    "Porto Valtravaglia",
    "Tradate",
    "Vizzola Ticino",
    "Grantola",
    "Cuasso al Monte",
    "Daverio",
    "Arsago Seprio",
    "Bodio Lomnago",
    "Porto Ceresio",
    "Casalzuigno",
    "Lozza",
    "Solbiate Arno",
    "Travedona-Monate",
    "Cardano al Campo",
    "Rancio Valcuvia",
    "Caravate",
    "Galliate Lombardo"
  ],
  Como: [
    "Trezzone",
    "Stazzona",
    "Como",
    "Cusino",
    "Merone",
    "Uggiate con Ronago",
    "Grandate",
    "Appiano Gentile",
    "Maslianico",
    "Eupilio",
    "Lurate Caccivio",
    "Canzo",
    "Brienno",
    "Faggeto Lario",
    "Albese con Cassano",
    "Sorico",
    "Bulgarograsso",
    "Livo",
    "Mariano Comense",
    "Fenegrò",
    "Lomazzo",
    "Solbiate con Cagno",
    "Guanzate",
    "Veleso",
    "Gera Lario",
    "Caslino d'Erba",
    "Ponna",
    "Colverde",
    "Casnate con Bernate",
    "Colonno",
    "Centro Valle Intelvi",
    "Limido Comasco",
    "Monguzzo",
    "Pusiano",
    "Campione d'Italia",
    "Vercana",
    "Luisago",
    "Vertemate con Minoprio",
    "Valbrona",
    "Orsenigo",
    "San Nazzaro Val Cavargna",
    "Albiolo",
    "Griante",
    "Oltrona di San Mamette",
    "Rezzago",
    "Corrido",
    "Cremia",
    "Rodero",
    "Erba",
    "Asso",
    "Moltrasio",
    "Nesso",
    "Bene Lario",
    "Figino Serenza",
    "Turate",
    "Tremezzina",
    "Sala Comacina",
    "Pianello del Lario",
    "Fino Mornasco",
    "Rovellasca",
    "Capiago Intimiano",
    "Castelmarte",
    "Bregnano",
    "Sormano",
    "Brunate",
    "Cabiate",
    "Carlazzo",
    "Menaggio",
    "Montano Lucino",
    "Porlezza",
    "Veniano",
    "Carate Urio",
    "Bizzarone",
    "Valsolda",
    "San Fermo della Battaglia",
    "Claino con Osteno",
    "Anzano del Parco",
    "Torno",
    "Proserpio",
    "Cadorago",
    "Faloppio",
    "Peglio",
    "Olgiate Comasco",
    "Barni",
    "Cermenate",
    "Arosio",
    "Carugo",
    "Bellagio",
    "Val Rezzo",
    "Cernobbio",
    "Novedrate",
    "Cerano d'Intelvi",
    "Cirimido",
    "Villa Guardia",
    "Garzeno",
    "Domaso",
    "San Bartolomeo Val Cavargna",
    "Blevio",
    "Caglio",
    "Rovello Porro",
    "Lasnigo",
    "Laino",
    "Alta Valle Intelvi",
    "Longone al Segrino",
    "Carimate",
    "Cassina Rizzardi",
    "Beregazzo con Figliaro",
    "Lambrugo",
    "Lezzeno",
    "Dongo",
    "Argegno",
    "Schignano",
    "Binago",
    "Lurago Marinone",
    "Cucciago",
    "Alzate Brianza",
    "Locate Varesino",
    "Montemezzo",
    "Lurago d'Erba",
    "Carbonate",
    "Mozzate",
    "Alserio",
    "Pigra",
    "Lipomo",
    "Castelnuovo Bozzente",
    "Cavargna",
    "Blessagno",
    "Magreglio",
    "Dizzasco",
    "Ponte Lambro",
    "Tavernerio",
    "Zelbio",
    "Grandola ed Uniti",
    "Gravedona ed Uniti",
    "Dosso del Liro",
    "Albavilla",
    "Cantù",
    "Brenna",
    "San Siro",
    "Laglio",
    "Inverigo",
    "Montorfano",
    "Musso",
    "Pognana Lario",
    "Plesio",
    "Senna Comasco",
    "Valmorea"
  ],
  Sondrio: [
    "Pedesina",
    "Montagna in Valtellina",
    "Gordona",
    "Berbenno di Valtellina",
    "Tirano",
    "Mazzo di Valtellina",
    "Villa di Tirano",
    "Sondrio",
    "Vervio",
    "Chiuro",
    "Delebio",
    "Livigno",
    "Mese",
    "Caiolo",
    "Rasura",
    "Andalo Valtellino",
    "Prata Camportaccio",
    "Piateda",
    "Samolaco",
    "Postalesio",
    "Lanzada",
    "Bianzone",
    "Colorina",
    "Bema",
    "Talamona",
    "Castione Andevenno",
    "Campodolcino",
    "Mello",
    "Ardenno",
    "Valdidentro",
    "Fusine",
    "Grosotto",
    "Tovo di Sant'Agata",
    "Castello dell'Acqua",
    "Morbegno",
    "Poggiridenti",
    "Gerola Alta",
    "Verceia",
    "Cosio Valtellino",
    "Bormio",
    "Albosaggia",
    "Dazio",
    "Tresivio",
    "Civo",
    "Spriana",
    "Cedrasco",
    "Aprica",
    "San Giacomo Filippo",
    "Villa di Chiavenna",
    "Teglio",
    "Tartano",
    "Albaredo per San Marco",
    "Sondalo",
    "Chiavenna",
    "Forcola",
    "Dubino",
    "Faedo Valtellino",
    "Rogolo",
    "Sernio",
    "Novate Mezzola",
    "Chiesa in Valmalenco",
    "Lovero",
    "Traona",
    "Caspoggio",
    "Valfurva",
    "Cino",
    "Madesimo",
    "Valdisotto",
    "Ponte in Valtellina",
    "Val Masino",
    "Piuro",
    "Torre di Santa Maria",
    "Grosio",
    "Cercino",
    "Mantello",
    "Piantedo",
    "Buglio in Monte"
  ],
  Milano: [
    "Bellinzago Lombardo",
    "Boffalora sopra Ticino",
    "Mediglia",
    "Busto Garolfo",
    "Motta Visconti",
    "Solaro",
    "Lainate",
    "Albairate",
    "Colturano",
    "Noviglio",
    "Arluno",
    "Dresano",
    "Vizzolo Predabissi",
    "Castano Primo",
    "Cuggiono",
    "Calvignasco",
    "Cesate",
    "Tribiano",
    "Nerviano",
    "Inzago",
    "Locate di Triulzi",
    "Vimodrone",
    "Liscate",
    "Trezzano Rosa",
    "Cassinetta di Lugagnano",
    "Basiglio",
    "Binasco",
    "Pozzo d'Adda",
    "Abbiategrasso",
    "Corbetta",
    "Dairago",
    "Gudo Visconti",
    "Pieve Emanuele",
    "Nosate",
    "Milano",
    "Carugate",
    "Cerro al Lambro",
    "Rho",
    "Pogliano Milanese",
    "Buscate",
    "Ozzero",
    "Settimo Milanese",
    "Morimondo",
    "Sedriano",
    "Peschiera Borromeo",
    "Vermezzo con Zelo",
    "Segrate",
    "Mesero",
    "Vittuone",
    "Cornaredo",
    "Magenta",
    "Rodano",
    "Rosate",
    "San Giorgio su Legnano",
    "Cusano Milanino",
    "Bubbiano",
    "Turbigo",
    "Arconate",
    "Senago",
    "Lacchiarella",
    "Magnago",
    "Settala",
    "Ossona",
    "Cassano d'Adda",
    "San Colombano al Lambro",
    "Cinisello Balsamo",
    "Opera",
    "Robecchetto con Induno",
    "Legnano",
    "Casorezzo",
    "Bareggio",
    "Baranzate",
    "Cesano Boscone",
    "Trezzano sul Naviglio",
    "Marcallo con Casone",
    "Vernate",
    "Cusago",
    "Cormano",
    "Cologno Monzese",
    "Grezzago",
    "Bollate",
    "Rozzano",
    "Cisliano",
    "San Giuliano Milanese",
    "Sesto San Giovanni",
    "Pozzuolo Martesana",
    "Gorgonzola",
    "Santo Stefano Ticino",
    "Bresso",
    "Gessate",
    "Parabiago",
    "Pantigliate",
    "Canegrate",
    "Casarile",
    "Bernate Ticino",
    "Rescaldina",
    "Melegnano",
    "Pregnana Milanese",
    "Truccazzano",
    "Vignate",
    "Besate",
    "Vanzago",
    "Pioltello",
    "Corsico",
    "Bussero",
    "Garbagnate Milanese",
    "San Vittore Olona",
    "Paderno Dugnano",
    "Vaprio d'Adda",
    "Gaggiano",
    "Assago",
    "Novate Milanese",
    "Inveruno",
    "Zibido San Giacomo",
    "Carpiano",
    "Cassina de' Pecchi",
    "Robecco sul Naviglio",
    "Basiano",
    "Cambiago",
    "San Donato Milanese",
    "Cerro Maggiore",
    "Masate",
    "San Zenone al Lambro",
    "Trezzo sull'Adda",
    "Pessano con Bornago",
    "Pero",
    "Villa Cortese",
    "Buccinasco",
    "Vanzaghello",
    "Arese",
    "Paullo",
    "Cernusco sul Naviglio",
    "Melzo"
  ],
  Bergamo: [
    "Stezzano",
    "Castro",
    "Verdellino",
    "Sant'Omobono Terme",
    "Zogno",
    "Pognano",
    "Chiuduno",
    "Torre Boldone",
    "Urgnano",
    "Madone",
    "Piazzolo",
    "Arcene",
    "Taleggio",
    "Lovere",
    "Bossico",
    "Bedulita",
    "Carvico",
    "Fara Olivana con Sola",
    "Roncobello",
    "Castelli Calepio",
    "Selvino",
    "Predore",
    "Brembate",
    "Almenno San Salvatore",
    "Filago",
    "Pontida",
    "Treviolo",
    "Zandobbio",
    "Ghisalba",
    "Lallio",
    "Pagazzano",
    "Brumano",
    "Bonate Sotto",
    "Ardesio",
    "Ranzanico",
    "Telgate",
    "Sedrina",
    "Ponteranica",
    "Costa Serina",
    "Cene",
    "Calcinate",
    "Gorlago",
    "Ambivere",
    "San Paolo d'Argon",
    "Leffe",
    "Ranica",
    "Sovere",
    "Pumenengo",
    "Branzi",
    "Fino del Monte",
    "Gazzaniga",
    "Palosco",
    "Albino",
    "Sarnico",
    "Casirate d'Adda",
    "Parre",
    "Valbondione",
    "Albano Sant'Alessandro",
    "Fornovo San Giovanni",
    "Vigano San Martino",
    "Fontanella",
    "Oneta",
    "Mozzo",
    "Solto Collina",
    "Almenno San Bartolomeo",
    "Brignano Gera d'Adda",
    "Gromo",
    "Antegnate",
    "Verdello",
    "Cornalba",
    "Scanzorosciate",
    "Romano di Lombardia",
    "Costa di Mezzate",
    "Spinone al Lago",
    "Corna Imagna",
    "Grone",
    "Clusone",
    "Trescore Balneario",
    "Pontirolo Nuovo",
    "Serina",
    "San Pellegrino Terme",
    "Almè",
    "Moio de' Calvi",
    "Borgo di Terzo",
    "Torre de' Roveri",
    "Presezzo",
    "Gorno",
    "Onore",
    "Dalmine",
    "Paladina",
    "Montello",
    "Lenna",
    "Rota d'Imagna",
    "San Giovanni Bianco",
    "Bergamo",
    "Carona",
    "Casazza",
    "Lurano",
    "Brembate di Sopra",
    "Mozzanica",
    "Gandellino",
    "Pedrengo",
    "Parzanica",
    "Cenate Sopra",
    "Strozza",
    "Colere",
    "Ponte Nossa",
    "Roncola",
    "Villa d'Adda",
    "Bottanuco",
    "Villa d'Ogna",
    "Schilpario",
    "Cusio",
    "Cividate al Piano",
    "Seriate",
    "Alzano Lombardo",
    "Piario",
    "Fonteno",
    "Orio al Serio",
    "Calvenzano",
    "Ubiale Clanezzo",
    "Valtorta",
    "Vilminore di Scalve",
    "Blello",
    "Adrara San Martino",
    "Fuipiano Valle Imagna",
    "Isso",
    "Dossena",
    "Arzago d'Adda",
    "Barzana",
    "Levate",
    "Ornica",
    "Capizzone",
    "Capriate San Gervasio",
    "Palazzago",
    "Valleve",
    "Averara",
    "Bariano",
    "Val Brembilla",
    "Premolo",
    "Comun Nuovo",
    "Cerete",
    "Rovetta",
    "Mezzoldo",
    "Morengo",
    "Olmo al Brembo",
    "Camerata Cornello",
    "Bonate Sopra",
    "Endine Gaiano",
    "Medolago",
    "Pianico",
    "Ciserano",
    "Cavernago",
    "Castel Rozzone",
    "Isola di Fondra",
    "Algua",
    "Caravaggio",
    "Gorle",
    "Cologno al Serio",
    "Fara Gera d'Adda",
    "Treviglio",
    "Cenate Sotto",
    "Curno",
    "Bracca",
    "Cortenuova",
    "Cisano Bergamasco",
    "Credaro",
    "Costa Valle Imagna",
    "Monasterolo del Castello",
    "Songavazzo",
    "Sotto il Monte Giovanni XXIII",
    "Torre Pallavicina",
    "Valgoglio",
    "Chignolo d'Isola",
    "Oltressenda Alta",
    "Rogno",
    "Mapello",
    "Valnegra",
    "Canonica d'Adda",
    "Barbata",
    "Berbenno",
    "Castione della Presolana",
    "Zanica",
    "Entratico",
    "Vedeseta",
    "Gandino",
    "Misano di Gera d'Adda",
    "Cazzano Sant'Andrea",
    "Villa di Serio",
    "Viadanica",
    "Calcio",
    "Calusco d'Adda",
    "Grassobbio",
    "Osio Sopra",
    "Torre de' Busi",
    "Caprino Bergamasco",
    "Villongo",
    "Foppolo",
    "Peia",
    "Gaverina Terme",
    "Colzate",
    "Oltre il Colle",
    "Fiorano al Serio",
    "Cassiglio",
    "Vertova",
    "Aviatico",
    "Adrara San Rocco",
    "Locatello",
    "Santa Brigida",
    "Spirano",
    "Riva di Solto",
    "Osio Sotto",
    "Vigolo",
    "Terno d'Isola",
    "Brusaporto",
    "Sorisole",
    "Carobbio degli Angeli",
    "Azzone",
    "Berzo San Fermo",
    "Villa d'Almè",
    "Bianzano",
    "Piazzatorre",
    "Ponte San Pietro",
    "Casnigo",
    "Grumello del Monte",
    "Suisio",
    "Piazza Brembana",
    "Bolgare",
    "Covo",
    "Luzzana",
    "Gandosso",
    "Nembro",
    "Pradalunga",
    "Valbrembo",
    "Costa Volpino",
    "Martinengo",
    "Azzano San Paolo",
    "Boltiere",
    "Bagnatica",
    "Mornico al Serio",
    "Tavernola Bergamasca",
    "Solza",
    "Foresto Sparso"
  ],
  Brescia: [
    "Castel Mella",
    "Provaglio d'Iseo",
    "Coccaglio",
    "Sabbio Chiese",
    "Muscoline",
    "Botticino",
    "Brescia",
    "Odolo",
    "Paisco Loveno",
    "Puegnago del Garda",
    "Bovezzo",
    "Villachiara",
    "Passirano",
    "Darfo Boario Terme",
    "Flero",
    "Orzivecchi",
    "Irma",
    "Pezzaze",
    "Pompiano",
    "Azzano Mella",
    "Urago d'Oglio",
    "Casto",
    "Pontevico",
    "Ospitaletto",
    "Pertica Alta",
    "Monte Isola",
    "Verolavecchia",
    "Marmentino",
    "Caino",
    "Erbusco",
    "Collebeato",
    "Anfo",
    "Marone",
    "Cigole",
    "Manerba del Garda",
    "Orzinuovi",
    "Polaveno",
    "Gussago",
    "Cevo",
    "Magasa",
    "Villa Carcina",
    "Idro",
    "Angolo Terme",
    "Chiari",
    "Gianico",
    "Manerbio",
    "Corzano",
    "Fiesse",
    "Nuvolento",
    "Pavone del Mella",
    "Cellatica",
    "Rezzato",
    "Villanuova sul Clisi",
    "Comezzano-Cizzago",
    "Capriolo",
    "Borno",
    "Milzano",
    "Brione",
    "Lonato del Garda",
    "Pontoglio",
    "Vallio Terme",
    "San Paolo",
    "Palazzolo sull'Oglio",
    "San Felice del Benaco",
    "Niardo",
    "Pralboino",
    "Corteno Golgi",
    "Borgo San Giacomo",
    "Castenedolo",
    "Sarezzo",
    "Mairano",
    "Lodrino",
    "Collio",
    "Alfianello",
    "Monticelli Brusati",
    "Sale Marasino",
    "Bione",
    "Bovegno",
    "Gardone Val Trompia",
    "Montichiari",
    "Castrezzato",
    "Lozio",
    "Sonico",
    "Berlingo",
    "Carpenedolo",
    "Acquafredda",
    "Ceto",
    "Maclodio",
    "Tavernole sul Mella",
    "Cedegolo",
    "Ossimo",
    "Capo di Ponte",
    "Vestone",
    "Vezza d'Oglio",
    "Nuvolera",
    "Barbariga",
    "Sulzano",
    "Bagnolo Mella",
    "Rovato",
    "Limone sul Garda",
    "Pian Camuno",
    "Poncarale",
    "Castegnato",
    "Ponte di Legno",
    "Pertica Bassa",
    "Dello",
    "San Gervasio Bresciano",
    "Desenzano del Garda",
    "Berzo Inferiore",
    "Barghe",
    "Calcinato",
    "Offlaga",
    "Leno",
    "Capriano del Colle",
    "Brandico",
    "Preseglie",
    "Ome",
    "Iseo",
    "Padenghe sul Garda",
    "Gambara",
    "Breno",
    "Lavenone",
    "Ono San Pietro",
    "Piancogno",
    "Tremosine sul Garda",
    "Malonno",
    "Monno",
    "Toscolano-Maderno",
    "Provaglio Val Sabbia",
    "Isorella",
    "Borgosatollo",
    "Edolo",
    "Travagliato",
    "Visano",
    "Lograto",
    "Berzo Demo",
    "Temù",
    "Mazzano",
    "Vobarno",
    "Treviso Bresciano",
    "Longhena",
    "Lumezzane",
    "Gottolengo",
    "Concesio",
    "Malegno",
    "Gardone Riviera",
    "Ghedi",
    "Cerveno",
    "Braone",
    "Montirone",
    "Soiano del Lago",
    "Losine",
    "Remedello",
    "Agnosine",
    "Capovalle",
    "Castelcovati",
    "Valvestino",
    "Gargnano",
    "Cazzago San Martino",
    "Calvagese della Riviera",
    "Paspardo",
    "Salò",
    "Sellero",
    "Trenzano",
    "Torbole Casaglia",
    "Corte Franca",
    "Nave",
    "Polpenazze del Garda",
    "Marcheno",
    "Esine",
    "Incudine",
    "Paratico",
    "Serle",
    "Pisogne",
    "Paitone",
    "Bassano Bresciano",
    "Mura",
    "Cimbergo",
    "Roè Volciano",
    "Prevalle",
    "Cividate Camuno",
    "Vione",
    "Calvisano",
    "Roncadelle",
    "Rodengo Saiano",
    "Seniga",
    "Roccafranca",
    "Verolanuova",
    "Rudiano",
    "Gavardo",
    "Moniga del Garda",
    "Quinzano d'Oglio",
    "Saviore dell'Adamello",
    "Bienno",
    "Cologne",
    "Pozzolengo",
    "Sirmione",
    "Zone",
    "Artogne",
    "Bedizzole",
    "Tignale",
    "San Zeno Naviglio",
    "Bagolino",
    "Paderno Franciacorta",
    "Adro"
  ],
  Pavia: [
    "Montalto Pavese",
    "Cilavegna",
    "Casteggio",
    "Valle Salimbene",
    "Albuzzano",
    "Corvino San Quirico",
    "Gambarana",
    "Certosa di Pavia",
    "Pieve del Cairo",
    "Santa Margherita di Staffora",
    "Velezzo Lomellina",
    "Suardi",
    "Spessa",
    "Cassolnovo",
    "Robbio",
    "Giussago",
    "Romagnese",
    "Zenevredo",
    "Corana",
    "Mede",
    "Costa de' Nobili",
    "Montù Beccaria",
    "Rea",
    "Casei Gerola",
    "San Zenone al Po",
    "Battuda",
    "Nicorvo",
    "Lirio",
    "Oliva Gessi",
    "Bastida Pancarana",
    "Rocca Susella",
    "Bagnaria",
    "San Genesio ed Uniti",
    "Godiasco Salice Terme",
    "San Cipriano Po",
    "Zeccone",
    "Santa Maria della Versa",
    "Voghera",
    "Golferenzo",
    "Badia Pavese",
    "Broni",
    "Cecima",
    "Pinarolo Po",
    "Roncaro",
    "Lardirago",
    "Fortunago",
    "Zerbolò",
    "Vistarino",
    "Rovescala",
    "Ponte Nizza",
    "Sartirana Lomellina",
    "Marzano",
    "Confienza",
    "Castelnovetto",
    "Canneto Pavese",
    "Garlasco",
    "Marcignago",
    "Sommo",
    "Varzi",
    "San Damiano al Colle",
    "Borgoratto Mormorolo",
    "Langosco",
    "Vellezzo Bellini",
    "Scaldasole",
    "Colli Verdi",
    "Verretto",
    "Santa Cristina e Bissone",
    "Verrua Po",
    "Olevano di Lomellina",
    "Lomello",
    "Zeme",
    "Bascapè",
    "Brallo di Pregola",
    "Ceranova",
    "Gravellona Lomellina",
    "Cozzo",
    "Semiana",
    "Albonese",
    "Siziano",
    "Borgo Priolo",
    "Trivolzio",
    "Rivanazzano Terme",
    "Barbianello",
    "Villanterio",
    "Galliavola",
    "Silvano Pietra",
    "Menconico",
    "Montesegale",
    "Frascarolo",
    "Magherno",
    "Montescano",
    "Torre d'Arese",
    "Trovo",
    "Castelletto di Branduzzo",
    "Ferrera Erbognone",
    "Candia Lomellina",
    "Torricella Verzate",
    "Tromello",
    "Castana",
    "Inverno e Monteleone",
    "Arena Po",
    "Cervesina",
    "Mezzana Rabattone",
    "Bosnasco",
    "Zinasco",
    "Bereguardo",
    "Casorate Primo",
    "Sannazzaro de' Burgondi",
    "Stradella",
    "Vigevano",
    "Gambolò",
    "Castello d'Agogna",
    "Portalbera",
    "Pancarana",
    "Val di Nizza",
    "Pietra de' Giorgi",
    "Landriano",
    "Valle Lomellina",
    "Volpara",
    "Pavia",
    "Santa Giuletta",
    "Retorbido",
    "Redavalle",
    "Torrevecchia Pia",
    "Robecco Pavese",
    "Cava Manara",
    "Palestro",
    "Dorno",
    "Codevilla",
    "Casatisma",
    "Zerbo",
    "Montebello della Battaglia",
    "Sant'Angelo Lomellina",
    "Pieve Albignola",
    "Monticelli Pavese",
    "Torre Beretti e Castellaro",
    "Mezzana Bigli",
    "Cigognola",
    "Borgarello",
    "Lungavilla",
    "Corteolona e Genzone",
    "Bressana Bottarone",
    "Borgo San Siro",
    "Cura Carpignano",
    "Chignolo Po",
    "Rosasco",
    "Montecalvo Versiggia",
    "Calvignano",
    "Mornico Losana",
    "Cornale e Bastida",
    "Parona",
    "Mezzanino",
    "Breme",
    "Copiano",
    "Casanova Lonati",
    "Sant'Alessio con Vialone",
    "Rognano",
    "San Martino Siccomario",
    "Pizzale",
    "Vidigulfo",
    "Travacò Siccomario",
    "Miradolo Terme",
    "Campospinoso Albaredo",
    "Gerenzago",
    "Alagna",
    "Torre de' Negri",
    "Cergnago",
    "Villa Biscossi",
    "Torre d'Isola",
    "Belgioioso",
    "Torrazza Coste",
    "Zavattarello",
    "Rocca de' Giorgi",
    "Villanova d'Ardenghi",
    "Valeggio",
    "Mortara",
    "San Giorgio di Lomellina",
    "Carbonara al Ticino",
    "Bornasco",
    "Pieve Porto Morone",
    "Ceretto Lomellina",
    "Linarolo",
    "Gropello Cairoli",
    "Filighera",
    "Ottobiano"
  ],
  Cremona: [
    "Cumignano sul Naviglio",
    "Casalmorano",
    "Quintano",
    "Gombito",
    "Spineda",
    "Pozzaglio ed Uniti",
    "Agnadello",
    "Chieve",
    "Camisano",
    "Casaletto di Sopra",
    "Casalbuttano ed Uniti",
    "Pianengo",
    "Robecco d'Oglio",
    "Gussola",
    "Sesto ed Uniti",
    "Corte de' Cortesi con Cignone",
    "Vescovato",
    "Castelleone",
    "Trigolo",
    "Pieranica",
    "Torlino Vimercati",
    "Crema",
    "Martignana di Po",
    "Cappella Cantone",
    "Casalmaggiore",
    "Ostiano",
    "Cella Dati",
    "Trescore Cremasco",
    "Spinadesco",
    "Torre de' Picenardi",
    "Offanengo",
    "Casaletto Vaprio",
    "Formigara",
    "Rivarolo del Re ed Uniti",
    "Capralba",
    "Campagnola Cremasca",
    "San Giovanni in Croce",
    "Cappella de' Picenardi",
    "Gerre de' Caprioli",
    "Crotta d'Adda",
    "Voltido",
    "Sospiro",
    "San Daniele Po",
    "Bonemerse",
    "Calvatone",
    "Paderno Ponchielli",
    "Solarolo Rainerio",
    "Bagnolo Cremasco",
    "Capergnanica",
    "Vailate",
    "Izano",
    "Cicognolo",
    "Pizzighettone",
    "Dovera",
    "San Bassano",
    "Castel Gabbiano",
    "Soresina",
    "Rivolta d'Adda",
    "Sergnano",
    "Pessina Cremonese",
    "Casale Cremasco-Vidolasco",
    "Spino d'Adda",
    "Ripalta Guerina",
    "San Martino del Lago",
    "Gadesco-Pieve Delmona",
    "Corte de' Frati",
    "Volongo",
    "Ripalta Cremasca",
    "Cremosano",
    "Ricengo",
    "Grumello Cremonese ed Uniti",
    "Romanengo",
    "Persico Dosimo",
    "Pescarolo ed Uniti",
    "Montodine",
    "Azzanello",
    "Salvirola",
    "Scandolara Ripa d'Oglio",
    "Moscazzano",
    "Castelvisconti",
    "Motta Baluffi",
    "Piadena Drizzona",
    "Annicco",
    "Isola Dovarese",
    "Genivolta",
    "Credera Rubbiano",
    "Scandolara Ravara",
    "Pieve San Giacomo",
    "Madignano",
    "Ripalta Arpina",
    "Casaletto Ceredano",
    "Castelverde",
    "Stagno Lombardo",
    "Gabbioneta-Binanuova",
    "Derovere",
    "Cingia de' Botti",
    "Torricella del Pizzo",
    "Soncino",
    "Casteldidone",
    "Pieve d'Olmi",
    "Tornata",
    "Fiesco",
    "Pandino",
    "Ticengo",
    "Vaiano Cremasco",
    "Cremona",
    "Bordolano",
    "Olmeneta",
    "Grontardo",
    "Palazzo Pignano",
    "Acquanegra Cremonese",
    "Monte Cremasco",
    "Malagnino"
  ],
  Mantova: [
    "San Giorgio Bigarello",
    "Curtatone",
    "Volta Mantovana",
    "Monzambano",
    "Castel Goffredo",
    "Castiglione delle Stiviere",
    "Mantova",
    "Roncoferraro",
    "San Giacomo delle Segnate",
    "Cavriana",
    "Suzzara",
    "Casalmoro",
    "Commessaggio",
    "Rodigo",
    "Quistello",
    "Sabbioneta",
    "Gazoldo degli Ippoliti",
    "Borgo Virgilio",
    "Goito",
    "Pegognaga",
    "Moglia",
    "Villimpenta",
    "Acquanegra sul Chiese",
    "Ceresara",
    "Quingentole",
    "San Giovanni del Dosso",
    "Ostiglia",
    "Mariana Mantovana",
    "Medole",
    "Gazzuolo",
    "Schivenoglia",
    "Asola",
    "Poggio Rusco",
    "Casaloldo",
    "Ponti sul Mincio",
    "Bagnolo San Vito",
    "Solferino",
    "Pomponesco",
    "Castel d'Ario",
    "Guidizzolo",
    "Bozzolo",
    "Castellucchio",
    "Marcaria",
    "Magnacavallo",
    "Casalromano",
    "Porto Mantovano",
    "Redondesco",
    "San Martino dall'Argine",
    "Sustinente",
    "Canneto sull'Oglio",
    "Castelbelforte",
    "Sermide e Felonica",
    "Viadana",
    "Gonzaga",
    "Piubega",
    "Borgo Mantovano",
    "Serravalle a Po",
    "Dosolo",
    "Borgocarbonara",
    "Marmirolo",
    "Roverbella",
    "Rivarolo Mantovano",
    "San Benedetto Po",
    "Motteggiana"
  ],
  Lecco: [
    "Margno",
    "Costa Masnaga",
    "Garlate",
    "Calco",
    "Valgreghentino",
    "Nibionno",
    "Premana",
    "Barzanò",
    "Oliveto Lario",
    "Ballabio",
    "Cremeno",
    "Garbagnate Monastero",
    "Pagnona",
    "Dolzago",
    "Brivio",
    "Vercurago",
    "Airuno",
    "Colico",
    "Esino Lario",
    "Primaluna",
    "Valvarrone",
    "Cassago Brianza",
    "Colle Brianza",
    "Monticello Brianza",
    "Missaglia",
    "Suello",
    "Castello di Brianza",
    "Cesana Brianza",
    "Pasturo",
    "Malgrate",
    "Valmadrera",
    "Montevecchia",
    "Molteno",
    "Bellano",
    "Carenno",
    "Dervio",
    "Casargo",
    "Monte Marenzo",
    "Bulciago",
    "Cassina Valsassina",
    "Rogeno",
    "Cernusco Lombardone",
    "Varenna",
    "Verderio",
    "Lierna",
    "Olgiate Molgora",
    "Casatenovo",
    "Santa Maria Hoè",
    "Cortenova",
    "Moggio",
    "Robbiate",
    "Merate",
    "Crandola Valsassina",
    "Galbiate",
    "Lecco",
    "Parlasco",
    "Annone di Brianza",
    "Sueglio",
    "Oggiono",
    "La Valletta Brianza",
    "Olginate",
    "Morterone",
    "Erve",
    "Ello",
    "Calolziocorte",
    "Dorio",
    "Imbersago",
    "Paderno d'Adda",
    "Taceno",
    "Sirone",
    "Mandello del Lario",
    "Pescate",
    "Bosisio Parini",
    "Perledo",
    "Osnago",
    "Sirtori",
    "Barzio",
    "Civate",
    "Abbadia Lariana",
    "Barzago",
    "Lomagna",
    "Viganò",
    "Cremella",
    "Introbio"
  ],
  Lodi: [
    "Maccastorna",
    "Brembio",
    "Borgo San Giovanni",
    "Castelnuovo Bocca d'Adda",
    "Tavazzano con Villavesco",
    "Caselle Landi",
    "Marudo",
    "San Rocco al Porto",
    "Caselle Lurani",
    "Cavenago d'Adda",
    "Meleti",
    "Comazzo",
    "Valera Fratta",
    "San Fiorano",
    "Salerano sul Lambro",
    "Boffalora d'Adda",
    "Castiraga Vidardo",
    "Terranova dei Passerini",
    "Bertonico",
    "Cornovecchio",
    "Somaglia",
    "Crespiatica",
    "Livraga",
    "Villanova del Sillaro",
    "San Martino in Strada",
    "Orio Litta",
    "Abbadia Cerreto",
    "Cornegliano Laudense",
    "Fombio",
    "Lodi",
    "Ospedaletto Lodigiano",
    "Massalengo",
    "Corno Giovine",
    "Mairago",
    "Mulazzano",
    "Merlino",
    "Borghetto Lodigiano",
    "Galgagnano",
    "Senna Lodigiana",
    "Secugnago",
    "Zelo Buon Persico",
    "Turano Lodigiano",
    "Cervignano d'Adda",
    "Sant'Angelo Lodigiano",
    "Castiglione d'Adda",
    "Pieve Fissiraga",
    "Casalmaiocco",
    "Lodi Vecchio",
    "Casalpusterlengo",
    "Castelgerundo",
    "Guardamiglio",
    "Montanaso Lombardo",
    "Corte Palasio",
    "Graffignana",
    "Ossago Lodigiano",
    "Santo Stefano Lodigiano",
    "Codogno",
    "Sordio",
    "Maleo",
    "Casaletto Lodigiano"
  ],
  "Monza e della Brianza": [
    "Lentate sul Seveso",
    "Bernareggio",
    "Roncello",
    "Albiate",
    "Usmate Velate",
    "Barlassina",
    "Cesano Maderno",
    "Aicurzio",
    "Vimercate",
    "Limbiate",
    "Monza",
    "Lazzate",
    "Cornate d'Adda",
    "Mezzago",
    "Briosco",
    "Correzzana",
    "Burago di Molgora",
    "Vedano al Lambro",
    "Ornago",
    "Carate Brianza",
    "Giussano",
    "Concorezzo",
    "Bellusco",
    "Arcore",
    "Besana in Brianza",
    "Brugherio",
    "Camparada",
    "Nova Milanese",
    "Lissone",
    "Seregno",
    "Sulbiate",
    "Ronco Briantino",
    "Ceriano Laghetto",
    "Carnate",
    "Cavenago di Brianza",
    "Seveso",
    "Triuggio",
    "Cogliate",
    "Caponago",
    "Agrate Brianza",
    "Verano Brianza",
    "Macherio",
    "Lesmo",
    "Misinto",
    "Muggiò",
    "Varedo",
    "Bovisio-Masciago",
    "Biassono",
    "Meda",
    "Renate",
    "Sovico",
    "Desio",
    "Veduggio con Colzano",
    "Villasanta",
    "Busnago"
  ]
}, Bm = {
  Verona: [
    "Erbezzo",
    "Sanguinetto",
    "Villa Bartolomea",
    "San Giovanni Ilarione",
    "Caldiero",
    "Nogara",
    "Mezzane di Sotto",
    "Castel d'Azzano",
    "Lazise",
    "Pescantina",
    "Bonavigo",
    "Cerro Veronese",
    "Verona",
    "Boschi Sant'Anna",
    "Fumane",
    "Oppeano",
    "Povegliano Veronese",
    "Cerea",
    "Bardolino",
    "Isola della Scala",
    "Castelnuovo del Garda",
    "Nogarole Rocca",
    "Bussolengo",
    "San Pietro in Cariano",
    "Affi",
    "Angiari",
    "San Bonifacio",
    "Badia Calavena",
    "Valeggio sul Mincio",
    "Zevio",
    "Castagnaro",
    "Soave",
    "Terrazzo",
    "Velo Veronese",
    "Lavagno",
    "Rivoli Veronese",
    "Bevilacqua",
    "Erbè",
    "Isola Rizza",
    "Montecchia di Crosara",
    "Ronco all'Adige",
    "Torri del Benaco",
    "Selva di Progno",
    "Veronella",
    "Arcole",
    "Colognola ai Colli",
    "Casaleone",
    "Legnago",
    "Vestenanova",
    "San Martino Buon Albergo",
    "Ferrara di Monte Baldo",
    "San Giovanni Lupatoto",
    "Dolcè",
    "Brentino Belluno",
    "Palù",
    "Roverchiara",
    "Pastrengo",
    "Peschiera del Garda",
    "Brenzone sul Garda",
    "Sona",
    "San Zeno di Montagna",
    "Vigasio",
    "Roverè Veronese",
    "Monteforte d'Alpone",
    "Concamarise",
    "Albaredo d'Adige",
    "Sant'Ambrogio di Valpolicella",
    "Sorgà",
    "Caprino Veronese",
    "Gazzo Veronese",
    "Illasi",
    "Malcesine",
    "Garda",
    "Cologna Veneta",
    "Pressana",
    "Tregnago",
    "Grezzana",
    "Zimella",
    "Belfiore",
    "Sant'Anna d'Alfaedo",
    "Roncà",
    "San Mauro di Saline",
    "Sommacampagna",
    "Trevenzuolo",
    "Minerbe",
    "Villafranca di Verona",
    "Roveredo di Guà",
    "Salizzole",
    "Cavaion Veronese",
    "Marano di Valpolicella",
    "Mozzecane",
    "Costermano sul Garda",
    "Negrar di Valpolicella",
    "Cazzano di Tramigna",
    "Bosco Chiesanuova",
    "Bovolone",
    "Buttapietra",
    "San Pietro di Morubio"
  ],
  Vicenza: [
    "Asigliano Veneto",
    "Val Liona",
    "Sandrigo",
    "Posina",
    "Carrè",
    "Barbarano Mossano",
    "Montegaldella",
    "Costabissara",
    "Grumolo delle Abbadesse",
    "Lonigo",
    "Sovizzo",
    "San Pietro Mussolino",
    "Nanto",
    "Solagna",
    "Marano Vicentino",
    "Foza",
    "Altissimo",
    "Bressanvido",
    "Dueville",
    "Longare",
    "Caldogno",
    "Roana",
    "Orgiano",
    "Agugliaro",
    "Valli del Pasubio",
    "Villaga",
    "Bolzano Vicentino",
    "Arzignano",
    "Mussolente",
    "Monticello Conte Otto",
    "Breganze",
    "Chiampo",
    "Zanè",
    "Malo",
    "Schiavon",
    "Romano d'Ezzelino",
    "Castegnero",
    "Grisignano di Zocco",
    "Zugliano",
    "Noventa Vicentina",
    "Brendola",
    "Valdagno",
    "Albettone",
    "Vicenza",
    "Asiago",
    "Creazzo",
    "Cornedo Vicentino",
    "Rosà",
    "Arsiero",
    "Montecchio Maggiore",
    "Cartigliano",
    "Crespadoro",
    "Lastebasse",
    "Villaverla",
    "Montorso Vicentino",
    "Camisano Vicentino",
    "Isola Vicentina",
    "Pojana Maggiore",
    "Tezze sul Brenta",
    "Valbrenta",
    "Gambellara",
    "Brogliano",
    "Piovene Rocchette",
    "Arcugnano",
    "Castelgomberto",
    "Gallio",
    "Pove del Grappa",
    "Valdastico",
    "Montecchio Precalcino",
    "Schio",
    "Cassola",
    "Montegalda",
    "Thiene",
    "Marostica",
    "Sarcedo",
    "Zermeghedo",
    "Santorso",
    "Lusiana Conco",
    "Calvene",
    "Pozzoleone",
    "Bassano del Grappa",
    "Caltrano",
    "Salcedo",
    "Rossano Veneto",
    "Recoaro Terme",
    "Monteviale",
    "Chiuppano",
    "Nove",
    "Pianezze",
    "Cogollo del Cengio",
    "Colceresa",
    "Velo d'Astico",
    "Campiglia dei Berici",
    "Montebello Vicentino",
    "Trissino",
    "Torri di Quartesolo",
    "Alonte",
    "Sossano",
    "Laghi",
    "Nogarole Vicentino",
    "Altavilla Vicentina",
    "San Vito di Leguzzano",
    "Quinto Vicentino",
    "Zovencedo",
    "Fara Vicentino",
    "Tonezza del Cimone",
    "Sarego",
    "Torrebelvicino",
    "Rotzo",
    "Monte di Malo",
    "Pedemonte",
    "Lugo di Vicenza",
    "Enego"
  ],
  Belluno: [
    "Cesiomaggiore",
    "Lamon",
    "La Valle Agordina",
    "Perarolo di Cadore",
    "Calalzo di Cadore",
    "Canale d'Agordo",
    "Pieve di Cadore",
    "Taibon Agordino",
    "Sospirolo",
    "Tambre",
    "Vallada Agordina",
    "Gosaldo",
    "Val di Zoldo",
    "Seren del Grappa",
    "Livinallongo del Col di Lana",
    "Valle di Cadore",
    "Alpago",
    "San Gregorio nelle Alpi",
    "Soverzene",
    "Falcade",
    "Arsiè",
    "Cibiana di Cadore",
    "Ospitale di Cadore",
    "Alleghe",
    "Pedavena",
    "Rocca Pietore",
    "Comelico Superiore",
    "Feltre",
    "Fonzaso",
    "Borca di Cadore",
    "San Vito di Cadore",
    "Sovramonte",
    "Ponte nelle Alpi",
    "Borgo Valbelluna",
    "Santa Giustina",
    "Rivamonte Agordino",
    "Limana",
    "Sedico",
    "San Nicolò di Comelico",
    "Cencenighe Agordino",
    "Vodo Cadore",
    "Zoppè di Cadore",
    "Cortina d'Ampezzo",
    "Voltago Agordino",
    "Agordo",
    "Chies d'Alpago",
    "Auronzo di Cadore",
    "Lorenzago di Cadore",
    "San Tomaso Agordino",
    "Longarone",
    "Belluno",
    "Colle Santa Lucia",
    "Selva di Cadore",
    "Vigo di Cadore",
    "Domegge di Cadore",
    "Setteville",
    "Lozzo di Cadore",
    "Danta di Cadore",
    "Santo Stefano di Cadore",
    "San Pietro di Cadore"
  ],
  Treviso: [
    "Treviso",
    "Gaiarine",
    "Segusino",
    "Sernaglia della Battaglia",
    "Vedelago",
    "Ponte di Piave",
    "Maserada sul Piave",
    "Povegliano",
    "San Vendemiano",
    "Codognè",
    "Possagno",
    "Riese Pio X",
    "Silea",
    "Motta di Livenza",
    "Roncade",
    "Borso del Grappa",
    "Sarmede",
    "Villorba",
    "Susegana",
    "San Pietro di Feletto",
    "Vazzola",
    "Castelfranco Veneto",
    "Casale sul Sile",
    "Salgareda",
    "Vidor",
    "Pieve di Soligo",
    "Ponzano Veneto",
    "Portobuffolè",
    "Casier",
    "Revine Lago",
    "San Fior",
    "Follina",
    "Farra di Soligo",
    "Caerano di San Marco",
    "Godega di Sant'Urbano",
    "Resana",
    "Morgano",
    "Meduna di Livenza",
    "Spresiano",
    "Colle Umberto",
    "Cappella Maggiore",
    "Orsago",
    "Mogliano Veneto",
    "Zenson di Piave",
    "San Biagio di Callalta",
    "Paese",
    "Preganziol",
    "Maser",
    "Ormelle",
    "Cornuda",
    "Gorgo al Monticano",
    "Cavaso del Tomba",
    "Fontanelle",
    "Cimadolmo",
    "Conegliano",
    "Vittorio Veneto",
    "Breda di Piave",
    "Oderzo",
    "Nervesa della Battaglia",
    "San Zenone degli Ezzelini",
    "Zero Branco",
    "Chiarano",
    "Arcade",
    "Trevignano",
    "Fregona",
    "Cordignano",
    "Montebelluna",
    "Santa Lucia di Piave",
    "Monastier di Treviso",
    "Asolo",
    "Istrana",
    "Mareno di Piave",
    "Refrontolo",
    "Pederobba",
    "Valdobbiadene",
    "Altivole",
    "Mansuè",
    "Tarzo",
    "Cessalto",
    "Giavera del Montello",
    "Castello di Godego",
    "Castelcucco",
    "San Polo di Piave",
    "Quinto di Treviso",
    "Pieve del Grappa",
    "Monfumo",
    "Moriago della Battaglia",
    "Crocetta del Montello",
    "Cison di Valmarino",
    "Loria",
    "Miane",
    "Volpago del Montello",
    "Carbonera",
    "Fonte"
  ],
  Venezia: [
    "Jesolo",
    "Meolo",
    "Cavallino-Treporti",
    "Dolo",
    "Cona",
    "Mira",
    "Pianiga",
    "San Donà di Piave",
    "Pramaggiore",
    "Mirano",
    "Noventa di Piave",
    "Stra",
    "Gruaro",
    "Teglio Veneto",
    "Martellago",
    "Ceggia",
    "Musile di Piave",
    "Santa Maria di Sala",
    "Venezia",
    "Quarto d'Altino",
    "Campagna Lupia",
    "Eraclea",
    "Annone Veneto",
    "Portogruaro",
    "San Stino di Livenza",
    "San Michele al Tagliamento",
    "Fossalta di Portogruaro",
    "Camponogara",
    "Concordia Sagittaria",
    "Cavarzere",
    "Caorle",
    "Campolongo Maggiore",
    "Fiesso d'Artico",
    "Vigonovo",
    "Chioggia",
    "Scorzè",
    "Fossò",
    "Spinea",
    "Cinto Caomaggiore",
    "Noale",
    "Salzano",
    "Fossalta di Piave",
    "Torre di Mosto",
    "Marcon"
  ],
  Padova: [
    "Casalserugo",
    "Cartura",
    "Arzergrande",
    "Castelbaldo",
    "Stanghella",
    "Mestrino",
    "Ponso",
    "Camposampiero",
    "Legnaro",
    "Vo'",
    "Piove di Sacco",
    "Arre",
    "Campo San Martino",
    "Noventa Padovana",
    "Due Carrare",
    "Montagnana",
    "Arquà Petrarca",
    "San Martino di Lupari",
    "Vigonza",
    "Carmignano di Brenta",
    "Lozzo Atestino",
    "Tombolo",
    "Campodoro",
    "San Pietro in Gu",
    "Ospedaletto Euganeo",
    "Este",
    "Barbona",
    "Baone",
    "Sant'Elena",
    "Borgo Veneto",
    "Battaglia Terme",
    "Cervarese Santa Croce",
    "Correzzola",
    "Boara Pisani",
    "Veggiano",
    "Torreglia",
    "Piombino Dese",
    "Casale di Scodosia",
    "Villanova di Camposampiero",
    "Gazzo",
    "Trebaseleghe",
    "Villa Estense",
    "Galzignano Terme",
    "Montegrotto Terme",
    "Ponte San Nicolò",
    "Saonara",
    "Villafranca Padovana",
    "Piacenza d'Adige",
    "Tribano",
    "Solesino",
    "Megliadino San Vitale",
    "Masi",
    "Rubano",
    "Granze",
    "Bovolenta",
    "Merlara",
    "Teolo",
    "Codevigo",
    "Vigodarzere",
    "Sant'Urbano",
    "Bagnoli di Sopra",
    "Conselve",
    "Cinto Euganeo",
    "Albignasego",
    "Terrassa Padovana",
    "Borgoricco",
    "Villa del Conte",
    "Anguillara Veneta",
    "Urbana",
    "Curtarolo",
    "Saccolongo",
    "Vescovana",
    "Brugine",
    "Pontelongo",
    "San Pietro Viminario",
    "Maserà di Padova",
    "Limena",
    "Polverara",
    "Cadoneghe",
    "Padova",
    "Campodarsego",
    "Pozzonovo",
    "Massanzago",
    "Agna",
    "Loreggia",
    "Grantorto",
    "Rovolon",
    "Fontaniva",
    "Abano Terme",
    "Sant'Angelo di Piove di Sacco",
    "Pernumia",
    "Santa Caterina d'Este",
    "Candiana",
    "Piazzola sul Brenta",
    "Cittadella",
    "San Giorgio delle Pertiche",
    "Galliera Veneta",
    "Santa Giustina in Colle",
    "Selvazzano Dentro",
    "Monselice",
    "San Giorgio in Bosco"
  ],
  Rovigo: [
    "Arquà Polesine",
    "Polesella",
    "Costa di Rovigo",
    "Ariano nel Polesine",
    "Porto Viro",
    "Papozze",
    "Stienta",
    "Occhiobello",
    "Canda",
    "Castelnovo Bariano",
    "San Bellino",
    "Villadose",
    "Ceneselli",
    "Ceregnano",
    "Salara",
    "Castelmassa",
    "Porto Tolle",
    "Guarda Veneta",
    "Bergantino",
    "Villanova del Ghebbo",
    "Pettorazza Grimani",
    "Canaro",
    "Castelguglielmo",
    "Villamarzana",
    "Badia Polesine",
    "Gavello",
    "Adria",
    "Ficarolo",
    "Bagnolo di Po",
    "Bosaro",
    "Corbola",
    "Giacciano con Baruchella",
    "Calto",
    "Fratta Polesine",
    "Lusia",
    "Melara",
    "San Martino di Venezze",
    "Pontecchio Polesine",
    "Pincara",
    "Lendinara",
    "Taglio di Po",
    "Trecenta",
    "Frassinelle Polesine",
    "Rovigo",
    "Loreo",
    "Fiesso Umbertiano",
    "Rosolina",
    "Crespino",
    "Gaiba",
    "Villanova Marchesana"
  ]
}, Fm = {
  "Pesaro e Urbino": [
    "Fermignano",
    "Borgo Pace",
    "Pergola",
    "Serra Sant'Abbondio",
    "Urbania",
    "San Costanzo",
    "Mercatino Conca",
    "Piandimeleto",
    "Pesaro",
    "Gabicce Mare",
    "Mondolfo",
    "Gradara",
    "Urbino",
    "Sassocorvaro Auditore",
    "Petriano",
    "Lunano",
    "Frontone",
    "Tavullia",
    "Fratte Rosa",
    "Peglio",
    "Montelabbate",
    "Cantiano",
    "Sant'Ippolito",
    "Vallefoglia",
    "Sant'Angelo in Vado",
    "San Lorenzo in Campo",
    "Fano",
    "Montecalvo in Foglia",
    "Monte Grimano Terme",
    "Fossombrone",
    "Piobbico",
    "Terre Roveresche",
    "Monte Porzio",
    "Monte Cerignone",
    "Mombaroccio",
    "Belforte all'Isauro",
    "Mercatello sul Metauro",
    "Apecchio",
    "Pietrarubbia",
    "Isola del Piano",
    "Carpegna",
    "Montefelcino",
    "Tavoleto",
    "Colli al Metauro",
    "Macerata Feltria",
    "Cartoceto",
    "Cagli",
    "Acqualagna",
    "Frontino",
    "Mondavio"
  ],
  Ancona: [
    "Ancona",
    "Agugliano",
    "Monsano",
    "Polverigi",
    "Sirolo",
    "Cerreto d'Esi",
    "Chiaravalle",
    "Arcevia",
    "Monte San Vito",
    "Filottrano",
    "Santa Maria Nuova",
    "Staffolo",
    "Fabriano",
    "Poggio San Marcello",
    "Mergo",
    "Falconara Marittima",
    "Osimo",
    "Castelleone di Suasa",
    "San Paolo di Jesi",
    "Castelbellino",
    "Jesi",
    "Camerano",
    "Belvedere Ostrense",
    "Serra de' Conti",
    "Morro d'Alba",
    "Castelplanio",
    "Maiolati Spontini",
    "Camerata Picena",
    "Sassoferrato",
    "Corinaldo",
    "Ostra",
    "Genga",
    "Monte Roberto",
    "Castelfidardo",
    "Rosora",
    "Trecastelli",
    "Cupramontana",
    "Montemarciano",
    "Serra San Quirico",
    "Numana",
    "Montecarotto",
    "Loreto",
    "Ostra Vetere",
    "San Marcello",
    "Senigallia",
    "Barbara",
    "Offagna"
  ],
  Macerata: [
    "Corridonia",
    "Sarnano",
    "Valfornace",
    "Pollenza",
    "Pioraco",
    "Macerata",
    "Ussita",
    "Appignano",
    "Apiro",
    "Mogliano",
    "Muccia",
    "Poggio San Vicino",
    "Penna San Giovanni",
    "Sant'Angelo in Pontano",
    "Camporotondo di Fiastrone",
    "San Severino Marche",
    "Fiuminata",
    "Tolentino",
    "Recanati",
    "Ripe San Ginesio",
    "Urbisaglia",
    "Montefano",
    "Montecosaro",
    "Belforte del Chienti",
    "Treia",
    "Fiastra",
    "Sefro",
    "Potenza Picena",
    "Bolognola",
    "Pieve Torina",
    "Morrovalle",
    "Castelraimondo",
    "Loro Piceno",
    "Monte Cavallo",
    "Serrapetrona",
    "Porto Recanati",
    "Gagliole",
    "Cessapalombo",
    "Matelica",
    "Montecassiano",
    "Monte San Giusto",
    "Monte San Martino",
    "Esanatoglia",
    "Montelupone",
    "Visso",
    "Cingoli",
    "Gualdo",
    "Caldarola",
    "Camerino",
    "Petriolo",
    "Colmurano",
    "San Ginesio",
    "Civitanova Marche",
    "Castelsantangelo sul Nera",
    "Serravalle di Chienti"
  ],
  "Ascoli Piceno": [
    "Carassai",
    "Monteprandone",
    "Castorano",
    "Arquata del Tronto",
    "Grottammare",
    "Cupra Marittima",
    "Montalto delle Marche",
    "Maltignano",
    "Appignano del Tronto",
    "Roccafluvione",
    "Acquaviva Picena",
    "Castignano",
    "Montedinove",
    "Montegallo",
    "Force",
    "Montemonaco",
    "Rotella",
    "Montefiore dell'Aso",
    "Cossignano",
    "Monsampolo del Tronto",
    "Massignano",
    "Palmiano",
    "Colli del Tronto",
    "Spinetoli",
    "Folignano",
    "San Benedetto del Tronto",
    "Venarotta",
    "Ripatransone",
    "Comunanza",
    "Offida",
    "Acquasanta Terme",
    "Castel di Lama",
    "Ascoli Piceno"
  ],
  Fermo: [
    "Monte San Pietrangeli",
    "Amandola",
    "Montottone",
    "Monsampietro Morico",
    "Monterubbiano",
    "Sant'Elpidio a Mare",
    "Rapagnano",
    "Monte Vidon Combatte",
    "Pedaso",
    "Montefalcone Appennino",
    "Belmonte Piceno",
    "Montefortino",
    "Fermo",
    "Montelparo",
    "Servigliano",
    "Santa Vittoria in Matenano",
    "Monteleone di Fermo",
    "Lapedona",
    "Falerone",
    "Porto Sant'Elpidio",
    "Monte Urano",
    "Petritoli",
    "Moresco",
    "Montappone",
    "Porto San Giorgio",
    "Montegranaro",
    "Monte Rinaldo",
    "Monte Giberto",
    "Ortezzano",
    "Torre San Patrizio",
    "Francavilla d'Ete",
    "Magliano di Tenna",
    "Montegiorgio",
    "Massa Fermana",
    "Campofilone",
    "Monte Vidon Corrado",
    "Altidona",
    "Grottazzolina",
    "Ponzano di Fermo",
    "Smerillo"
  ]
}, km = {
  "Massa-Carrara": [
    "Bagnone",
    "Montignoso",
    "Aulla",
    "Podenzana",
    "Fosdinovo",
    "Licciana Nardi",
    "Pontremoli",
    "Villafranca in Lunigiana",
    "Zeri",
    "Comano",
    "Tresana",
    "Mulazzo",
    "Massa",
    "Casola in Lunigiana",
    "Fivizzano",
    "Filattiera",
    "Carrara"
  ],
  Lucca: [
    "Camaiore",
    "Castelnuovo di Garfagnana",
    "Lucca",
    "San Romano in Garfagnana",
    "Fosciandora",
    "Sillano Giuncugnano",
    "Altopascio",
    "Coreglia Antelminelli",
    "Piazza al Serchio",
    "Pescaglia",
    "Pietrasanta",
    "Gallicano",
    "Borgo a Mozzano",
    "Pieve Fosciana",
    "Molazzana",
    "Barga",
    "Castiglione di Garfagnana",
    "Massarosa",
    "Villa Basilica",
    "Careggine",
    "Vagli Sotto",
    "Bagni di Lucca",
    "Camporgiano",
    "Montecarlo",
    "Viareggio",
    "Capannori",
    "Stazzema",
    "Forte dei Marmi",
    "Minucciano",
    "Fabbriche di Vergemoli",
    "Seravezza",
    "Villa Collemandina",
    "Porcari"
  ],
  Pistoia: [
    "Lamporecchio",
    "Marliana",
    "Agliana",
    "Pieve a Nievole",
    "Quarrata",
    "Sambuca Pistoiese",
    "Pistoia",
    "Larciano",
    "Ponte Buggianese",
    "Serravalle Pistoiese",
    "Pescia",
    "Uzzano",
    "Monsummano Terme",
    "Buggiano",
    "Abetone Cutigliano",
    "Montecatini-Terme",
    "Chiesina Uzzanese",
    "Montale",
    "San Marcello Piteglio",
    "Massa e Cozzile"
  ],
  Firenze: [
    "Signa",
    "San Godenzo",
    "Greve in Chianti",
    "Vicchio",
    "Palazzuolo sul Senio",
    "Empoli",
    "Capraia e Limite",
    "Montespertoli",
    "Londa",
    "Firenze",
    "Barberino Tavarnelle",
    "Castelfiorentino",
    "Dicomano",
    "Gambassi Terme",
    "Rufina",
    "Cerreto Guidi",
    "Rignano sull'Arno",
    "Pontassieve",
    "Figline e Incisa Valdarno",
    "Certaldo",
    "Bagno a Ripoli",
    "San Casciano in Val di Pesa",
    "Scandicci",
    "Calenzano",
    "Barberino di Mugello",
    "Impruneta",
    "Montelupo Fiorentino",
    "Fiesole",
    "Sesto Fiorentino",
    "Vinci",
    "Borgo San Lorenzo",
    "Firenzuola",
    "Pelago",
    "Scarperia e San Piero",
    "Campi Bisenzio",
    "Vaglia",
    "Fucecchio",
    "Montaione",
    "Reggello",
    "Lastra a Signa",
    "Marradi"
  ],
  Livorno: [
    "Porto Azzurro",
    "Marciana Marina",
    "Capoliveri",
    "Capraia Isola",
    "Campo nell'Elba",
    "Sassetta",
    "Collesalvetti",
    "Portoferraio",
    "Suvereto",
    "Campiglia Marittima",
    "Livorno",
    "Piombino",
    "Bibbona",
    "San Vincenzo",
    "Castagneto Carducci",
    "Rosignano Marittimo",
    "Cecina",
    "Rio",
    "Marciana"
  ],
  Pisa: [
    "San Giuliano Terme",
    "Pontedera",
    "Palaia",
    "Castelnuovo di Val di Cecina",
    "Lajatico",
    "Vecchiano",
    "Peccioli",
    "Monteverdi Marittimo",
    "Castellina Marittima",
    "Buti",
    "Pisa",
    "Santa Croce sull'Arno",
    "Riparbella",
    "Fauglia",
    "Calci",
    "Terricciola",
    "Casale Marittimo",
    "Pomarance",
    "Santa Luce",
    "Chianni",
    "Bientina",
    "Castelfranco di Sotto",
    "Vicopisano",
    "Montopoli in Val d'Arno",
    "Santa Maria a Monte",
    "Cascina",
    "Volterra",
    "Montecatini Val di Cecina",
    "Capannoli",
    "Crespina Lorenzana",
    "Casciana Terme Lari",
    "Guardistallo",
    "Montescudaio",
    "San Miniato",
    "Calcinaia",
    "Ponsacco",
    "Orciano Pisano"
  ],
  Arezzo: [
    "Foiano della Chiana",
    "Montevarchi",
    "Sansepolcro",
    "Civitella in Val di Chiana",
    "Chiusi della Verna",
    "Caprese Michelangelo",
    "Montemignaio",
    "Bucine",
    "Arezzo",
    "Sestino",
    "Ortignano Raggiolo",
    "Cavriglia",
    "San Giovanni Valdarno",
    "Marciano della Chiana",
    "Poppi",
    "Talla",
    "Capolona",
    "Terranuova Bracciolini",
    "Castiglion Fibocchi",
    "Castel San Niccolò",
    "Cortona",
    "Laterina Pergine Valdarno",
    "Chitignano",
    "Monterchi",
    "Loro Ciuffenna",
    "Anghiari",
    "Badia Tedalda",
    "Subbiano",
    "Pratovecchio Stia",
    "Castel Focognano",
    "Castiglion Fiorentino",
    "Castelfranco Piandiscò",
    "Monte San Savino",
    "Lucignano",
    "Pieve Santo Stefano",
    "Bibbiena"
  ],
  Siena: [
    "Monteriggioni",
    "Sinalunga",
    "Chiusi",
    "Sarteano",
    "Montalcino",
    "Rapolano Terme",
    "Radda in Chianti",
    "Chiusdino",
    "Gaiole in Chianti",
    "Castellina in Chianti",
    "Torrita di Siena",
    "Pienza",
    "Casole d'Elsa",
    "Piancastagnaio",
    "Abbadia San Salvatore",
    "Monticiano",
    "Siena",
    "San Quirico d'Orcia",
    "Chianciano Terme",
    "San Gimignano",
    "Radicondoli",
    "Radicofani",
    "Cetona",
    "Sovicille",
    "Castelnuovo Berardenga",
    "Buonconvento",
    "Castiglione d'Orcia",
    "Montepulciano",
    "Trequanda",
    "Asciano",
    "Murlo",
    "Poggibonsi",
    "San Casciano dei Bagni",
    "Colle di Val d'Elsa",
    "Monteroni d'Arbia"
  ],
  Grosseto: [
    "Monte Argentario",
    "Roccastrada",
    "Monterotondo Marittimo",
    "Castell'Azzara",
    "Arcidosso",
    "Campagnatico",
    "Civitella Paganico",
    "Capalbio",
    "Pitigliano",
    "Sorano",
    "Seggiano",
    "Gavorrano",
    "Castel del Piano",
    "Montieri",
    "Scarlino",
    "Santa Fiora",
    "Roccalbegna",
    "Scansano",
    "Isola del Giglio",
    "Cinigiano",
    "Massa Marittima",
    "Grosseto",
    "Orbetello",
    "Semproniano",
    "Manciano",
    "Castiglione della Pescaia",
    "Magliano in Toscana",
    "Follonica"
  ],
  Prato: [
    "Cantagallo",
    "Poggio a Caiano",
    "Vaiano",
    "Vernio",
    "Montemurlo",
    "Carmignano",
    "Prato"
  ]
}, Om = {
  Perugia: [
    "Monte Santa Maria Tiberina",
    "Passignano sul Trasimeno",
    "Valtopina",
    "Marsciano",
    "Cerreto di Spoleto",
    "Cannara",
    "Bettona",
    "Piegaro",
    "Sant'Anatolia di Narco",
    "Preci",
    "Scheggino",
    "Torgiano",
    "Magione",
    "Bastia Umbra",
    "Assisi",
    "Spello",
    "Campello sul Clitunno",
    "Collazzone",
    "Foligno",
    "Nocera Umbra",
    "Massa Martana",
    "Montone",
    "Panicale",
    "Trevi",
    "Corciano",
    "San Giustino",
    "Costacciaro",
    "Pietralunga",
    "Norcia",
    "Paciano",
    "Gualdo Cattaneo",
    "Todi",
    "Monte Castello di Vibio",
    "Montefalco",
    "Bevagna",
    "Gualdo Tadino",
    "Monteleone di Spoleto",
    "Castiglione del Lago",
    "Cascia",
    "Scheggia e Pascelupo",
    "Fossato di Vico",
    "Castel Ritaldi",
    "Sellano",
    "Tuoro sul Trasimeno",
    "Perugia",
    "Citerna",
    "Città di Castello",
    "Fratta Todina",
    "Giano dell'Umbria",
    "Gubbio",
    "Lisciano Niccone",
    "Città della Pieve",
    "Spoleto",
    "Poggiodomo",
    "Deruta",
    "Vallo di Nera",
    "Valfabbrica",
    "Umbertide",
    "Sigillo"
  ],
  Terni: [
    "Parrano",
    "Ferentillo",
    "Montecastrilli",
    "Attigliano",
    "Calvi dell'Umbria",
    "Guardea",
    "San Venanzo",
    "Narni",
    "Monteleone d'Orvieto",
    "Montegabbione",
    "Alviano",
    "Orvieto",
    "Castel Viscardo",
    "Montefranco",
    "Arrone",
    "Polino",
    "Otricoli",
    "Ficulle",
    "San Gemini",
    "Fabro",
    "Amelia",
    "Penna in Teverina",
    "Castel Giorgio",
    "Lugnano in Teverina",
    "Baschi",
    "Porano",
    "Avigliano Umbro",
    "Montecchio",
    "Allerona",
    "Acquasparta",
    "Stroncone",
    "Giove",
    "Terni"
  ]
}, Dm = {
  Viterbo: [
    "Civitella d'Agliano",
    "Cellere",
    "Canepina",
    "Piansano",
    "Soriano nel Cimino",
    "Gradoli",
    "Castiglione in Teverina",
    "Carbognano",
    "Ronciglione",
    "Orte",
    "Civita Castellana",
    "Tuscania",
    "Valentano",
    "Vignanello",
    "Fabrica di Roma",
    "Capranica",
    "Barbarano Romano",
    "Celleno",
    "Latera",
    "Villa San Giovanni in Tuscia",
    "Tarquinia",
    "Vallerano",
    "Tessennano",
    "Arlena di Castro",
    "Blera",
    "Bassano in Teverina",
    "Castel Sant'Elia",
    "Montalto di Castro",
    "Nepi",
    "Vetralla",
    "Gallese",
    "Oriolo Romano",
    "Marta",
    "Monterosi",
    "Bolsena",
    "Grotte di Castro",
    "Vasanello",
    "Montefiascone",
    "Bomarzo",
    "Onano",
    "Viterbo",
    "Bassano Romano",
    "Caprarola",
    "Corchiano",
    "Lubriano",
    "Proceno",
    "Vitorchiano",
    "Acquapendente",
    "San Lorenzo Nuovo",
    "Sutri",
    "Bagnoregio",
    "Faleria",
    "Ischia di Castro",
    "Vejano",
    "Canino",
    "Capodimonte",
    "Monte Romano",
    "Calcata",
    "Farnese",
    "Graffignano"
  ],
  Rieti: [
    "Fara in Sabina",
    "Fiamignano",
    "Castelnuovo di Farfa",
    "Rocca Sinibalda",
    "Labro",
    "Vacone",
    "Rivodutri",
    "Montopoli di Sabina",
    "Greccio",
    "Pescorocchiano",
    "Poggio San Lorenzo",
    "Borbona",
    "Salisano",
    "Poggio Bustone",
    "Poggio Mirteto",
    "Tarano",
    "Borgorose",
    "Monteleone Sabino",
    "Frasso Sabino",
    "Morro Reatino",
    "Cottanello",
    "Leonessa",
    "Roccantica",
    "Selci",
    "Belmonte in Sabina",
    "Montasola",
    "Pozzaglia Sabina",
    "Antrodoco",
    "Collegiove",
    "Forano",
    "Montebuono",
    "Casperia",
    "Castel Sant'Angelo",
    "Poggio Nativo",
    "Cittareale",
    "Colle di Tora",
    "Poggio Moiano",
    "Magliano Sabina",
    "Stimigliano",
    "Monte San Giovanni in Sabina",
    "Torricella in Sabina",
    "Borgo Velino",
    "Mompeo",
    "Colli sul Velino",
    "Nespolo",
    "Longone Sabino",
    "Casaprota",
    "Paganico Sabino",
    "Scandriglia",
    "Varco Sabino",
    "Montenero Sabino",
    "Marcetelli",
    "Collalto Sabino",
    "Contigliano",
    "Poggio Catino",
    "Torri in Sabina",
    "Orvinio",
    "Castel di Tora",
    "Concerviano",
    "Cantalupo in Sabina",
    "Cantalice",
    "Cittaducale",
    "Toffia",
    "Posta",
    "Amatrice",
    "Collevecchio",
    "Configni",
    "Micigliano",
    "Rieti",
    "Accumoli",
    "Turania",
    "Petrella Salto",
    "Ascrea"
  ],
  Roma: [
    "San Polo dei Cavalieri",
    "Bellegra",
    "Filacciano",
    "Nettuno",
    "Palombara Sabina",
    "Vallinfreda",
    "Cineto Romano",
    "Lariano",
    "Nemi",
    "Affile",
    "Rocca Canterano",
    "Poli",
    "Grottaferrata",
    "Marcellina",
    "Monterotondo",
    "Montelanico",
    "Pisoniano",
    "Riofreddo",
    "Mazzano Romano",
    "Fiano Romano",
    "Anticoli Corrado",
    "Ponzano Romano",
    "Montorio Romano",
    "Gerano",
    "Mandela",
    "Bracciano",
    "Roccagiovine",
    "Roma",
    "Palestrina",
    "Casape",
    "Carpineto Romano",
    "Roviano",
    "Tolfa",
    "Formello",
    "Ariccia",
    "Cerveteri",
    "Allumiere",
    "Subiaco",
    "Gavignano",
    "Lanuvio",
    "Rocca Priora",
    "Mentana",
    "Valmontone",
    "Colonna",
    "Monte Compatri",
    "Ardea",
    "Castel San Pietro Romano",
    "Zagarolo",
    "Civitella San Paolo",
    "Cervara di Roma",
    "Marano Equo",
    "Magliano Romano",
    "Moricone",
    "Monteflavio",
    "Torrita Tiberina",
    "San Cesareo",
    "Anzio",
    "Civitavecchia",
    "Rignano Flaminio",
    "Artena",
    "Jenne",
    "Arsoli",
    "Percile",
    "Rocca Santo Stefano",
    "Sambuci",
    "Agosta",
    "Saracinesco",
    "Sant'Angelo Romano",
    "Cerreto Laziale",
    "Castel Madama",
    "Sant'Oreste",
    "Arcinazzo Romano",
    "Ciciliano",
    "Vivaro Romano",
    "Vicovaro",
    "Velletri",
    "Olevano Romano",
    "Ladispoli",
    "Pomezia",
    "Rocca di Cave",
    "San Vito Romano",
    "Nerola",
    "Sacrofano",
    "Albano Laziale",
    "Morlupo",
    "Nazzano",
    "Monte Porzio Catone",
    "Castel Gandolfo",
    "Rocca di Papa",
    "Fiumicino",
    "Castelnuovo di Porto",
    "Santa Marinella",
    "Colleferro",
    "Canterano",
    "Tivoli",
    "Capena",
    "Cave",
    "Genzano di Roma",
    "Trevignano Romano",
    "Camerata Nuova",
    "Frascati",
    "Vallepietra",
    "Roiate",
    "Genazzano",
    "San Gregorio da Sassola",
    "Campagnano di Roma",
    "Guidonia Montecelio",
    "Fonte Nuova",
    "Montelibretti",
    "Ciampino",
    "Canale Monterano",
    "Gorga",
    "Gallicano nel Lazio",
    "Labico",
    "Manziana",
    "Capranica Prenestina",
    "Licenza",
    "Marino",
    "Anguillara Sabazia",
    "Riano",
    "Segni"
  ],
  Latina: [
    "Castelforte",
    "Maenza",
    "Prossedi",
    "Minturno",
    "Formia",
    "Sabaudia",
    "Aprilia",
    "Campodimele",
    "Rocca Massima",
    "Lenola",
    "Cori",
    "Roccasecca dei Volsci",
    "Latina",
    "Pontinia",
    "Cisterna di Latina",
    "Terracina",
    "Santi Cosma e Damiano",
    "Roccagorga",
    "Sonnino",
    "Norma",
    "Sezze",
    "Ponza",
    "Spigno Saturnia",
    "Sermoneta",
    "Itri",
    "San Felice Circeo",
    "Fondi",
    "Ventotene",
    "Bassiano",
    "Priverno",
    "Gaeta",
    "Monte San Biagio",
    "Sperlonga"
  ],
  Frosinone: [
    "Pignataro Interamna",
    "Torre Cajetani",
    "Viticuso",
    "Ripi",
    "Paliano",
    "Sant'Elia Fiumerapido",
    "Vico nel Lazio",
    "Boville Ernica",
    "Rocca d'Arce",
    "Villa Santa Lucia",
    "Alvito",
    "Fumone",
    "San Biagio Saracinisco",
    "Picinisco",
    "Ausonia",
    "Aquino",
    "Campoli Appennino",
    "Pofi",
    "San Giovanni Incarico",
    "Supino",
    "Villa Santo Stefano",
    "Piedimonte San Germano",
    "Castro dei Volsci",
    "Esperia",
    "Cassino",
    "Villa Latina",
    "Roccasecca",
    "Pontecorvo",
    "Ferentino",
    "Posta Fibreno",
    "Vicalvi",
    "Arce",
    "Santopadre",
    "Broccostella",
    "Coreno Ausonio",
    "Sgurgola",
    "Piglio",
    "Acuto",
    "Sant'Apollinare",
    "Casalattico",
    "Colfelice",
    "Vallerotonda",
    "Belmonte Castello",
    "Collepardo",
    "Sant'Ambrogio sul Garigliano",
    "Arpino",
    "Sora",
    "Gallinaro",
    "Trivigliano",
    "Castelliri",
    "Casalvieri",
    "Monte San Giovanni Campano",
    "Ceprano",
    "Settefrati",
    "Pico",
    "Castelnuovo Parano",
    "Trevi nel Lazio",
    "Vallemaio",
    "Morolo",
    "Amaseno",
    "San Donato Val di Comino",
    "Acquafondata",
    "Atina",
    "Filettino",
    "Vallecorsa",
    "Torrice",
    "Castrocielo",
    "Isola del Liri",
    "Cervaro",
    "Veroli",
    "Fontechiari",
    "San Vittore del Lazio",
    "Ceccano",
    "Alatri",
    "Giuliano di Roma",
    "Arnara",
    "Serrone",
    "Fontana Liri",
    "Falvaterra",
    "Sant'Andrea del Garigliano",
    "Anagni",
    "Colle San Magno",
    "Pastena",
    "Patrica",
    "Terelle",
    "Fiuggi",
    "Guarcino",
    "San Giorgio a Liri",
    "Frosinone",
    "Pescosolido",
    "Strangolagalli"
  ]
}, Gm = {
  Caserta: [
    "Cervino",
    "Marcianise",
    "Cesa",
    "Ailano",
    "Rocchetta e Croce",
    "Valle di Maddaloni",
    "Alvignano",
    "Capriati a Volturno",
    "Santa Maria la Fossa",
    "Casal di Principe",
    "Riardo",
    "Sant'Arpino",
    "Frignano",
    "Liberi",
    "Gallo Matese",
    "Castel Volturno",
    "Aversa",
    "Succivo",
    "Teano",
    "Roccamonfina",
    "Grazzanise",
    "Presenzano",
    "Castel Morrone",
    "San Marco Evangelista",
    "San Prisco",
    "Vairano Patenora",
    "Carinaro",
    "Villa di Briano",
    "Letino",
    "Marzano Appio",
    "Sparanise",
    "Casagiove",
    "Ruviano",
    "San Gregorio Matese",
    "Sant'Angelo d'Alife",
    "Valle Agricola",
    "Arienzo",
    "Curti",
    "Cellole",
    "Piedimonte Matese",
    "Piana di Monte Verna",
    "San Pietro Infine",
    "Castello del Matese",
    "Pontelatone",
    "Falciano del Massico",
    "Caserta",
    "Calvi Risorta",
    "Pastorano",
    "Casapesenna",
    "Mondragone",
    "Casapulla",
    "Cancello ed Arnone",
    "Pignataro Maggiore",
    "San Felice a Cancello",
    "Castel di Sasso",
    "Baia e Latina",
    "Santa Maria a Vico",
    "San Nicola la Strada",
    "Formicola",
    "Parete",
    "Roccaromana",
    "Galluccio",
    "Alife",
    "Dragoni",
    "Orta di Atella",
    "Pratella",
    "Caianello",
    "Lusciano",
    "San Potito Sannitico",
    "Pietravairano",
    "Ciorlano",
    "Mignano Monte Lungo",
    "Casaluce",
    "Capua",
    "San Tammaro",
    "Tora e Piccilli",
    "Portico di Caserta",
    "Recale",
    "Macerata Campania",
    "Gioia Sannitica",
    "San Cipriano d'Aversa",
    "Trentola Ducenta",
    "Villa Literno",
    "Gricignano di Aversa",
    "Teverola",
    "Giano Vetusto",
    "Rocca d'Evandro",
    "Conca della Campania",
    "San Marcellino",
    "Sessa Aurunca",
    "Fontegreca",
    "Carinola",
    "Prata Sannita",
    "Pietramelara",
    "Bellona",
    "Vitulazio",
    "Castel Campagnano",
    "Caiazzo",
    "Camigliano",
    "Capodrise",
    "Santa Maria Capua Vetere",
    "Francolise",
    "Maddaloni",
    "Raviscanina"
  ],
  Benevento: [
    "Foglianise",
    "Circello",
    "Ponte",
    "Forchia",
    "Sant'Agata de' Goti",
    "Fragneto Monforte",
    "Limatola",
    "Molinara",
    "Cusano Mutri",
    "Reino",
    "San Giorgio del Sannio",
    "Vitulano",
    "Paupisi",
    "Calvi",
    "San Lupo",
    "Castelpoto",
    "San Leucio del Sannio",
    "Montesarchio",
    "Solopaca",
    "San Lorenzo Maggiore",
    "Airola",
    "Pannarano",
    "Colle Sannita",
    "Arpaise",
    "Durazzano",
    "Tocco Caudio",
    "Fragneto l'Abate",
    "Paolisi",
    "San Nazzaro",
    "Santa Croce del Sannio",
    "Guardia Sanframondi",
    "Castelfranco in Miscano",
    "Montefalcone di Val Fortore",
    "San Giorgio La Molara",
    "San Lorenzello",
    "Buonalbergo",
    "Puglianello",
    "San Bartolomeo in Galdo",
    "Telese Terme",
    "Frasso Telesino",
    "Moiano",
    "Casalduni",
    "San Nicola Manfredi",
    "Benevento",
    "Paduli",
    "San Marco dei Cavoti",
    "Cautano",
    "Arpaia",
    "Baselice",
    "Cerreto Sannita",
    "Ginestra degli Schiavoni",
    "Castelpagano",
    "Morcone",
    "Bucciano",
    "Pietrelcina",
    "Pago Veiano",
    "Amorosi",
    "Torrecuso",
    "Sant'Arcangelo Trimonte",
    "Castelvetere in Val Fortore",
    "Apollosa",
    "San Martino Sannita",
    "San Salvatore Telesino",
    "Campoli del Monte Taburno",
    "Pontelandolfo",
    "Apice",
    "Bonea",
    "Castelvenere",
    "Sant'Angelo a Cupolo",
    "Pietraroja",
    "Sassinoro",
    "Foiano di Val Fortore",
    "Melizzano",
    "Faicchio",
    "Ceppaloni",
    "Campolattaro",
    "Pesco Sannita",
    "Dugenta"
  ],
  Napoli: [
    "Scisciano",
    "Striano",
    "Pozzuoli",
    "Castellammare di Stabia",
    "Frattamaggiore",
    "Forio",
    "Frattaminore",
    "Cicciano",
    "Sant'Antonio Abate",
    "San Vitaliano",
    "Somma Vesuviana",
    "Pomigliano d'Arco",
    "Caivano",
    "Castello di Cisterna",
    "Cardito",
    "Gragnano",
    "Calvizzano",
    "Casamarciano",
    "Marano di Napoli",
    "Roccarainola",
    "Sant'Anastasia",
    "Tufino",
    "Poggiomarino",
    "Volla",
    "Casola di Napoli",
    "Portici",
    "Villaricca",
    "Capri",
    "Anacapri",
    "Lacco Ameno",
    "Piano di Sorrento",
    "Melito di Napoli",
    "Mariglianella",
    "Crispano",
    "Meta",
    "Pimonte",
    "Acerra",
    "Camposano",
    "Pollena Trocchia",
    "Boscoreale",
    "Casamicciola Terme",
    "Grumo Nevano",
    "Saviano",
    "Carbonara di Nola",
    "San Paolo Bel Sito",
    "Arzano",
    "Cercola",
    "Comiziano",
    "Mugnano di Napoli",
    "Afragola",
    "Torre Annunziata",
    "San Sebastiano al Vesuvio",
    "Casavatore",
    "Massa Lubrense",
    "Bacoli",
    "Vico Equense",
    "Ercolano",
    "San Giorgio a Cremano",
    "Serrara Fontana",
    "Visciano",
    "Torre del Greco",
    "Sant'Antimo",
    "Procida",
    "Casoria",
    "Quarto",
    "Napoli",
    "San Gennaro Vesuviano",
    "Ischia",
    "Terzigno",
    "Casalnuovo di Napoli",
    "Brusciano",
    "San Giuseppe Vesuviano",
    "Boscotrecase",
    "Santa Maria la Carità",
    "Marigliano",
    "Sant'Agnello",
    "Nola",
    "Palma Campania",
    "Cimitile",
    "Giugliano in Campania",
    "Trecase",
    "Pompei",
    "Monte di Procida",
    "Sorrento",
    "Qualiano",
    "Casandrino",
    "Lettere",
    "Barano d'Ischia",
    "Ottaviano",
    "Agerola",
    "Liveri",
    "Massa di Somma"
  ],
  Avellino: [
    "Castelvetere sul Calore",
    "Atripalda",
    "Baiano",
    "Montoro",
    "Grottolella",
    "Tufo",
    "Fontanarosa",
    "Santo Stefano del Sole",
    "Monteforte Irpino",
    "Teora",
    "Greci",
    "Trevico",
    "Vallata",
    "Montaguto",
    "Gesualdo",
    "Cesinali",
    "Vallesaccarda",
    "Conza della Campania",
    "Venticano",
    "Moschiano",
    "Pietrastornina",
    "Paternopoli",
    "Pietradefusi",
    "Torrioni",
    "Senerchia",
    "Casalbore",
    "Montemiletto",
    "Sirignano",
    "Zungoli",
    "Sperone",
    "Rotondi",
    "Caposele",
    "Scampitella",
    "Guardia Lombardi",
    "San Potito Ultra",
    "Domicella",
    "Calabritto",
    "Chiusano di San Domenico",
    "Salza Irpina",
    "Manocalzati",
    "Cairano",
    "Quadrelle",
    "Cassano Irpino",
    "Quindici",
    "San Nicola Baronia",
    "Sant'Andrea di Conza",
    "Sant'Angelo dei Lombardi",
    "Montemarano",
    "Cervinara",
    "Ospedaletto d'Alpinolo",
    "San Sossio Baronia",
    "Serino",
    "Solofra",
    "Chianche",
    "Montefusco",
    "Mercogliano",
    "Sorbo Serpico",
    "Carife",
    "Forino",
    "Mirabella Eclano",
    "Parolise",
    "Savignano Irpino",
    "Bagnoli Irpino",
    "Roccabascerana",
    "Contrada",
    "Lacedonia",
    "Montefalcione",
    "Grottaminarda",
    "Lauro",
    "Montecalvo Irpino",
    "Summonte",
    "Pago del Vallo di Lauro",
    "Castel Baronia",
    "Aquilonia",
    "Taurano",
    "Castelfranci",
    "Capriglia Irpina",
    "Volturara Irpina",
    "Villanova del Battista",
    "Prata di Principato Ultra",
    "Sant'Angelo a Scala",
    "Santa Paolina",
    "Ariano Irpino",
    "Villamaina",
    "Avella",
    "Montefredane",
    "Luogosano",
    "Aiello del Sabato",
    "Taurasi",
    "Nusco",
    "Monteverde",
    "Avellino",
    "Rocca San Felice",
    "Andretta",
    "Flumeri",
    "Frigento",
    "Bonito",
    "Melito Irpino",
    "Sant'Angelo all'Esca",
    "Pratola Serra",
    "Santa Lucia di Serino",
    "Mugnano del Cardinale",
    "Torella dei Lombardi",
    "Calitri",
    "Sturno",
    "San Mango sul Calore",
    "San Michele di Serino",
    "Petruro Irpino",
    "Lapio",
    "Montella",
    "Bisaccia",
    "San Martino Valle Caudina",
    "Lioni",
    "Altavilla Irpina",
    "Morra De Sanctis",
    "Marzano di Nola",
    "Candida",
    "Torre Le Nocelle"
  ],
  Salerno: [
    "Cannalonga",
    "Castelnuovo Cilento",
    "Romagnano al Monte",
    "Prignano Cilento",
    "Scala",
    "Castel San Giorgio",
    "Auletta",
    "Giungano",
    "Cava de' Tirreni",
    "Casal Velino",
    "Casalbuono",
    "Laurino",
    "Ravello",
    "Casaletto Spartano",
    "San Cipriano Picentino",
    "Serre",
    "Tramonti",
    "Scafati",
    "Torraca",
    "Tortorella",
    "Bellizzi",
    "Camerota",
    "Celle di Bulgheria",
    "Salento",
    "Monteforte Cilento",
    "Baronissi",
    "Sant'Angelo a Fasanella",
    "Altavilla Silentina",
    "Salvitelle",
    "Omignano",
    "Furore",
    "Montesano sulla Marcellana",
    "Castelcivita",
    "Buonabitacolo",
    "Sala Consilina",
    "Santa Marina",
    "Pellezzano",
    "Castiglione del Genovesi",
    "Monte San Giacomo",
    "Sessa Cilento",
    "Colliano",
    "Valva",
    "Praiano",
    "Mercato San Severino",
    "Caggiano",
    "Battipaglia",
    "Campora",
    "San Valentino Torio",
    "Aquara",
    "Castellabate",
    "Lustra",
    "Moio della Civitella",
    "Torchiara",
    "Giffoni Valle Piana",
    "Sapri",
    "Capaccio Paestum",
    "Fisciano",
    "Stio",
    "Bellosguardo",
    "Novi Velia",
    "Sarno",
    "Roscigno",
    "San Marzano sul Sarno",
    "Roccadaspide",
    "Postiglione",
    "Castel San Lorenzo",
    "San Giovanni a Piro",
    "Castelnuovo di Conza",
    "Ispani",
    "Piaggine",
    "Controne",
    "Ottati",
    "Positano",
    "Campagna",
    "Cetara",
    "Corleto Monforte",
    "San Mauro la Bruca",
    "Sacco",
    "Caselle in Pittari",
    "Ricigliano",
    "Minori",
    "Acerno",
    "Siano",
    "Calvanico",
    "Ascea",
    "Contursi Terme",
    "Felitto",
    "Morigerati",
    "Salerno",
    "Orria",
    "Valle dell'Angelo",
    "San Rufo",
    "Corbara",
    "San Gregorio Magno",
    "Pisciotta",
    "Palomonte",
    "Teggiano",
    "Petina",
    "Rutino",
    "Olevano sul Tusciano",
    "Roccagloriosa",
    "Futani",
    "Vibonati",
    "Agropoli",
    "Bracigliano",
    "Perdifumo",
    "Angri",
    "Nocera Superiore",
    "Roccapiemonte",
    "Cicerale",
    "Atrani",
    "Pontecagnano Faiano",
    "Giffoni Sei Casali",
    "Laureana Cilento",
    "San Mauro Cilento",
    "San Pietro al Tanagro",
    "Albanella",
    "Pollica",
    "Sant'Arsenio",
    "Vietri sul Mare",
    "Oliveto Citra",
    "Sanza",
    "Sicignano degli Alburni",
    "Trentinara",
    "Buccino",
    "Conca dei Marini",
    "Stella Cilento",
    "Atena Lucana",
    "San Mango Piemonte",
    "Magliano Vetere",
    "Amalfi",
    "Centola",
    "Gioi",
    "Ogliastro Cilento",
    "Pertosa",
    "Serramezzana",
    "Eboli",
    "Torre Orsaia",
    "Pagani",
    "Santomenna",
    "Montecorice",
    "Padula",
    "Perito",
    "Cuccaro Vetere",
    "Ceraso",
    "Montecorvino Rovella",
    "Nocera Inferiore",
    "Laurito",
    "Maiori",
    "Vallo della Lucania",
    "Laviano",
    "Sant'Egidio del Monte Albino",
    "Montano Antilia",
    "Polla",
    "Alfano",
    "Sassano",
    "Montecorvino Pugliano",
    "Rofrano"
  ]
}, Nm = {
  "L'Aquila": [
    "Castel di Ieri",
    "Collelongo",
    "Capistrello",
    "Scontrone",
    "Montereale",
    "Opi",
    "San Benedetto in Perillis",
    "Fontecchio",
    "Rivisondoli",
    "Fagnano Alto",
    "Castellafiume",
    "Carapelle Calvisio",
    "Introdacqua",
    "Cocullo",
    "Pereto",
    "Rocca di Cambio",
    "San Benedetto dei Marsi",
    "Pettorano sul Gizio",
    "Rocca di Botte",
    "Cappadocia",
    "Rocca di Mezzo",
    "Villavallelonga",
    "Caporciano",
    "Pescasseroli",
    "Anversa degli Abruzzi",
    "Bisegna",
    "Santo Stefano di Sessanio",
    "Rocca Pia",
    "Celano",
    "Scoppito",
    "Capestrano",
    "Roccaraso",
    "Ofena",
    "Villalago",
    "San Vincenzo Valle Roveto",
    "Gioia dei Marsi",
    "Avezzano",
    "Ocre",
    "Collepietro",
    "Trasacco",
    "Poggio Picenze",
    "Barrea",
    "Ortucchio",
    "Aielli",
    "Canistro",
    "Pacentro",
    "Villa Sant'Angelo",
    "Ovindoli",
    "Prata d'Ansidonia",
    "Villetta Barrea",
    "Villa Santa Lucia degli Abruzzi",
    "Raiano",
    "Castelvecchio Calvisio",
    "Bugnara",
    "Castelvecchio Subequo",
    "Lecce nei Marsi",
    "Scanno",
    "Sulmona",
    "Capitignano",
    "Pescocostanzo",
    "Sante Marie",
    "Alfedena",
    "Civitella Roveto",
    "Cerchio",
    "Carsoli",
    "Lucoli",
    "Balsorano",
    "Pizzoli",
    "Fossa",
    "Acciano",
    "Ateleta",
    "Barisciano",
    "Scurcola Marsicana",
    "Campo di Giove",
    "Gagliano Aterno",
    "L'Aquila",
    "Roccacasale",
    "Castel di Sangro",
    "Civita d'Antino",
    "Pratola Peligna",
    "Calascio",
    "Navelli",
    "Sant'Eusanio Forconese",
    "Vittorito",
    "Magliano de' Marsi",
    "Castel del Monte",
    "Molina Aterno",
    "Tornimparte",
    "San Demetrio ne' Vestini",
    "Tagliacozzo",
    "Barete",
    "Campotosto",
    "Tione degli Abruzzi",
    "Civitella Alfedena",
    "Pescina",
    "Collarmele",
    "San Pio delle Camere",
    "Prezza",
    "Massa d'Albe",
    "Morino",
    "Cansano",
    "Secinaro",
    "Corfinio",
    "Goriano Sicoli",
    "Luco dei Marsi",
    "Cagnano Amiterno",
    "Ortona dei Marsi",
    "Oricola"
  ],
  Teramo: [
    "Tortoreto",
    "Giulianova",
    "Pietracamela",
    "Civitella del Tronto",
    "Teramo",
    "Torricella Sicura",
    "Rocca Santa Maria",
    "Campli",
    "Morro d'Oro",
    "Tossicia",
    "Arsita",
    "Ancarano",
    "Cortino",
    "Bisenti",
    "Atri",
    "Corropoli",
    "Sant'Omero",
    "Pineto",
    "Basciano",
    "Cellino Attanasio",
    "Alba Adriatica",
    "Mosciano Sant'Angelo",
    "Silvi",
    "Castellalto",
    "Crognaleto",
    "Montorio al Vomano",
    "Sant'Egidio alla Vibrata",
    "Notaresco",
    "Torano Nuovo",
    "Montefino",
    "Colonnella",
    "Castelli",
    "Controguerra",
    "Colledara",
    "Canzano",
    "Isola del Gran Sasso d'Italia",
    "Penna Sant'Andrea",
    "Martinsicuro",
    "Roseto degli Abruzzi",
    "Bellante",
    "Cermignano",
    "Castel Castagna",
    "Fano Adriano",
    "Valle Castellana",
    "Nereto",
    "Castiglione Messer Raimondo",
    "Castilenti"
  ],
  Pescara: [
    "Carpineto della Nora",
    "Penne",
    "Salle",
    "Nocciano",
    "Pietranico",
    "Pescosansonesco",
    "Montebello di Bertona",
    "Turrivalignani",
    "Brittoli",
    "Città Sant'Angelo",
    "Alanno",
    "Collecorvino",
    "Tocco da Casauria",
    "Torre de' Passeri",
    "Castiglione a Casauria",
    "Cepagatti",
    "Montesilvano",
    "Caramanico Terme",
    "Corvara",
    "Scafa",
    "Manoppello",
    "Roccamorice",
    "Loreto Aprutino",
    "Moscufo",
    "Spoltore",
    "Rosciano",
    "Bolognano",
    "San Valentino in Abruzzo Citeriore",
    "Popoli Terme",
    "Lettomanoppello",
    "Picciano",
    "Elice",
    "Villa Celiera",
    "Pescara",
    "Vicoli",
    "Serramonacesca",
    "Sant'Eufemia a Maiella",
    "Catignano",
    "Civitaquana",
    "Abbateggio",
    "Cappelle sul Tavo",
    "Pianella",
    "Farindola",
    "Bussi sul Tirino",
    "Civitella Casanova",
    "Cugnoli"
  ],
  Chieti: [
    "Castel Frentano",
    "Paglieta",
    "Fara Filiorum Petri",
    "Casacanditella",
    "Poggiofiorito",
    "Villamagna",
    "San Martino sulla Marrucina",
    "Carunchio",
    "Torrebruna",
    "Roccamontepiano",
    "Tornareccio",
    "Atessa",
    "San Giovanni Lipioni",
    "Lentella",
    "San Salvo",
    "Crecchio",
    "Palena",
    "Fossacesia",
    "Chieti",
    "Furci",
    "Fallo",
    "Sant'Eusanio del Sangro",
    "Carpineto Sinello",
    "Roccaspinalveti",
    "Quadri",
    "Taranta Peligna",
    "Fara San Martino",
    "Cupello",
    "Casalincontrada",
    "Rapino",
    "Scerni",
    "Treglio",
    "Mozzagrogna",
    "Rocca San Giovanni",
    "Santa Maria Imbaro",
    "Miglianico",
    "Gissi",
    "Colledimezzo",
    "Monteferrante",
    "Montebello sul Sangro",
    "Fresagrandinaria",
    "Canosa Sannita",
    "Castelguidone",
    "Pietraferrazzana",
    "Torricella Peligna",
    "Schiavi di Abruzzo",
    "Pennadomo",
    "Lettopalena",
    "Filetto",
    "Ari",
    "Pretoro",
    "Gessopalena",
    "Civitaluparella",
    "Montazzoli",
    "San Buono",
    "Palombaro",
    "Civitella Messer Raimondo",
    "Colledimacine",
    "Vasto",
    "Frisa",
    "Pennapiedimonte",
    "Borrello",
    "Giuliano Teatino",
    "Lanciano",
    "Ortona",
    "Tufillo",
    "Gamberale",
    "Fraine",
    "Bucchianico",
    "Pollutri",
    "Torino di Sangro",
    "Montelapiano",
    "Montenerodomo",
    "Archi",
    "Roio del Sangro",
    "Celenza sul Trigno",
    "Ripa Teatina",
    "Monteodorisio",
    "Dogliola",
    "Villa Santa Maria",
    "Guilmi",
    "Palmoli",
    "Guardiagrele",
    "Casalanguida",
    "Perano",
    "Francavilla al Mare",
    "San Giovanni Teatino",
    "Lama dei Peligni",
    "Casalbordino",
    "Roccascalegna",
    "Casoli",
    "Vacri",
    "Villalfonsina",
    "Pizzoferrato",
    "Arielli",
    "Altino",
    "Liscia",
    "Rosello",
    "Torrevecchia Teatina",
    "Orsogna",
    "Castiglione Messer Marino",
    "San Vito Chietino",
    "Tollo",
    "Bomba"
  ]
}, $m = {
  Campobasso: [
    "Campolieto",
    "Campochiaro",
    "Castellino del Biferno",
    "Spinete",
    "Bonefro",
    "Campomarino",
    "Portocannone",
    "Toro",
    "Ripabottoni",
    "Morrone del Sannio",
    "Ferrazzano",
    "Oratino",
    "Roccavivara",
    "Guardiaregia",
    "Mirabello Sannitico",
    "Vinchiaturo",
    "Montenero di Bisaccia",
    "Montorio nei Frentani",
    "Guardialfiera",
    "Jelsi",
    "Cercepiccola",
    "Pietracatella",
    "Larino",
    "Campodipietra",
    "Pietracupa",
    "Riccia",
    "Baranello",
    "Tavenna",
    "Lucito",
    "Matrice",
    "Provvidenti",
    "Santa Croce di Magliano",
    "Campobasso",
    "Trivento",
    "Ururi",
    "Sant'Angelo Limosano",
    "Cercemaggiore",
    "San Giacomo degli Schiavoni",
    "Montefalcone nel Sannio",
    "Gildone",
    "Busso",
    "San Polo Matese",
    "Montemitro",
    "Tufara",
    "Fossalto",
    "Montelongo",
    "Palata",
    "Termoli",
    "Sepino",
    "Lupara",
    "Casacalenda",
    "San Giuliano di Puglia",
    "Petrella Tifernina",
    "Colletorto",
    "Sant'Elia a Pianisi",
    "San Martino in Pensilis",
    "Rotello",
    "Molise",
    "Mafalda",
    "Castropignano",
    "Ripalimosani",
    "Macchia Valfortore",
    "Casalciprano",
    "Gambatesa",
    "San Biase",
    "San Giovanni in Galdo",
    "Castelmauro",
    "Petacciato",
    "Colle d'Anchise",
    "Limosano",
    "Civitacampomarano",
    "Salcito",
    "Monacilioni",
    "Bojano",
    "Montagano",
    "Torella del Sannio",
    "Montecilfone",
    "Guglionesi",
    "Acquaviva Collecroce",
    "San Felice del Molise",
    "San Giuliano del Sannio",
    "Castelbottaccio",
    "Duronia",
    "San Massimo"
  ],
  Isernia: [
    "Bagnoli del Trigno",
    "Carovilli",
    "Castelpizzuto",
    "Conca Casale",
    "Civitanova del Sannio",
    "Castel San Vincenzo",
    "Sesto Campano",
    "Belmonte del Sannio",
    "Sessano del Molise",
    "Longano",
    "Scapoli",
    "Castel del Giudice",
    "Isernia",
    "Acquaviva d'Isernia",
    "Agnone",
    "Montaquila",
    "Carpinone",
    "Chiauci",
    "Sant'Agapito",
    "Miranda",
    "Pozzilli",
    "Rionero Sannitico",
    "Pescopennataro",
    "Pettoranello del Molise",
    "Macchiagodena",
    "Monteroduni",
    "Pietrabbondante",
    "Sant'Angelo del Pesco",
    "Cantalupo nel Sannio",
    "Colli a Volturno",
    "Fornelli",
    "Rocchetta a Volturno",
    "Pescolanciano",
    "Sant'Elena Sannita",
    "Macchia d'Isernia",
    "Pesche",
    "Castelverrino",
    "Frosolone",
    "Forlì del Sannio",
    "Montenero Val Cocchiara",
    "San Pietro Avellana",
    "Vastogirardi",
    "Roccamandolfi",
    "Venafro",
    "Santa Maria del Molise",
    "Castelpetroso",
    "Pizzone",
    "Roccasicura",
    "Capracotta",
    "Poggio Sannita",
    "Filignano",
    "Cerro al Volturno"
  ]
}, Wm = {
  Foggia: [
    "San Nicandro Garganico",
    "Carapelle",
    "Ordona",
    "Ascoli Satriano",
    "Peschici",
    "Chieuti",
    "Castelnuovo della Daunia",
    "San Severo",
    "Poggio Imperiale",
    "Castelluccio dei Sauri",
    "Castelluccio Valmaggiore",
    "Cerignola",
    "Anzano di Puglia",
    "Ischitella",
    "Zapponeta",
    "Sant'Agata di Puglia",
    "San Marco la Catola",
    "Troia",
    "Lucera",
    "Cagnano Varano",
    "Serracapriola",
    "San Giovanni Rotondo",
    "Volturara Appula",
    "Bovino",
    "Orsara di Puglia",
    "Torremaggiore",
    "Biccari",
    "Carlantino",
    "Celenza Valfortore",
    "Vico del Gargano",
    "Orta Nova",
    "Lesina",
    "Pietramontecorvino",
    "Apricena",
    "San Marco in Lamis",
    "Volturino",
    "Candela",
    "Carpino",
    "Casalnuovo Monterotaro",
    "Isole Tremiti",
    "Faeto",
    "Rodi Garganico",
    "Rignano Garganico",
    "Monte Sant'Angelo",
    "Mattinata",
    "Celle di San Vito",
    "Motta Montecorvino",
    "Panni",
    "Casalvecchio di Puglia",
    "Vieste",
    "Stornarella",
    "Monteleone di Puglia",
    "Accadia",
    "Alberona",
    "Roseto Valfortore",
    "San Paolo di Civitate",
    "Manfredonia",
    "Deliceto",
    "Rocchetta Sant'Antonio",
    "Foggia",
    "Stornara"
  ],
  Bari: [
    "Altamura",
    "Palo del Colle",
    "Poggiorsini",
    "Acquaviva delle Fonti",
    "Modugno",
    "Molfetta",
    "Terlizzi",
    "Polignano a Mare",
    "Bitritto",
    "Putignano",
    "Triggiano",
    "Sammichele di Bari",
    "Castellana Grotte",
    "Cassano delle Murge",
    "Noicattaro",
    "Rutigliano",
    "Conversano",
    "Gioia del Colle",
    "Adelfia",
    "Capurso",
    "Cellamare",
    "Ruvo di Puglia",
    "Gravina in Puglia",
    "Valenzano",
    "Locorotondo",
    "Corato",
    "Bitetto",
    "Binetto",
    "Sannicandro di Bari",
    "Mola di Bari",
    "Toritto",
    "Giovinazzo",
    "Alberobello",
    "Bitonto",
    "Monopoli",
    "Grumo Appula",
    "Noci",
    "Turi",
    "Bari",
    "Casamassima",
    "Santeramo in Colle"
  ],
  Taranto: [
    "Martina Franca",
    "Fragagnano",
    "Castellaneta",
    "Sava",
    "Crispiano",
    "San Giorgio Ionico",
    "Pulsano",
    "Mottola",
    "Montemesola",
    "San Marzano di San Giuseppe",
    "Avetrana",
    "Lizzano",
    "Palagianello",
    "Taranto",
    "Manduria",
    "Massafra",
    "Monteiasi",
    "Laterza",
    "Carosino",
    "Statte",
    "Monteparano",
    "Torricella",
    "Grottaglie",
    "Roccaforzata",
    "Faggiano",
    "Maruggio",
    "Ginosa",
    "Leporano",
    "Palagiano"
  ],
  Brindisi: [
    "Mesagne",
    "Ostuni",
    "Torre Santa Susanna",
    "Cisternino",
    "San Vito dei Normanni",
    "Erchie",
    "Francavilla Fontana",
    "Cellino San Marco",
    "San Donaci",
    "San Pietro Vernotico",
    "Carovigno",
    "Fasano",
    "Torchiarolo",
    "Ceglie Messapica",
    "Oria",
    "Brindisi",
    "San Michele Salentino",
    "San Pancrazio Salentino",
    "Villa Castelli",
    "Latiano"
  ],
  Lecce: [
    "Castri di Lecce",
    "Santa Cesarea Terme",
    "Castro",
    "Melpignano",
    "San Pietro in Lama",
    "Seclì",
    "Copertino",
    "Soleto",
    "Diso",
    "Alessano",
    "Spongano",
    "Guagnano",
    "Surano",
    "Squinzano",
    "Sternatia",
    "Arnesano",
    "Presicce-Acquarica",
    "Neviano",
    "Castrignano del Capo",
    "Casarano",
    "Leverano",
    "Ortelle",
    "Novoli",
    "Taviano",
    "Galatina",
    "Surbo",
    "Alliste",
    "Andrano",
    "Martignano",
    "Maglie",
    "Giuggianello",
    "Veglie",
    "Ruffano",
    "Corigliano d'Otranto",
    "Miggiano",
    "Carpignano Salentino",
    "Botrugno",
    "Minervino di Lecce",
    "Sogliano Cavour",
    "Tuglie",
    "Taurisano",
    "Monteroni di Lecce",
    "Lequile",
    "Salve",
    "Racale",
    "Tricase",
    "Martano",
    "Castrignano de' Greci",
    "Ugento",
    "Matino",
    "Carmiano",
    "Vernole",
    "Cutrofiano",
    "Salice Salentino",
    "Scorrano",
    "San Cassiano",
    "Cursi",
    "Bagnolo del Salento",
    "Specchia",
    "Nardò",
    "Morciano di Leuca",
    "Porto Cesareo",
    "Patù",
    "Trepuzzi",
    "Montesano Salentino",
    "San Cesario di Lecce",
    "Corsano",
    "Caprarica di Lecce",
    "Lizzanello",
    "Parabita",
    "Sannicola",
    "Aradeo",
    "Otranto",
    "Collepasso",
    "Campi Salentina",
    "Calimera",
    "Tiggiano",
    "Galatone",
    "Giurdignano",
    "Poggiardo",
    "Muro Leccese",
    "Supersano",
    "Cavallino",
    "Lecce",
    "Sanarica",
    "Zollino",
    "Melendugno",
    "Alezio",
    "San Donato di Lecce",
    "Gallipoli",
    "Cannole",
    "Uggiano la Chiesa",
    "Gagliano del Capo",
    "Palmariggi",
    "Melissano",
    "Nociglia"
  ],
  "Barletta-Andria-Trani": [
    "Canosa di Puglia",
    "Trani",
    "Andria",
    "Spinazzola",
    "Trinitapoli",
    "Barletta",
    "Margherita di Savoia",
    "Minervino Murge",
    "San Ferdinando di Puglia",
    "Bisceglie"
  ]
}, Um = {
  Potenza: [
    "San Severino Lucano",
    "Ruvo del Monte",
    "Lagonegro",
    "Calvera",
    "Carbone",
    "Satriano di Lucania",
    "Montemilone",
    "Rivello",
    "Moliterno",
    "Balvano",
    "Fardella",
    "Francavilla in Sinni",
    "Castelmezzano",
    "Tolve",
    "Chiaromonte",
    "Cersosimo",
    "Tramutola",
    "Corleto Perticara",
    "Lavello",
    "Brienza",
    "Venosa",
    "Banzi",
    "Calvello",
    "Savoia di Lucania",
    "Teana",
    "Pietrapertosa",
    "Montemurro",
    "Castelluccio Inferiore",
    "Avigliano",
    "Castelluccio Superiore",
    "Ruoti",
    "Genzano di Lucania",
    "San Martino d'Agri",
    "Potenza",
    "Episcopia",
    "Castelgrande",
    "Vaglio Basilicata",
    "Viggianello",
    "Anzi",
    "Maschito",
    "Baragiano",
    "Castelsaraceno",
    "Rotonda",
    "Sasso di Castalda",
    "Albano di Lucania",
    "Viggiano",
    "San Paolo Albanese",
    "Nemoli",
    "Rapolla",
    "Paterno",
    "San Costantino Albanese",
    "Pietragalla",
    "Melfi",
    "Sant'Angelo Le Fratte",
    "Castronuovo di Sant'Andrea",
    "Acerenza",
    "Campomaggiore",
    "Vietri di Potenza",
    "Trecchina",
    "Picerno",
    "Rapone",
    "Armento",
    "Gallicchio",
    "Pescopagano",
    "San Chirico Raparo",
    "Roccanova",
    "Maratea",
    "Missanello",
    "San Chirico Nuovo",
    "Spinoso",
    "Ripacandida",
    "Sarconi",
    "Tito",
    "Rionero in Vulture",
    "Bella",
    "Latronico",
    "Palazzo San Gervasio",
    "Noepoli",
    "Trivigno",
    "Barile",
    "Ginestra",
    "Sant'Arcangelo",
    "Atella",
    "Filiano",
    "Muro Lucano",
    "Marsico Nuovo",
    "Oppido Lucano",
    "San Fele",
    "Guardia Perticara",
    "Brindisi Montagna",
    "Lauria",
    "Cancellara",
    "Forenza",
    "Laurenzana",
    "Grumento Nova",
    "Abriola",
    "Terranova di Pollino",
    "Pignola",
    "Senise",
    "Marsicovetere"
  ],
  Matera: [
    "Calciano",
    "Montescaglioso",
    "Montalbano Jonico",
    "Colobraro",
    "Pisticci",
    "Oliveto Lucano",
    "Accettura",
    "Garaguso",
    "Matera",
    "Grottole",
    "Irsina",
    "Tricarico",
    "San Giorgio Lucano",
    "Craco",
    "Pomarico",
    "Gorgoglione",
    "San Mauro Forte",
    "Nova Siri",
    "Miglionico",
    "Bernalda",
    "Ferrandina",
    "Salandra",
    "Tursi",
    "Cirigliano",
    "Policoro",
    "Valsinni",
    "Stigliano",
    "Aliano",
    "Rotondella",
    "Grassano",
    "Scanzano Jonico"
  ]
}, Xm = {
  Cosenza: [
    "Fuscaldo",
    "Amendolara",
    "Santa Domenica Talao",
    "Nocara",
    "Acri",
    "Mormanno",
    "Bisignano",
    "Carolei",
    "Altilia",
    "Firmo",
    "San Fili",
    "Rota Greca",
    "Santa Maria del Cedro",
    "Lago",
    "Castrolibero",
    "Aieta",
    "Plataci",
    "Cetraro",
    "San Giorgio Albanese",
    "Lattarico",
    "Mendicino",
    "Pietrapaola",
    "Marano Principato",
    "Panettieri",
    "Bonifati",
    "Bocchigliero",
    "Rocca Imperiale",
    "Santo Stefano di Rogliano",
    "Roseto Capo Spulico",
    "Calopezzati",
    "Casali del Manco",
    "Paola",
    "Grimaldi",
    "Rende",
    "Cellara",
    "Campana",
    "Parenti",
    "Paterno Calabro",
    "Sangineto",
    "Cerisano",
    "Santa Caterina Albanese",
    "Falconara Albanese",
    "Lappano",
    "Caloveto",
    "Malvito",
    "Frascineto",
    "Oriolo",
    "San Lorenzo Bellizzi",
    "Belvedere Marittimo",
    "Scalea",
    "Amantea",
    "Paludi",
    "Villapiana",
    "Scigliano",
    "San Marco Argentano",
    "San Sosti",
    "Longobucco",
    "Carpanzano",
    "Pietrafitta",
    "Cropalati",
    "Alessandria del Carretto",
    "Zumpano",
    "San Cosmo Albanese",
    "Castiglione Cosentino",
    "San Donato di Ninea",
    "Civita",
    "Cerchiara di Calabria",
    "Altomonte",
    "Mandatoriccio",
    "Canna",
    "Vaccarizzo Albanese",
    "Fiumefreddo Bruzio",
    "Fagnano Castello",
    "Sant'Agata di Esaro",
    "Terravecchia",
    "Tortora",
    "Mangone",
    "Marzi",
    "San Pietro in Amantea",
    "San Vincenzo La Costa",
    "Verbicaro",
    "Trebisacce",
    "Celico",
    "Praia a Mare",
    "Belmonte Calabro",
    "Malito",
    "Castroregio",
    "Cervicati",
    "Torano Castello",
    "Grisolia",
    "Morano Calabro",
    "Bianchi",
    "Scala Coeli",
    "Montegiordano",
    "Aiello Calabro",
    "Albidona",
    "Domanico",
    "San Basile",
    "Rovito",
    "Luzzi",
    "Guardia Piemontese",
    "San Demetrio Corone",
    "Aprigliano",
    "Cassano all'Ionio",
    "Acquappesa",
    "Buonvicino",
    "San Benedetto Ullano",
    "Crosia",
    "San Nicola Arcella",
    "San Martino di Finita",
    "Roggiano Gravina",
    "Laino Borgo",
    "Cosenza",
    "Serra d'Aiello",
    "Figline Vegliaturo",
    "Pedivigliano",
    "Francavilla Marittima",
    "San Lucido",
    "Maierà",
    "Longobardi",
    "Cleto",
    "Castrovillari",
    "Lungro",
    "San Pietro in Guarano",
    "Terranova da Sibari",
    "Montalto Uffugo",
    "Santa Sofia d'Epiro",
    "Diamante",
    "Orsomarso",
    "Marano Marchesato",
    "Cerzeto",
    "Laino Castello",
    "Corigliano-Rossano",
    "Cariati",
    "Mongrassano",
    "Piane Crati",
    "Spezzano Albanese",
    "Rose",
    "Mottafollone",
    "Dipignano",
    "Tarsia",
    "Saracena",
    "Belsito",
    "Papasidero",
    "Spezzano della Sila",
    "San Giovanni in Fiore",
    "Rogliano",
    "Acquaformosa",
    "Colosimi",
    "San Lorenzo del Vallo"
  ],
  Catanzaro: [
    "Settingiano",
    "Pianopoli",
    "Stalettì",
    "Tiriolo",
    "Cenadi",
    "Marcellinara",
    "Amato",
    "Curinga",
    "San Pietro a Maida",
    "Badolato",
    "Girifalco",
    "Fossato Serralta",
    "Miglierina",
    "Belcastro",
    "Falerna",
    "Petronà",
    "Gagliato",
    "Carlopoli",
    "Marcedusa",
    "Martirano Lombardo",
    "Platania",
    "Gizzeria",
    "Soverato",
    "Cardinale",
    "Davoli",
    "Gasperina",
    "Cicala",
    "Soveria Mannelli",
    "Santa Caterina dello Ionio",
    "Motta Santa Lucia",
    "Feroleto Antico",
    "Petrizzi",
    "Cortale",
    "Montauro",
    "Argusto",
    "Centrache",
    "Chiaravalle Centrale",
    "Taverna",
    "Montepaone",
    "Caraffa di Catanzaro",
    "Amaroni",
    "Catanzaro",
    "Soveria Simeri",
    "Sersale",
    "Magisano",
    "Sant'Andrea Apostolo dello Ionio",
    "San Vito sullo Ionio",
    "San Mango d'Aquino",
    "Satriano",
    "Albi",
    "Jacurso",
    "Simeri Crichi",
    "Conflenti",
    "Botricello",
    "Sellia Marina",
    "Cerva",
    "Borgia",
    "San Pietro Apostolo",
    "Nocera Terinese",
    "Palermiti",
    "Maida",
    "Vallefiorita",
    "Pentone",
    "Lamezia Terme",
    "Isca sullo Ionio",
    "Torre di Ruggiero",
    "Cropani",
    "Decollatura",
    "Gimigliano",
    "Martirano",
    "San Sostene",
    "Olivadi",
    "Squillace",
    "San Floro",
    "Sorbo San Basile",
    "Serrastretta",
    "Andali",
    "Guardavalle",
    "Zagarise",
    "Sellia"
  ],
  "Reggio Calabria": [
    "Campo Calabro",
    "Candidoni",
    "San Giorgio Morgeto",
    "Placanica",
    "Sant'Alessio in Aspromonte",
    "Laureana di Borrello",
    "Caulonia",
    "Ardore",
    "Grotteria",
    "Palizzi",
    "Condofuri",
    "Pazzano",
    "Marina di Gioiosa Ionica",
    "Motta San Giovanni",
    "Sant'Agata del Bianco",
    "Gioiosa Ionica",
    "Varapodio",
    "Riace",
    "Sant'Eufemia d'Aspromonte",
    "Locri",
    "Laganadi",
    "San Giovanni di Gerace",
    "Caraffa del Bianco",
    "Canolo",
    "Roccaforte del Greco",
    "Mammola",
    "Bianco",
    "Ferruzzano",
    "Martone",
    "Scido",
    "Cinquefrondi",
    "Terranova Sappo Minulio",
    "Bivongi",
    "Santa Cristina d'Aspromonte",
    "Seminara",
    "Sinopoli",
    "Cosoleto",
    "Giffone",
    "Rosarno",
    "Molochio",
    "Gioia Tauro",
    "Maropati",
    "Monasterace",
    "Benestare",
    "Africo",
    "Samo",
    "Melicuccà",
    "Bova",
    "Cardeto",
    "San Procopio",
    "Stignano",
    "Bagnara Calabra",
    "Cittanova",
    "San Lorenzo",
    "Brancaleone",
    "Roghudi",
    "Roccella Ionica",
    "Polistena",
    "Oppido Mamertina",
    "Galatro",
    "Siderno",
    "Scilla",
    "San Luca",
    "San Roberto",
    "San Pietro di Caridà",
    "Careri",
    "Sant'Ilario dello Ionio",
    "Rizziconi",
    "Camini",
    "Melicucco",
    "Portigliola",
    "Bovalino",
    "Delianuova",
    "Ciminà",
    "Gerace",
    "Santo Stefano in Aspromonte",
    "Staiti",
    "Taurianova",
    "Fiumara",
    "Platì",
    "Palmi",
    "Antonimina",
    "Bagaladi",
    "Bova Marina",
    "Montebello Jonico",
    "Calanna",
    "Bruzzano Zeffirio",
    "Melito di Porto Salvo",
    "Serrata",
    "Agnana Calabra",
    "San Ferdinando",
    "Stilo",
    "Feroleto della Chiesa",
    "Reggio di Calabria",
    "Casignana",
    "Anoia",
    "Villa San Giovanni"
  ],
  Crotone: [
    "Roccabernarda",
    "Verzino",
    "Scandale",
    "Cirò",
    "Isola di Capo Rizzuto",
    "Savelli",
    "Castelsilano",
    "Strongoli",
    "Rocca di Neto",
    "Cirò Marina",
    "Cutro",
    "San Nicola dell'Alto",
    "Cerenzia",
    "Carfizzi",
    "Belvedere di Spinello",
    "San Mauro Marchesato",
    "Crucoli",
    "Umbriatico",
    "Mesoraca",
    "Santa Severina",
    "Crotone",
    "Pallagorio",
    "Petilia Policastro",
    "Casabona",
    "Caccuri",
    "Melissa",
    "Cotronei"
  ],
  "Vibo Valentia": [
    "Filandari",
    "Pizzo",
    "Ricadi",
    "Joppolo",
    "Vallelonga",
    "Nardodipace",
    "Rombiolo",
    "Brognaturo",
    "Spadola",
    "Maierato",
    "Simbario",
    "Fabrizia",
    "Sorianello",
    "Zungri",
    "Jonadi",
    "Soriano Calabro",
    "Spilinga",
    "Tropea",
    "San Calogero",
    "Vazzano",
    "Drapia",
    "Gerocarne",
    "Briatico",
    "Cessaniti",
    "Zaccanopoli",
    "Limbadi",
    "Dasà",
    "Parghelia",
    "Mileto",
    "Francica",
    "Dinami",
    "Capistrano",
    "Arena",
    "Sant'Onofrio",
    "Pizzoni",
    "Nicotera",
    "Polia",
    "Francavilla Angitola",
    "Acquaro",
    "Vibo Valentia",
    "Stefanaconi",
    "Zambrone",
    "San Gregorio d'Ippona",
    "San Costantino Calabro",
    "Filadelfia",
    "Monterosso Calabro",
    "Serra San Bruno",
    "San Nicola da Crissa",
    "Mongiana",
    "Filogaso"
  ]
}, Ym = {
  Trapani: [
    "Alcamo",
    "Buseto Palizzolo",
    "Paceco",
    "Salaparuta",
    "Castelvetrano",
    "Santa Ninfa",
    "Custonaci",
    "Poggioreale",
    "San Vito Lo Capo",
    "Petrosino",
    "Trapani",
    "Vita",
    "Salemi",
    "Mazara del Vallo",
    "Pantelleria",
    "Castellammare del Golfo",
    "Marsala",
    "Favignana",
    "Misiliscemi",
    "Campobello di Mazara",
    "Erice",
    "Valderice",
    "Gibellina",
    "Partanna",
    "Calatafimi-Segesta"
  ],
  Palermo: [
    "Montemaggiore Belsito",
    "Lercara Friddi",
    "Carini",
    "San Giuseppe Jato",
    "Termini Imerese",
    "Campofelice di Roccella",
    "Vicari",
    "Palazzo Adriano",
    "Caltavuturo",
    "Alia",
    "Bompietro",
    "Prizzi",
    "Isnello",
    "Campofiorito",
    "Chiusa Sclafani",
    "Gratteri",
    "Balestrate",
    "Campofelice di Fitalia",
    "Altavilla Milicia",
    "Belmonte Mezzagno",
    "Borgetto",
    "Pollina",
    "Santa Flavia",
    "Alimena",
    "Cefalà Diana",
    "Palermo",
    "Torretta",
    "Casteldaccia",
    "Sciara",
    "Roccapalumba",
    "Villabate",
    "Baucina",
    "San Mauro Castelverde",
    "Trabia",
    "Partinico",
    "Cinisi",
    "San Cipirello",
    "Santa Cristina Gela",
    "Ficarazzi",
    "Caccamo",
    "Castronovo di Sicilia",
    "Cerda",
    "Valledolmo",
    "Camporeale",
    "Bisacquino",
    "Cefalù",
    "Capaci",
    "Corleone",
    "Villafrati",
    "Castellana Sicula",
    "Roccamena",
    "Terrasini",
    "Isola delle Femmine",
    "Misilmeri",
    "Giuliana",
    "Bolognetta",
    "Piana degli Albanesi",
    "Gangi",
    "Trappeto",
    "Sclafani Bagni",
    "Bagheria",
    "Petralia Sottana",
    "Godrano",
    "Geraci Siculo",
    "Castelbuono",
    "Ciminna",
    "Polizzi Generosa",
    "Blufi",
    "Lascari",
    "Giardinello",
    "Ustica",
    "Ventimiglia di Sicilia",
    "Collesano",
    "Mezzojuso",
    "Contessa Entellina",
    "Marineo",
    "Scillato",
    "Petralia Soprana",
    "Monreale",
    "Montelepre",
    "Altofonte",
    "Aliminusa"
  ],
  Messina: [
    "Floresta",
    "Alì",
    "Santa Domenica Vittoria",
    "San Salvatore di Fitalia",
    "Torrenova",
    "Valdina",
    "Tusa",
    "Messina",
    "Castel di Lucio",
    "Malvagna",
    "Barcellona Pozzo di Gotto",
    "Caronia",
    "Itala",
    "San Marco d'Alunzio",
    "Motta Camastra",
    "Saponara",
    "Pagliara",
    "Gaggi",
    "Piraino",
    "San Filippo del Mela",
    "Rodì Milici",
    "Mazzarrà Sant'Andrea",
    "Rometta",
    "Scaletta Zanclea",
    "Santa Teresa di Riva",
    "Roccafiorita",
    "Sant'Alessio Siculo",
    "Naso",
    "Capizzi",
    "Militello Rosmarino",
    "Villafranca Tirrena",
    "Roccella Valdemone",
    "Sant'Angelo di Brolo",
    "Venetico",
    "Torregrotta",
    "Casalvecchio Siculo",
    "Merì",
    "Furci Siculo",
    "Gallodoro",
    "Capri Leone",
    "Montagnareale",
    "Francavilla di Sicilia",
    "Mistretta",
    "Furnari",
    "Santa Marina Salina",
    "Falcone",
    "Patti",
    "Librizzi",
    "Tortorici",
    "Montalbano Elicona",
    "Roccavaldina",
    "Antillo",
    "Castell'Umberto",
    "Ficarra",
    "Novara di Sicilia",
    "San Piero Patti",
    "Raccuja",
    "Motta d'Affermo",
    "Mandanici",
    "Nizza di Sicilia",
    "Ucria",
    "Savoca",
    "Condrò",
    "Capo d'Orlando",
    "San Fratello",
    "Forza d'Agrò",
    "Gualtieri Sicaminò",
    "Oliveri",
    "Spadafora",
    "San Pier Niceto",
    "Sinagra",
    "Gioiosa Marea",
    "Fiumedinisi",
    "Alcara li Fusi",
    "Taormina",
    "Monforte San Giorgio",
    "Giardini-Naxos",
    "Leni",
    "Basicò",
    "Sant'Agata di Militello",
    "Terme Vigliatore",
    "Castroreale",
    "Santo Stefano di Camastra",
    "Graniti",
    "Lipari",
    "Milazzo",
    "San Teodoro",
    "Acquedolci",
    "Santa Lucia del Mela",
    "Galati Mamertino",
    "Reitano",
    "Frazzanò",
    "Alì Terme",
    "Tripi",
    "Roccalumera",
    "Moio Alcantara",
    "Cesarò",
    "Limina",
    "Castelmola",
    "Longi",
    "Malfa",
    "Fondachelli-Fantina",
    "Letojanni",
    "Mongiuffi Melia",
    "Pace del Mela",
    "Brolo",
    "Mirto",
    "Pettineo"
  ],
  Agrigento: [
    "Licata",
    "Ribera",
    "Alessandria della Rocca",
    "Santa Elisabetta",
    "Grotte",
    "Montallegro",
    "Menfi",
    "Montevago",
    "Calamonaci",
    "San Biagio Platani",
    "Castrofilippo",
    "Santa Margherita di Belice",
    "Ravanusa",
    "Cianciana",
    "Lucca Sicula",
    "Sant'Angelo Muxaro",
    "Realmonte",
    "Porto Empedocle",
    "Lampedusa e Linosa",
    "Villafranca Sicula",
    "Canicattì",
    "Naro",
    "San Giovanni Gemini",
    "Santo Stefano Quisquina",
    "Cammarata",
    "Comitini",
    "Raffadali",
    "Burgio",
    "Agrigento",
    "Sciacca",
    "Siculiana",
    "Bivona",
    "Joppolo Giancaxio",
    "Racalmuto",
    "Camastra",
    "Sambuca di Sicilia",
    "Campobello di Licata",
    "Caltabellotta",
    "Casteltermini",
    "Aragona",
    "Cattolica Eraclea",
    "Favara",
    "Palma di Montechiaro"
  ],
  Caltanissetta: [
    "Sommatino",
    "Delia",
    "San Cataldo",
    "Marianopoli",
    "Mazzarino",
    "Acquaviva Platani",
    "Gela",
    "Mussomeli",
    "Butera",
    "Villalba",
    "Vallelunga Pratameno",
    "Bompensiere",
    "Resuttano",
    "Serradifalco",
    "Caltanissetta",
    "Campofranco",
    "Niscemi",
    "Montedoro",
    "Milena",
    "Sutera",
    "Santa Caterina Villarmosa",
    "Riesi"
  ],
  Enna: [
    "Aidone",
    "Valguarnera Caropepe",
    "Agira",
    "Pietraperzia",
    "Gagliano Castelferrato",
    "Leonforte",
    "Catenanuova",
    "Villarosa",
    "Regalbuto",
    "Barrafranca",
    "Centuripe",
    "Troina",
    "Enna",
    "Sperlinga",
    "Cerami",
    "Assoro",
    "Nicosia",
    "Piazza Armerina",
    "Nissoria",
    "Calascibetta"
  ],
  Catania: [
    "Aci Sant'Antonio",
    "Tremestieri Etneo",
    "Fiumefreddo di Sicilia",
    "Castiglione di Sicilia",
    "Gravina di Catania",
    "Bronte",
    "Camporotondo Etneo",
    "San Pietro Clarenza",
    "Scordia",
    "Mineo",
    "Caltagirone",
    "Giarre",
    "Mazzarrone",
    "Palagonia",
    "Santa Maria di Licodia",
    "Raddusa",
    "Riposto",
    "Milo",
    "Viagrande",
    "Licodia Eubea",
    "Calatabiano",
    "Nicolosi",
    "Grammichele",
    "Mascali",
    "Belpasso",
    "Castel di Iudica",
    "Aci Catena",
    "Catania",
    "Biancavilla",
    "Ragalna",
    "Piedimonte Etneo",
    "Trecastagni",
    "Sant'Agata li Battiati",
    "San Gregorio di Catania",
    "San Cono",
    "Aci Bonaccorsi",
    "Pedara",
    "Randazzo",
    "Paternò",
    "San Michele di Ganzaria",
    "Motta Sant'Anastasia",
    "Zafferana Etnea",
    "Vizzini",
    "Acireale",
    "San Giovanni la Punta",
    "Linguaglossa",
    "Misterbianco",
    "Ramacca",
    "Valverde",
    "Sant'Alfio",
    "Santa Venerina",
    "Mascalucia",
    "Militello in Val di Catania",
    "Aci Castello",
    "Maletto",
    "Maniace",
    "Mirabella Imbaccari",
    "Adrano"
  ],
  Ragusa: [
    "Modica",
    "Ispica",
    "Acate",
    "Ragusa",
    "Comiso",
    "Vittoria",
    "Giarratana",
    "Chiaramonte Gulfi",
    "Monterosso Almo",
    "Pozzallo",
    "Santa Croce Camerina",
    "Scicli"
  ],
  Siracusa: [
    "Augusta",
    "Floridia",
    "Melilli",
    "Buccheri",
    "Siracusa",
    "Cassaro",
    "Canicattini Bagni",
    "Rosolini",
    "Lentini",
    "Buscemi",
    "Carlentini",
    "Sortino",
    "Ferla",
    "Palazzolo Acreide",
    "Avola",
    "Francofonte",
    "Priolo Gargallo",
    "Portopalo di Capo Passero",
    "Solarino",
    "Pachino",
    "Noto"
  ]
}, jm = {
  Sassari: [
    "Bonorva",
    "Bultei",
    "Mara",
    "Ozieri",
    "Illorai",
    "Chiaramonti",
    "Ploaghe",
    "Torralba",
    "Putifigari",
    "Stintino",
    "Codrongianos",
    "Sorso",
    "Padria",
    "Palau",
    "Nule",
    "Luras",
    "Muros",
    "Anela",
    "Bottidda",
    "Uri",
    "Ittiri",
    "Borutta",
    "Mores",
    "Pozzomaggiore",
    "Nulvi",
    "Alà dei Sardi",
    "Banari",
    "Usini",
    "Laerru",
    "Bonnanaro",
    "Villanova Monteleone",
    "Budoni",
    "Tula",
    "Florinas",
    "Bulzi",
    "Romana",
    "Ossi",
    "Tergu",
    "Cargeghe",
    "Badesi",
    "Benetutti",
    "Tissi",
    "Aggius",
    "Luogosanto",
    "Sassari",
    "Esporlatu",
    "Cossoine",
    "Padru",
    "Thiesi",
    "Semestene",
    "Monteleone Rocca Doria",
    "Bortigiadas",
    "La Maddalena",
    "Arzachena",
    "Santa Teresa Gallura",
    "Martis",
    "Pattada",
    "Loiri Porto San Paolo",
    "Erula",
    "Burgos",
    "Bono",
    "Osilo",
    "Tempio Pausania",
    "Santa Maria Coghinas",
    "Aglientu",
    "Castelsardo",
    "Cheremule",
    "Telti",
    "Siligo",
    "Nughedu San Nicolò",
    "Giave",
    "Viddalba",
    "Trinità d'Agultu e Vignola",
    "San Teodoro",
    "Sedini",
    "Valledoria",
    "Olbia",
    "Porto Torres",
    "Alghero",
    "Bessude",
    "Calangianus",
    "Ittireddu",
    "Berchidda",
    "Golfo Aranci",
    "Sant'Antonio di Gallura",
    "Buddusò",
    "Ardara",
    "Sennori",
    "Monti",
    "Olmedo",
    "Oschiri",
    "Perfugas"
  ],
  Nuoro: [
    "Dualchi",
    "Meana Sardo",
    "Loculi",
    "Tiana",
    "Atzara",
    "Lodine",
    "Loceri",
    "Orune",
    "Orotelli",
    "Bitti",
    "Girasole",
    "Macomer",
    "Oniferi",
    "Lotzorai",
    "Gadoni",
    "Ovodda",
    "Tortolì",
    "Lula",
    "Galtellì",
    "Olzai",
    "Bortigali",
    "Onifai",
    "Lei",
    "Aritzo",
    "Desulo",
    "Perdasdefogu",
    "Baunei",
    "Gavoi",
    "Lanusei",
    "Belvì",
    "Triei",
    "Jerzu",
    "Posada",
    "Birori",
    "Lodè",
    "Teti",
    "Orani",
    "Silanus",
    "Ollolai",
    "Orgosolo",
    "Sindia",
    "Talana",
    "Noragugume",
    "Irgoli",
    "Austis",
    "Borore",
    "Gairo",
    "Nuoro",
    "Dorgali",
    "Cardedu",
    "Tonara",
    "Ilbono",
    "Sarule",
    "Urzulei",
    "Tertenia",
    "Osini",
    "Ussassai",
    "Mamoiada",
    "Orosei",
    "Sorgono",
    "Torpè",
    "Villagrande Strisaili",
    "Elini",
    "Ulassai",
    "Ottana",
    "Oliena",
    "Bari Sardo",
    "Arzana",
    "Onanì",
    "Siniscola",
    "Ortueri",
    "Osidda",
    "Fonni",
    "Bolotana"
  ],
  Cagliari: [
    "Capoterra",
    "Sestu",
    "Maracalagonis",
    "Villa San Pietro",
    "Quartucciu",
    "Settimo San Pietro",
    "Decimomannu",
    "Selargius",
    "Elmas",
    "Assemini",
    "Sinnai",
    "Uta",
    "Monserrato",
    "Cagliari",
    "Quartu Sant'Elena",
    "Sarroch",
    "Pula"
  ],
  Oristano: [
    "Sedilo",
    "Morgongiori",
    "Marrubiu",
    "Simaxis",
    "Palmas Arborea",
    "Simala",
    "Uras",
    "Sennariolo",
    "Pompu",
    "Tinnura",
    "Abbasanta",
    "Albagiara",
    "Soddì",
    "Siris",
    "Milis",
    "Siamaggiore",
    "Tramatza",
    "Senis",
    "Cabras",
    "Gonnostramatza",
    "Bosa",
    "Seneghe",
    "Assolo",
    "Bauladu",
    "Sorradile",
    "Ghilarza",
    "Nughedu Santa Vittoria",
    "Boroneddu",
    "Asuni",
    "Santu Lussurgiu",
    "Flussio",
    "Mogoro",
    "Ulà Tirso",
    "Ardauli",
    "San Nicolò d'Arcidano",
    "Montresta",
    "Ruinas",
    "Narbolia",
    "Zeddiani",
    "Tadasuni",
    "Ales",
    "Scano di Montiferro",
    "Laconi",
    "San Vero Milis",
    "Neoneli",
    "Norbello",
    "Ollastra",
    "Gonnoscodina",
    "Fordongianus",
    "Magomadas",
    "Nureci",
    "Terralba",
    "Paulilatino",
    "Solarussa",
    "Oristano",
    "Nurachi",
    "Suni",
    "Zerfaliu",
    "Baratili San Pietro",
    "Bonarcado",
    "Allai",
    "Usellus",
    "Masullas",
    "Villa Sant'Antonio",
    "Baradili",
    "Busachi",
    "Curcuris",
    "Villanova Truschedu",
    "Sini",
    "Villaurbana",
    "Baressa",
    "Mogorella",
    "Tresnuraghes",
    "Bidonì",
    "Aidomaggiore",
    "Gonnosnò",
    "Siapiccia",
    "Modolo",
    "Pau",
    "Riola Sardo",
    "Arborea",
    "Cuglieri",
    "Villa Verde",
    "Samugheo",
    "Santa Giusta",
    "Siamanna",
    "Sagama"
  ],
  "Sud Sardegna": [
    "Ussaramanna",
    "Escolca",
    "Donori",
    "Isili",
    "Arbus",
    "Giba",
    "Segariu",
    "Guamaggiore",
    "Carloforte",
    "Perdaxius",
    "San Sperate",
    "Masainas",
    "Nurri",
    "Muravera",
    "Iglesias",
    "Villaspeciosa",
    "Burcei",
    "Pauli Arbarei",
    "Nuraminis",
    "San Basilio",
    "Genuri",
    "Villanova Tulo",
    "Nuragus",
    "Serrenti",
    "Vallermosa",
    "Senorbì",
    "Barumini",
    "Monastir",
    "Santadi",
    "Domus de Maria",
    "Tratalias",
    "Nurallao",
    "Ballao",
    "Siddi",
    "Siurgus Donigala",
    "Sant'Andrea Frius",
    "Guspini",
    "Guasila",
    "Fluminimaggiore",
    "San Vito",
    "Silius",
    "Soleminis",
    "Villamassargia",
    "Escalaplano",
    "Samatzai",
    "Gonnesa",
    "San Nicolò Gerrei",
    "Selegas",
    "Gergei",
    "Villaperuccio",
    "Sardara",
    "Villamar",
    "Turri",
    "Las Plassas",
    "Teulada",
    "Nuxis",
    "Gesturi",
    "Villacidro",
    "Setzu",
    "Domusnovas",
    "Seui",
    "Portoscuso",
    "Sanluri",
    "Genoni",
    "Goni",
    "Villanovaforru",
    "Musei",
    "Ortacesus",
    "Seulo",
    "Tuili",
    "Serri",
    "Serdiana",
    "Piscinas",
    "Gonnosfanadiga",
    "Siliqua",
    "Villasalto",
    "Calasetta",
    "Barrali",
    "Decimoputzu",
    "Sant'Anna Arresi",
    "Collinas",
    "Narcao",
    "Serramanna",
    "Esterzili",
    "Sant'Antioco",
    "Mandas",
    "Buggerru",
    "Villanovafranca",
    "Villasor",
    "Carbonia",
    "Gesico",
    "Villasimius",
    "Sadali",
    "Samassi",
    "Pabillonis",
    "Ussana",
    "San Gavino Monreale",
    "Castiadas",
    "San Giovanni Suergiu",
    "Furtei",
    "Lunamatrona",
    "Villaputzu",
    "Dolianova",
    "Armungia",
    "Orroli",
    "Suelli",
    "Pimentel"
  ]
}, on = {
  Piemonte: zm,
  "Valle d'Aosta": {
    Aosta: [
      "Pollein",
      "Bard",
      "Saint-Nicolas",
      "Cogne",
      "Gignod",
      "Saint-Christophe",
      "Challand-Saint-Victor",
      "Saint-Rhémy-en-Bosses",
      "Valgrisenche",
      "Sarre",
      "Valsavarenche",
      "Gressan",
      "Allein",
      "Torgnon",
      "Nus",
      "Bionaz",
      "Pont-Saint-Martin",
      "Introd",
      "Villeneuve",
      "Valtournenche",
      "Saint-Denis",
      "Pontey",
      "Arvier",
      "Jovençan",
      "Fontainemore",
      "La Salle",
      "Emarèse",
      "Saint-Pierre",
      "Aosta",
      "Montjovet",
      "Pontboset",
      "Brissogne",
      "Verrès",
      "Chamois",
      "Donnas",
      "Champdepraz",
      "Gressoney-La-Trinité",
      "Rhêmes-Saint-Georges",
      "Gaby",
      "Saint-Vincent",
      "Champorcher",
      "Châtillon",
      "Avise",
      "Charvensod",
      "Fénis",
      "La Magdeleine",
      "Saint-Marcel",
      "Aymavilles",
      "Ollomont",
      "Gressoney-Saint-Jean",
      "Chambave",
      "Brusson",
      "Doues",
      "Rhêmes-Notre-Dame",
      "Challand-Saint-Anselme",
      "La Thuile",
      "Morgex",
      "Issogne",
      "Antey-Saint-André",
      "Perloz",
      "Ayas",
      "Roisan",
      "Valpelline",
      "Pré-Saint-Didier",
      "Quart",
      "Lillianes",
      "Oyace",
      "Verrayes",
      "Saint-Oyen",
      "Courmayeur",
      "Etroubles",
      "Arnad",
      "Hône",
      "Issime"
    ]
  },
  Liguria: Lm,
  Lombardia: Vm,
  "Trentino-Alto Adige": {
    Bolzano: [
      "San Genesio Atesino",
      "Scena",
      "Varna",
      "Bronzolo",
      "Castelrotto",
      "Martello",
      "Proves",
      "Campo di Trens",
      "Prato allo Stelvio",
      "Racines",
      "Terlano",
      "Brunico",
      "Cortaccia sulla strada del vino",
      "Parcines",
      "Perca",
      "Cermes",
      "Ponte Gardena",
      "Montagna sulla Strada del Vino",
      "Senales",
      "Bressanone",
      "Nova Ponente",
      "Chienes",
      "Merano",
      "Trodena nel parco naturale",
      "Nova Levante",
      "Gais",
      "Caldaro sulla strada del vino",
      "Naz-Sciaves",
      "Marebbe",
      "Selva dei Molini",
      "Sluderno",
      "Ora",
      "Laion",
      "Aldino",
      "San Lorenzo di Sebato",
      "Magrè sulla strada del vino",
      "Meltina",
      "Salorno sulla strada del vino",
      "Plaus",
      "La Valle",
      "Villabassa",
      "Avelengo",
      "Senale-San Felice",
      "Malles Venosta",
      "Postal",
      "Bolzano",
      "Braies",
      "Marlengo",
      "Rasun-Anterselva",
      "Lana",
      "Vandoies",
      "San Pancrazio",
      "Silandro",
      "Sesto",
      "Villandro",
      "San Martino in Passiria",
      "Rio di Pusteria",
      "Egna",
      "Tubre",
      "Lauregno",
      "Chiusa",
      "Vipiteno",
      "Nalles",
      "Lagundo",
      "Tirolo",
      "Funes",
      "Badia",
      "San Candido",
      "Valle Aurina",
      "Tires",
      "San Martino in Badia",
      "Sarentino",
      "Cornedo all'Isarco",
      "Laces",
      "Anterivo",
      "Gargazzone",
      "Renon",
      "Selva di Val Gardena",
      "San Leonardo in Passiria",
      "Cortina sulla strada del vino",
      "Terento",
      "Brennero",
      "Corvara in Badia",
      "Ultimo",
      "Fiè allo Sciliar",
      "Lasa",
      "Caines",
      "Velturno",
      "Luson",
      "Vadena",
      "Glorenza",
      "Stelvio",
      "Laives",
      "Valdaora",
      "Santa Cristina Valgardena",
      "Monguelfo-Tesido",
      "Barbiano",
      "Falzes",
      "Rifiano",
      "Termeno sulla strada del vino",
      "Ortisei",
      "Fortezza",
      "Curon Venosta",
      "Dobbiaco",
      "Val di Vizze",
      "Predoi",
      "Castelbello-Ciardes",
      "Moso in Passiria",
      "Campo Tures",
      "Rodengo",
      "Tesimo",
      "Verano",
      "Naturno",
      "Valle di Casies",
      "Andriano",
      "Appiano sulla strada del vino"
    ],
    Trento: [
      "Sover",
      "Sporminore",
      "Tesero",
      "Ruffrè-Mendola",
      "Lavarone",
      "Ville di Fiemme",
      "Albiano",
      "San Lorenzo Dorsino",
      "Cavizzana",
      "Terre d'Adige",
      "Peio",
      "Pieve Tesino",
      "Pellizzano",
      "Stenico",
      "Canal San Bovo",
      "Cavedine",
      "Croviana",
      "San Giovanni di Fassa",
      "Livo",
      "Trento",
      "Sella Giudicarie",
      "Valfloriana",
      "Volano",
      "Cles",
      "Avio",
      "Roverè della Luna",
      "Carzano",
      "Mezzolombardo",
      "Borgo Chiese",
      "Cavalese",
      "Caderzone Terme",
      "Mori",
      "Pieve di Bono-Prezzo",
      "Tione di Trento",
      "Campodenno",
      "Molveno",
      "Spormaggiore",
      "Calceranica al Lago",
      "Spiazzo",
      "Storo",
      "Borgo d'Anaunia",
      "Fierozzo",
      "Pomarolo",
      "Capriana",
      "Castelnuovo",
      "Castel Condino",
      "Dambel",
      "Giovo",
      "Massimeno",
      "Soraga di Fassa",
      "Aldeno",
      "Vallarsa",
      "Predaia",
      "Ossana",
      "Drena",
      "Ronchi Valsugana",
      "Tre Ville",
      "Bresimo",
      "Palù del Fersina",
      "Luserna",
      "Bocenago",
      "Caldonazzo",
      "Sanzeno",
      "Cimone",
      "Samone",
      "Vermiglio",
      "Ziano di Fiemme",
      "Moena",
      "Pinzolo",
      "Sarnonico",
      "Besenello",
      "Grigno",
      "Contà",
      "Bondone",
      "Terragnolo",
      "Torcegno",
      "Madruzzo",
      "Ledro",
      "Cembra Lisignago",
      "Bieno",
      "Porte di Rendena",
      "Fiavè",
      "Panchià",
      "Sagron Mis",
      "Terzolas",
      "Carisolo",
      "Mezzocorona",
      "Nago-Torbole",
      "Riva del Garda",
      "Primiero San Martino di Castrozza",
      "Amblar-Don",
      "Ala",
      "Borgo Valsugana",
      "Villa Lagarina",
      "Nogaredo",
      "Fornace",
      "Garniga Terme",
      "Vallelaghi",
      "Altavalle",
      "Ronzo-Chienis",
      "Malé",
      "Sfruz",
      "Tenno",
      "Trambileno",
      "Commezzadura",
      "Folgaria",
      "Ton",
      "Pelugo",
      "Levico Terme",
      "Pergine Valsugana",
      "Novaledo",
      "Ospedaletto",
      "Segonzano",
      "Ville d'Anaunia",
      "Civezzano",
      "Comano Terme",
      "Mezzano",
      "Mezzana",
      "Lavis",
      "Giustino",
      "Mazzin",
      "Telve",
      "Tenna",
      "Dro",
      "Imer",
      "Predazzo",
      "San Michele all'Adige",
      "Isera",
      "Dimaro Folgarida",
      "Castello-Molina di Fiemme",
      "Borgo Lares",
      "Arco",
      "Baselga di Pinè",
      "Calliano",
      "Castello Tesino",
      "Cis",
      "Canazei",
      "Bedollo",
      "Cavareno",
      "Denno",
      "Fai della Paganella",
      "Romeno",
      "Valdaone",
      "Rabbi",
      "Vignola-Falesina",
      "Altopiano della Vigolana",
      "Castel Ivano",
      "Brentonico",
      "Rumo",
      "Roncegno Terme",
      "Telve di Sopra",
      "Andalo",
      "Ronzone",
      "Strembo",
      "Cinte Tesino",
      "Nomi",
      "Rovereto",
      "Cavedago",
      "Lona-Lases",
      "Sant'Orsola Terme",
      "Bleggio Superiore",
      "Novella",
      "Frassilongo",
      "Campitello di Fassa",
      "Caldes",
      "Scurelle"
    ]
  },
  Veneto: Bm,
  "Friuli-Venezia Giulia": {
    Udine: [
      "Pradamano",
      "Forni di Sotto",
      "Venzone",
      "Pontebba",
      "Forni di Sopra",
      "Bagnaria Arsa",
      "Resia",
      "Povoletto",
      "Savogna",
      "Fagagna",
      "Malborghetto Valbruna",
      "Flaibano",
      "Aquileia",
      "Drenchia",
      "Chiusaforte",
      "Taipana",
      "Torreano",
      "Trivignano Udinese",
      "Pavia di Udine",
      "Precenicco",
      "Cervignano del Friuli",
      "Mereto di Tomba",
      "Marano Lagunare",
      "Trasaghis",
      "Resiutta",
      "Palazzolo dello Stella",
      "Castions di Strada",
      "Ampezzo",
      "Remanzacco",
      "San Giovanni al Natisone",
      "Visco",
      "Gonars",
      "Montenars",
      "Cavazzo Carnico",
      "Prato Carnico",
      "Buttrio",
      "San Vito di Fagagna",
      "Dogna",
      "Ronchis",
      "Ruda",
      "Grimacco",
      "Sauris",
      "Majano",
      "Bordano",
      "Santa Maria la Longa",
      "Rivignano Teor",
      "Ragogna",
      "Socchieve",
      "Moggio Udinese",
      "Arta Terme",
      "Camino al Tagliamento",
      "Dignano",
      "Sappada",
      "Pagnacco",
      "Enemonzo",
      "Rive d'Arcano",
      "Bicinicco",
      "Rigolato",
      "Muzzana del Turgnano",
      "Basiliano",
      "Amaro",
      "Corno di Rosazzo",
      "Carlino",
      "Pocenia",
      "Cercivento",
      "Campolongo Tapogliano",
      "Tarcento",
      "Manzano",
      "Tavagnacco",
      "Premariacco",
      "Udine",
      "Verzegnis",
      "Zuglio",
      "Gemona del Friuli",
      "Pulfero",
      "Reana del Rojale",
      "Buja",
      "Preone",
      "Pasian di Prato",
      "Artegna",
      "Aiello del Friuli",
      "Moruzzo",
      "Coseano",
      "Cividale del Friuli",
      "Terzo d'Aquileia",
      "Lestizza",
      "San Pietro al Natisone",
      "Bertiolo",
      "Torviscosa",
      "Moimacco",
      "Osoppo",
      "San Giorgio di Nogaro",
      "Chiopris-Viscone",
      "Faedis",
      "Paluzza",
      "Magnano in Riviera",
      "Lignano Sabbiadoro",
      "Codroipo",
      "Latisana",
      "Porpetto",
      "Tricesimo",
      "Pozzuolo del Friuli",
      "San Daniele del Friuli",
      "Lauco",
      "Attimis",
      "Talmassons",
      "Nimis",
      "Forni Avoltri",
      "Fiumicello Villa Vicentina",
      "Comeglians",
      "Ovaro",
      "Paularo",
      "Varmo",
      "Raveo",
      "Prepotto",
      "Lusevera",
      "San Leonardo",
      "San Vito al Torre",
      "Forgaria nel Friuli",
      "Sedegliano",
      "Tolmezzo",
      "Palmanova",
      "Treppo Ligosullo",
      "Ravascletto",
      "Sutrio",
      "Tarvisio",
      "Cassacco",
      "Mortegliano",
      "Martignacco",
      "Villa Santina",
      "Colloredo di Monte Albano",
      "Treppo Grande",
      "Stregna",
      "Campoformido"
    ],
    Gorizia: [
      "Mossa",
      "Staranzano",
      "Moraro",
      "Mariano del Friuli",
      "San Lorenzo Isontino",
      "Grado",
      "Capriva del Friuli",
      "San Pier d'Isonzo",
      "Farra d'Isonzo",
      "Fogliano Redipuglia",
      "Turriaco",
      "Cormons",
      "San Canzian d'Isonzo",
      "Ronchi dei Legionari",
      "Savogna d'Isonzo",
      "Romans d'Isonzo",
      "Sagrado",
      "Medea",
      "Doberdò del Lago",
      "Gradisca d'Isonzo",
      "San Floriano del Collio",
      "Gorizia",
      "Dolegna del Collio",
      "Villesse",
      "Monfalcone"
    ],
    Trieste: [
      "Muggia",
      "Monrupino",
      "Sgonico",
      "Duino Aurisina",
      "Trieste",
      "San Dorligo della Valle"
    ],
    Pordenone: [
      "Porcia",
      "Caneva",
      "Fontanafredda",
      "Aviano",
      "Cimolais",
      "Pravisdomini",
      "Meduno",
      "Brugnera",
      "Polcenigo",
      "Pordenone",
      "Zoppola",
      "Arba",
      "Clauzetto",
      "Cavasso Nuovo",
      "Pasiano di Pordenone",
      "Tramonti di Sotto",
      "Castelnovo del Friuli",
      "Spilimbergo",
      "Budoia",
      "Roveredo in Piano",
      "San Giorgio della Richinvelda",
      "Vivaro",
      "Fiume Veneto",
      "Chions",
      "San Martino al Tagliamento",
      "Barcis",
      "Pinzano al Tagliamento",
      "Azzano Decimo",
      "Cordenons",
      "Casarsa della Delizia",
      "Prata di Pordenone",
      "Vajont",
      "Valvasone Arzene",
      "Maniago",
      "Montereale Valcellina",
      "San Quirino",
      "San Vito al Tagliamento",
      "Erto e Casso",
      "Claut",
      "Morsano al Tagliamento",
      "Andreis",
      "Frisanco",
      "Sacile",
      "Tramonti di Sopra",
      "Sesto al Reghena",
      "Fanna",
      "Vito d'Asio",
      "Sequals",
      "Travesio",
      "Cordovado"
    ]
  },
  "Emilia-Romagna": {
    Piacenza: [
      "Vigolzone",
      "Cortemaggiore",
      "Rivergaro",
      "Gazzola",
      "Borgonovo Val Tidone",
      "Monticelli d'Ongina",
      "Piacenza",
      "Ponte dell'Olio",
      "Ferriere",
      "Bobbio",
      "Morfasso",
      "Ziano Piacentino",
      "Caorso",
      "Farini",
      "Pianello Val Tidone",
      "Calendasco",
      "Alseno",
      "Vernasca",
      "Agazzano",
      "Castell'Arquato",
      "Sarmato",
      "San Giorgio Piacentino",
      "Rottofreno",
      "Alta Val Tidone",
      "Castelvetro Piacentino",
      "Besenzone",
      "Castel San Giovanni",
      "Gragnano Trebbiense",
      "Travo",
      "Lugagnano Val d'Arda",
      "San Pietro in Cerro",
      "Carpaneto Piacentino",
      "Cadeo",
      "Corte Brugnatella",
      "Zerba",
      "Fiorenzuola d'Arda",
      "Podenzano",
      "Coli",
      "Bettola",
      "Pontenure",
      "Ottone",
      "Villanova sull'Arda",
      "Gropparello",
      "Piozzano",
      "Gossolengo",
      "Cerignale"
    ],
    Parma: [
      "Tornolo",
      "Bore",
      "Borgo Val di Taro",
      "Sorbolo Mezzani",
      "Fidenza",
      "Collecchio",
      "Busseto",
      "Terenzo",
      "Varano de' Melegari",
      "Bardi",
      "Pellegrino Parmense",
      "Corniglio",
      "Felino",
      "Roccabianca",
      "Montechiarugolo",
      "Compiano",
      "Fontanellato",
      "Salsomaggiore Terme",
      "Berceto",
      "San Secondo Parmense",
      "Traversetolo",
      "Fontevivo",
      "Fornovo di Taro",
      "Neviano degli Arduini",
      "Palanzano",
      "Colorno",
      "Calestano",
      "Noceto",
      "Sala Baganza",
      "Lesignano de' Bagni",
      "Langhirano",
      "Sissa Trecasali",
      "Torrile",
      "Valmozzola",
      "Albareto",
      "Medesano",
      "Bedonia",
      "Parma",
      "Monchio delle Corti",
      "Tizzano Val Parma",
      "Polesine Zibello",
      "Varsi",
      "Solignano",
      "Soragna"
    ],
    "Reggio nell'Emilia": [
      "Bagnolo in Piano",
      "Vetto",
      "Campagnola Emilia",
      "San Polo d'Enza",
      "Toano",
      "Gualtieri",
      "Canossa",
      "Scandiano",
      "Cadelbosco di Sopra",
      "Rubiera",
      "Guastalla",
      "Castelnovo di Sotto",
      "Vezzano sul Crostolo",
      "Casina",
      "Campegine",
      "Cavriago",
      "Brescello",
      "Luzzara",
      "Rolo",
      "Correggio",
      "Carpineti",
      "Gattatico",
      "Poviglio",
      "Rio Saliceto",
      "Boretto",
      "Villa Minozzo",
      "Castelnovo ne' Monti",
      "Reggio nell'Emilia",
      "Albinea",
      "Quattro Castella",
      "Novellara",
      "San Martino in Rio",
      "Bibbiano",
      "Ventasso",
      "Casalgrande",
      "Montecchio Emilia",
      "Viano",
      "Sant'Ilario d'Enza",
      "Baiso",
      "Fabbrico",
      "Reggiolo",
      "Castellarano"
    ],
    Modena: [
      "Campogalliano",
      "Montecreto",
      "Bomporto",
      "Soliera",
      "Fiorano Modenese",
      "Ravarino",
      "Lama Mocogno",
      "Frassinoro",
      "Modena",
      "San Felice sul Panaro",
      "San Prospero",
      "Medolla",
      "Sassuolo",
      "Riolunato",
      "Pavullo nel Frignano",
      "Zocca",
      "Formigine",
      "Cavezzo",
      "Nonantola",
      "Serramazzoni",
      "Mirandola",
      "Bastiglia",
      "Prignano sulla Secchia",
      "Finale Emilia",
      "Guiglia",
      "Fiumalbo",
      "Fanano",
      "Spilamberto",
      "Polinago",
      "Castelnuovo Rangone",
      "Carpi",
      "Palagano",
      "San Cesario sul Panaro",
      "San Possidonio",
      "Castelfranco Emilia",
      "Pievepelago",
      "Montese",
      "Montefiorino",
      "Novi di Modena",
      "Sestola",
      "Vignola",
      "Camposanto",
      "Concordia sulla Secchia",
      "Savignano sul Panaro",
      "Marano sul Panaro",
      "Maranello",
      "Castelvetro di Modena"
    ],
    Bologna: [
      "Casalfiumanese",
      "San Benedetto Val di Sambro",
      "San Giorgio di Piano",
      "Castiglione dei Pepoli",
      "Budrio",
      "Gaggio Montano",
      "Loiano",
      "Grizzana Morandi",
      "Medicina",
      "Ozzano dell'Emilia",
      "Pieve di Cento",
      "San Lazzaro di Savena",
      "San Pietro in Casale",
      "Zola Predosa",
      "Castel Guelfo di Bologna",
      "Castel del Rio",
      "Bentivoglio",
      "Argelato",
      "Sasso Marconi",
      "Casalecchio di Reno",
      "Camugnano",
      "Lizzano in Belvedere",
      "San Giovanni in Persiceto",
      "Castel di Casio",
      "Fontanelice",
      "Castenaso",
      "Monte San Pietro",
      "Castel d'Aiano",
      "Pianoro",
      "Galliera",
      "Malalbergo",
      "Sala Bolognese",
      "Calderara di Reno",
      "Valsamoggia",
      "Monzuno",
      "Alto Reno Terme",
      "Dozza",
      "Mordano",
      "Monterenzio",
      "Bologna",
      "Imola",
      "Vergato",
      "Castello d'Argile",
      "Castel San Pietro Terme",
      "Molinella",
      "Marzabotto",
      "Baricella",
      "Crevalcore",
      "Minerbio",
      "Anzola dell'Emilia",
      "Castel Maggiore",
      "Sant'Agata Bolognese",
      "Granarolo dell'Emilia",
      "Monghidoro",
      "Borgo Tossignano"
    ],
    Ferrara: [
      "Cento",
      "Comacchio",
      "Bondeno",
      "Riva del Po",
      "Voghiera",
      "Lagosanto",
      "Mesola",
      "Portomaggiore",
      "Ferrara",
      "Goro",
      "Masi Torello",
      "Poggio Renatico",
      "Terre del Reno",
      "Fiscaglia",
      "Jolanda di Savoia",
      "Argenta",
      "Ostellato",
      "Tresignana",
      "Copparo",
      "Codigoro",
      "Vigarano Mainarda"
    ],
    Ravenna: [
      "Bagnacavallo",
      "Massa Lombarda",
      "Conselice",
      "Ravenna",
      "Casola Valsenio",
      "Bagnara di Romagna",
      "Lugo",
      "Solarolo",
      "Castel Bolognese",
      "Cotignola",
      "Alfonsine",
      "Riolo Terme",
      "Russi",
      "Cervia",
      "Faenza",
      "Fusignano",
      "Brisighella",
      "Sant'Agata sul Santerno"
    ],
    "Forlì-Cesena": [
      "Cesenatico",
      "Modigliana",
      "Portico e San Benedetto",
      "Sarsina",
      "Roncofreddo",
      "Meldola",
      "Gatteo",
      "Castrocaro Terme e Terra del Sole",
      "Rocca San Casciano",
      "Santa Sofia",
      "Predappio",
      "Sogliano al Rubicone",
      "Longiano",
      "Verghereto",
      "Borghi",
      "Civitella di Romagna",
      "Forlì",
      "Bagno di Romagna",
      "Galeata",
      "Montiano",
      "Tredozio",
      "Savignano sul Rubicone",
      "San Mauro Pascoli",
      "Forlimpopoli",
      "Premilcuore",
      "Bertinoro",
      "Gambettola",
      "Dovadola",
      "Cesena",
      "Mercato Saraceno"
    ],
    Rimini: [
      "Montefiore Conca",
      "Saludecio",
      "Mondaino",
      "Pennabilli",
      "Montegridolfo",
      "Poggio Torriana",
      "Sassofeltrio",
      "Bellaria-Igea Marina",
      "Verucchio",
      "Misano Adriatico",
      "Casteldelci",
      "Gemmano",
      "Cattolica",
      "San Leo",
      "Sant'Agata Feltria",
      "Montecopiolo",
      "Montescudo-Monte Colombo",
      "Talamello",
      "Riccione",
      "San Clemente",
      "Santarcangelo di Romagna",
      "Morciano di Romagna",
      "Coriano",
      "Rimini",
      "Maiolo",
      "Novafeltria",
      "San Giovanni in Marignano"
    ]
  },
  Marche: Fm,
  Toscana: km,
  Umbria: Om,
  Lazio: Dm,
  Campania: Gm,
  Abruzzo: Nm,
  Molise: $m,
  Puglia: Wm,
  Basilicata: Um,
  Calabria: Xm,
  Sicilia: Ym,
  Sardegna: jm
};
const ht = typeof window < "u", cl = ht && "IntersectionObserver" in window;
function kc(t, e, n) {
  Zm(t, e), e.set(t, n);
}
function Zm(t, e) {
  if (e.has(t))
    throw new TypeError("Cannot initialize the same private elements twice on an object");
}
function Hm(t, e, n) {
  var i = Nd(t, e, "set");
  return Km(t, i, n), n;
}
function Km(t, e, n) {
  if (e.set)
    e.set.call(t, n);
  else {
    if (!e.writable)
      throw new TypeError("attempted to set read only private field");
    e.value = n;
  }
}
function pi(t, e) {
  var n = Nd(t, e, "get");
  return qm(t, n);
}
function Nd(t, e, n) {
  if (!e.has(t))
    throw new TypeError("attempted to " + n + " private field on non-instance");
  return e.get(t);
}
function qm(t, e) {
  return e.get ? e.get.call(t) : e.value;
}
function $d(t, e, n) {
  const i = e.length - 1;
  if (i < 0)
    return t === void 0 ? n : t;
  for (let a = 0; a < i; a++) {
    if (t == null)
      return n;
    t = t[e[a]];
  }
  return t == null || t[e[i]] === void 0 ? n : t[e[i]];
}
function Ca(t, e) {
  if (t === e)
    return !0;
  if (t instanceof Date && e instanceof Date && t.getTime() !== e.getTime() || t !== Object(t) || e !== Object(e))
    return !1;
  const n = Object.keys(t);
  return n.length !== Object.keys(e).length ? !1 : n.every((i) => Ca(t[i], e[i]));
}
function Jm(t, e, n) {
  return t == null || !e || typeof e != "string" ? n : t[e] !== void 0 ? t[e] : (e = e.replace(/\[(\w+)\]/g, ".$1"), e = e.replace(/^\./, ""), $d(t, e.split("."), n));
}
function rn(t, e, n) {
  if (e === !0)
    return t === void 0 ? n : t;
  if (e == null || typeof e == "boolean")
    return n;
  if (t !== Object(t)) {
    if (typeof e != "function")
      return n;
    const a = e(t, n);
    return typeof a > "u" ? n : a;
  }
  if (typeof e == "string")
    return Jm(t, e, n);
  if (Array.isArray(e))
    return $d(t, e, n);
  if (typeof e != "function")
    return n;
  const i = e(t, n);
  return typeof i > "u" ? n : i;
}
function oe(t) {
  let e = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "px";
  if (!(t == null || t === ""))
    return isNaN(+t) ? String(t) : isFinite(+t) ? `${Number(t)}${e}` : void 0;
}
function Ts(t) {
  return t !== null && typeof t == "object" && !Array.isArray(t);
}
function Ko(t) {
  if (t && "$el" in t) {
    const e = t.$el;
    return (e == null ? void 0 : e.nodeType) === Node.TEXT_NODE ? e.nextElementSibling : e;
  }
  return t;
}
const Oc = Object.freeze({
  enter: 13,
  tab: 9,
  delete: 46,
  esc: 27,
  space: 32,
  up: 38,
  down: 40,
  left: 37,
  right: 39,
  end: 35,
  home: 36,
  del: 46,
  backspace: 8,
  insert: 45,
  pageup: 33,
  pagedown: 34,
  shift: 16
});
function Wd(t) {
  return Object.keys(t);
}
function Qr(t, e) {
  return e.every((n) => t.hasOwnProperty(n));
}
function Ud(t, e) {
  const n = {}, i = new Set(Object.keys(t));
  for (const a of e)
    i.has(a) && (n[a] = t[a]);
  return n;
}
function Dc(t, e, n) {
  const i = /* @__PURE__ */ Object.create(null), a = /* @__PURE__ */ Object.create(null);
  for (const o in t)
    e.some((r) => r instanceof RegExp ? r.test(o) : r === o) && !(n != null && n.some((r) => r === o)) ? i[o] = t[o] : a[o] = t[o];
  return [i, a];
}
function Li(t, e) {
  const n = {
    ...t
  };
  return e.forEach((i) => delete n[i]), n;
}
const Xd = /^on[^a-z]/, ul = (t) => Xd.test(t), Qm = ["onAfterscriptexecute", "onAnimationcancel", "onAnimationend", "onAnimationiteration", "onAnimationstart", "onAuxclick", "onBeforeinput", "onBeforescriptexecute", "onChange", "onClick", "onCompositionend", "onCompositionstart", "onCompositionupdate", "onContextmenu", "onCopy", "onCut", "onDblclick", "onFocusin", "onFocusout", "onFullscreenchange", "onFullscreenerror", "onGesturechange", "onGestureend", "onGesturestart", "onGotpointercapture", "onInput", "onKeydown", "onKeypress", "onKeyup", "onLostpointercapture", "onMousedown", "onMousemove", "onMouseout", "onMouseover", "onMouseup", "onMousewheel", "onPaste", "onPointercancel", "onPointerdown", "onPointerenter", "onPointerleave", "onPointermove", "onPointerout", "onPointerover", "onPointerup", "onReset", "onSelect", "onSubmit", "onTouchcancel", "onTouchend", "onTouchmove", "onTouchstart", "onTransitioncancel", "onTransitionend", "onTransitionrun", "onTransitionstart", "onWheel"];
function dl(t) {
  const [e, n] = Dc(t, [Xd]), i = Li(e, Qm), [a, o] = Dc(n, ["class", "style", "id", /^data-/]);
  return Object.assign(a, e), Object.assign(o, i), [a, o];
}
function Dt(t) {
  return t == null ? [] : Array.isArray(t) ? t : [t];
}
function ev(t, e) {
  let n = 0;
  const i = function() {
    for (var a = arguments.length, o = new Array(a), r = 0; r < a; r++)
      o[r] = arguments[r];
    clearTimeout(n), n = setTimeout(() => t(...o), O(e));
  };
  return i.clear = () => {
    clearTimeout(n);
  }, i.immediate = t, i;
}
function ai(t) {
  let e = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0, n = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 1;
  return Math.max(e, Math.min(n, t));
}
function Gc(t, e) {
  let n = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : "0";
  return t + n.repeat(Math.max(0, e - t.length));
}
function tv(t) {
  let e = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 1;
  const n = [];
  let i = 0;
  for (; i < t.length; )
    n.push(t.substr(i, e)), i += e;
  return n;
}
function qi() {
  let t = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {}, e = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, n = arguments.length > 2 ? arguments[2] : void 0;
  const i = {};
  for (const a in t)
    i[a] = t[a];
  for (const a in e) {
    const o = t[a], r = e[a];
    if (Ts(o) && Ts(r)) {
      i[a] = qi(o, r, n);
      continue;
    }
    if (Array.isArray(o) && Array.isArray(r) && n) {
      i[a] = n(o, r);
      continue;
    }
    i[a] = r;
  }
  return i;
}
function Yd(t) {
  return t.map((e) => e.type === de ? Yd(e.children) : e).flat();
}
function Ei() {
  let t = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "";
  if (Ei.cache.has(t))
    return Ei.cache.get(t);
  const e = t.replace(/[^a-z]/gi, "-").replace(/\B([A-Z])/g, "-$1").toLowerCase();
  return Ei.cache.set(t, e), e;
}
Ei.cache = /* @__PURE__ */ new Map();
function Oa(t, e) {
  if (!e || typeof e != "object")
    return [];
  if (Array.isArray(e))
    return e.map((n) => Oa(t, n)).flat(1);
  if (Array.isArray(e.children))
    return e.children.map((n) => Oa(t, n)).flat(1);
  if (e.component) {
    if (Object.getOwnPropertySymbols(e.component.provides).includes(t))
      return [e.component];
    if (e.component.subTree)
      return Oa(t, e.component.subTree).flat(1);
  }
  return [];
}
var Io = /* @__PURE__ */ new WeakMap(), Oi = /* @__PURE__ */ new WeakMap();
class nv {
  constructor(e) {
    kc(this, Io, {
      writable: !0,
      value: []
    }), kc(this, Oi, {
      writable: !0,
      value: 0
    }), this.size = e;
  }
  push(e) {
    pi(this, Io)[pi(this, Oi)] = e, Hm(this, Oi, (pi(this, Oi) + 1) % this.size);
  }
  values() {
    return pi(this, Io).slice(pi(this, Oi)).concat(pi(this, Io).slice(0, pi(this, Oi)));
  }
}
function hl(t) {
  const e = Fn({}), n = x(t);
  return Ht(() => {
    for (const i in n.value)
      e[i] = n.value[i];
  }, {
    flush: "sync"
  }), Fd(e);
}
function qo(t, e) {
  return t.includes(e);
}
function jd(t) {
  return t[2].toLowerCase() + t.slice(3);
}
const Xt = () => [Function, Array];
function Nc(t, e) {
  return e = "on" + lo(e), !!(t[e] || t[`${e}Once`] || t[`${e}Capture`] || t[`${e}OnceCapture`] || t[`${e}CaptureOnce`]);
}
function Zd(t) {
  for (var e = arguments.length, n = new Array(e > 1 ? e - 1 : 0), i = 1; i < e; i++)
    n[i - 1] = arguments[i];
  if (Array.isArray(t))
    for (const a of t)
      a(...n);
  else
    typeof t == "function" && t(...n);
}
function Jo(t) {
  let e = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : !0;
  const n = ["button", "[href]", 'input:not([type="hidden"])', "select", "textarea", "[tabindex]"].map((i) => `${i}${e ? ':not([tabindex="-1"])' : ""}:not([disabled])`).join(", ");
  return [...t.querySelectorAll(n)];
}
function Hd(t, e, n) {
  let i, a = t.indexOf(document.activeElement);
  const o = e === "next" ? 1 : -1;
  do
    a += o, i = t[a];
  while ((!i || i.offsetParent == null || !((n == null ? void 0 : n(i)) ?? !0)) && a < t.length && a >= 0);
  return i;
}
function Qo(t, e) {
  var i, a, o, r;
  const n = Jo(t);
  if (!e)
    (t === document.activeElement || !t.contains(document.activeElement)) && ((i = n[0]) == null || i.focus());
  else if (e === "first")
    (a = n[0]) == null || a.focus();
  else if (e === "last")
    (o = n.at(-1)) == null || o.focus();
  else if (typeof e == "number")
    (r = n[e]) == null || r.focus();
  else {
    const s = Hd(n, e);
    s ? s.focus() : Qo(t, e === "next" ? "first" : "last");
  }
}
function iv() {
}
function ra(t, e) {
  if (!(ht && typeof CSS < "u" && typeof CSS.supports < "u" && CSS.supports(`selector(${e})`)))
    return null;
  try {
    return !!t && t.matches(e);
  } catch {
    return null;
  }
}
function fl(t) {
  return t.some((e) => cm(e) ? e.type === um ? !1 : e.type !== de || fl(e.children) : !0) ? t : null;
}
function av(t, e) {
  if (!ht || t === 0)
    return e(), () => {
    };
  const n = window.setTimeout(e, t);
  return () => window.clearTimeout(n);
}
const Kd = ["top", "bottom"], ov = ["start", "end", "left", "right"];
function ws(t, e) {
  let [n, i] = t.split(" ");
  return i || (i = qo(Kd, n) ? "start" : qo(ov, n) ? "top" : "center"), {
    side: Es(n, e),
    align: Es(i, e)
  };
}
function Es(t, e) {
  return t === "start" ? e ? "right" : "left" : t === "end" ? e ? "left" : "right" : t;
}
function es(t) {
  return {
    side: {
      center: "center",
      top: "bottom",
      bottom: "top",
      left: "right",
      right: "left"
    }[t.side],
    align: t.align
  };
}
function ts(t) {
  return {
    side: t.side,
    align: {
      center: "center",
      top: "bottom",
      bottom: "top",
      left: "right",
      right: "left"
    }[t.align]
  };
}
function $c(t) {
  return {
    side: t.align,
    align: t.side
  };
}
function Wc(t) {
  return qo(Kd, t.side) ? "y" : "x";
}
class Ai {
  constructor(e) {
    let {
      x: n,
      y: i,
      width: a,
      height: o
    } = e;
    this.x = n, this.y = i, this.width = a, this.height = o;
  }
  get top() {
    return this.y;
  }
  get bottom() {
    return this.y + this.height;
  }
  get left() {
    return this.x;
  }
  get right() {
    return this.x + this.width;
  }
}
function Uc(t, e) {
  return {
    x: {
      before: Math.max(0, e.left - t.left),
      after: Math.max(0, t.right - e.right)
    },
    y: {
      before: Math.max(0, e.top - t.top),
      after: Math.max(0, t.bottom - e.bottom)
    }
  };
}
function qd(t) {
  return Array.isArray(t) ? new Ai({
    x: t[0],
    y: t[1],
    width: 0,
    height: 0
  }) : t.getBoundingClientRect();
}
function gl(t) {
  const e = t.getBoundingClientRect(), n = getComputedStyle(t), i = n.transform;
  if (i) {
    let a, o, r, s, l;
    if (i.startsWith("matrix3d("))
      a = i.slice(9, -1).split(/, /), o = +a[0], r = +a[5], s = +a[12], l = +a[13];
    else if (i.startsWith("matrix("))
      a = i.slice(7, -1).split(/, /), o = +a[0], r = +a[3], s = +a[4], l = +a[5];
    else
      return new Ai(e);
    const c = n.transformOrigin, u = e.x - s - (1 - o) * parseFloat(c), d = e.y - l - (1 - r) * parseFloat(c.slice(c.indexOf(" ") + 1)), h = o ? e.width / o : t.offsetWidth + 1, f = r ? e.height / r : t.offsetHeight + 1;
    return new Ai({
      x: u,
      y: d,
      width: h,
      height: f
    });
  } else
    return new Ai(e);
}
function Ji(t, e, n) {
  if (typeof t.animate > "u")
    return {
      finished: Promise.resolve()
    };
  let i;
  try {
    i = t.animate(e, n);
  } catch {
    return {
      finished: Promise.resolve()
    };
  }
  return typeof i.finished > "u" && (i.finished = new Promise((a) => {
    i.onfinish = () => {
      a(i);
    };
  })), i;
}
const Yo = /* @__PURE__ */ new WeakMap();
function rv(t, e) {
  Object.keys(e).forEach((n) => {
    if (ul(n)) {
      const i = jd(n), a = Yo.get(t);
      if (e[n] == null)
        a == null || a.forEach((o) => {
          const [r, s] = o;
          r === i && (t.removeEventListener(i, s), a.delete(o));
        });
      else if (!a || ![...a].some((o) => o[0] === i && o[1] === e[n])) {
        t.addEventListener(i, e[n]);
        const o = a || /* @__PURE__ */ new Set();
        o.add([i, e[n]]), Yo.has(t) || Yo.set(t, o);
      }
    } else
      e[n] == null ? t.removeAttribute(n) : t.setAttribute(n, e[n]);
  });
}
function sv(t, e) {
  Object.keys(e).forEach((n) => {
    if (ul(n)) {
      const i = jd(n), a = Yo.get(t);
      a == null || a.forEach((o) => {
        const [r, s] = o;
        r === i && (t.removeEventListener(i, s), a.delete(o));
      });
    } else
      t.removeAttribute(n);
  });
}
const Di = 2.4, Xc = 0.2126729, Yc = 0.7151522, jc = 0.072175, lv = 0.55, cv = 0.58, uv = 0.57, dv = 0.62, zo = 0.03, Zc = 1.45, hv = 5e-4, fv = 1.25, gv = 1.25, Hc = 0.078, Kc = 12.82051282051282, Lo = 0.06, qc = 1e-3;
function Jc(t, e) {
  const n = (t.r / 255) ** Di, i = (t.g / 255) ** Di, a = (t.b / 255) ** Di, o = (e.r / 255) ** Di, r = (e.g / 255) ** Di, s = (e.b / 255) ** Di;
  let l = n * Xc + i * Yc + a * jc, c = o * Xc + r * Yc + s * jc;
  if (l <= zo && (l += (zo - l) ** Zc), c <= zo && (c += (zo - c) ** Zc), Math.abs(c - l) < hv)
    return 0;
  let u;
  if (c > l) {
    const d = (c ** lv - l ** cv) * fv;
    u = d < qc ? 0 : d < Hc ? d - d * Kc * Lo : d - Lo;
  } else {
    const d = (c ** dv - l ** uv) * gv;
    u = d > -qc ? 0 : d > -Hc ? d - d * Kc * Lo : d + Lo;
  }
  return u * 100;
}
function Ri(t) {
  pr(`Vuetify: ${t}`);
}
function mv(t) {
  pr(`Vuetify error: ${t}`);
}
function vv(t, e) {
  e = Array.isArray(e) ? e.slice(0, -1).map((n) => `'${n}'`).join(", ") + ` or '${e.at(-1)}'` : `'${e}'`, pr(`[Vuetify UPGRADE] '${t}' is deprecated, use ${e} instead.`);
}
function As(t) {
  return !!t && /^(#|var\(--|(rgb|hsl)a?\()/.test(t);
}
function Cv(t) {
  return As(t) && !/^((rgb|hsl)a?\()?var\(--/.test(t);
}
const Qc = /^(?<fn>(?:rgb|hsl)a?)\((?<values>.+)\)/, yv = {
  rgb: (t, e, n, i) => ({
    r: t,
    g: e,
    b: n,
    a: i
  }),
  rgba: (t, e, n, i) => ({
    r: t,
    g: e,
    b: n,
    a: i
  }),
  hsl: (t, e, n, i) => eu({
    h: t,
    s: e,
    l: n,
    a: i
  }),
  hsla: (t, e, n, i) => eu({
    h: t,
    s: e,
    l: n,
    a: i
  }),
  hsv: (t, e, n, i) => Ua({
    h: t,
    s: e,
    v: n,
    a: i
  }),
  hsva: (t, e, n, i) => Ua({
    h: t,
    s: e,
    v: n,
    a: i
  })
};
function Va(t) {
  if (typeof t == "number")
    return (isNaN(t) || t < 0 || t > 16777215) && Ri(`'${t}' is not a valid hex color`), {
      r: (t & 16711680) >> 16,
      g: (t & 65280) >> 8,
      b: t & 255
    };
  if (typeof t == "string" && Qc.test(t)) {
    const {
      groups: e
    } = t.match(Qc), {
      fn: n,
      values: i
    } = e, a = i.split(/,\s*/).map((o) => o.endsWith("%") && ["hsl", "hsla", "hsv", "hsva"].includes(n) ? parseFloat(o) / 100 : parseFloat(o));
    return yv[n](...a);
  } else if (typeof t == "string") {
    let e = t.startsWith("#") ? t.slice(1) : t;
    [3, 4].includes(e.length) ? e = e.split("").map((i) => i + i).join("") : [6, 8].includes(e.length) || Ri(`'${t}' is not a valid hex(a) color`);
    const n = parseInt(e, 16);
    return (isNaN(n) || n < 0 || n > 4294967295) && Ri(`'${t}' is not a valid hex(a) color`), pv(e);
  } else if (typeof t == "object") {
    if (Qr(t, ["r", "g", "b"]))
      return t;
    if (Qr(t, ["h", "s", "l"]))
      return Ua(Jd(t));
    if (Qr(t, ["h", "s", "v"]))
      return Ua(t);
  }
  throw new TypeError(`Invalid color: ${t == null ? t : String(t) || t.constructor.name}
Expected #hex, #hexa, rgb(), rgba(), hsl(), hsla(), object or number`);
}
function Ua(t) {
  const {
    h: e,
    s: n,
    v: i,
    a
  } = t, o = (s) => {
    const l = (s + e / 60) % 6;
    return i - i * n * Math.max(Math.min(l, 4 - l, 1), 0);
  }, r = [o(5), o(3), o(1)].map((s) => Math.round(s * 255));
  return {
    r: r[0],
    g: r[1],
    b: r[2],
    a
  };
}
function eu(t) {
  return Ua(Jd(t));
}
function Jd(t) {
  const {
    h: e,
    s: n,
    l: i,
    a
  } = t, o = i + n * Math.min(i, 1 - i), r = o === 0 ? 0 : 2 - 2 * i / o;
  return {
    h: e,
    s: r,
    v: o,
    a
  };
}
function pv(t) {
  t = _v(t);
  let [e, n, i, a] = tv(t, 2).map((o) => parseInt(o, 16));
  return a = a === void 0 ? a : a / 255, {
    r: e,
    g: n,
    b: i,
    a
  };
}
function _v(t) {
  return t.startsWith("#") && (t = t.slice(1)), t = t.replace(/([^0-9a-f])/gi, "F"), (t.length === 3 || t.length === 4) && (t = t.split("").map((e) => e + e).join("")), t.length !== 6 && (t = Gc(Gc(t, 6), 8, "F")), t;
}
function Sv(t) {
  const e = Math.abs(Jc(Va(0), Va(t)));
  return Math.abs(Jc(Va(16777215), Va(t))) > Math.min(e, 50) ? "#fff" : "#000";
}
function $(t, e) {
  return (n) => Object.keys(t).reduce((i, a) => {
    const r = typeof t[a] == "object" && t[a] != null && !Array.isArray(t[a]) ? t[a] : {
      type: t[a]
    };
    return n && a in n ? i[a] = {
      ...r,
      default: n[a]
    } : i[a] = r, e && !i[a].source && (i[a].source = e), i;
  }, {});
}
const ue = $({
  class: [String, Array],
  style: {
    type: [String, Array, Object],
    default: null
  }
}, "component"), er = Symbol.for("vuetify:defaults");
function ml() {
  const t = Ne(er);
  if (!t)
    throw new Error("[Vuetify] Could not find defaults instance");
  return t;
}
function yn(t, e) {
  const n = ml(), i = Z(t), a = x(() => {
    if (O(e == null ? void 0 : e.disabled))
      return n.value;
    const r = O(e == null ? void 0 : e.scoped), s = O(e == null ? void 0 : e.reset), l = O(e == null ? void 0 : e.root);
    if (i.value == null && !(r || s || l))
      return n.value;
    let c = qi(i.value, {
      prev: n.value
    });
    if (r)
      return c;
    if (s || l) {
      const u = Number(s || 1 / 0);
      for (let d = 0; d <= u && !(!c || !("prev" in c)); d++)
        c = c.prev;
      return c && typeof l == "string" && l in c && (c = qi(qi(c, {
        prev: c
      }), c[l])), c;
    }
    return c.prev ? qi(c.prev, c) : c;
  });
  return it(er, a), a;
}
function bv(t, e) {
  var n, i;
  return typeof ((n = t.props) == null ? void 0 : n[e]) < "u" || typeof ((i = t.props) == null ? void 0 : i[Ei(e)]) < "u";
}
function Mv() {
  let t = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {}, e = arguments.length > 1 ? arguments[1] : void 0, n = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : ml();
  const i = He("useDefaults");
  if (e = e ?? i.type.name ?? i.type.__name, !e)
    throw new Error("[Vuetify] Could not determine component name");
  const a = x(() => {
    var l;
    return (l = n.value) == null ? void 0 : l[t._as ?? e];
  }), o = new Proxy(t, {
    get(l, c) {
      var d, h, f, g;
      const u = Reflect.get(l, c);
      return c === "class" || c === "style" ? [(d = a.value) == null ? void 0 : d[c], u].filter((m) => m != null) : typeof c == "string" && !bv(i.vnode, c) ? ((h = a.value) == null ? void 0 : h[c]) ?? ((g = (f = n.value) == null ? void 0 : f.global) == null ? void 0 : g[c]) ?? u : u;
    }
  }), r = q();
  Ht(() => {
    if (a.value) {
      const l = Object.entries(a.value).filter((c) => {
        let [u] = c;
        return u.startsWith(u[0].toUpperCase());
      });
      r.value = l.length ? Object.fromEntries(l) : void 0;
    } else
      r.value = void 0;
  });
  function s() {
    const l = wv(er, i);
    it(er, x(() => r.value ? qi((l == null ? void 0 : l.value) ?? {}, r.value) : l == null ? void 0 : l.value));
  }
  return {
    props: o,
    provideSubDefaults: s
  };
}
function fo(t) {
  if (t._setup = t._setup ?? t.setup, !t.name)
    return Ri("The component is missing an explicit name, unable to generate default prop value"), t;
  if (t._setup) {
    t.props = $(t.props ?? {}, t.name)();
    const e = Object.keys(t.props).filter((n) => n !== "class" && n !== "style");
    t.filterProps = function(i) {
      return Ud(i, e);
    }, t.props._as = String, t.setup = function(i, a) {
      const o = ml();
      if (!o.value)
        return t._setup(i, a);
      const {
        props: r,
        provideSubDefaults: s
      } = Mv(i, i._as ?? t.name, o), l = t._setup(r, a);
      return s(), l;
    };
  }
  return t;
}
function K() {
  let t = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : !0;
  return (e) => (t ? fo : dm)(e);
}
function go(t) {
  let e = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "div", n = arguments.length > 2 ? arguments[2] : void 0;
  return K()({
    name: n ?? lo(kd(t.replace(/__/g, "-"))),
    props: {
      tag: {
        type: String,
        default: e
      },
      ...ue()
    },
    setup(i, a) {
      let {
        slots: o
      } = a;
      return () => {
        var r;
        return ma(i.tag, {
          class: [t, i.class],
          style: i.style
        }, (r = o.default) == null ? void 0 : r.call(o));
      };
    }
  });
}
function Qd(t) {
  if (typeof t.getRootNode != "function") {
    for (; t.parentNode; )
      t = t.parentNode;
    return t !== document ? null : document;
  }
  const e = t.getRootNode();
  return e !== document && e.getRootNode({
    composed: !0
  }) !== document ? null : e;
}
const tr = "cubic-bezier(0.4, 0, 0.2, 1)", xv = "cubic-bezier(0.0, 0, 0.2, 1)", Pv = "cubic-bezier(0.4, 0, 1, 1)";
function He(t, e) {
  const n = hm();
  if (!n)
    throw new Error(`[Vuetify] ${t} ${e || "must be called from inside a setup function"}`);
  return n;
}
function pn() {
  let t = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "composables";
  const e = He(t).type;
  return Ei((e == null ? void 0 : e.aliasName) || (e == null ? void 0 : e.name));
}
let eh = 0, jo = /* @__PURE__ */ new WeakMap();
function _n() {
  const t = He("getUid");
  if (jo.has(t))
    return jo.get(t);
  {
    const e = eh++;
    return jo.set(t, e), e;
  }
}
_n.reset = () => {
  eh = 0, jo = /* @__PURE__ */ new WeakMap();
};
function th(t) {
  let e = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : !1;
  for (; t; ) {
    if (e ? Tv(t) : vl(t))
      return t;
    t = t.parentElement;
  }
  return document.scrollingElement;
}
function nr(t, e) {
  const n = [];
  if (e && t && !e.contains(t))
    return n;
  for (; t && (vl(t) && n.push(t), t !== e); )
    t = t.parentElement;
  return n;
}
function vl(t) {
  if (!t || t.nodeType !== Node.ELEMENT_NODE)
    return !1;
  const e = window.getComputedStyle(t);
  return e.overflowY === "scroll" || e.overflowY === "auto" && t.scrollHeight > t.clientHeight;
}
function Tv(t) {
  if (!t || t.nodeType !== Node.ELEMENT_NODE)
    return !1;
  const e = window.getComputedStyle(t);
  return ["scroll", "auto"].includes(e.overflowY);
}
function wv(t) {
  let e = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : He("injectSelf");
  const {
    provides: n
  } = e;
  if (n && t in n)
    return n[t];
}
function Ev(t) {
  for (; t; ) {
    if (window.getComputedStyle(t).position === "fixed")
      return !0;
    t = t.offsetParent;
  }
  return !1;
}
function ie(t) {
  const e = He("useRender");
  e.render = t;
}
function Cl(t) {
  return hl(() => {
    const e = [], n = {};
    if (t.value.background)
      if (As(t.value.background)) {
        if (n.backgroundColor = t.value.background, !t.value.text && Cv(t.value.background)) {
          const i = Va(t.value.background);
          if (i.a == null || i.a === 1) {
            const a = Sv(i);
            n.color = a, n.caretColor = a;
          }
        }
      } else
        e.push(`bg-${t.value.background}`);
    return t.value.text && (As(t.value.text) ? (n.color = t.value.text, n.caretColor = t.value.text) : e.push(`text-${t.value.text}`)), {
      colorClasses: e,
      colorStyles: n
    };
  });
}
function fn(t, e) {
  const n = x(() => ({
    text: co(t) ? t.value : e ? t[e] : null
  })), {
    colorClasses: i,
    colorStyles: a
  } = Cl(n);
  return {
    textColorClasses: i,
    textColorStyles: a
  };
}
function Pt(t, e) {
  const n = x(() => ({
    background: co(t) ? t.value : e ? t[e] : null
  })), {
    colorClasses: i,
    colorStyles: a
  } = Cl(n);
  return {
    backgroundColorClasses: i,
    backgroundColorStyles: a
  };
}
const xe = [String, Function, Object, Array], Av = Symbol.for("vuetify:icons"), _r = $({
  icon: {
    type: xe
  },
  // Could not remove this and use makeTagProps, types complained because it is not required
  tag: {
    type: String,
    required: !0
  }
}, "icon"), tu = K()({
  name: "VComponentIcon",
  props: _r(),
  setup(t, e) {
    let {
      slots: n
    } = e;
    return () => {
      const i = t.icon;
      return C(t.tag, null, {
        default: () => {
          var a;
          return [t.icon ? C(i, null, null) : (a = n.default) == null ? void 0 : a.call(n)];
        }
      });
    };
  }
}), Rv = fo({
  name: "VSvgIcon",
  inheritAttrs: !1,
  props: _r(),
  setup(t, e) {
    let {
      attrs: n
    } = e;
    return () => C(t.tag, se(n, {
      style: null
    }), {
      default: () => [C("svg", {
        class: "v-icon__svg",
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 24 24",
        role: "img",
        "aria-hidden": "true"
      }, [Array.isArray(t.icon) ? t.icon.map((i) => Array.isArray(i) ? C("path", {
        d: i[0],
        "fill-opacity": i[1]
      }, null) : C("path", {
        d: i
      }, null)) : C("path", {
        d: t.icon
      }, null)])]
    });
  }
});
fo({
  name: "VLigatureIcon",
  props: _r(),
  setup(t) {
    return () => C(t.tag, null, {
      default: () => [t.icon]
    });
  }
});
fo({
  name: "VClassIcon",
  props: _r(),
  setup(t) {
    return () => C(t.tag, {
      class: t.icon
    }, null);
  }
});
const Iv = (t) => {
  const e = Ne(Av);
  if (!e)
    throw new Error("Missing Vuetify Icons provide!");
  return {
    iconData: x(() => {
      var l;
      const i = O(t);
      if (!i)
        return {
          component: tu
        };
      let a = i;
      if (typeof a == "string" && (a = a.trim(), a.startsWith("$") && (a = (l = e.aliases) == null ? void 0 : l[a.slice(1)])), !a)
        throw new Error(`Could not find aliased icon "${i}"`);
      if (Array.isArray(a))
        return {
          component: Rv,
          icon: a
        };
      if (typeof a != "string")
        return {
          component: tu,
          icon: a
        };
      const o = Object.keys(e.sets).find((c) => typeof a == "string" && a.startsWith(`${c}:`)), r = o ? a.slice(o.length + 1) : a;
      return {
        component: e.sets[o ?? e.defaultSet].component,
        icon: r
      };
    })
  };
}, zv = ["x-small", "small", "default", "large", "x-large"], mo = $({
  size: {
    type: [String, Number],
    default: "default"
  }
}, "size");
function vo(t) {
  let e = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : pn();
  return hl(() => {
    let n, i;
    return qo(zv, t.size) ? n = `${e}--size-${t.size}` : t.size && (i = {
      width: oe(t.size),
      height: oe(t.size)
    }), {
      sizeClasses: n,
      sizeStyles: i
    };
  });
}
const Le = $({
  tag: {
    type: String,
    default: "div"
  }
}, "tag"), nu = Symbol.for("vuetify:theme"), ke = $({
  theme: String
}, "theme");
function $e(t) {
  He("provideTheme");
  const e = Ne(nu, null);
  if (!e)
    throw new Error("Could not find Vuetify theme injection");
  const n = x(() => t.theme ?? e.name.value), i = x(() => e.themes.value[n.value]), a = x(() => e.isDisabled ? void 0 : `v-theme--${n.value}`), o = {
    ...e,
    name: n,
    current: i,
    themeClasses: a
  };
  return it(nu, o), o;
}
const Lv = $({
  color: String,
  start: Boolean,
  end: Boolean,
  icon: xe,
  ...ue(),
  ...mo(),
  ...Le({
    tag: "i"
  }),
  ...ke()
}, "VIcon"), Ie = K()({
  name: "VIcon",
  props: Lv(),
  setup(t, e) {
    let {
      attrs: n,
      slots: i
    } = e;
    const a = Z(), {
      themeClasses: o
    } = $e(t), {
      iconData: r
    } = Iv(x(() => a.value || t.icon)), {
      sizeClasses: s
    } = vo(t), {
      textColorClasses: l,
      textColorStyles: c
    } = fn(te(t, "color"));
    return ie(() => {
      var d, h;
      const u = (d = i.default) == null ? void 0 : d.call(i);
      return u && (a.value = (h = Yd(u).filter((f) => f.type === fm && f.children && typeof f.children == "string")[0]) == null ? void 0 : h.children), C(r.value.component, {
        tag: t.tag,
        icon: r.value.icon,
        class: ["v-icon", "notranslate", o.value, s.value, l.value, {
          "v-icon--clickable": !!n.onClick,
          "v-icon--start": t.start,
          "v-icon--end": t.end
        }, t.class],
        style: [s.value ? void 0 : {
          fontSize: oe(t.size),
          height: oe(t.size),
          width: oe(t.size)
        }, c.value, t.style],
        role: n.onClick ? "button" : void 0,
        "aria-hidden": !n.onClick
      }, {
        default: () => [u]
      });
    }), {};
  }
});
const hi = $({
  height: [Number, String],
  maxHeight: [Number, String],
  maxWidth: [Number, String],
  minHeight: [Number, String],
  minWidth: [Number, String],
  width: [Number, String]
}, "dimension");
function fi(t) {
  return {
    dimensionStyles: x(() => ({
      height: oe(t.height),
      maxHeight: oe(t.maxHeight),
      maxWidth: oe(t.maxWidth),
      minHeight: oe(t.minHeight),
      minWidth: oe(t.minWidth),
      width: oe(t.width)
    }))
  };
}
function Vv(t) {
  return {
    aspectStyles: x(() => {
      const e = Number(t.aspectRatio);
      return e ? {
        paddingBottom: String(1 / e * 100) + "%"
      } : void 0;
    })
  };
}
const nh = $({
  aspectRatio: [String, Number],
  contentClass: String,
  inline: Boolean,
  ...ue(),
  ...hi()
}, "VResponsive"), iu = K()({
  name: "VResponsive",
  props: nh(),
  setup(t, e) {
    let {
      slots: n
    } = e;
    const {
      aspectStyles: i
    } = Vv(t), {
      dimensionStyles: a
    } = fi(t);
    return ie(() => {
      var o;
      return C("div", {
        class: ["v-responsive", {
          "v-responsive--inline": t.inline
        }, t.class],
        style: [a.value, t.style]
      }, [C("div", {
        class: "v-responsive__sizer",
        style: i.value
      }, null), (o = n.additional) == null ? void 0 : o.call(n), n.default && C("div", {
        class: ["v-responsive__content", t.contentClass]
      }, [n.default()])]);
    }), {};
  }
}), Ct = $({
  rounded: {
    type: [Boolean, Number, String],
    default: void 0
  }
}, "rounded");
function yt(t) {
  let e = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : pn();
  return {
    roundedClasses: x(() => {
      const i = co(t) ? t.value : t.rounded, a = [];
      if (i === !0 || i === "")
        a.push(`${e}--rounded`);
      else if (typeof i == "string" || i === 0)
        for (const o of String(i).split(" "))
          a.push(`rounded-${o}`);
      return a;
    })
  };
}
const ya = $({
  transition: {
    type: [Boolean, String, Object],
    default: "fade-transition",
    validator: (t) => t !== !0
  }
}, "transition"), kn = (t, e) => {
  let {
    slots: n
  } = e;
  const {
    transition: i,
    disabled: a,
    ...o
  } = t, {
    component: r = ri,
    ...s
  } = typeof i == "object" ? i : {};
  return ma(r, se(typeof i == "string" ? {
    name: a ? "" : i
  } : s, o, {
    disabled: a
  }), n);
};
function Bv(t, e) {
  if (!cl)
    return;
  const n = e.modifiers || {}, i = e.value, {
    handler: a,
    options: o
  } = typeof i == "object" ? i : {
    handler: i,
    options: {}
  }, r = new IntersectionObserver(function() {
    var d;
    let s = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [], l = arguments.length > 1 ? arguments[1] : void 0;
    const c = (d = t._observe) == null ? void 0 : d[e.instance.$.uid];
    if (!c)
      return;
    const u = s.some((h) => h.isIntersecting);
    a && (!n.quiet || c.init) && (!n.once || u || c.init) && a(u, s, l), u && n.once ? ih(t, e) : c.init = !0;
  }, o);
  t._observe = Object(t._observe), t._observe[e.instance.$.uid] = {
    init: !1,
    observer: r
  }, r.observe(t);
}
function ih(t, e) {
  var i;
  const n = (i = t._observe) == null ? void 0 : i[e.instance.$.uid];
  n && (n.observer.unobserve(t), delete t._observe[e.instance.$.uid]);
}
const Fv = {
  mounted: Bv,
  unmounted: ih
}, yl = Fv, ah = $({
  alt: String,
  cover: Boolean,
  color: String,
  draggable: {
    type: [Boolean, String],
    default: void 0
  },
  eager: Boolean,
  gradient: String,
  lazySrc: String,
  options: {
    type: Object,
    // For more information on types, navigate to:
    // https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API
    default: () => ({
      root: void 0,
      rootMargin: void 0,
      threshold: void 0
    })
  },
  sizes: String,
  src: {
    type: [String, Object],
    default: ""
  },
  crossorigin: String,
  referrerpolicy: String,
  srcset: String,
  position: String,
  ...nh(),
  ...ue(),
  ...Ct(),
  ...ya()
}, "VImg"), gn = K()({
  name: "VImg",
  directives: {
    intersect: yl
  },
  props: ah(),
  emits: {
    loadstart: (t) => !0,
    load: (t) => !0,
    error: (t) => !0
  },
  setup(t, e) {
    let {
      emit: n,
      slots: i
    } = e;
    const {
      backgroundColorClasses: a,
      backgroundColorStyles: o
    } = Pt(te(t, "color")), {
      roundedClasses: r
    } = yt(t), s = He("VImg"), l = q(""), c = Z(), u = q(t.eager ? "loading" : "idle"), d = q(), h = q(), f = x(() => t.src && typeof t.src == "object" ? {
      src: t.src.src,
      srcset: t.srcset || t.src.srcset,
      lazySrc: t.lazySrc || t.src.lazySrc,
      aspect: Number(t.aspectRatio || t.src.aspect || 0)
    } : {
      src: t.src,
      srcset: t.srcset,
      lazySrc: t.lazySrc,
      aspect: Number(t.aspectRatio || 0)
    }), g = x(() => f.value.aspect || d.value / h.value || 0);
    Q(() => t.src, () => {
      m(u.value !== "idle");
    }), Q(g, (A, R) => {
      !A && R && c.value && S(c.value);
    }), nl(() => m());
    function m(A) {
      if (!(t.eager && A) && !(cl && !A && !t.eager)) {
        if (u.value = "loading", f.value.lazySrc) {
          const R = new Image();
          R.src = f.value.lazySrc, S(R, null);
        }
        f.value.src && je(() => {
          var R;
          n("loadstart", ((R = c.value) == null ? void 0 : R.currentSrc) || f.value.src), setTimeout(() => {
            var V;
            if (!s.isUnmounted)
              if ((V = c.value) != null && V.complete) {
                if (c.value.naturalWidth || y(), u.value === "error")
                  return;
                g.value || S(c.value, null), u.value === "loading" && v();
              } else
                g.value || S(c.value), p();
          });
        });
      }
    }
    function v() {
      var A;
      s.isUnmounted || (p(), S(c.value), u.value = "loaded", n("load", ((A = c.value) == null ? void 0 : A.currentSrc) || f.value.src));
    }
    function y() {
      var A;
      s.isUnmounted || (u.value = "error", n("error", ((A = c.value) == null ? void 0 : A.currentSrc) || f.value.src));
    }
    function p() {
      const A = c.value;
      A && (l.value = A.currentSrc || A.src);
    }
    let M = -1;
    vt(() => {
      clearTimeout(M);
    });
    function S(A) {
      let R = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 100;
      const V = () => {
        if (clearTimeout(M), s.isUnmounted)
          return;
        const {
          naturalHeight: N,
          naturalWidth: G
        } = A;
        N || G ? (d.value = G, h.value = N) : !A.complete && u.value === "loading" && R != null ? M = window.setTimeout(V, R) : (A.currentSrc.endsWith(".svg") || A.currentSrc.startsWith("data:image/svg+xml")) && (d.value = 1, h.value = 1);
      };
      V();
    }
    const b = x(() => ({
      "v-img__img--cover": t.cover,
      "v-img__img--contain": !t.cover
    })), T = () => {
      var V;
      if (!f.value.src || u.value === "idle")
        return null;
      const A = C("img", {
        class: ["v-img__img", b.value],
        style: {
          objectPosition: t.position
        },
        src: f.value.src,
        srcset: f.value.srcset,
        alt: t.alt,
        crossorigin: t.crossorigin,
        referrerpolicy: t.referrerpolicy,
        draggable: t.draggable,
        sizes: t.sizes,
        ref: c,
        onLoad: v,
        onError: y
      }, null), R = (V = i.sources) == null ? void 0 : V.call(i);
      return C(kn, {
        transition: t.transition,
        appear: !0
      }, {
        default: () => [Ze(R ? C("picture", {
          class: "v-img__picture"
        }, [R, A]) : A, [[ui, u.value === "loaded"]])]
      });
    }, _ = () => C(kn, {
      transition: t.transition
    }, {
      default: () => [f.value.lazySrc && u.value !== "loaded" && C("img", {
        class: ["v-img__img", "v-img__img--preload", b.value],
        style: {
          objectPosition: t.position
        },
        src: f.value.lazySrc,
        alt: t.alt,
        crossorigin: t.crossorigin,
        referrerpolicy: t.referrerpolicy,
        draggable: t.draggable
      }, null)]
    }), P = () => i.placeholder ? C(kn, {
      transition: t.transition,
      appear: !0
    }, {
      default: () => [(u.value === "loading" || u.value === "error" && !i.error) && C("div", {
        class: "v-img__placeholder"
      }, [i.placeholder()])]
    }) : null, w = () => i.error ? C(kn, {
      transition: t.transition,
      appear: !0
    }, {
      default: () => [u.value === "error" && C("div", {
        class: "v-img__error"
      }, [i.error()])]
    }) : null, I = () => t.gradient ? C("div", {
      class: "v-img__gradient",
      style: {
        backgroundImage: `linear-gradient(${t.gradient})`
      }
    }, null) : null, z = q(!1);
    {
      const A = Q(g, (R) => {
        R && (requestAnimationFrame(() => {
          requestAnimationFrame(() => {
            z.value = !0;
          });
        }), A());
      });
    }
    return ie(() => {
      const A = iu.filterProps(t);
      return Ze(C(iu, se({
        class: ["v-img", {
          "v-img--booting": !z.value
        }, a.value, r.value, t.class],
        style: [{
          width: oe(t.width === "auto" ? d.value : t.width)
        }, o.value, t.style]
      }, A, {
        aspectRatio: g.value,
        "aria-label": t.alt,
        role: t.alt ? "img" : void 0
      }), {
        additional: () => C(de, null, [C(T, null, null), C(_, null, null), C(I, null, null), C(P, null, null), C(w, null, null)]),
        default: i.default
      }), [[Jt("intersect"), {
        handler: m,
        options: t.options
      }, null, {
        once: !0
      }]]);
    }), {
      currentSrc: l,
      image: c,
      state: u,
      naturalWidth: d,
      naturalHeight: h
    };
  }
}), kv = [null, "default", "comfortable", "compact"], Sn = $({
  density: {
    type: String,
    default: "default",
    validator: (t) => kv.includes(t)
  }
}, "density");
function Un(t) {
  let e = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : pn();
  return {
    densityClasses: x(() => `${e}--density-${t.density}`)
  };
}
const Ov = ["elevated", "flat", "tonal", "outlined", "text", "plain"];
function Co(t, e) {
  return C(de, null, [t && C("span", {
    key: "overlay",
    class: `${e}__overlay`
  }, null), C("span", {
    key: "underlay",
    class: `${e}__underlay`
  }, null)]);
}
const gi = $({
  color: String,
  variant: {
    type: String,
    default: "elevated",
    validator: (t) => Ov.includes(t)
  }
}, "variant");
function yo(t) {
  let e = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : pn();
  const n = x(() => {
    const {
      variant: o
    } = O(t);
    return `${e}--variant-${o}`;
  }), {
    colorClasses: i,
    colorStyles: a
  } = Cl(x(() => {
    const {
      variant: o,
      color: r
    } = O(t);
    return {
      [["elevated", "flat"].includes(o) ? "background" : "text"]: r
    };
  }));
  return {
    colorClasses: i,
    colorStyles: a,
    variantClasses: n
  };
}
const Dv = $({
  start: Boolean,
  end: Boolean,
  icon: xe,
  image: String,
  text: String,
  ...ue(),
  ...Sn(),
  ...Ct(),
  ...mo(),
  ...Le(),
  ...ke(),
  ...gi({
    variant: "flat"
  })
}, "VAvatar"), si = K()({
  name: "VAvatar",
  props: Dv(),
  setup(t, e) {
    let {
      slots: n
    } = e;
    const {
      themeClasses: i
    } = $e(t), {
      colorClasses: a,
      colorStyles: o,
      variantClasses: r
    } = yo(t), {
      densityClasses: s
    } = Un(t), {
      roundedClasses: l
    } = yt(t), {
      sizeClasses: c,
      sizeStyles: u
    } = vo(t);
    return ie(() => C(t.tag, {
      class: ["v-avatar", {
        "v-avatar--start": t.start,
        "v-avatar--end": t.end
      }, i.value, a.value, s.value, l.value, c.value, r.value, t.class],
      style: [o.value, u.value, t.style]
    }, {
      default: () => {
        var d;
        return [t.image ? C(gn, {
          key: "image",
          src: t.image,
          alt: "",
          cover: !0
        }, null) : t.icon ? C(Ie, {
          key: "icon",
          icon: t.icon
        }, null) : ((d = n.default) == null ? void 0 : d.call(n)) ?? t.text, Co(!1, "v-avatar")];
      }
    })), {};
  }
});
const Gv = $({
  text: String,
  onClick: Xt(),
  ...ue(),
  ...ke()
}, "VLabel"), oh = K()({
  name: "VLabel",
  props: Gv(),
  setup(t, e) {
    let {
      slots: n
    } = e;
    return ie(() => {
      var i;
      return C("label", {
        class: ["v-label", {
          "v-label--clickable": !!t.onClick
        }, t.class],
        style: t.style,
        onClick: t.onClick
      }, [t.text, (i = n.default) == null ? void 0 : i.call(n)]);
    }), {};
  }
});
function Yt(t, e) {
  let n;
  function i() {
    n = il(), n.run(() => e.length ? e(() => {
      n == null || n.stop(), i();
    }) : e());
  }
  Q(t, (a) => {
    a && !n ? i() : a || (n == null || n.stop(), n = void 0);
  }, {
    immediate: !0
  }), Tt(() => {
    n == null || n.stop();
  });
}
function Be(t, e, n) {
  let i = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : (d) => d, a = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : (d) => d;
  const o = He("useProxiedModel"), r = Z(t[e] !== void 0 ? t[e] : n), s = Ei(e), c = s !== e ? x(() => {
    var d, h, f, g;
    return t[e], !!(((d = o.vnode.props) != null && d.hasOwnProperty(e) || (h = o.vnode.props) != null && h.hasOwnProperty(s)) && ((f = o.vnode.props) != null && f.hasOwnProperty(`onUpdate:${e}`) || (g = o.vnode.props) != null && g.hasOwnProperty(`onUpdate:${s}`)));
  }) : x(() => {
    var d, h;
    return t[e], !!((d = o.vnode.props) != null && d.hasOwnProperty(e) && ((h = o.vnode.props) != null && h.hasOwnProperty(`onUpdate:${e}`)));
  });
  Yt(() => !c.value, () => {
    Q(() => t[e], (d) => {
      r.value = d;
    });
  });
  const u = x({
    get() {
      const d = t[e];
      return i(c.value ? d : r.value);
    },
    set(d) {
      const h = a(d), f = di(c.value ? t[e] : r.value);
      f === h || i(f) === d || (r.value = h, o == null || o.emit(`update:${e}`, h));
    }
  });
  return Object.defineProperty(u, "externalValue", {
    get: () => c.value ? t[e] : r.value
  }), u;
}
const rh = Symbol.for("vuetify:selection-control-group"), sh = $({
  color: String,
  disabled: {
    type: Boolean,
    default: null
  },
  defaultsTarget: String,
  error: Boolean,
  id: String,
  inline: Boolean,
  falseIcon: xe,
  trueIcon: xe,
  ripple: {
    type: Boolean,
    default: !0
  },
  multiple: {
    type: Boolean,
    default: null
  },
  name: String,
  readonly: {
    type: Boolean,
    default: null
  },
  modelValue: null,
  type: String,
  valueComparator: {
    type: Function,
    default: Ca
  },
  ...ue(),
  ...Sn(),
  ...ke()
}, "SelectionControlGroup"), Nv = $({
  ...sh({
    defaultsTarget: "VSelectionControl"
  })
}, "VSelectionControlGroup");
K()({
  name: "VSelectionControlGroup",
  props: Nv(),
  emits: {
    "update:modelValue": (t) => !0
  },
  setup(t, e) {
    let {
      slots: n
    } = e;
    const i = Be(t, "modelValue"), a = _n(), o = x(() => t.id || `v-selection-control-group-${a}`), r = x(() => t.name || o.value), s = /* @__PURE__ */ new Set();
    return it(rh, {
      modelValue: i,
      forceUpdate: () => {
        s.forEach((l) => l());
      },
      onForceUpdate: (l) => {
        s.add(l), Tt(() => {
          s.delete(l);
        });
      }
    }), yn({
      [t.defaultsTarget]: {
        color: te(t, "color"),
        disabled: te(t, "disabled"),
        density: te(t, "density"),
        error: te(t, "error"),
        inline: te(t, "inline"),
        modelValue: i,
        multiple: x(() => !!t.multiple || t.multiple == null && Array.isArray(i.value)),
        name: r,
        falseIcon: te(t, "falseIcon"),
        trueIcon: te(t, "trueIcon"),
        readonly: te(t, "readonly"),
        ripple: te(t, "ripple"),
        type: te(t, "type"),
        valueComparator: te(t, "valueComparator")
      }
    }), ie(() => {
      var l;
      return C("div", {
        class: ["v-selection-control-group", {
          "v-selection-control-group--inline": t.inline
        }, t.class],
        style: t.style,
        role: t.type === "radio" ? "radiogroup" : void 0
      }, [(l = n.default) == null ? void 0 : l.call(n)]);
    }), {};
  }
});
const Rs = Symbol("rippleStop"), $v = 80;
function au(t, e) {
  t.style.transform = e, t.style.webkitTransform = e;
}
function Is(t) {
  return t.constructor.name === "TouchEvent";
}
function lh(t) {
  return t.constructor.name === "KeyboardEvent";
}
const Wv = function(t, e) {
  var d;
  let n = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {}, i = 0, a = 0;
  if (!lh(t)) {
    const h = e.getBoundingClientRect(), f = Is(t) ? t.touches[t.touches.length - 1] : t;
    i = f.clientX - h.left, a = f.clientY - h.top;
  }
  let o = 0, r = 0.3;
  (d = e._ripple) != null && d.circle ? (r = 0.15, o = e.clientWidth / 2, o = n.center ? o : o + Math.sqrt((i - o) ** 2 + (a - o) ** 2) / 4) : o = Math.sqrt(e.clientWidth ** 2 + e.clientHeight ** 2) / 2;
  const s = `${(e.clientWidth - o * 2) / 2}px`, l = `${(e.clientHeight - o * 2) / 2}px`, c = n.center ? s : `${i - o}px`, u = n.center ? l : `${a - o}px`;
  return {
    radius: o,
    scale: r,
    x: c,
    y: u,
    centerX: s,
    centerY: l
  };
}, ir = {
  /* eslint-disable max-statements */
  show(t, e) {
    var f;
    let n = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
    if (!((f = e == null ? void 0 : e._ripple) != null && f.enabled))
      return;
    const i = document.createElement("span"), a = document.createElement("span");
    i.appendChild(a), i.className = "v-ripple__container", n.class && (i.className += ` ${n.class}`);
    const {
      radius: o,
      scale: r,
      x: s,
      y: l,
      centerX: c,
      centerY: u
    } = Wv(t, e, n), d = `${o * 2}px`;
    a.className = "v-ripple__animation", a.style.width = d, a.style.height = d, e.appendChild(i);
    const h = window.getComputedStyle(e);
    h && h.position === "static" && (e.style.position = "relative", e.dataset.previousPosition = "static"), a.classList.add("v-ripple__animation--enter"), a.classList.add("v-ripple__animation--visible"), au(a, `translate(${s}, ${l}) scale3d(${r},${r},${r})`), a.dataset.activated = String(performance.now()), setTimeout(() => {
      a.classList.remove("v-ripple__animation--enter"), a.classList.add("v-ripple__animation--in"), au(a, `translate(${c}, ${u}) scale3d(1,1,1)`);
    }, 0);
  },
  hide(t) {
    var o;
    if (!((o = t == null ? void 0 : t._ripple) != null && o.enabled))
      return;
    const e = t.getElementsByClassName("v-ripple__animation");
    if (e.length === 0)
      return;
    const n = e[e.length - 1];
    if (n.dataset.isHiding)
      return;
    n.dataset.isHiding = "true";
    const i = performance.now() - Number(n.dataset.activated), a = Math.max(250 - i, 0);
    setTimeout(() => {
      n.classList.remove("v-ripple__animation--in"), n.classList.add("v-ripple__animation--out"), setTimeout(() => {
        var s;
        t.getElementsByClassName("v-ripple__animation").length === 1 && t.dataset.previousPosition && (t.style.position = t.dataset.previousPosition, delete t.dataset.previousPosition), ((s = n.parentNode) == null ? void 0 : s.parentNode) === t && t.removeChild(n.parentNode);
      }, 300);
    }, a);
  }
};
function ch(t) {
  return typeof t > "u" || !!t;
}
function Xa(t) {
  const e = {}, n = t.currentTarget;
  if (!(!(n != null && n._ripple) || n._ripple.touched || t[Rs])) {
    if (t[Rs] = !0, Is(t))
      n._ripple.touched = !0, n._ripple.isTouch = !0;
    else if (n._ripple.isTouch)
      return;
    if (e.center = n._ripple.centered || lh(t), n._ripple.class && (e.class = n._ripple.class), Is(t)) {
      if (n._ripple.showTimerCommit)
        return;
      n._ripple.showTimerCommit = () => {
        ir.show(t, n, e);
      }, n._ripple.showTimer = window.setTimeout(() => {
        var i;
        (i = n == null ? void 0 : n._ripple) != null && i.showTimerCommit && (n._ripple.showTimerCommit(), n._ripple.showTimerCommit = null);
      }, $v);
    } else
      ir.show(t, n, e);
  }
}
function ou(t) {
  t[Rs] = !0;
}
function Et(t) {
  const e = t.currentTarget;
  if (e != null && e._ripple) {
    if (window.clearTimeout(e._ripple.showTimer), t.type === "touchend" && e._ripple.showTimerCommit) {
      e._ripple.showTimerCommit(), e._ripple.showTimerCommit = null, e._ripple.showTimer = window.setTimeout(() => {
        Et(t);
      });
      return;
    }
    window.setTimeout(() => {
      e._ripple && (e._ripple.touched = !1);
    }), ir.hide(e);
  }
}
function uh(t) {
  const e = t.currentTarget;
  e != null && e._ripple && (e._ripple.showTimerCommit && (e._ripple.showTimerCommit = null), window.clearTimeout(e._ripple.showTimer));
}
let Ya = !1;
function dh(t) {
  !Ya && (t.keyCode === Oc.enter || t.keyCode === Oc.space) && (Ya = !0, Xa(t));
}
function hh(t) {
  Ya = !1, Et(t);
}
function fh(t) {
  Ya && (Ya = !1, Et(t));
}
function gh(t, e, n) {
  const {
    value: i,
    modifiers: a
  } = e, o = ch(i);
  if (o || ir.hide(t), t._ripple = t._ripple ?? {}, t._ripple.enabled = o, t._ripple.centered = a.center, t._ripple.circle = a.circle, Ts(i) && i.class && (t._ripple.class = i.class), o && !n) {
    if (a.stop) {
      t.addEventListener("touchstart", ou, {
        passive: !0
      }), t.addEventListener("mousedown", ou);
      return;
    }
    t.addEventListener("touchstart", Xa, {
      passive: !0
    }), t.addEventListener("touchend", Et, {
      passive: !0
    }), t.addEventListener("touchmove", uh, {
      passive: !0
    }), t.addEventListener("touchcancel", Et), t.addEventListener("mousedown", Xa), t.addEventListener("mouseup", Et), t.addEventListener("mouseleave", Et), t.addEventListener("keydown", dh), t.addEventListener("keyup", hh), t.addEventListener("blur", fh), t.addEventListener("dragstart", Et, {
      passive: !0
    });
  } else
    !o && n && mh(t);
}
function mh(t) {
  t.removeEventListener("mousedown", Xa), t.removeEventListener("touchstart", Xa), t.removeEventListener("touchend", Et), t.removeEventListener("touchmove", uh), t.removeEventListener("touchcancel", Et), t.removeEventListener("mouseup", Et), t.removeEventListener("mouseleave", Et), t.removeEventListener("keydown", dh), t.removeEventListener("keyup", hh), t.removeEventListener("dragstart", Et), t.removeEventListener("blur", fh);
}
function Uv(t, e) {
  gh(t, e, !1);
}
function Xv(t) {
  delete t._ripple, mh(t);
}
function Yv(t, e) {
  if (e.value === e.oldValue)
    return;
  const n = ch(e.oldValue);
  gh(t, e, n);
}
const pa = {
  mounted: Uv,
  unmounted: Xv,
  updated: Yv
}, vh = $({
  label: String,
  baseColor: String,
  trueValue: null,
  falseValue: null,
  value: null,
  ...ue(),
  ...sh()
}, "VSelectionControl");
function jv(t) {
  const e = Ne(rh, void 0), {
    densityClasses: n
  } = Un(t), i = Be(t, "modelValue"), a = x(() => t.trueValue !== void 0 ? t.trueValue : t.value !== void 0 ? t.value : !0), o = x(() => t.falseValue !== void 0 ? t.falseValue : !1), r = x(() => !!t.multiple || t.multiple == null && Array.isArray(i.value)), s = x({
    get() {
      const f = e ? e.modelValue.value : i.value;
      return r.value ? Dt(f).some((g) => t.valueComparator(g, a.value)) : t.valueComparator(f, a.value);
    },
    set(f) {
      if (t.readonly)
        return;
      const g = f ? a.value : o.value;
      let m = g;
      r.value && (m = f ? [...Dt(i.value), g] : Dt(i.value).filter((v) => !t.valueComparator(v, a.value))), e ? e.modelValue.value = m : i.value = m;
    }
  }), {
    textColorClasses: l,
    textColorStyles: c
  } = fn(x(() => {
    if (!(t.error || t.disabled))
      return s.value ? t.color : t.baseColor;
  })), {
    backgroundColorClasses: u,
    backgroundColorStyles: d
  } = Pt(x(() => s.value && !t.error && !t.disabled ? t.color : void 0)), h = x(() => s.value ? t.trueIcon : t.falseIcon);
  return {
    group: e,
    densityClasses: n,
    trueValue: a,
    falseValue: o,
    model: s,
    textColorClasses: l,
    textColorStyles: c,
    backgroundColorClasses: u,
    backgroundColorStyles: d,
    icon: h
  };
}
const ru = K()({
  name: "VSelectionControl",
  directives: {
    Ripple: pa
  },
  inheritAttrs: !1,
  props: vh(),
  emits: {
    "update:modelValue": (t) => !0
  },
  setup(t, e) {
    let {
      attrs: n,
      slots: i
    } = e;
    const {
      group: a,
      densityClasses: o,
      icon: r,
      model: s,
      textColorClasses: l,
      textColorStyles: c,
      backgroundColorClasses: u,
      backgroundColorStyles: d,
      trueValue: h
    } = jv(t), f = _n(), g = q(!1), m = q(!1), v = Z(), y = x(() => t.id || `input-${f}`), p = x(() => !t.disabled && !t.readonly);
    a == null || a.onForceUpdate(() => {
      v.value && (v.value.checked = s.value);
    });
    function M(_) {
      p.value && (g.value = !0, ra(_.target, ":focus-visible") !== !1 && (m.value = !0));
    }
    function S() {
      g.value = !1, m.value = !1;
    }
    function b(_) {
      _.stopPropagation();
    }
    function T(_) {
      p.value && (t.readonly && a && je(() => a.forceUpdate()), s.value = _.target.checked);
    }
    return ie(() => {
      var z, A;
      const _ = i.label ? i.label({
        label: t.label,
        props: {
          for: y.value
        }
      }) : t.label, [P, w] = dl(n), I = C("input", se({
        ref: v,
        checked: s.value,
        disabled: !!t.disabled,
        id: y.value,
        onBlur: S,
        onFocus: M,
        onInput: T,
        "aria-disabled": !!t.disabled,
        type: t.type,
        value: h.value,
        name: t.name,
        "aria-checked": t.type === "checkbox" ? s.value : void 0
      }, w), null);
      return C("div", se({
        class: ["v-selection-control", {
          "v-selection-control--dirty": s.value,
          "v-selection-control--disabled": t.disabled,
          "v-selection-control--error": t.error,
          "v-selection-control--focused": g.value,
          "v-selection-control--focus-visible": m.value,
          "v-selection-control--inline": t.inline
        }, o.value, t.class]
      }, P, {
        style: t.style
      }), [C("div", {
        class: ["v-selection-control__wrapper", l.value],
        style: c.value
      }, [(z = i.default) == null ? void 0 : z.call(i, {
        backgroundColorClasses: u,
        backgroundColorStyles: d
      }), Ze(C("div", {
        class: ["v-selection-control__input"]
      }, [((A = i.input) == null ? void 0 : A.call(i, {
        model: s,
        textColorClasses: l,
        textColorStyles: c,
        backgroundColorClasses: u,
        backgroundColorStyles: d,
        inputNode: I,
        icon: r.value,
        props: {
          onFocus: M,
          onBlur: S,
          id: y.value
        }
      })) ?? C(de, null, [r.value && C(Ie, {
        key: "icon",
        icon: r.value
      }, null), I])]), [[Jt("ripple"), t.ripple && [!t.disabled && !t.readonly, null, ["center", "circle"]]]])]), _ && C(oh, {
        for: y.value,
        onClick: b
      }, {
        default: () => [_]
      })]);
    }), {
      isFocused: g,
      input: v
    };
  }
}), Zv = $({
  indeterminate: Boolean,
  indeterminateIcon: {
    type: xe,
    default: "$checkboxIndeterminate"
  },
  ...vh({
    falseIcon: "$checkboxOff",
    trueIcon: "$checkboxOn"
  })
}, "VCheckboxBtn"), Ch = K()({
  name: "VCheckboxBtn",
  props: Zv(),
  emits: {
    "update:modelValue": (t) => !0,
    "update:indeterminate": (t) => !0
  },
  setup(t, e) {
    let {
      slots: n
    } = e;
    const i = Be(t, "indeterminate"), a = Be(t, "modelValue");
    function o(l) {
      i.value && (i.value = !1);
    }
    const r = x(() => i.value ? t.indeterminateIcon : t.falseIcon), s = x(() => i.value ? t.indeterminateIcon : t.trueIcon);
    return ie(() => {
      const l = Li(ru.filterProps(t), ["modelValue"]);
      return C(ru, se(l, {
        modelValue: a.value,
        "onUpdate:modelValue": [(c) => a.value = c, o],
        class: ["v-checkbox-btn", t.class],
        style: t.style,
        type: "checkbox",
        falseIcon: r.value,
        trueIcon: s.value,
        "aria-checked": i.value ? "mixed" : void 0
      }), n);
    }), {};
  }
});
const yh = Symbol.for("vuetify:locale");
function _a() {
  const t = Ne(yh);
  if (!t)
    throw new Error("[Vuetify] Could not find injected locale instance");
  return t;
}
function Qt() {
  const t = Ne(yh);
  if (!t)
    throw new Error("[Vuetify] Could not find injected rtl instance");
  return {
    isRtl: t.isRtl,
    rtlClasses: t.rtlClasses
  };
}
function ph(t) {
  const {
    t: e
  } = _a();
  function n(i) {
    let {
      name: a
    } = i;
    const o = {
      prepend: "prependAction",
      prependInner: "prependAction",
      append: "appendAction",
      appendInner: "appendAction",
      clear: "clear"
    }[a], r = t[`onClick:${a}`], s = r && o ? e(`$vuetify.input.${o}`, t.label ?? "") : void 0;
    return C(Ie, {
      icon: t[`${a}Icon`],
      "aria-label": s,
      onClick: r
    }, null);
  }
  return {
    InputIcon: n
  };
}
const Hv = $({
  disabled: Boolean,
  group: Boolean,
  hideOnLeave: Boolean,
  leaveAbsolute: Boolean,
  mode: String,
  origin: String
}, "transition");
function It(t, e, n) {
  return K()({
    name: t,
    props: Hv({
      mode: n,
      origin: e
    }),
    setup(i, a) {
      let {
        slots: o
      } = a;
      const r = {
        onBeforeEnter(s) {
          i.origin && (s.style.transformOrigin = i.origin);
        },
        onLeave(s) {
          if (i.leaveAbsolute) {
            const {
              offsetTop: l,
              offsetLeft: c,
              offsetWidth: u,
              offsetHeight: d
            } = s;
            s._transitionInitialStyles = {
              position: s.style.position,
              top: s.style.top,
              left: s.style.left,
              width: s.style.width,
              height: s.style.height
            }, s.style.position = "absolute", s.style.top = `${l}px`, s.style.left = `${c}px`, s.style.width = `${u}px`, s.style.height = `${d}px`;
          }
          i.hideOnLeave && s.style.setProperty("display", "none", "important");
        },
        onAfterLeave(s) {
          if (i.leaveAbsolute && (s != null && s._transitionInitialStyles)) {
            const {
              position: l,
              top: c,
              left: u,
              width: d,
              height: h
            } = s._transitionInitialStyles;
            delete s._transitionInitialStyles, s.style.position = l || "", s.style.top = c || "", s.style.left = u || "", s.style.width = d || "", s.style.height = h || "";
          }
        }
      };
      return () => {
        const s = i.group ? gm : ri;
        return ma(s, {
          name: i.disabled ? "" : t,
          css: !i.disabled,
          ...i.group ? void 0 : {
            mode: i.mode
          },
          ...i.disabled ? {} : r
        }, o.default);
      };
    }
  });
}
function _h(t, e) {
  let n = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : "in-out";
  return K()({
    name: t,
    props: {
      mode: {
        type: String,
        default: n
      },
      disabled: Boolean
    },
    setup(i, a) {
      let {
        slots: o
      } = a;
      return () => ma(ri, {
        name: i.disabled ? "" : t,
        css: !i.disabled,
        // mode: props.mode, // TODO: vuejs/vue-next#3104
        ...i.disabled ? {} : e
      }, o.default);
    }
  });
}
function Sh() {
  let t = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "";
  const n = (arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : !1) ? "width" : "height", i = kd(`offset-${n}`);
  return {
    onBeforeEnter(r) {
      r._parent = r.parentNode, r._initialStyle = {
        transition: r.style.transition,
        overflow: r.style.overflow,
        [n]: r.style[n]
      };
    },
    onEnter(r) {
      const s = r._initialStyle;
      r.style.setProperty("transition", "none", "important"), r.style.overflow = "hidden";
      const l = `${r[i]}px`;
      r.style[n] = "0", r.offsetHeight, r.style.transition = s.transition, t && r._parent && r._parent.classList.add(t), requestAnimationFrame(() => {
        r.style[n] = l;
      });
    },
    onAfterEnter: o,
    onEnterCancelled: o,
    onLeave(r) {
      r._initialStyle = {
        transition: "",
        overflow: r.style.overflow,
        [n]: r.style[n]
      }, r.style.overflow = "hidden", r.style[n] = `${r[i]}px`, r.offsetHeight, requestAnimationFrame(() => r.style[n] = "0");
    },
    onAfterLeave: a,
    onLeaveCancelled: a
  };
  function a(r) {
    t && r._parent && r._parent.classList.remove(t), o(r);
  }
  function o(r) {
    const s = r._initialStyle[n];
    r.style.overflow = r._initialStyle.overflow, s != null && (r.style[n] = s), delete r._initialStyle;
  }
}
const Kv = $({
  target: [Object, Array]
}, "v-dialog-transition"), bh = K()({
  name: "VDialogTransition",
  props: Kv(),
  setup(t, e) {
    let {
      slots: n
    } = e;
    const i = {
      onBeforeEnter(a) {
        a.style.pointerEvents = "none", a.style.visibility = "hidden";
      },
      async onEnter(a, o) {
        var h;
        await new Promise((f) => requestAnimationFrame(f)), await new Promise((f) => requestAnimationFrame(f)), a.style.visibility = "";
        const {
          x: r,
          y: s,
          sx: l,
          sy: c,
          speed: u
        } = lu(t.target, a), d = Ji(a, [{
          transform: `translate(${r}px, ${s}px) scale(${l}, ${c})`,
          opacity: 0
        }, {}], {
          duration: 225 * u,
          easing: xv
        });
        (h = su(a)) == null || h.forEach((f) => {
          Ji(f, [{
            opacity: 0
          }, {
            opacity: 0,
            offset: 0.33
          }, {}], {
            duration: 225 * 2 * u,
            easing: tr
          });
        }), d.finished.then(() => o());
      },
      onAfterEnter(a) {
        a.style.removeProperty("pointer-events");
      },
      onBeforeLeave(a) {
        a.style.pointerEvents = "none";
      },
      async onLeave(a, o) {
        var h;
        await new Promise((f) => requestAnimationFrame(f));
        const {
          x: r,
          y: s,
          sx: l,
          sy: c,
          speed: u
        } = lu(t.target, a);
        Ji(a, [{}, {
          transform: `translate(${r}px, ${s}px) scale(${l}, ${c})`,
          opacity: 0
        }], {
          duration: 125 * u,
          easing: Pv
        }).finished.then(() => o()), (h = su(a)) == null || h.forEach((f) => {
          Ji(f, [{}, {
            opacity: 0,
            offset: 0.2
          }, {
            opacity: 0
          }], {
            duration: 125 * 2 * u,
            easing: tr
          });
        });
      },
      onAfterLeave(a) {
        a.style.removeProperty("pointer-events");
      }
    };
    return () => t.target ? C(ri, se({
      name: "dialog-transition"
    }, i, {
      css: !1
    }), n) : C(ri, {
      name: "dialog-transition"
    }, n);
  }
});
function su(t) {
  var n;
  const e = (n = t.querySelector(":scope > .v-card, :scope > .v-sheet, :scope > .v-list")) == null ? void 0 : n.children;
  return e && [...e];
}
function lu(t, e) {
  const n = qd(t), i = gl(e), [a, o] = getComputedStyle(e).transformOrigin.split(" ").map((y) => parseFloat(y)), [r, s] = getComputedStyle(e).getPropertyValue("--v-overlay-anchor-origin").split(" ");
  let l = n.left + n.width / 2;
  r === "left" || s === "left" ? l -= n.width / 2 : (r === "right" || s === "right") && (l += n.width / 2);
  let c = n.top + n.height / 2;
  r === "top" || s === "top" ? c -= n.height / 2 : (r === "bottom" || s === "bottom") && (c += n.height / 2);
  const u = n.width / i.width, d = n.height / i.height, h = Math.max(1, u, d), f = u / h || 0, g = d / h || 0, m = i.width * i.height / (window.innerWidth * window.innerHeight), v = m > 0.12 ? Math.min(1.5, (m - 0.12) * 10 + 1) : 1;
  return {
    x: l - (a + i.left),
    y: c - (o + i.top),
    sx: f,
    sy: g,
    speed: v
  };
}
It("fab-transition", "center center", "out-in");
It("dialog-bottom-transition");
It("dialog-top-transition");
const cu = It("fade-transition");
It("scale-transition");
It("scroll-x-transition");
It("scroll-x-reverse-transition");
It("scroll-y-transition");
It("scroll-y-reverse-transition");
It("slide-x-transition");
It("slide-x-reverse-transition");
const Mh = It("slide-y-transition");
It("slide-y-reverse-transition");
const pl = _h("expand-transition", Sh()), xh = _h("expand-x-transition", Sh("", !0)), qv = $({
  active: Boolean,
  color: String,
  messages: {
    type: [Array, String],
    default: () => []
  },
  ...ue(),
  ...ya({
    transition: {
      component: Mh,
      leaveAbsolute: !0,
      group: !0
    }
  })
}, "VMessages"), Jv = K()({
  name: "VMessages",
  props: qv(),
  setup(t, e) {
    let {
      slots: n
    } = e;
    const i = x(() => Dt(t.messages)), {
      textColorClasses: a,
      textColorStyles: o
    } = fn(x(() => t.color));
    return ie(() => C(kn, {
      transition: t.transition,
      tag: "div",
      class: ["v-messages", a.value, t.class],
      style: [o.value, t.style],
      role: "alert",
      "aria-live": "polite"
    }, {
      default: () => [t.active && i.value.map((r, s) => C("div", {
        class: "v-messages__message",
        key: `${s}-${i.value}`
      }, [n.message ? n.message({
        message: r
      }) : r]))]
    })), {};
  }
}), Ph = $({
  focused: Boolean,
  "onUpdate:focused": Xt()
}, "focus");
function _l(t) {
  let e = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : pn();
  const n = Be(t, "focused"), i = x(() => ({
    [`${e}--focused`]: n.value
  }));
  function a() {
    n.value = !0;
  }
  function o() {
    n.value = !1;
  }
  return {
    focusClasses: i,
    isFocused: n,
    focus: a,
    blur: o
  };
}
const Th = Symbol.for("vuetify:form"), Qv = $({
  disabled: Boolean,
  fastFail: Boolean,
  readonly: Boolean,
  modelValue: {
    type: Boolean,
    default: null
  },
  validateOn: {
    type: String,
    default: "input"
  }
}, "form");
function eC(t) {
  const e = Be(t, "modelValue"), n = x(() => t.disabled), i = x(() => t.readonly), a = q(!1), o = Z([]), r = Z([]);
  async function s() {
    const u = [];
    let d = !0;
    r.value = [], a.value = !0;
    for (const h of o.value) {
      const f = await h.validate();
      if (f.length > 0 && (d = !1, u.push({
        id: h.id,
        errorMessages: f
      })), !d && t.fastFail)
        break;
    }
    return r.value = u, a.value = !1, {
      valid: d,
      errors: r.value
    };
  }
  function l() {
    o.value.forEach((u) => u.reset());
  }
  function c() {
    o.value.forEach((u) => u.resetValidation());
  }
  return Q(o, () => {
    let u = 0, d = 0;
    const h = [];
    for (const f of o.value)
      f.isValid === !1 ? (d++, h.push({
        id: f.id,
        errorMessages: f.errorMessages
      })) : f.isValid === !0 && u++;
    r.value = h, e.value = d > 0 ? !1 : u === o.value.length ? !0 : null;
  }, {
    deep: !0
  }), it(Th, {
    register: (u) => {
      let {
        id: d,
        validate: h,
        reset: f,
        resetValidation: g
      } = u;
      o.value.some((m) => m.id === d) && Ri(`Duplicate input name "${d}"`), o.value.push({
        id: d,
        validate: h,
        reset: f,
        resetValidation: g,
        isValid: null,
        errorMessages: []
      });
    },
    unregister: (u) => {
      o.value = o.value.filter((d) => d.id !== u);
    },
    update: (u, d, h) => {
      const f = o.value.find((g) => g.id === u);
      f && (f.isValid = d, f.errorMessages = h);
    },
    isDisabled: n,
    isReadonly: i,
    isValidating: a,
    isValid: e,
    items: o,
    validateOn: te(t, "validateOn")
  }), {
    errors: r,
    isDisabled: n,
    isReadonly: i,
    isValidating: a,
    isValid: e,
    items: o,
    validate: s,
    reset: l,
    resetValidation: c
  };
}
function Sl() {
  return Ne(Th, null);
}
const tC = $({
  disabled: {
    type: Boolean,
    default: null
  },
  error: Boolean,
  errorMessages: {
    type: [Array, String],
    default: () => []
  },
  maxErrors: {
    type: [Number, String],
    default: 1
  },
  name: String,
  label: String,
  readonly: {
    type: Boolean,
    default: null
  },
  rules: {
    type: Array,
    default: () => []
  },
  modelValue: null,
  validateOn: String,
  validationValue: null,
  ...Ph()
}, "validation");
function nC(t) {
  let e = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : pn(), n = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : _n();
  const i = Be(t, "modelValue"), a = x(() => t.validationValue === void 0 ? i.value : t.validationValue), o = Sl(), r = Z([]), s = q(!0), l = x(() => !!(Dt(i.value === "" ? null : i.value).length || Dt(a.value === "" ? null : a.value).length)), c = x(() => !!(t.disabled ?? (o == null ? void 0 : o.isDisabled.value))), u = x(() => !!(t.readonly ?? (o == null ? void 0 : o.isReadonly.value))), d = x(() => {
    var S;
    return (S = t.errorMessages) != null && S.length ? Dt(t.errorMessages).concat(r.value).slice(0, Math.max(0, +t.maxErrors)) : r.value;
  }), h = x(() => {
    let S = (t.validateOn ?? (o == null ? void 0 : o.validateOn.value)) || "input";
    S === "lazy" && (S = "input lazy");
    const b = new Set((S == null ? void 0 : S.split(" ")) ?? []);
    return {
      blur: b.has("blur") || b.has("input"),
      input: b.has("input"),
      submit: b.has("submit"),
      lazy: b.has("lazy")
    };
  }), f = x(() => {
    var S;
    return t.error || (S = t.errorMessages) != null && S.length ? !1 : t.rules.length ? s.value ? r.value.length || h.value.lazy ? null : !0 : !r.value.length : !0;
  }), g = q(!1), m = x(() => ({
    [`${e}--error`]: f.value === !1,
    [`${e}--dirty`]: l.value,
    [`${e}--disabled`]: c.value,
    [`${e}--readonly`]: u.value
  })), v = x(() => t.name ?? O(n));
  nl(() => {
    o == null || o.register({
      id: v.value,
      validate: M,
      reset: y,
      resetValidation: p
    });
  }), vt(() => {
    o == null || o.unregister(v.value);
  }), nt(async () => {
    h.value.lazy || await M(!0), o == null || o.update(v.value, f.value, d.value);
  }), Yt(() => h.value.input, () => {
    Q(a, () => {
      if (a.value != null)
        M();
      else if (t.focused) {
        const S = Q(() => t.focused, (b) => {
          b || M(), S();
        });
      }
    });
  }), Yt(() => h.value.blur, () => {
    Q(() => t.focused, (S) => {
      S || M();
    });
  }), Q([f, d], () => {
    o == null || o.update(v.value, f.value, d.value);
  });
  function y() {
    i.value = null, je(p);
  }
  function p() {
    s.value = !0, h.value.lazy ? r.value = [] : M(!0);
  }
  async function M() {
    let S = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : !1;
    const b = [];
    g.value = !0;
    for (const T of t.rules) {
      if (b.length >= +(t.maxErrors ?? 1))
        break;
      const P = await (typeof T == "function" ? T : () => T)(a.value);
      if (P !== !0) {
        if (P !== !1 && typeof P != "string") {
          console.warn(`${P} is not a valid value. Rule functions must return boolean true or a string.`);
          continue;
        }
        b.push(P || "");
      }
    }
    return r.value = b, g.value = !1, s.value = S, r.value;
  }
  return {
    errorMessages: d,
    isDirty: l,
    isDisabled: c,
    isReadonly: u,
    isPristine: s,
    isValid: f,
    isValidating: g,
    reset: y,
    resetValidation: p,
    validate: M,
    validationClasses: m
  };
}
const bl = $({
  id: String,
  appendIcon: xe,
  centerAffix: {
    type: Boolean,
    default: !0
  },
  prependIcon: xe,
  hideDetails: [Boolean, String],
  hideSpinButtons: Boolean,
  hint: String,
  persistentHint: Boolean,
  messages: {
    type: [Array, String],
    default: () => []
  },
  direction: {
    type: String,
    default: "horizontal",
    validator: (t) => ["horizontal", "vertical"].includes(t)
  },
  "onClick:prepend": Xt(),
  "onClick:append": Xt(),
  ...ue(),
  ...Sn(),
  ...tC()
}, "VInput"), ar = K()({
  name: "VInput",
  props: {
    ...bl()
  },
  emits: {
    "update:modelValue": (t) => !0
  },
  setup(t, e) {
    let {
      attrs: n,
      slots: i,
      emit: a
    } = e;
    const {
      densityClasses: o
    } = Un(t), {
      rtlClasses: r
    } = Qt(), {
      InputIcon: s
    } = ph(t), l = _n(), c = x(() => t.id || `input-${l}`), u = x(() => `${c.value}-messages`), {
      errorMessages: d,
      isDirty: h,
      isDisabled: f,
      isReadonly: g,
      isPristine: m,
      isValid: v,
      isValidating: y,
      reset: p,
      resetValidation: M,
      validate: S,
      validationClasses: b
    } = nC(t, "v-input", c), T = x(() => ({
      id: c,
      messagesId: u,
      isDirty: h,
      isDisabled: f,
      isReadonly: g,
      isPristine: m,
      isValid: v,
      isValidating: y,
      reset: p,
      resetValidation: M,
      validate: S
    })), _ = x(() => {
      var P;
      return (P = t.errorMessages) != null && P.length || !m.value && d.value.length ? d.value : t.hint && (t.persistentHint || t.focused) ? t.hint : t.messages;
    });
    return ie(() => {
      var A, R, V, N;
      const P = !!(i.prepend || t.prependIcon), w = !!(i.append || t.appendIcon), I = _.value.length > 0, z = !t.hideDetails || t.hideDetails === "auto" && (I || !!i.details);
      return C("div", {
        class: ["v-input", `v-input--${t.direction}`, {
          "v-input--center-affix": t.centerAffix,
          "v-input--hide-spin-buttons": t.hideSpinButtons
        }, o.value, r.value, b.value, t.class],
        style: t.style
      }, [P && C("div", {
        key: "prepend",
        class: "v-input__prepend"
      }, [(A = i.prepend) == null ? void 0 : A.call(i, T.value), t.prependIcon && C(s, {
        key: "prepend-icon",
        name: "prepend"
      }, null)]), i.default && C("div", {
        class: "v-input__control"
      }, [(R = i.default) == null ? void 0 : R.call(i, T.value)]), w && C("div", {
        key: "append",
        class: "v-input__append"
      }, [t.appendIcon && C(s, {
        key: "append-icon",
        name: "append"
      }, null), (V = i.append) == null ? void 0 : V.call(i, T.value)]), z && C("div", {
        class: "v-input__details"
      }, [C(Jv, {
        id: u.value,
        active: I,
        messages: _.value
      }, {
        message: i.message
      }), (N = i.details) == null ? void 0 : N.call(i, T.value)])]);
    }), {
      reset: p,
      resetValidation: M,
      validate: S,
      isValid: v,
      errorMessages: d
    };
  }
});
const Sr = ["sm", "md", "lg", "xl", "xxl"], iC = Symbol.for("vuetify:display"), wh = $({
  mobileBreakpoint: [Number, String]
}, "display");
function br() {
  let t = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {}, e = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : pn();
  const n = Ne(iC);
  if (!n)
    throw new Error("Could not find Vuetify display injection");
  const i = x(() => {
    if (!t.mobileBreakpoint)
      return n.mobile.value;
    const o = typeof t.mobileBreakpoint == "number" ? t.mobileBreakpoint : n.thresholds.value[t.mobileBreakpoint];
    return n.width.value < o;
  }), a = x(() => e ? {
    [`${e}--mobile`]: i.value
  } : {});
  return {
    ...n,
    displayClasses: a,
    mobile: i
  };
}
const Mr = $({
  modelValue: {
    type: null,
    default: void 0
  },
  multiple: Boolean,
  mandatory: [Boolean, String],
  max: Number,
  selectedClass: String,
  disabled: Boolean
}, "group"), po = $({
  value: null,
  disabled: Boolean,
  selectedClass: String
}, "group-item");
function _o(t, e) {
  let n = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : !0;
  const i = He("useGroupItem");
  if (!i)
    throw new Error("[Vuetify] useGroupItem composable must be used inside a component setup function");
  const a = _n();
  it(Symbol.for(`${e.description}:id`), a);
  const o = Ne(e, null);
  if (!o) {
    if (!n)
      return o;
    throw new Error(`[Vuetify] Could not find useGroup injection with symbol ${e.description}`);
  }
  const r = te(t, "value"), s = x(() => !!(o.disabled.value || t.disabled));
  o.register({
    id: a,
    value: r,
    disabled: s
  }, i), vt(() => {
    o.unregister(a);
  });
  const l = x(() => o.isSelected(a)), c = x(() => l.value && [o.selectedClass.value, t.selectedClass]);
  return Q(l, (u) => {
    i.emit("group:selected", {
      value: u
    });
  }), {
    id: a,
    isSelected: l,
    toggle: () => o.select(a, !l.value),
    select: (u) => o.select(a, u),
    selectedClass: c,
    value: r,
    disabled: s,
    group: o
  };
}
function So(t, e) {
  let n = !1;
  const i = Fn([]), a = Be(t, "modelValue", [], (h) => h == null ? [] : Eh(i, Dt(h)), (h) => {
    const f = oC(i, h);
    return t.multiple ? f : f[0];
  }), o = He("useGroup");
  function r(h, f) {
    const g = h, m = Symbol.for(`${e.description}:id`), y = Oa(m, o == null ? void 0 : o.vnode).indexOf(f);
    O(g.value) == null && (g.value = y), y > -1 ? i.splice(y, 0, g) : i.push(g);
  }
  function s(h) {
    if (n)
      return;
    l();
    const f = i.findIndex((g) => g.id === h);
    i.splice(f, 1);
  }
  function l() {
    const h = i.find((f) => !f.disabled);
    h && t.mandatory === "force" && !a.value.length && (a.value = [h.id]);
  }
  nt(() => {
    l();
  }), vt(() => {
    n = !0;
  });
  function c(h, f) {
    const g = i.find((m) => m.id === h);
    if (!(f && (g != null && g.disabled)))
      if (t.multiple) {
        const m = a.value.slice(), v = m.findIndex((p) => p === h), y = ~v;
        if (f = f ?? !y, y && t.mandatory && m.length <= 1 || !y && t.max != null && m.length + 1 > t.max)
          return;
        v < 0 && f ? m.push(h) : v >= 0 && !f && m.splice(v, 1), a.value = m;
      } else {
        const m = a.value.includes(h);
        if (t.mandatory && m)
          return;
        a.value = f ?? !m ? [h] : [];
      }
  }
  function u(h) {
    if (t.multiple && Ri('This method is not supported when using "multiple" prop'), a.value.length) {
      const f = a.value[0], g = i.findIndex((y) => y.id === f);
      let m = (g + h) % i.length, v = i[m];
      for (; v.disabled && m !== g; )
        m = (m + h) % i.length, v = i[m];
      if (v.disabled)
        return;
      a.value = [i[m].id];
    } else {
      const f = i.find((g) => !g.disabled);
      f && (a.value = [f.id]);
    }
  }
  const d = {
    register: r,
    unregister: s,
    selected: a,
    select: c,
    disabled: te(t, "disabled"),
    prev: () => u(i.length - 1),
    next: () => u(1),
    isSelected: (h) => a.value.includes(h),
    selectedClass: x(() => t.selectedClass),
    items: x(() => i),
    getItemIndex: (h) => aC(i, h)
  };
  return it(e, d), d;
}
function aC(t, e) {
  const n = Eh(t, [e]);
  return n.length ? t.findIndex((i) => i.id === n[0]) : -1;
}
function Eh(t, e) {
  const n = [];
  return e.forEach((i) => {
    const a = t.find((r) => Ca(i, r.value)), o = t[i];
    (a == null ? void 0 : a.value) != null ? n.push(a.id) : o != null && n.push(o.id);
  }), n;
}
function oC(t, e) {
  const n = [];
  return e.forEach((i) => {
    const a = t.findIndex((o) => o.id === i);
    if (~a) {
      const o = t[a];
      n.push(o.value != null ? o.value : a);
    }
  }), n;
}
function Ii(t) {
  let e = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "content";
  const n = Z(), i = Z();
  if (ht) {
    const a = new ResizeObserver((o) => {
      t == null || t(o, a), o.length && (e === "content" ? i.value = o[0].contentRect : i.value = o[0].target.getBoundingClientRect());
    });
    vt(() => {
      a.disconnect();
    }), Q(n, (o, r) => {
      r && (a.unobserve(Ko(r)), i.value = void 0), o && a.observe(Ko(o));
    }, {
      flush: "post"
    });
  }
  return {
    resizeRef: n,
    contentRect: al(i)
  };
}
function uu(t) {
  const n = Math.abs(t);
  return Math.sign(t) * (n / ((1 / 0.501 - 2) * (1 - n) + 1));
}
function du(t) {
  let {
    selectedElement: e,
    containerSize: n,
    contentSize: i,
    isRtl: a,
    currentScrollOffset: o,
    isHorizontal: r
  } = t;
  const s = r ? e.clientWidth : e.clientHeight, l = r ? e.offsetLeft : e.offsetTop, c = a && r ? i - l - s : l, u = n + o, d = s + c, h = s * 0.4;
  return c <= o ? o = Math.max(c - h, 0) : u <= d && (o = Math.min(o - (u - d - h), i - n)), o;
}
function rC(t) {
  let {
    selectedElement: e,
    containerSize: n,
    contentSize: i,
    isRtl: a,
    isHorizontal: o
  } = t;
  const r = o ? e.clientWidth : e.clientHeight, s = o ? e.offsetLeft : e.offsetTop, l = a && o ? i - s - r / 2 - n / 2 : s + r / 2 - n / 2;
  return Math.min(i - n, Math.max(0, l));
}
const Ah = Symbol.for("vuetify:v-slide-group"), Rh = $({
  centerActive: Boolean,
  direction: {
    type: String,
    default: "horizontal"
  },
  symbol: {
    type: null,
    default: Ah
  },
  nextIcon: {
    type: xe,
    default: "$next"
  },
  prevIcon: {
    type: xe,
    default: "$prev"
  },
  showArrows: {
    type: [Boolean, String],
    validator: (t) => typeof t == "boolean" || ["always", "desktop", "mobile"].includes(t)
  },
  ...ue(),
  ...wh(),
  ...Le(),
  ...Mr({
    selectedClass: "v-slide-group-item--active"
  })
}, "VSlideGroup"), zs = K()({
  name: "VSlideGroup",
  props: Rh(),
  emits: {
    "update:modelValue": (t) => !0
  },
  setup(t, e) {
    let {
      slots: n
    } = e;
    const {
      isRtl: i
    } = Qt(), {
      displayClasses: a,
      mobile: o
    } = br(t), r = So(t, t.symbol), s = q(!1), l = q(0), c = q(0), u = q(0), d = x(() => t.direction === "horizontal"), {
      resizeRef: h,
      contentRect: f
    } = Ii(), {
      resizeRef: g,
      contentRect: m
    } = Ii(), v = x(() => r.selected.value.length ? r.items.value.findIndex((k) => k.id === r.selected.value[0]) : -1), y = x(() => r.selected.value.length ? r.items.value.findIndex((k) => k.id === r.selected.value[r.selected.value.length - 1]) : -1);
    if (ht) {
      let k = -1;
      Q(() => [r.selected.value, f.value, m.value, d.value], () => {
        cancelAnimationFrame(k), k = requestAnimationFrame(() => {
          if (f.value && m.value) {
            const W = d.value ? "width" : "height";
            c.value = f.value[W], u.value = m.value[W], s.value = c.value + 1 < u.value;
          }
          if (v.value >= 0 && g.value) {
            const W = g.value.children[y.value];
            v.value === 0 || !s.value ? l.value = 0 : t.centerActive ? l.value = rC({
              selectedElement: W,
              containerSize: c.value,
              contentSize: u.value,
              isRtl: i.value,
              isHorizontal: d.value
            }) : s.value && (l.value = du({
              selectedElement: W,
              containerSize: c.value,
              contentSize: u.value,
              isRtl: i.value,
              currentScrollOffset: l.value,
              isHorizontal: d.value
            }));
          }
        });
      });
    }
    const p = q(!1);
    let M = 0, S = 0;
    function b(k) {
      const W = d.value ? "clientX" : "clientY";
      S = (i.value && d.value ? -1 : 1) * l.value, M = k.touches[0][W], p.value = !0;
    }
    function T(k) {
      if (!s.value)
        return;
      const W = d.value ? "clientX" : "clientY", U = i.value && d.value ? -1 : 1;
      l.value = U * (S + M - k.touches[0][W]);
    }
    function _(k) {
      const W = u.value - c.value;
      l.value < 0 || !s.value ? l.value = 0 : l.value >= W && (l.value = W), p.value = !1;
    }
    function P() {
      h.value && (h.value[d.value ? "scrollLeft" : "scrollTop"] = 0);
    }
    const w = q(!1);
    function I(k) {
      if (w.value = !0, !(!s.value || !g.value)) {
        for (const W of k.composedPath())
          for (const U of g.value.children)
            if (U === W) {
              l.value = du({
                selectedElement: U,
                containerSize: c.value,
                contentSize: u.value,
                isRtl: i.value,
                currentScrollOffset: l.value,
                isHorizontal: d.value
              });
              return;
            }
      }
    }
    function z(k) {
      w.value = !1;
    }
    function A(k) {
      var W;
      !w.value && !(k.relatedTarget && ((W = g.value) != null && W.contains(k.relatedTarget))) && V();
    }
    function R(k) {
      g.value && (d.value ? k.key === "ArrowRight" ? V(i.value ? "prev" : "next") : k.key === "ArrowLeft" && V(i.value ? "next" : "prev") : k.key === "ArrowDown" ? V("next") : k.key === "ArrowUp" && V("prev"), k.key === "Home" ? V("first") : k.key === "End" && V("last"));
    }
    function V(k) {
      var W, U, L, ee, J;
      if (g.value)
        if (!k)
          (W = Jo(g.value)[0]) == null || W.focus();
        else if (k === "next") {
          const ae = (U = g.value.querySelector(":focus")) == null ? void 0 : U.nextElementSibling;
          ae ? ae.focus() : V("first");
        } else if (k === "prev") {
          const ae = (L = g.value.querySelector(":focus")) == null ? void 0 : L.previousElementSibling;
          ae ? ae.focus() : V("last");
        } else
          k === "first" ? (ee = g.value.firstElementChild) == null || ee.focus() : k === "last" && ((J = g.value.lastElementChild) == null || J.focus());
    }
    function N(k) {
      const W = l.value + (k === "prev" ? -1 : 1) * c.value;
      l.value = ai(W, 0, u.value - c.value);
    }
    const G = x(() => {
      let k = l.value > u.value - c.value ? -(u.value - c.value) + uu(u.value - c.value - l.value) : -l.value;
      l.value <= 0 && (k = uu(-l.value));
      const W = i.value && d.value ? -1 : 1;
      return {
        transform: `translate${d.value ? "X" : "Y"}(${W * k}px)`,
        transition: p.value ? "none" : "",
        willChange: p.value ? "transform" : ""
      };
    }), X = x(() => ({
      next: r.next,
      prev: r.prev,
      select: r.select,
      isSelected: r.isSelected
    })), E = x(() => {
      switch (t.showArrows) {
        case "always":
          return !0;
        case "desktop":
          return !o.value;
        case !0:
          return s.value || Math.abs(l.value) > 0;
        case "mobile":
          return o.value || s.value || Math.abs(l.value) > 0;
        default:
          return !o.value && (s.value || Math.abs(l.value) > 0);
      }
    }), B = x(() => Math.abs(l.value) > 0), D = x(() => u.value > Math.abs(l.value) + c.value);
    return ie(() => C(t.tag, {
      class: ["v-slide-group", {
        "v-slide-group--vertical": !d.value,
        "v-slide-group--has-affixes": E.value,
        "v-slide-group--is-overflowing": s.value
      }, a.value, t.class],
      style: t.style,
      tabindex: w.value || r.selected.value.length ? -1 : 0,
      onFocus: A
    }, {
      default: () => {
        var k, W, U;
        return [E.value && C("div", {
          key: "prev",
          class: ["v-slide-group__prev", {
            "v-slide-group__prev--disabled": !B.value
          }],
          onClick: () => B.value && N("prev")
        }, [((k = n.prev) == null ? void 0 : k.call(n, X.value)) ?? C(cu, null, {
          default: () => [C(Ie, {
            icon: i.value ? t.nextIcon : t.prevIcon
          }, null)]
        })]), C("div", {
          key: "container",
          ref: h,
          class: "v-slide-group__container",
          onScroll: P
        }, [C("div", {
          ref: g,
          class: "v-slide-group__content",
          style: G.value,
          onTouchstartPassive: b,
          onTouchmovePassive: T,
          onTouchendPassive: _,
          onFocusin: I,
          onFocusout: z,
          onKeydown: R
        }, [(W = n.default) == null ? void 0 : W.call(n, X.value)])]), E.value && C("div", {
          key: "next",
          class: ["v-slide-group__next", {
            "v-slide-group__next--disabled": !D.value
          }],
          onClick: () => D.value && N("next")
        }, [((U = n.next) == null ? void 0 : U.call(n, X.value)) ?? C(cu, null, {
          default: () => [C(Ie, {
            icon: i.value ? t.prevIcon : t.nextIcon
          }, null)]
        })])];
      }
    })), {
      selected: r.selected,
      scrollTo: N,
      scrollOffset: l,
      focus: V
    };
  }
}), Ih = Symbol.for("vuetify:v-chip-group"), sC = $({
  column: Boolean,
  filter: Boolean,
  valueComparator: {
    type: Function,
    default: Ca
  },
  ...Rh(),
  ...ue(),
  ...Mr({
    selectedClass: "v-chip--selected"
  }),
  ...Le(),
  ...ke(),
  ...gi({
    variant: "tonal"
  })
}, "VChipGroup");
K()({
  name: "VChipGroup",
  props: sC(),
  emits: {
    "update:modelValue": (t) => !0
  },
  setup(t, e) {
    let {
      slots: n
    } = e;
    const {
      themeClasses: i
    } = $e(t), {
      isSelected: a,
      select: o,
      next: r,
      prev: s,
      selected: l
    } = So(t, Ih);
    return yn({
      VChip: {
        color: te(t, "color"),
        disabled: te(t, "disabled"),
        filter: te(t, "filter"),
        variant: te(t, "variant")
      }
    }), ie(() => {
      const c = zs.filterProps(t);
      return C(zs, se(c, {
        class: ["v-chip-group", {
          "v-chip-group--column": t.column
        }, i.value, t.class],
        style: t.style
      }), {
        default: () => {
          var u;
          return [(u = n.default) == null ? void 0 : u.call(n, {
            isSelected: a,
            select: o,
            next: r,
            prev: s,
            selected: l.value
          })];
        }
      });
    }), {};
  }
});
const lC = $({
  defaults: Object,
  disabled: Boolean,
  reset: [Number, String],
  root: [Boolean, String],
  scoped: Boolean
}, "VDefaultsProvider"), Xe = K(!1)({
  name: "VDefaultsProvider",
  props: lC(),
  setup(t, e) {
    let {
      slots: n
    } = e;
    const {
      defaults: i,
      disabled: a,
      reset: o,
      root: r,
      scoped: s
    } = Fd(t);
    return yn(i, {
      reset: o,
      root: r,
      scoped: s,
      disabled: a
    }), () => {
      var l;
      return (l = n.default) == null ? void 0 : l.call(n);
    };
  }
}), bn = $({
  border: [Boolean, Number, String]
}, "border");
function Mn(t) {
  let e = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : pn();
  return {
    borderClasses: x(() => {
      const i = co(t) ? t.value : t.border, a = [];
      if (i === !0 || i === "")
        a.push(`${e}--border`);
      else if (typeof i == "string" || i === 0)
        for (const o of String(i).split(" "))
          a.push(`border-${o}`);
      return a;
    })
  };
}
const en = $({
  elevation: {
    type: [Number, String],
    validator(t) {
      const e = parseInt(t);
      return !isNaN(e) && e >= 0 && // Material Design has a maximum elevation of 24
      // https://material.io/design/environment/elevation.html#default-elevations
      e <= 24;
    }
  }
}, "elevation");
function tn(t) {
  return {
    elevationClasses: x(() => {
      const n = co(t) ? t.value : t.elevation, i = [];
      return n == null || i.push(`elevation-${n}`), i;
    })
  };
}
function cC() {
  const t = He("useRoute");
  return x(() => {
    var e;
    return (e = t == null ? void 0 : t.proxy) == null ? void 0 : e.$route;
  });
}
function zh() {
  var t, e;
  return (e = (t = He("useRouter")) == null ? void 0 : t.proxy) == null ? void 0 : e.$router;
}
function xr(t, e) {
  const n = Od("RouterLink"), i = x(() => !!(t.href || t.to)), a = x(() => (i == null ? void 0 : i.value) || Nc(e, "click") || Nc(t, "click"));
  if (typeof n == "string")
    return {
      isLink: i,
      isClickable: a,
      href: te(t, "href")
    };
  const o = t.to ? n.useLink(t) : void 0, r = cC();
  return {
    isLink: i,
    isClickable: a,
    route: o == null ? void 0 : o.route,
    navigate: o == null ? void 0 : o.navigate,
    isActive: o && x(() => {
      var s, l, c;
      return t.exact ? r.value ? ((c = o.isExactActive) == null ? void 0 : c.value) && Ca(o.route.value.query, r.value.query) : (l = o.isExactActive) == null ? void 0 : l.value : (s = o.isActive) == null ? void 0 : s.value;
    }),
    href: x(() => t.to ? o == null ? void 0 : o.route.value.href : t.href)
  };
}
const Pr = $({
  href: String,
  replace: Boolean,
  to: [String, Object],
  exact: Boolean
}, "router");
let ns = !1;
function uC(t, e) {
  let n = !1, i, a;
  ht && (je(() => {
    window.addEventListener("popstate", o), i = t == null ? void 0 : t.beforeEach((r, s, l) => {
      ns ? n ? e(l) : l() : setTimeout(() => n ? e(l) : l()), ns = !0;
    }), a = t == null ? void 0 : t.afterEach(() => {
      ns = !1;
    });
  }), Tt(() => {
    window.removeEventListener("popstate", o), i == null || i(), a == null || a();
  }));
  function o(r) {
    var s;
    (s = r.state) != null && s.replaced || (n = !0, setTimeout(() => n = !1));
  }
}
const dC = $({
  activeClass: String,
  appendAvatar: String,
  appendIcon: xe,
  closable: Boolean,
  closeIcon: {
    type: xe,
    default: "$delete"
  },
  closeLabel: {
    type: String,
    default: "$vuetify.close"
  },
  draggable: Boolean,
  filter: Boolean,
  filterIcon: {
    type: String,
    default: "$complete"
  },
  label: Boolean,
  link: {
    type: Boolean,
    default: void 0
  },
  pill: Boolean,
  prependAvatar: String,
  prependIcon: xe,
  ripple: {
    type: [Boolean, Object],
    default: !0
  },
  text: String,
  modelValue: {
    type: Boolean,
    default: !0
  },
  onClick: Xt(),
  onClickOnce: Xt(),
  ...bn(),
  ...ue(),
  ...Sn(),
  ...en(),
  ...po(),
  ...Ct(),
  ...Pr(),
  ...mo(),
  ...Le({
    tag: "span"
  }),
  ...ke(),
  ...gi({
    variant: "tonal"
  })
}, "VChip"), Lh = K()({
  name: "VChip",
  directives: {
    Ripple: pa
  },
  props: dC(),
  emits: {
    "click:close": (t) => !0,
    "update:modelValue": (t) => !0,
    "group:selected": (t) => !0,
    click: (t) => !0
  },
  setup(t, e) {
    let {
      attrs: n,
      emit: i,
      slots: a
    } = e;
    const {
      t: o
    } = _a(), {
      borderClasses: r
    } = Mn(t), {
      colorClasses: s,
      colorStyles: l,
      variantClasses: c
    } = yo(t), {
      densityClasses: u
    } = Un(t), {
      elevationClasses: d
    } = tn(t), {
      roundedClasses: h
    } = yt(t), {
      sizeClasses: f
    } = vo(t), {
      themeClasses: g
    } = $e(t), m = Be(t, "modelValue"), v = _o(t, Ih, !1), y = xr(t, n), p = x(() => t.link !== !1 && y.isLink.value), M = x(() => !t.disabled && t.link !== !1 && (!!v || t.link || y.isClickable.value)), S = x(() => ({
      "aria-label": o(t.closeLabel),
      onClick(_) {
        _.stopPropagation(), m.value = !1, i("click:close", _);
      }
    }));
    function b(_) {
      var P;
      i("click", _), M.value && ((P = y.navigate) == null || P.call(y, _), v == null || v.toggle());
    }
    function T(_) {
      (_.key === "Enter" || _.key === " ") && (_.preventDefault(), b(_));
    }
    return () => {
      const _ = y.isLink.value ? "a" : t.tag, P = !!(t.appendIcon || t.appendAvatar), w = !!(P || a.append), I = !!(a.close || t.closable), z = !!(a.filter || t.filter) && v, A = !!(t.prependIcon || t.prependAvatar), R = !!(A || a.prepend), V = !v || v.isSelected.value;
      return m.value && Ze(C(_, {
        class: ["v-chip", {
          "v-chip--disabled": t.disabled,
          "v-chip--label": t.label,
          "v-chip--link": M.value,
          "v-chip--filter": z,
          "v-chip--pill": t.pill
        }, g.value, r.value, V ? s.value : void 0, u.value, d.value, h.value, f.value, c.value, v == null ? void 0 : v.selectedClass.value, t.class],
        style: [V ? l.value : void 0, t.style],
        disabled: t.disabled || void 0,
        draggable: t.draggable,
        href: y.href.value,
        tabindex: M.value ? 0 : void 0,
        onClick: b,
        onKeydown: M.value && !p.value && T
      }, {
        default: () => {
          var N;
          return [Co(M.value, "v-chip"), z && C(xh, {
            key: "filter"
          }, {
            default: () => [Ze(C("div", {
              class: "v-chip__filter"
            }, [a.filter ? C(Xe, {
              key: "filter-defaults",
              disabled: !t.filterIcon,
              defaults: {
                VIcon: {
                  icon: t.filterIcon
                }
              }
            }, a.filter) : C(Ie, {
              key: "filter-icon",
              icon: t.filterIcon
            }, null)]), [[ui, v.isSelected.value]])]
          }), R && C("div", {
            key: "prepend",
            class: "v-chip__prepend"
          }, [a.prepend ? C(Xe, {
            key: "prepend-defaults",
            disabled: !A,
            defaults: {
              VAvatar: {
                image: t.prependAvatar,
                start: !0
              },
              VIcon: {
                icon: t.prependIcon,
                start: !0
              }
            }
          }, a.prepend) : C(de, null, [t.prependIcon && C(Ie, {
            key: "prepend-icon",
            icon: t.prependIcon,
            start: !0
          }, null), t.prependAvatar && C(si, {
            key: "prepend-avatar",
            image: t.prependAvatar,
            start: !0
          }, null)])]), C("div", {
            class: "v-chip__content"
          }, [((N = a.default) == null ? void 0 : N.call(a, {
            isSelected: v == null ? void 0 : v.isSelected.value,
            selectedClass: v == null ? void 0 : v.selectedClass.value,
            select: v == null ? void 0 : v.select,
            toggle: v == null ? void 0 : v.toggle,
            value: v == null ? void 0 : v.value.value,
            disabled: t.disabled
          })) ?? t.text]), w && C("div", {
            key: "append",
            class: "v-chip__append"
          }, [a.append ? C(Xe, {
            key: "append-defaults",
            disabled: !P,
            defaults: {
              VAvatar: {
                end: !0,
                image: t.appendAvatar
              },
              VIcon: {
                end: !0,
                icon: t.appendIcon
              }
            }
          }, a.append) : C(de, null, [t.appendIcon && C(Ie, {
            key: "append-icon",
            end: !0,
            icon: t.appendIcon
          }, null), t.appendAvatar && C(si, {
            key: "append-avatar",
            end: !0,
            image: t.appendAvatar
          }, null)])]), I && C("button", se({
            key: "close",
            class: "v-chip__close",
            type: "button"
          }, S.value), [a.close ? C(Xe, {
            key: "close-defaults",
            defaults: {
              VIcon: {
                icon: t.closeIcon,
                size: "x-small"
              }
            }
          }, a.close) : C(Ie, {
            key: "close-icon",
            icon: t.closeIcon,
            size: "x-small"
          }, null)])];
        }
      }), [[Jt("ripple"), M.value && t.ripple, null]]);
    };
  }
});
const Ls = Symbol.for("vuetify:list");
function Vh() {
  const t = Ne(Ls, {
    hasPrepend: q(!1),
    updateHasPrepend: () => null
  }), e = {
    hasPrepend: q(!1),
    updateHasPrepend: (n) => {
      n && (e.hasPrepend.value = n);
    }
  };
  return it(Ls, e), t;
}
function Bh() {
  return Ne(Ls, null);
}
const hC = {
  open: (t) => {
    let {
      id: e,
      value: n,
      opened: i,
      parents: a
    } = t;
    if (n) {
      const o = /* @__PURE__ */ new Set();
      o.add(e);
      let r = a.get(e);
      for (; r != null; )
        o.add(r), r = a.get(r);
      return o;
    } else
      return i.delete(e), i;
  },
  select: () => null
}, Fh = {
  open: (t) => {
    let {
      id: e,
      value: n,
      opened: i,
      parents: a
    } = t;
    if (n) {
      let o = a.get(e);
      for (i.add(e); o != null && o !== e; )
        i.add(o), o = a.get(o);
      return i;
    } else
      i.delete(e);
    return i;
  },
  select: () => null
}, fC = {
  open: Fh.open,
  select: (t) => {
    let {
      id: e,
      value: n,
      opened: i,
      parents: a
    } = t;
    if (!n)
      return i;
    const o = [];
    let r = a.get(e);
    for (; r != null; )
      o.push(r), r = a.get(r);
    return new Set(o);
  }
}, Ml = (t) => {
  const e = {
    select: (n) => {
      let {
        id: i,
        value: a,
        selected: o
      } = n;
      if (i = di(i), t && !a) {
        const r = Array.from(o.entries()).reduce((s, l) => {
          let [c, u] = l;
          return u === "on" ? [...s, c] : s;
        }, []);
        if (r.length === 1 && r[0] === i)
          return o;
      }
      return o.set(i, a ? "on" : "off"), o;
    },
    in: (n, i, a) => {
      let o = /* @__PURE__ */ new Map();
      for (const r of n || [])
        o = e.select({
          id: r,
          value: !0,
          selected: new Map(o),
          children: i,
          parents: a
        });
      return o;
    },
    out: (n) => {
      const i = [];
      for (const [a, o] of n.entries())
        o === "on" && i.push(a);
      return i;
    }
  };
  return e;
}, kh = (t) => {
  const e = Ml(t);
  return {
    select: (i) => {
      let {
        selected: a,
        id: o,
        ...r
      } = i;
      o = di(o);
      const s = a.has(o) ? /* @__PURE__ */ new Map([[o, a.get(o)]]) : /* @__PURE__ */ new Map();
      return e.select({
        ...r,
        id: o,
        selected: s
      });
    },
    in: (i, a, o) => {
      let r = /* @__PURE__ */ new Map();
      return i != null && i.length && (r = e.in(i.slice(0, 1), a, o)), r;
    },
    out: (i, a, o) => e.out(i, a, o)
  };
}, gC = (t) => {
  const e = Ml(t);
  return {
    select: (i) => {
      let {
        id: a,
        selected: o,
        children: r,
        ...s
      } = i;
      return a = di(a), r.has(a) ? o : e.select({
        id: a,
        selected: o,
        children: r,
        ...s
      });
    },
    in: e.in,
    out: e.out
  };
}, mC = (t) => {
  const e = kh(t);
  return {
    select: (i) => {
      let {
        id: a,
        selected: o,
        children: r,
        ...s
      } = i;
      return a = di(a), r.has(a) ? o : e.select({
        id: a,
        selected: o,
        children: r,
        ...s
      });
    },
    in: e.in,
    out: e.out
  };
}, vC = (t) => {
  const e = {
    select: (n) => {
      let {
        id: i,
        value: a,
        selected: o,
        children: r,
        parents: s
      } = n;
      i = di(i);
      const l = new Map(o), c = [i];
      for (; c.length; ) {
        const d = c.shift();
        o.set(d, a ? "on" : "off"), r.has(d) && c.push(...r.get(d));
      }
      let u = s.get(i);
      for (; u; ) {
        const d = r.get(u), h = d.every((g) => o.get(g) === "on"), f = d.every((g) => !o.has(g) || o.get(g) === "off");
        o.set(u, h ? "on" : f ? "off" : "indeterminate"), u = s.get(u);
      }
      return t && !a && Array.from(o.entries()).reduce((h, f) => {
        let [g, m] = f;
        return m === "on" ? [...h, g] : h;
      }, []).length === 0 ? l : o;
    },
    in: (n, i, a) => {
      let o = /* @__PURE__ */ new Map();
      for (const r of n || [])
        o = e.select({
          id: r,
          value: !0,
          selected: new Map(o),
          children: i,
          parents: a
        });
      return o;
    },
    out: (n, i) => {
      const a = [];
      for (const [o, r] of n.entries())
        r === "on" && !i.has(o) && a.push(o);
      return a;
    }
  };
  return e;
}, ja = Symbol.for("vuetify:nested"), Oh = {
  id: q(),
  root: {
    register: () => null,
    unregister: () => null,
    parents: Z(/* @__PURE__ */ new Map()),
    children: Z(/* @__PURE__ */ new Map()),
    open: () => null,
    openOnSelect: () => null,
    select: () => null,
    opened: Z(/* @__PURE__ */ new Set()),
    selected: Z(/* @__PURE__ */ new Map()),
    selectedValues: Z([])
  }
}, CC = $({
  selectStrategy: [String, Function],
  openStrategy: [String, Object],
  opened: Array,
  selected: Array,
  mandatory: Boolean
}, "nested"), yC = (t) => {
  let e = !1;
  const n = Z(/* @__PURE__ */ new Map()), i = Z(/* @__PURE__ */ new Map()), a = Be(t, "opened", t.opened, (d) => new Set(d), (d) => [...d.values()]), o = x(() => {
    if (typeof t.selectStrategy == "object")
      return t.selectStrategy;
    switch (t.selectStrategy) {
      case "single-leaf":
        return mC(t.mandatory);
      case "leaf":
        return gC(t.mandatory);
      case "independent":
        return Ml(t.mandatory);
      case "single-independent":
        return kh(t.mandatory);
      case "classic":
      default:
        return vC(t.mandatory);
    }
  }), r = x(() => {
    if (typeof t.openStrategy == "object")
      return t.openStrategy;
    switch (t.openStrategy) {
      case "list":
        return fC;
      case "single":
        return hC;
      case "multiple":
      default:
        return Fh;
    }
  }), s = Be(t, "selected", t.selected, (d) => o.value.in(d, n.value, i.value), (d) => o.value.out(d, n.value, i.value));
  vt(() => {
    e = !0;
  });
  function l(d) {
    const h = [];
    let f = d;
    for (; f != null; )
      h.unshift(f), f = i.value.get(f);
    return h;
  }
  const c = He("nested"), u = {
    id: q(),
    root: {
      opened: a,
      selected: s,
      selectedValues: x(() => {
        const d = [];
        for (const [h, f] of s.value.entries())
          f === "on" && d.push(h);
        return d;
      }),
      register: (d, h, f) => {
        h && d !== h && i.value.set(d, h), f && n.value.set(d, []), h != null && n.value.set(h, [...n.value.get(h) || [], d]);
      },
      unregister: (d) => {
        if (e)
          return;
        n.value.delete(d);
        const h = i.value.get(d);
        if (h) {
          const f = n.value.get(h) ?? [];
          n.value.set(h, f.filter((g) => g !== d));
        }
        i.value.delete(d), a.value.delete(d);
      },
      open: (d, h, f) => {
        c.emit("click:open", {
          id: d,
          value: h,
          path: l(d),
          event: f
        });
        const g = r.value.open({
          id: d,
          value: h,
          opened: new Set(a.value),
          children: n.value,
          parents: i.value,
          event: f
        });
        g && (a.value = g);
      },
      openOnSelect: (d, h, f) => {
        const g = r.value.select({
          id: d,
          value: h,
          selected: new Map(s.value),
          opened: new Set(a.value),
          children: n.value,
          parents: i.value,
          event: f
        });
        g && (a.value = g);
      },
      select: (d, h, f) => {
        c.emit("click:select", {
          id: d,
          value: h,
          path: l(d),
          event: f
        });
        const g = o.value.select({
          id: d,
          value: h,
          selected: new Map(s.value),
          children: n.value,
          parents: i.value,
          event: f
        });
        g && (s.value = g), u.root.openOnSelect(d, h, f);
      },
      children: n,
      parents: i
    }
  };
  return it(ja, u), u.root;
}, Dh = (t, e) => {
  const n = Ne(ja, Oh), i = Symbol(_n()), a = x(() => t.value !== void 0 ? t.value : i), o = {
    ...n,
    id: a,
    open: (r, s) => n.root.open(a.value, r, s),
    openOnSelect: (r, s) => n.root.openOnSelect(a.value, r, s),
    isOpen: x(() => n.root.opened.value.has(a.value)),
    parent: x(() => n.root.parents.value.get(a.value)),
    select: (r, s) => n.root.select(a.value, r, s),
    isSelected: x(() => n.root.selected.value.get(di(a.value)) === "on"),
    isIndeterminate: x(() => n.root.selected.value.get(a.value) === "indeterminate"),
    isLeaf: x(() => !n.root.children.value.get(a.value)),
    isGroupActivator: n.isGroupActivator
  };
  return !n.isGroupActivator && n.root.register(a.value, n.id.value, e), vt(() => {
    !n.isGroupActivator && n.root.unregister(a.value);
  }), e && it(ja, o), o;
}, pC = () => {
  const t = Ne(ja, Oh);
  it(ja, {
    ...t,
    isGroupActivator: !0
  });
};
function bo() {
  const t = q(!1);
  return nt(() => {
    window.requestAnimationFrame(() => {
      t.value = !0;
    });
  }), {
    ssrBootStyles: x(() => t.value ? void 0 : {
      transition: "none !important"
    }),
    isBooted: al(t)
  };
}
const _C = fo({
  name: "VListGroupActivator",
  setup(t, e) {
    let {
      slots: n
    } = e;
    return pC(), () => {
      var i;
      return (i = n.default) == null ? void 0 : i.call(n);
    };
  }
}), SC = $({
  /* @deprecated */
  activeColor: String,
  baseColor: String,
  color: String,
  collapseIcon: {
    type: xe,
    default: "$collapse"
  },
  expandIcon: {
    type: xe,
    default: "$expand"
  },
  prependIcon: xe,
  appendIcon: xe,
  fluid: Boolean,
  subgroup: Boolean,
  title: String,
  value: null,
  ...ue(),
  ...Le()
}, "VListGroup"), hu = K()({
  name: "VListGroup",
  props: SC(),
  setup(t, e) {
    let {
      slots: n
    } = e;
    const {
      isOpen: i,
      open: a,
      id: o
    } = Dh(te(t, "value"), !0), r = x(() => `v-list-group--id-${String(o.value)}`), s = Bh(), {
      isBooted: l
    } = bo();
    function c(f) {
      a(!i.value, f);
    }
    const u = x(() => ({
      onClick: c,
      class: "v-list-group__header",
      id: r.value
    })), d = x(() => i.value ? t.collapseIcon : t.expandIcon), h = x(() => ({
      VListItem: {
        active: i.value,
        activeColor: t.activeColor,
        baseColor: t.baseColor,
        color: t.color,
        prependIcon: t.prependIcon || t.subgroup && d.value,
        appendIcon: t.appendIcon || !t.subgroup && d.value,
        title: t.title,
        value: t.value
      }
    }));
    return ie(() => C(t.tag, {
      class: ["v-list-group", {
        "v-list-group--prepend": s == null ? void 0 : s.hasPrepend.value,
        "v-list-group--fluid": t.fluid,
        "v-list-group--subgroup": t.subgroup,
        "v-list-group--open": i.value
      }, t.class],
      style: t.style
    }, {
      default: () => [n.activator && C(Xe, {
        defaults: h.value
      }, {
        default: () => [C(_C, null, {
          default: () => [n.activator({
            props: u.value,
            isOpen: i.value
          })]
        })]
      }), C(kn, {
        transition: {
          component: pl
        },
        disabled: !l.value
      }, {
        default: () => {
          var f;
          return [Ze(C("div", {
            class: "v-list-group__items",
            role: "group",
            "aria-labelledby": r.value
          }, [(f = n.default) == null ? void 0 : f.call(n)]), [[ui, i.value]])];
        }
      })]
    })), {};
  }
});
const bC = go("v-list-item-subtitle"), Gh = go("v-list-item-title"), MC = $({
  active: {
    type: Boolean,
    default: void 0
  },
  activeClass: String,
  /* @deprecated */
  activeColor: String,
  appendAvatar: String,
  appendIcon: xe,
  baseColor: String,
  disabled: Boolean,
  lines: String,
  link: {
    type: Boolean,
    default: void 0
  },
  nav: Boolean,
  prependAvatar: String,
  prependIcon: xe,
  ripple: {
    type: [Boolean, Object],
    default: !0
  },
  slim: Boolean,
  subtitle: [String, Number],
  title: [String, Number],
  value: null,
  onClick: Xt(),
  onClickOnce: Xt(),
  ...bn(),
  ...ue(),
  ...Sn(),
  ...hi(),
  ...en(),
  ...Ct(),
  ...Pr(),
  ...Le(),
  ...ke(),
  ...gi({
    variant: "text"
  })
}, "VListItem"), mn = K()({
  name: "VListItem",
  directives: {
    Ripple: pa
  },
  props: MC(),
  emits: {
    click: (t) => !0
  },
  setup(t, e) {
    let {
      attrs: n,
      slots: i,
      emit: a
    } = e;
    const o = xr(t, n), r = x(() => t.value === void 0 ? o.href.value : t.value), {
      select: s,
      isSelected: l,
      isIndeterminate: c,
      isGroupActivator: u,
      root: d,
      parent: h,
      openOnSelect: f
    } = Dh(r, !1), g = Bh(), m = x(() => {
      var E;
      return t.active !== !1 && (t.active || ((E = o.isActive) == null ? void 0 : E.value) || l.value);
    }), v = x(() => t.link !== !1 && o.isLink.value), y = x(() => !t.disabled && t.link !== !1 && (t.link || o.isClickable.value || t.value != null && !!g)), p = x(() => t.rounded || t.nav), M = x(() => t.color ?? t.activeColor), S = x(() => ({
      color: m.value ? M.value ?? t.baseColor : t.baseColor,
      variant: t.variant
    }));
    Q(() => {
      var E;
      return (E = o.isActive) == null ? void 0 : E.value;
    }, (E) => {
      E && h.value != null && d.open(h.value, !0), E && f(E);
    }, {
      immediate: !0
    });
    const {
      themeClasses: b
    } = $e(t), {
      borderClasses: T
    } = Mn(t), {
      colorClasses: _,
      colorStyles: P,
      variantClasses: w
    } = yo(S), {
      densityClasses: I
    } = Un(t), {
      dimensionStyles: z
    } = fi(t), {
      elevationClasses: A
    } = tn(t), {
      roundedClasses: R
    } = yt(p), V = x(() => t.lines ? `v-list-item--${t.lines}-line` : void 0), N = x(() => ({
      isActive: m.value,
      select: s,
      isSelected: l.value,
      isIndeterminate: c.value
    }));
    function G(E) {
      var B;
      a("click", E), !(u || !y.value) && ((B = o.navigate) == null || B.call(o, E), t.value != null && s(!l.value, E));
    }
    function X(E) {
      (E.key === "Enter" || E.key === " ") && (E.preventDefault(), G(E));
    }
    return ie(() => {
      const E = v.value ? "a" : t.tag, B = i.title || t.title != null, D = i.subtitle || t.subtitle != null, k = !!(t.appendAvatar || t.appendIcon), W = !!(k || i.append), U = !!(t.prependAvatar || t.prependIcon), L = !!(U || i.prepend);
      return g == null || g.updateHasPrepend(L), t.activeColor && vv("active-color", ["color", "base-color"]), Ze(C(E, {
        class: ["v-list-item", {
          "v-list-item--active": m.value,
          "v-list-item--disabled": t.disabled,
          "v-list-item--link": y.value,
          "v-list-item--nav": t.nav,
          "v-list-item--prepend": !L && (g == null ? void 0 : g.hasPrepend.value),
          "v-list-item--slim": t.slim,
          [`${t.activeClass}`]: t.activeClass && m.value
        }, b.value, T.value, _.value, I.value, A.value, V.value, R.value, w.value, t.class],
        style: [P.value, z.value, t.style],
        href: o.href.value,
        tabindex: y.value ? g ? -2 : 0 : void 0,
        onClick: G,
        onKeydown: y.value && !v.value && X
      }, {
        default: () => {
          var ee;
          return [Co(y.value || m.value, "v-list-item"), L && C("div", {
            key: "prepend",
            class: "v-list-item__prepend"
          }, [i.prepend ? C(Xe, {
            key: "prepend-defaults",
            disabled: !U,
            defaults: {
              VAvatar: {
                density: t.density,
                image: t.prependAvatar
              },
              VIcon: {
                density: t.density,
                icon: t.prependIcon
              },
              VListItemAction: {
                start: !0
              }
            }
          }, {
            default: () => {
              var J;
              return [(J = i.prepend) == null ? void 0 : J.call(i, N.value)];
            }
          }) : C(de, null, [t.prependAvatar && C(si, {
            key: "prepend-avatar",
            density: t.density,
            image: t.prependAvatar
          }, null), t.prependIcon && C(Ie, {
            key: "prepend-icon",
            density: t.density,
            icon: t.prependIcon
          }, null)]), C("div", {
            class: "v-list-item__spacer"
          }, null)]), C("div", {
            class: "v-list-item__content",
            "data-no-activator": ""
          }, [B && C(Gh, {
            key: "title"
          }, {
            default: () => {
              var J;
              return [((J = i.title) == null ? void 0 : J.call(i, {
                title: t.title
              })) ?? t.title];
            }
          }), D && C(bC, {
            key: "subtitle"
          }, {
            default: () => {
              var J;
              return [((J = i.subtitle) == null ? void 0 : J.call(i, {
                subtitle: t.subtitle
              })) ?? t.subtitle];
            }
          }), (ee = i.default) == null ? void 0 : ee.call(i, N.value)]), W && C("div", {
            key: "append",
            class: "v-list-item__append"
          }, [i.append ? C(Xe, {
            key: "append-defaults",
            disabled: !k,
            defaults: {
              VAvatar: {
                density: t.density,
                image: t.appendAvatar
              },
              VIcon: {
                density: t.density,
                icon: t.appendIcon
              },
              VListItemAction: {
                end: !0
              }
            }
          }, {
            default: () => {
              var J;
              return [(J = i.append) == null ? void 0 : J.call(i, N.value)];
            }
          }) : C(de, null, [t.appendIcon && C(Ie, {
            key: "append-icon",
            density: t.density,
            icon: t.appendIcon
          }, null), t.appendAvatar && C(si, {
            key: "append-avatar",
            density: t.density,
            image: t.appendAvatar
          }, null)]), C("div", {
            class: "v-list-item__spacer"
          }, null)])];
        }
      }), [[Jt("ripple"), y.value && t.ripple]]);
    }), {};
  }
}), xC = $({
  color: String,
  inset: Boolean,
  sticky: Boolean,
  title: String,
  ...ue(),
  ...Le()
}, "VListSubheader"), PC = K()({
  name: "VListSubheader",
  props: xC(),
  setup(t, e) {
    let {
      slots: n
    } = e;
    const {
      textColorClasses: i,
      textColorStyles: a
    } = fn(te(t, "color"));
    return ie(() => {
      const o = !!(n.default || t.title);
      return C(t.tag, {
        class: ["v-list-subheader", {
          "v-list-subheader--inset": t.inset,
          "v-list-subheader--sticky": t.sticky
        }, i.value, t.class],
        style: [{
          textColorStyles: a
        }, t.style]
      }, {
        default: () => {
          var r;
          return [o && C("div", {
            class: "v-list-subheader__text"
          }, [((r = n.default) == null ? void 0 : r.call(n)) ?? t.title])];
        }
      });
    }), {};
  }
});
const TC = $({
  color: String,
  inset: Boolean,
  length: [Number, String],
  thickness: [Number, String],
  vertical: Boolean,
  ...ue(),
  ...ke()
}, "VDivider"), wC = K()({
  name: "VDivider",
  props: TC(),
  setup(t, e) {
    let {
      attrs: n
    } = e;
    const {
      themeClasses: i
    } = $e(t), {
      textColorClasses: a,
      textColorStyles: o
    } = fn(te(t, "color")), r = x(() => {
      const s = {};
      return t.length && (s[t.vertical ? "maxHeight" : "maxWidth"] = oe(t.length)), t.thickness && (s[t.vertical ? "borderRightWidth" : "borderTopWidth"] = oe(t.thickness)), s;
    });
    return ie(() => C("hr", {
      class: [{
        "v-divider": !0,
        "v-divider--inset": t.inset,
        "v-divider--vertical": t.vertical
      }, i.value, a.value, t.class],
      style: [r.value, o.value, t.style],
      "aria-orientation": !n.role || n.role === "separator" ? t.vertical ? "vertical" : "horizontal" : void 0,
      role: `${n.role || "separator"}`
    }, null)), {};
  }
}), EC = $({
  items: Array,
  returnObject: Boolean
}, "VListChildren"), Nh = K()({
  name: "VListChildren",
  props: EC(),
  setup(t, e) {
    let {
      slots: n
    } = e;
    return Vh(), () => {
      var i, a;
      return ((i = n.default) == null ? void 0 : i.call(n)) ?? ((a = t.items) == null ? void 0 : a.map((o) => {
        var h, f;
        let {
          children: r,
          props: s,
          type: l,
          raw: c
        } = o;
        if (l === "divider")
          return ((h = n.divider) == null ? void 0 : h.call(n, {
            props: s
          })) ?? C(wC, s, null);
        if (l === "subheader")
          return ((f = n.subheader) == null ? void 0 : f.call(n, {
            props: s
          })) ?? C(PC, s, null);
        const u = {
          subtitle: n.subtitle ? (g) => {
            var m;
            return (m = n.subtitle) == null ? void 0 : m.call(n, {
              ...g,
              item: c
            });
          } : void 0,
          prepend: n.prepend ? (g) => {
            var m;
            return (m = n.prepend) == null ? void 0 : m.call(n, {
              ...g,
              item: c
            });
          } : void 0,
          append: n.append ? (g) => {
            var m;
            return (m = n.append) == null ? void 0 : m.call(n, {
              ...g,
              item: c
            });
          } : void 0,
          title: n.title ? (g) => {
            var m;
            return (m = n.title) == null ? void 0 : m.call(n, {
              ...g,
              item: c
            });
          } : void 0
        }, d = hu.filterProps(s);
        return r ? C(hu, se({
          value: s == null ? void 0 : s.value
        }, d), {
          activator: (g) => {
            let {
              props: m
            } = g;
            const v = {
              ...s,
              ...m,
              value: t.returnObject ? c : s.value
            };
            return n.header ? n.header({
              props: v
            }) : C(mn, v, u);
          },
          default: () => C(Nh, {
            items: r
          }, n)
        }) : n.item ? n.item({
          props: s
        }) : C(mn, se(s, {
          value: t.returnObject ? c : s.value
        }), u);
      }));
    };
  }
}), $h = $({
  items: {
    type: Array,
    default: () => []
  },
  itemTitle: {
    type: [String, Array, Function],
    default: "title"
  },
  itemValue: {
    type: [String, Array, Function],
    default: "value"
  },
  itemChildren: {
    type: [Boolean, String, Array, Function],
    default: "children"
  },
  itemProps: {
    type: [Boolean, String, Array, Function],
    default: "props"
  },
  returnObject: Boolean,
  valueComparator: {
    type: Function,
    default: Ca
  }
}, "list-items");
function Vs(t, e) {
  const n = rn(e, t.itemTitle, e), i = rn(e, t.itemValue, n), a = rn(e, t.itemChildren), o = t.itemProps === !0 ? typeof e == "object" && e != null && !Array.isArray(e) ? "children" in e ? Li(e, ["children"]) : e : void 0 : rn(e, t.itemProps), r = {
    title: n,
    value: i,
    ...o
  };
  return {
    title: String(r.title ?? ""),
    value: r.value,
    props: r,
    children: Array.isArray(a) ? Wh(t, a) : void 0,
    raw: e
  };
}
function Wh(t, e) {
  const n = [];
  for (const i of e)
    n.push(Vs(t, i));
  return n;
}
function Uh(t) {
  const e = x(() => Wh(t, t.items)), n = x(() => e.value.some((o) => o.value === null));
  function i(o) {
    return n.value || (o = o.filter((r) => r !== null)), o.map((r) => t.returnObject && typeof r == "string" ? Vs(t, r) : e.value.find((s) => t.valueComparator(r, s.value)) || Vs(t, r));
  }
  function a(o) {
    return t.returnObject ? o.map((r) => {
      let {
        raw: s
      } = r;
      return s;
    }) : o.map((r) => {
      let {
        value: s
      } = r;
      return s;
    });
  }
  return {
    items: e,
    transformIn: i,
    transformOut: a
  };
}
function AC(t) {
  return typeof t == "string" || typeof t == "number" || typeof t == "boolean";
}
function RC(t, e) {
  const n = rn(e, t.itemType, "item"), i = AC(e) ? e : rn(e, t.itemTitle), a = rn(e, t.itemValue, void 0), o = rn(e, t.itemChildren), r = t.itemProps === !0 ? Li(e, ["children"]) : rn(e, t.itemProps), s = {
    title: i,
    value: a,
    ...r
  };
  return {
    type: n,
    title: s.title,
    value: s.value,
    props: s,
    children: n === "item" && o ? Xh(t, o) : void 0,
    raw: e
  };
}
function Xh(t, e) {
  const n = [];
  for (const i of e)
    n.push(RC(t, i));
  return n;
}
function IC(t) {
  return {
    items: x(() => Xh(t, t.items))
  };
}
const zC = $({
  baseColor: String,
  /* @deprecated */
  activeColor: String,
  activeClass: String,
  bgColor: String,
  disabled: Boolean,
  expandIcon: String,
  collapseIcon: String,
  lines: {
    type: [Boolean, String],
    default: "one"
  },
  slim: Boolean,
  nav: Boolean,
  ...CC({
    selectStrategy: "single-leaf",
    openStrategy: "list"
  }),
  ...bn(),
  ...ue(),
  ...Sn(),
  ...hi(),
  ...en(),
  itemType: {
    type: String,
    default: "type"
  },
  ...$h(),
  ...Ct(),
  ...Le(),
  ...ke(),
  ...gi({
    variant: "text"
  })
}, "VList"), Sa = K()({
  name: "VList",
  props: zC(),
  emits: {
    "update:selected": (t) => !0,
    "update:opened": (t) => !0,
    "click:open": (t) => !0,
    "click:select": (t) => !0
  },
  setup(t, e) {
    let {
      slots: n
    } = e;
    const {
      items: i
    } = IC(t), {
      themeClasses: a
    } = $e(t), {
      backgroundColorClasses: o,
      backgroundColorStyles: r
    } = Pt(te(t, "bgColor")), {
      borderClasses: s
    } = Mn(t), {
      densityClasses: l
    } = Un(t), {
      dimensionStyles: c
    } = fi(t), {
      elevationClasses: u
    } = tn(t), {
      roundedClasses: d
    } = yt(t), {
      open: h,
      select: f
    } = yC(t), g = x(() => t.lines ? `v-list--${t.lines}-line` : void 0), m = te(t, "activeColor"), v = te(t, "baseColor"), y = te(t, "color");
    Vh(), yn({
      VListGroup: {
        activeColor: m,
        baseColor: v,
        color: y,
        expandIcon: te(t, "expandIcon"),
        collapseIcon: te(t, "collapseIcon")
      },
      VListItem: {
        activeClass: te(t, "activeClass"),
        activeColor: m,
        baseColor: v,
        color: y,
        density: te(t, "density"),
        disabled: te(t, "disabled"),
        lines: te(t, "lines"),
        nav: te(t, "nav"),
        slim: te(t, "slim"),
        variant: te(t, "variant")
      }
    });
    const p = q(!1), M = Z();
    function S(I) {
      p.value = !0;
    }
    function b(I) {
      p.value = !1;
    }
    function T(I) {
      var z;
      !p.value && !(I.relatedTarget && ((z = M.value) != null && z.contains(I.relatedTarget))) && w();
    }
    function _(I) {
      if (M.value) {
        if (I.key === "ArrowDown")
          w("next");
        else if (I.key === "ArrowUp")
          w("prev");
        else if (I.key === "Home")
          w("first");
        else if (I.key === "End")
          w("last");
        else
          return;
        I.preventDefault();
      }
    }
    function P(I) {
      p.value = !0;
    }
    function w(I) {
      if (M.value)
        return Qo(M.value, I);
    }
    return ie(() => C(t.tag, {
      ref: M,
      class: ["v-list", {
        "v-list--disabled": t.disabled,
        "v-list--nav": t.nav,
        "v-list--slim": t.slim
      }, a.value, o.value, s.value, l.value, u.value, g.value, d.value, t.class],
      style: [r.value, c.value, t.style],
      tabindex: t.disabled || p.value ? -1 : 0,
      role: "listbox",
      "aria-activedescendant": void 0,
      onFocusin: S,
      onFocusout: b,
      onFocus: T,
      onKeydown: _,
      onMousedown: P
    }, {
      default: () => [C(Nh, {
        items: i.value,
        returnObject: t.returnObject
      }, n)]
    })), {
      open: h,
      select: f,
      focus: w
    };
  }
});
function is(t, e) {
  return {
    x: t.x + e.x,
    y: t.y + e.y
  };
}
function LC(t, e) {
  return {
    x: t.x - e.x,
    y: t.y - e.y
  };
}
function fu(t, e) {
  if (t.side === "top" || t.side === "bottom") {
    const {
      side: n,
      align: i
    } = t, a = i === "left" ? 0 : i === "center" ? e.width / 2 : i === "right" ? e.width : i, o = n === "top" ? 0 : n === "bottom" ? e.height : n;
    return is({
      x: a,
      y: o
    }, e);
  } else if (t.side === "left" || t.side === "right") {
    const {
      side: n,
      align: i
    } = t, a = n === "left" ? 0 : n === "right" ? e.width : n, o = i === "top" ? 0 : i === "center" ? e.height / 2 : i === "bottom" ? e.height : i;
    return is({
      x: a,
      y: o
    }, e);
  }
  return is({
    x: e.width / 2,
    y: e.height / 2
  }, e);
}
const Yh = {
  static: FC,
  // specific viewport position, usually centered
  connected: OC
  // connected to a certain element
}, VC = $({
  locationStrategy: {
    type: [String, Function],
    default: "static",
    validator: (t) => typeof t == "function" || t in Yh
  },
  location: {
    type: String,
    default: "bottom"
  },
  origin: {
    type: String,
    default: "auto"
  },
  offset: [Number, String, Array]
}, "VOverlay-location-strategies");
function BC(t, e) {
  const n = Z({}), i = Z();
  ht && Yt(() => !!(e.isActive.value && t.locationStrategy), (o) => {
    var r, s;
    Q(() => t.locationStrategy, o), Tt(() => {
      window.removeEventListener("resize", a), i.value = void 0;
    }), window.addEventListener("resize", a, {
      passive: !0
    }), typeof t.locationStrategy == "function" ? i.value = (r = t.locationStrategy(e, t, n)) == null ? void 0 : r.updateLocation : i.value = (s = Yh[t.locationStrategy](e, t, n)) == null ? void 0 : s.updateLocation;
  });
  function a(o) {
    var r;
    (r = i.value) == null || r.call(i, o);
  }
  return {
    contentStyles: n,
    updateLocation: i
  };
}
function FC() {
}
function kC(t, e) {
  e ? t.style.removeProperty("left") : t.style.removeProperty("right");
  const n = gl(t);
  return e ? n.x += parseFloat(t.style.right || 0) : n.x -= parseFloat(t.style.left || 0), n.y -= parseFloat(t.style.top || 0), n;
}
function OC(t, e, n) {
  (Array.isArray(t.target.value) || Ev(t.target.value)) && Object.assign(n.value, {
    position: "fixed",
    top: 0,
    [t.isRtl.value ? "right" : "left"]: 0
  });
  const {
    preferredAnchor: a,
    preferredOrigin: o
  } = hl(() => {
    const g = ws(e.location, t.isRtl.value), m = e.origin === "overlap" ? g : e.origin === "auto" ? es(g) : ws(e.origin, t.isRtl.value);
    return g.side === m.side && g.align === ts(m).align ? {
      preferredAnchor: $c(g),
      preferredOrigin: $c(m)
    } : {
      preferredAnchor: g,
      preferredOrigin: m
    };
  }), [r, s, l, c] = ["minWidth", "minHeight", "maxWidth", "maxHeight"].map((g) => x(() => {
    const m = parseFloat(e[g]);
    return isNaN(m) ? 1 / 0 : m;
  })), u = x(() => {
    if (Array.isArray(e.offset))
      return e.offset;
    if (typeof e.offset == "string") {
      const g = e.offset.split(" ").map(parseFloat);
      return g.length < 2 && g.push(0), g;
    }
    return typeof e.offset == "number" ? [e.offset, 0] : [0, 0];
  });
  let d = !1;
  const h = new ResizeObserver(() => {
    d && f();
  });
  Q([t.target, t.contentEl], (g, m) => {
    let [v, y] = g, [p, M] = m;
    p && !Array.isArray(p) && h.unobserve(p), v && !Array.isArray(v) && h.observe(v), M && h.unobserve(M), y && h.observe(y);
  }, {
    immediate: !0
  }), Tt(() => {
    h.disconnect();
  });
  function f() {
    if (d = !1, requestAnimationFrame(() => d = !0), !t.target.value || !t.contentEl.value)
      return;
    const g = qd(t.target.value), m = kC(t.contentEl.value, t.isRtl.value), v = nr(t.contentEl.value), y = 12;
    v.length || (v.push(document.documentElement), t.contentEl.value.style.top && t.contentEl.value.style.left || (m.x -= parseFloat(document.documentElement.style.getPropertyValue("--v-body-scroll-x") || 0), m.y -= parseFloat(document.documentElement.style.getPropertyValue("--v-body-scroll-y") || 0)));
    const p = v.reduce((z, A) => {
      const R = A.getBoundingClientRect(), V = new Ai({
        x: A === document.documentElement ? 0 : R.x,
        y: A === document.documentElement ? 0 : R.y,
        width: A.clientWidth,
        height: A.clientHeight
      });
      return z ? new Ai({
        x: Math.max(z.left, V.left),
        y: Math.max(z.top, V.top),
        width: Math.min(z.right, V.right) - Math.max(z.left, V.left),
        height: Math.min(z.bottom, V.bottom) - Math.max(z.top, V.top)
      }) : V;
    }, void 0);
    p.x += y, p.y += y, p.width -= y * 2, p.height -= y * 2;
    let M = {
      anchor: a.value,
      origin: o.value
    };
    function S(z) {
      const A = new Ai(m), R = fu(z.anchor, g), V = fu(z.origin, A);
      let {
        x: N,
        y: G
      } = LC(R, V);
      switch (z.anchor.side) {
        case "top":
          G -= u.value[0];
          break;
        case "bottom":
          G += u.value[0];
          break;
        case "left":
          N -= u.value[0];
          break;
        case "right":
          N += u.value[0];
          break;
      }
      switch (z.anchor.align) {
        case "top":
          G -= u.value[1];
          break;
        case "bottom":
          G += u.value[1];
          break;
        case "left":
          N -= u.value[1];
          break;
        case "right":
          N += u.value[1];
          break;
      }
      return A.x += N, A.y += G, A.width = Math.min(A.width, l.value), A.height = Math.min(A.height, c.value), {
        overflows: Uc(A, p),
        x: N,
        y: G
      };
    }
    let b = 0, T = 0;
    const _ = {
      x: 0,
      y: 0
    }, P = {
      x: !1,
      y: !1
    };
    let w = -1;
    for (; ; ) {
      if (w++ > 10) {
        mv("Infinite loop detected in connectedLocationStrategy");
        break;
      }
      const {
        x: z,
        y: A,
        overflows: R
      } = S(M);
      b += z, T += A, m.x += z, m.y += A;
      {
        const V = Wc(M.anchor), N = R.x.before || R.x.after, G = R.y.before || R.y.after;
        let X = !1;
        if (["x", "y"].forEach((E) => {
          if (E === "x" && N && !P.x || E === "y" && G && !P.y) {
            const B = {
              anchor: {
                ...M.anchor
              },
              origin: {
                ...M.origin
              }
            }, D = E === "x" ? V === "y" ? ts : es : V === "y" ? es : ts;
            B.anchor = D(B.anchor), B.origin = D(B.origin);
            const {
              overflows: k
            } = S(B);
            (k[E].before <= R[E].before && k[E].after <= R[E].after || k[E].before + k[E].after < (R[E].before + R[E].after) / 2) && (M = B, X = P[E] = !0);
          }
        }), X)
          continue;
      }
      R.x.before && (b += R.x.before, m.x += R.x.before), R.x.after && (b -= R.x.after, m.x -= R.x.after), R.y.before && (T += R.y.before, m.y += R.y.before), R.y.after && (T -= R.y.after, m.y -= R.y.after);
      {
        const V = Uc(m, p);
        _.x = p.width - V.x.before - V.x.after, _.y = p.height - V.y.before - V.y.after, b += V.x.before, m.x += V.x.before, T += V.y.before, m.y += V.y.before;
      }
      break;
    }
    const I = Wc(M.anchor);
    return Object.assign(n.value, {
      "--v-overlay-anchor-origin": `${M.anchor.side} ${M.anchor.align}`,
      transformOrigin: `${M.origin.side} ${M.origin.align}`,
      // transform: `translate(${pixelRound(x)}px, ${pixelRound(y)}px)`,
      top: oe(as(T)),
      left: t.isRtl.value ? void 0 : oe(as(b)),
      right: t.isRtl.value ? oe(as(-b)) : void 0,
      minWidth: oe(I === "y" ? Math.min(r.value, g.width) : r.value),
      maxWidth: oe(gu(ai(_.x, r.value === 1 / 0 ? 0 : r.value, l.value))),
      maxHeight: oe(gu(ai(_.y, s.value === 1 / 0 ? 0 : s.value, c.value)))
    }), {
      available: _,
      contentBox: m
    };
  }
  return Q(() => [a.value, o.value, e.offset, e.minWidth, e.minHeight, e.maxWidth, e.maxHeight], () => f()), je(() => {
    const g = f();
    if (!g)
      return;
    const {
      available: m,
      contentBox: v
    } = g;
    v.height > m.y && requestAnimationFrame(() => {
      f(), requestAnimationFrame(() => {
        f();
      });
    });
  }), {
    updateLocation: f
  };
}
function as(t) {
  return Math.round(t * devicePixelRatio) / devicePixelRatio;
}
function gu(t) {
  return Math.ceil(t * devicePixelRatio) / devicePixelRatio;
}
let Bs = !0;
const or = [];
function DC(t) {
  !Bs || or.length ? (or.push(t), Fs()) : (Bs = !1, t(), Fs());
}
let mu = -1;
function Fs() {
  cancelAnimationFrame(mu), mu = requestAnimationFrame(() => {
    const t = or.shift();
    t && t(), or.length ? Fs() : Bs = !0;
  });
}
const Zo = {
  none: null,
  close: $C,
  block: WC,
  reposition: UC
}, GC = $({
  scrollStrategy: {
    type: [String, Function],
    default: "block",
    validator: (t) => typeof t == "function" || t in Zo
  }
}, "VOverlay-scroll-strategies");
function NC(t, e) {
  if (!ht)
    return;
  let n;
  Ht(async () => {
    n == null || n.stop(), e.isActive.value && t.scrollStrategy && (n = il(), await je(), n.active && n.run(() => {
      var i;
      typeof t.scrollStrategy == "function" ? t.scrollStrategy(e, t, n) : (i = Zo[t.scrollStrategy]) == null || i.call(Zo, e, t, n);
    }));
  }), Tt(() => {
    n == null || n.stop();
  });
}
function $C(t) {
  function e(n) {
    t.isActive.value = !1;
  }
  jh(t.targetEl.value ?? t.contentEl.value, e);
}
function WC(t, e) {
  var r;
  const n = (r = t.root.value) == null ? void 0 : r.offsetParent, i = [.../* @__PURE__ */ new Set([...nr(t.targetEl.value, e.contained ? n : void 0), ...nr(t.contentEl.value, e.contained ? n : void 0)])].filter((s) => !s.classList.contains("v-overlay-scroll-blocked")), a = window.innerWidth - document.documentElement.offsetWidth, o = ((s) => vl(s) && s)(n || document.documentElement);
  o && t.root.value.classList.add("v-overlay--scroll-blocked"), i.forEach((s, l) => {
    s.style.setProperty("--v-body-scroll-x", oe(-s.scrollLeft)), s.style.setProperty("--v-body-scroll-y", oe(-s.scrollTop)), s !== document.documentElement && s.style.setProperty("--v-scrollbar-offset", oe(a)), s.classList.add("v-overlay-scroll-blocked");
  }), Tt(() => {
    i.forEach((s, l) => {
      const c = parseFloat(s.style.getPropertyValue("--v-body-scroll-x")), u = parseFloat(s.style.getPropertyValue("--v-body-scroll-y")), d = s.style.scrollBehavior;
      s.style.scrollBehavior = "auto", s.style.removeProperty("--v-body-scroll-x"), s.style.removeProperty("--v-body-scroll-y"), s.style.removeProperty("--v-scrollbar-offset"), s.classList.remove("v-overlay-scroll-blocked"), s.scrollLeft = -c, s.scrollTop = -u, s.style.scrollBehavior = d;
    }), o && t.root.value.classList.remove("v-overlay--scroll-blocked");
  });
}
function UC(t, e, n) {
  let i = !1, a = -1, o = -1;
  function r(s) {
    DC(() => {
      var u, d;
      const l = performance.now();
      (d = (u = t.updateLocation).value) == null || d.call(u, s), i = (performance.now() - l) / (1e3 / 60) > 2;
    });
  }
  o = (typeof requestIdleCallback > "u" ? (s) => s() : requestIdleCallback)(() => {
    n.run(() => {
      jh(t.targetEl.value ?? t.contentEl.value, (s) => {
        i ? (cancelAnimationFrame(a), a = requestAnimationFrame(() => {
          a = requestAnimationFrame(() => {
            r(s);
          });
        })) : r(s);
      });
    });
  }), Tt(() => {
    typeof cancelIdleCallback < "u" && cancelIdleCallback(o), cancelAnimationFrame(a);
  });
}
function jh(t, e) {
  const n = [document, ...nr(t)];
  n.forEach((i) => {
    i.addEventListener("scroll", e, {
      passive: !0
    });
  }), Tt(() => {
    n.forEach((i) => {
      i.removeEventListener("scroll", e);
    });
  });
}
const ks = Symbol.for("vuetify:v-menu"), XC = $({
  closeDelay: [Number, String],
  openDelay: [Number, String]
}, "delay");
function YC(t, e) {
  let n = () => {
  };
  function i(r) {
    n == null || n();
    const s = Number(r ? t.openDelay : t.closeDelay);
    return new Promise((l) => {
      n = av(s, () => {
        e == null || e(r), l(r);
      });
    });
  }
  function a() {
    return i(!0);
  }
  function o() {
    return i(!1);
  }
  return {
    clearDelay: n,
    runOpenDelay: a,
    runCloseDelay: o
  };
}
const jC = $({
  target: [String, Object],
  activator: [String, Object],
  activatorProps: {
    type: Object,
    default: () => ({})
  },
  openOnClick: {
    type: Boolean,
    default: void 0
  },
  openOnHover: Boolean,
  openOnFocus: {
    type: Boolean,
    default: void 0
  },
  closeOnContentClick: Boolean,
  ...XC()
}, "VOverlay-activator");
function ZC(t, e) {
  let {
    isActive: n,
    isTop: i
  } = e;
  const a = He("useActivator"), o = Z();
  let r = !1, s = !1, l = !0;
  const c = x(() => t.openOnFocus || t.openOnFocus == null && t.openOnHover), u = x(() => t.openOnClick || t.openOnClick == null && !t.openOnHover && !c.value), {
    runOpenDelay: d,
    runCloseDelay: h
  } = YC(t, (_) => {
    _ === (t.openOnHover && r || c.value && s) && !(t.openOnHover && n.value && !i.value) && (n.value !== _ && (l = !0), n.value = _);
  }), f = Z(), g = {
    onClick: (_) => {
      _.stopPropagation(), o.value = _.currentTarget || _.target, n.value || (f.value = [_.clientX, _.clientY]), n.value = !n.value;
    },
    onMouseenter: (_) => {
      var P;
      (P = _.sourceCapabilities) != null && P.firesTouchEvents || (r = !0, o.value = _.currentTarget || _.target, d());
    },
    onMouseleave: (_) => {
      r = !1, h();
    },
    onFocus: (_) => {
      ra(_.target, ":focus-visible") !== !1 && (s = !0, _.stopPropagation(), o.value = _.currentTarget || _.target, d());
    },
    onBlur: (_) => {
      s = !1, _.stopPropagation(), h();
    }
  }, m = x(() => {
    const _ = {};
    return u.value && (_.onClick = g.onClick), t.openOnHover && (_.onMouseenter = g.onMouseenter, _.onMouseleave = g.onMouseleave), c.value && (_.onFocus = g.onFocus, _.onBlur = g.onBlur), _;
  }), v = x(() => {
    const _ = {};
    if (t.openOnHover && (_.onMouseenter = () => {
      r = !0, d();
    }, _.onMouseleave = () => {
      r = !1, h();
    }), c.value && (_.onFocusin = () => {
      s = !0, d();
    }, _.onFocusout = () => {
      s = !1, h();
    }), t.closeOnContentClick) {
      const P = Ne(ks, null);
      _.onClick = () => {
        n.value = !1, P == null || P.closeParents();
      };
    }
    return _;
  }), y = x(() => {
    const _ = {};
    return t.openOnHover && (_.onMouseenter = () => {
      l && (r = !0, l = !1, d());
    }, _.onMouseleave = () => {
      r = !1, h();
    }), _;
  });
  Q(i, (_) => {
    _ && (t.openOnHover && !r && (!c.value || !s) || c.value && !s && (!t.openOnHover || !r)) && (n.value = !1);
  }), Q(n, (_) => {
    _ || setTimeout(() => {
      f.value = void 0;
    });
  }, {
    flush: "post"
  });
  const p = Z();
  Ht(() => {
    p.value && je(() => {
      o.value = Ko(p.value);
    });
  });
  const M = Z(), S = x(() => t.target === "cursor" && f.value ? f.value : M.value ? Ko(M.value) : Zh(t.target, a) || o.value), b = x(() => Array.isArray(S.value) ? void 0 : S.value);
  let T;
  return Q(() => !!t.activator, (_) => {
    _ && ht ? (T = il(), T.run(() => {
      HC(t, a, {
        activatorEl: o,
        activatorEvents: m
      });
    })) : T && T.stop();
  }, {
    flush: "post",
    immediate: !0
  }), Tt(() => {
    T == null || T.stop();
  }), {
    activatorEl: o,
    activatorRef: p,
    target: S,
    targetEl: b,
    targetRef: M,
    activatorEvents: m,
    contentEvents: v,
    scrimEvents: y
  };
}
function HC(t, e, n) {
  let {
    activatorEl: i,
    activatorEvents: a
  } = n;
  Q(() => t.activator, (l, c) => {
    if (c && l !== c) {
      const u = s(c);
      u && r(u);
    }
    l && je(() => o());
  }, {
    immediate: !0
  }), Q(() => t.activatorProps, () => {
    o();
  }), Tt(() => {
    r();
  });
  function o() {
    let l = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : s(), c = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : t.activatorProps;
    l && rv(l, se(a.value, c));
  }
  function r() {
    let l = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : s(), c = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : t.activatorProps;
    l && sv(l, se(a.value, c));
  }
  function s() {
    let l = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : t.activator;
    const c = Zh(l, e);
    return i.value = (c == null ? void 0 : c.nodeType) === Node.ELEMENT_NODE ? c : void 0, i.value;
  }
}
function Zh(t, e) {
  var i, a;
  if (!t)
    return;
  let n;
  if (t === "parent") {
    let o = (a = (i = e == null ? void 0 : e.proxy) == null ? void 0 : i.$el) == null ? void 0 : a.parentNode;
    for (; o != null && o.hasAttribute("data-no-activator"); )
      o = o.parentNode;
    n = o;
  } else
    typeof t == "string" ? n = document.querySelector(t) : "$el" in t ? n = t.$el : n = t;
  return n;
}
function KC() {
  if (!ht)
    return q(!1);
  const {
    ssr: t
  } = br();
  if (t) {
    const e = q(!1);
    return nt(() => {
      e.value = !0;
    }), e;
  } else
    return q(!0);
}
const Tr = $({
  eager: Boolean
}, "lazy");
function xl(t, e) {
  const n = q(!1), i = x(() => n.value || t.eager || e.value);
  Q(e, () => n.value = !0);
  function a() {
    t.eager || (n.value = !1);
  }
  return {
    isBooted: n,
    hasContent: i,
    onAfterLeave: a
  };
}
function Pl() {
  const e = He("useScopeId").vnode.scopeId;
  return {
    scopeId: e ? {
      [e]: ""
    } : void 0
  };
}
const vu = Symbol.for("vuetify:stack"), Aa = Fn([]);
function qC(t, e, n) {
  const i = He("useStack"), a = !n, o = Ne(vu, void 0), r = Fn({
    activeChildren: /* @__PURE__ */ new Set()
  });
  it(vu, r);
  const s = q(+e.value);
  Yt(t, () => {
    var d;
    const u = (d = Aa.at(-1)) == null ? void 0 : d[1];
    s.value = u ? u + 10 : +e.value, a && Aa.push([i.uid, s.value]), o == null || o.activeChildren.add(i.uid), Tt(() => {
      if (a) {
        const h = di(Aa).findIndex((f) => f[0] === i.uid);
        Aa.splice(h, 1);
      }
      o == null || o.activeChildren.delete(i.uid);
    });
  });
  const l = q(!0);
  a && Ht(() => {
    var d;
    const u = ((d = Aa.at(-1)) == null ? void 0 : d[0]) === i.uid;
    setTimeout(() => l.value = u);
  });
  const c = x(() => !r.activeChildren.size);
  return {
    globalTop: al(l),
    localTop: c,
    stackStyles: x(() => ({
      zIndex: s.value
    }))
  };
}
function JC(t) {
  return {
    teleportTarget: x(() => {
      const n = t.value;
      if (n === !0 || !ht)
        return;
      const i = n === !1 ? document.body : typeof n == "string" ? document.querySelector(n) : n;
      if (i == null) {
        pr(`Unable to locate target ${n}`);
        return;
      }
      let a = i.querySelector(":scope > .v-overlay-container");
      return a || (a = document.createElement("div"), a.className = "v-overlay-container", i.appendChild(a)), a;
    })
  };
}
function QC() {
  return !0;
}
function Hh(t, e, n) {
  if (!t || Kh(t, n) === !1)
    return !1;
  const i = Qd(e);
  if (typeof ShadowRoot < "u" && i instanceof ShadowRoot && i.host === t.target)
    return !1;
  const a = (typeof n.value == "object" && n.value.include || (() => []))();
  return a.push(e), !a.some((o) => o == null ? void 0 : o.contains(t.target));
}
function Kh(t, e) {
  return (typeof e.value == "object" && e.value.closeConditional || QC)(t);
}
function ey(t, e, n) {
  const i = typeof n.value == "function" ? n.value : n.value.handler;
  e._clickOutside.lastMousedownWasOutside && Hh(t, e, n) && setTimeout(() => {
    Kh(t, n) && i && i(t);
  }, 0);
}
function Cu(t, e) {
  const n = Qd(t);
  e(document), typeof ShadowRoot < "u" && n instanceof ShadowRoot && e(n);
}
const ty = {
  // [data-app] may not be found
  // if using bind, inserted makes
  // sure that the root element is
  // available, iOS does not support
  // clicks on body
  mounted(t, e) {
    const n = (a) => ey(a, t, e), i = (a) => {
      t._clickOutside.lastMousedownWasOutside = Hh(a, t, e);
    };
    Cu(t, (a) => {
      a.addEventListener("click", n, !0), a.addEventListener("mousedown", i, !0);
    }), t._clickOutside || (t._clickOutside = {
      lastMousedownWasOutside: !1
    }), t._clickOutside[e.instance.$.uid] = {
      onClick: n,
      onMousedown: i
    };
  },
  unmounted(t, e) {
    t._clickOutside && (Cu(t, (n) => {
      var o;
      if (!n || !((o = t._clickOutside) != null && o[e.instance.$.uid]))
        return;
      const {
        onClick: i,
        onMousedown: a
      } = t._clickOutside[e.instance.$.uid];
      n.removeEventListener("click", i, !0), n.removeEventListener("mousedown", a, !0);
    }), delete t._clickOutside[e.instance.$.uid]);
  }
};
function ny(t) {
  const {
    modelValue: e,
    color: n,
    ...i
  } = t;
  return C(ri, {
    name: "fade-transition",
    appear: !0
  }, {
    default: () => [t.modelValue && C("div", se({
      class: ["v-overlay__scrim", t.color.backgroundColorClasses.value],
      style: t.color.backgroundColorStyles.value
    }, i), null)]
  });
}
const qh = $({
  absolute: Boolean,
  attach: [Boolean, String, Object],
  closeOnBack: {
    type: Boolean,
    default: !0
  },
  contained: Boolean,
  contentClass: null,
  contentProps: null,
  disabled: Boolean,
  noClickAnimation: Boolean,
  modelValue: Boolean,
  persistent: Boolean,
  scrim: {
    type: [Boolean, String],
    default: !0
  },
  zIndex: {
    type: [Number, String],
    default: 2e3
  },
  ...jC(),
  ...ue(),
  ...hi(),
  ...Tr(),
  ...VC(),
  ...GC(),
  ...ke(),
  ...ya()
}, "VOverlay"), yu = K()({
  name: "VOverlay",
  directives: {
    ClickOutside: ty
  },
  inheritAttrs: !1,
  props: {
    _disableGlobalStack: Boolean,
    ...qh()
  },
  emits: {
    "click:outside": (t) => !0,
    "update:modelValue": (t) => !0,
    afterLeave: () => !0
  },
  setup(t, e) {
    let {
      slots: n,
      attrs: i,
      emit: a
    } = e;
    const o = Be(t, "modelValue"), r = x({
      get: () => o.value,
      set: (U) => {
        U && t.disabled || (o.value = U);
      }
    }), {
      teleportTarget: s
    } = JC(x(() => t.attach || t.contained)), {
      themeClasses: l
    } = $e(t), {
      rtlClasses: c,
      isRtl: u
    } = Qt(), {
      hasContent: d,
      onAfterLeave: h
    } = xl(t, r), f = Pt(x(() => typeof t.scrim == "string" ? t.scrim : null)), {
      globalTop: g,
      localTop: m,
      stackStyles: v
    } = qC(r, te(t, "zIndex"), t._disableGlobalStack), {
      activatorEl: y,
      activatorRef: p,
      target: M,
      targetEl: S,
      targetRef: b,
      activatorEvents: T,
      contentEvents: _,
      scrimEvents: P
    } = ZC(t, {
      isActive: r,
      isTop: m
    }), {
      dimensionStyles: w
    } = fi(t), I = KC(), {
      scopeId: z
    } = Pl();
    Q(() => t.disabled, (U) => {
      U && (r.value = !1);
    });
    const A = Z(), R = Z(), {
      contentStyles: V,
      updateLocation: N
    } = BC(t, {
      isRtl: u,
      contentEl: R,
      target: M,
      isActive: r
    });
    NC(t, {
      root: A,
      contentEl: R,
      targetEl: S,
      isActive: r,
      updateLocation: N
    });
    function G(U) {
      a("click:outside", U), t.persistent ? k() : r.value = !1;
    }
    function X() {
      return r.value && g.value;
    }
    ht && Q(r, (U) => {
      U ? window.addEventListener("keydown", E) : window.removeEventListener("keydown", E);
    }, {
      immediate: !0
    }), vt(() => {
      ht && window.removeEventListener("keydown", E);
    });
    function E(U) {
      var L, ee;
      U.key === "Escape" && g.value && (t.persistent ? k() : (r.value = !1, (L = R.value) != null && L.contains(document.activeElement) && ((ee = y.value) == null || ee.focus())));
    }
    const B = zh();
    Yt(() => t.closeOnBack, () => {
      uC(B, (U) => {
        g.value && r.value ? (U(!1), t.persistent ? k() : r.value = !1) : U();
      });
    });
    const D = Z();
    Q(() => r.value && (t.absolute || t.contained) && s.value == null, (U) => {
      if (U) {
        const L = th(A.value);
        L && L !== document.scrollingElement && (D.value = L.scrollTop);
      }
    });
    function k() {
      t.noClickAnimation || R.value && Ji(R.value, [{
        transformOrigin: "center"
      }, {
        transform: "scale(1.03)"
      }, {
        transformOrigin: "center"
      }], {
        duration: 150,
        easing: tr
      });
    }
    function W() {
      h(), a("afterLeave");
    }
    return ie(() => {
      var U;
      return C(de, null, [(U = n.activator) == null ? void 0 : U.call(n, {
        isActive: r.value,
        props: se({
          ref: p,
          targetRef: b
        }, T.value, t.activatorProps)
      }), !t.disabled && I.value && d.value && C(mm, {
        disabled: !s.value,
        to: s.value
      }, {
        default: () => [C("div", se({
          class: ["v-overlay", {
            "v-overlay--absolute": t.absolute || t.contained,
            "v-overlay--active": r.value,
            "v-overlay--contained": t.contained
          }, l.value, c.value, t.class],
          style: [v.value, {
            top: oe(D.value)
          }, t.style],
          ref: A
        }, z, i), [C(ny, se({
          color: f,
          modelValue: !!t.scrim && r.value
        }, P.value), null), C(kn, {
          appear: !0,
          persisted: !0,
          transition: t.transition,
          target: M.value,
          onAfterLeave: W
        }, {
          default: () => {
            var L;
            return [Ze(C("div", se({
              ref: R,
              class: ["v-overlay__content", t.contentClass],
              style: [w.value, V.value]
            }, _.value, t.contentProps), [(L = n.default) == null ? void 0 : L.call(n, {
              isActive: r
            })]), [[ui, r.value], [Jt("click-outside"), {
              handler: G,
              closeConditional: X,
              include: () => [y.value]
            }]])];
          }
        })])]
      })]);
    }), {
      activatorEl: y,
      target: M,
      animateClick: k,
      contentEl: R,
      globalTop: g,
      localTop: m,
      updateLocation: N
    };
  }
}), os = Symbol("Forwarded refs");
function rs(t, e) {
  let n = t;
  for (; n; ) {
    const i = Reflect.getOwnPropertyDescriptor(n, e);
    if (i)
      return i;
    n = Object.getPrototypeOf(n);
  }
}
function ba(t) {
  for (var e = arguments.length, n = new Array(e > 1 ? e - 1 : 0), i = 1; i < e; i++)
    n[i - 1] = arguments[i];
  return t[os] = n, new Proxy(t, {
    get(a, o) {
      if (Reflect.has(a, o))
        return Reflect.get(a, o);
      if (!(typeof o == "symbol" || o.startsWith("$") || o.startsWith("__"))) {
        for (const r of n)
          if (r.value && Reflect.has(r.value, o)) {
            const s = Reflect.get(r.value, o);
            return typeof s == "function" ? s.bind(r.value) : s;
          }
      }
    },
    has(a, o) {
      if (Reflect.has(a, o))
        return !0;
      if (typeof o == "symbol" || o.startsWith("$") || o.startsWith("__"))
        return !1;
      for (const r of n)
        if (r.value && Reflect.has(r.value, o))
          return !0;
      return !1;
    },
    set(a, o, r) {
      if (Reflect.has(a, o))
        return Reflect.set(a, o, r);
      if (typeof o == "symbol" || o.startsWith("$") || o.startsWith("__"))
        return !1;
      for (const s of n)
        if (s.value && Reflect.has(s.value, o))
          return Reflect.set(s.value, o, r);
      return !1;
    },
    getOwnPropertyDescriptor(a, o) {
      var s;
      const r = Reflect.getOwnPropertyDescriptor(a, o);
      if (r)
        return r;
      if (!(typeof o == "symbol" || o.startsWith("$") || o.startsWith("__"))) {
        for (const l of n) {
          if (!l.value)
            continue;
          const c = rs(l.value, o) ?? ("_" in l.value ? rs((s = l.value._) == null ? void 0 : s.setupState, o) : void 0);
          if (c)
            return c;
        }
        for (const l of n) {
          const c = l.value && l.value[os];
          if (!c)
            continue;
          const u = c.slice();
          for (; u.length; ) {
            const d = u.shift(), h = rs(d.value, o);
            if (h)
              return h;
            const f = d.value && d.value[os];
            f && u.push(...f);
          }
        }
      }
    }
  });
}
const iy = $({
  // TODO
  // disableKeys: Boolean,
  id: String,
  ...Li(qh({
    closeDelay: 250,
    closeOnContentClick: !0,
    locationStrategy: "connected",
    openDelay: 300,
    scrim: !1,
    scrollStrategy: "reposition",
    transition: {
      component: bh
    }
  }), ["absolute"])
}, "VMenu"), wr = K()({
  name: "VMenu",
  props: iy(),
  emits: {
    "update:modelValue": (t) => !0
  },
  setup(t, e) {
    let {
      slots: n
    } = e;
    const i = Be(t, "modelValue"), {
      scopeId: a
    } = Pl(), o = _n(), r = x(() => t.id || `v-menu-${o}`), s = Z(), l = Ne(ks, null), c = q(0);
    it(ks, {
      register() {
        ++c.value;
      },
      unregister() {
        --c.value;
      },
      closeParents() {
        setTimeout(() => {
          c.value || (i.value = !1, l == null || l.closeParents());
        }, 40);
      }
    });
    async function u(m) {
      var p, M, S;
      const v = m.relatedTarget, y = m.target;
      await je(), i.value && v !== y && ((p = s.value) != null && p.contentEl) && // We're the topmost menu
      ((M = s.value) != null && M.globalTop) && // It isn't the document or the menu body
      ![document, s.value.contentEl].includes(y) && // It isn't inside the menu body
      !s.value.contentEl.contains(y) && ((S = Jo(s.value.contentEl)[0]) == null || S.focus());
    }
    Q(i, (m) => {
      m ? (l == null || l.register(), document.addEventListener("focusin", u, {
        once: !0
      })) : (l == null || l.unregister(), document.removeEventListener("focusin", u));
    });
    function d() {
      l == null || l.closeParents();
    }
    function h(m) {
      var v, y, p;
      t.disabled || m.key === "Tab" && (Hd(Jo((v = s.value) == null ? void 0 : v.contentEl, !1), m.shiftKey ? "prev" : "next", (S) => S.tabIndex >= 0) || (i.value = !1, (p = (y = s.value) == null ? void 0 : y.activatorEl) == null || p.focus()));
    }
    function f(m) {
      var y;
      if (t.disabled)
        return;
      const v = (y = s.value) == null ? void 0 : y.contentEl;
      v && i.value ? m.key === "ArrowDown" ? (m.preventDefault(), Qo(v, "next")) : m.key === "ArrowUp" && (m.preventDefault(), Qo(v, "prev")) : ["ArrowDown", "ArrowUp"].includes(m.key) && (i.value = !0, m.preventDefault(), setTimeout(() => setTimeout(() => f(m))));
    }
    const g = x(() => se({
      "aria-haspopup": "menu",
      "aria-expanded": String(i.value),
      "aria-owns": r.value,
      onKeydown: f
    }, t.activatorProps));
    return ie(() => {
      const m = yu.filterProps(t);
      return C(yu, se({
        ref: s,
        id: r.value,
        class: ["v-menu", t.class],
        style: t.style
      }, m, {
        modelValue: i.value,
        "onUpdate:modelValue": (v) => i.value = v,
        absolute: !0,
        activatorProps: g.value,
        "onClick:outside": d,
        onKeydown: h
      }, a), {
        activator: n.activator,
        default: function() {
          for (var v = arguments.length, y = new Array(v), p = 0; p < v; p++)
            y[p] = arguments[p];
          return C(Xe, {
            root: "VMenu"
          }, {
            default: () => {
              var M;
              return [(M = n.default) == null ? void 0 : M.call(n, ...y)];
            }
          });
        }
      });
    }), ba({
      id: r,
      ΨopenChildren: c
    }, s);
  }
});
const ay = $({
  active: Boolean,
  max: [Number, String],
  value: {
    type: [Number, String],
    default: 0
  },
  ...ue(),
  ...ya({
    transition: {
      component: Mh
    }
  })
}, "VCounter"), Jh = K()({
  name: "VCounter",
  functional: !0,
  props: ay(),
  setup(t, e) {
    let {
      slots: n
    } = e;
    const i = x(() => t.max ? `${t.value} / ${t.max}` : String(t.value));
    return ie(() => C(kn, {
      transition: t.transition
    }, {
      default: () => [Ze(C("div", {
        class: ["v-counter", t.class],
        style: t.style
      }, [n.default ? n.default({
        counter: i.value,
        max: t.max,
        value: t.value
      }) : i.value]), [[ui, t.active]])]
    })), {};
  }
});
const oy = $({
  floating: Boolean,
  ...ue()
}, "VFieldLabel"), Vo = K()({
  name: "VFieldLabel",
  props: oy(),
  setup(t, e) {
    let {
      slots: n
    } = e;
    return ie(() => C(oh, {
      class: ["v-field-label", {
        "v-field-label--floating": t.floating
      }, t.class],
      style: t.style,
      "aria-hidden": t.floating || void 0
    }, n)), {};
  }
});
function Qh(t, e) {
  const n = Z(), i = q(!1);
  if (cl) {
    const a = new IntersectionObserver((o) => {
      t == null || t(o, a), i.value = !!o.find((r) => r.isIntersecting);
    }, e);
    vt(() => {
      a.disconnect();
    }), Q(n, (o, r) => {
      r && (a.unobserve(r), i.value = !1), o && a.observe(o);
    }, {
      flush: "post"
    });
  }
  return {
    intersectionRef: n,
    isIntersecting: i
  };
}
const pu = {
  center: "center",
  top: "bottom",
  bottom: "top",
  left: "right",
  right: "left"
}, Er = $({
  location: String
}, "location");
function Ar(t) {
  let e = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : !1, n = arguments.length > 2 ? arguments[2] : void 0;
  const {
    isRtl: i
  } = Qt();
  return {
    locationStyles: x(() => {
      if (!t.location)
        return {};
      const {
        side: o,
        align: r
      } = ws(t.location.split(" ").length > 1 ? t.location : `${t.location} center`, i.value);
      function s(c) {
        return n ? n(c) : 0;
      }
      const l = {};
      return o !== "center" && (e ? l[pu[o]] = `calc(100% - ${s(o)}px)` : l[o] = 0), r !== "center" ? e ? l[pu[r]] = `calc(100% - ${s(r)}px)` : l[r] = 0 : (o === "center" ? l.top = l.left = "50%" : l[{
        top: "left",
        bottom: "left",
        left: "top",
        right: "top"
      }[o]] = "50%", l.transform = {
        top: "translateX(-50%)",
        bottom: "translateX(-50%)",
        left: "translateY(-50%)",
        right: "translateY(-50%)",
        center: "translate(-50%, -50%)"
      }[o]), l;
    })
  };
}
const ry = $({
  absolute: Boolean,
  active: {
    type: Boolean,
    default: !0
  },
  bgColor: String,
  bgOpacity: [Number, String],
  bufferValue: {
    type: [Number, String],
    default: 0
  },
  clickable: Boolean,
  color: String,
  height: {
    type: [Number, String],
    default: 4
  },
  indeterminate: Boolean,
  max: {
    type: [Number, String],
    default: 100
  },
  modelValue: {
    type: [Number, String],
    default: 0
  },
  reverse: Boolean,
  stream: Boolean,
  striped: Boolean,
  roundedBar: Boolean,
  ...ue(),
  ...Er({
    location: "top"
  }),
  ...Ct(),
  ...Le(),
  ...ke()
}, "VProgressLinear"), ef = K()({
  name: "VProgressLinear",
  props: ry(),
  emits: {
    "update:modelValue": (t) => !0
  },
  setup(t, e) {
    let {
      slots: n
    } = e;
    const i = Be(t, "modelValue"), {
      isRtl: a,
      rtlClasses: o
    } = Qt(), {
      themeClasses: r
    } = $e(t), {
      locationStyles: s
    } = Ar(t), {
      textColorClasses: l,
      textColorStyles: c
    } = fn(t, "color"), {
      backgroundColorClasses: u,
      backgroundColorStyles: d
    } = Pt(x(() => t.bgColor || t.color)), {
      backgroundColorClasses: h,
      backgroundColorStyles: f
    } = Pt(t, "color"), {
      roundedClasses: g
    } = yt(t), {
      intersectionRef: m,
      isIntersecting: v
    } = Qh(), y = x(() => parseInt(t.max, 10)), p = x(() => parseInt(t.height, 10)), M = x(() => parseFloat(t.bufferValue) / y.value * 100), S = x(() => parseFloat(i.value) / y.value * 100), b = x(() => a.value !== t.reverse), T = x(() => t.indeterminate ? "fade-transition" : "slide-x-transition"), _ = x(() => t.bgOpacity == null ? t.bgOpacity : parseFloat(t.bgOpacity));
    function P(w) {
      if (!m.value)
        return;
      const {
        left: I,
        right: z,
        width: A
      } = m.value.getBoundingClientRect(), R = b.value ? A - w.clientX + (z - A) : w.clientX - I;
      i.value = Math.round(R / A * y.value);
    }
    return ie(() => C(t.tag, {
      ref: m,
      class: ["v-progress-linear", {
        "v-progress-linear--absolute": t.absolute,
        "v-progress-linear--active": t.active && v.value,
        "v-progress-linear--reverse": b.value,
        "v-progress-linear--rounded": t.rounded,
        "v-progress-linear--rounded-bar": t.roundedBar,
        "v-progress-linear--striped": t.striped
      }, g.value, r.value, o.value, t.class],
      style: [{
        bottom: t.location === "bottom" ? 0 : void 0,
        top: t.location === "top" ? 0 : void 0,
        height: t.active ? oe(p.value) : 0,
        "--v-progress-linear-height": oe(p.value),
        ...s.value
      }, t.style],
      role: "progressbar",
      "aria-hidden": t.active ? "false" : "true",
      "aria-valuemin": "0",
      "aria-valuemax": t.max,
      "aria-valuenow": t.indeterminate ? void 0 : S.value,
      onClick: t.clickable && P
    }, {
      default: () => [t.stream && C("div", {
        key: "stream",
        class: ["v-progress-linear__stream", l.value],
        style: {
          ...c.value,
          [b.value ? "left" : "right"]: oe(-p.value),
          borderTop: `${oe(p.value / 2)} dotted`,
          opacity: _.value,
          top: `calc(50% - ${oe(p.value / 4)})`,
          width: oe(100 - M.value, "%"),
          "--v-progress-linear-stream-to": oe(p.value * (b.value ? 1 : -1))
        }
      }, null), C("div", {
        class: ["v-progress-linear__background", u.value],
        style: [d.value, {
          opacity: _.value,
          width: oe(t.stream ? M.value : 100, "%")
        }]
      }, null), C(ri, {
        name: T.value
      }, {
        default: () => [t.indeterminate ? C("div", {
          class: "v-progress-linear__indeterminate"
        }, [["long", "short"].map((w) => C("div", {
          key: w,
          class: ["v-progress-linear__indeterminate", w, h.value],
          style: f.value
        }, null))]) : C("div", {
          class: ["v-progress-linear__determinate", h.value],
          style: [f.value, {
            width: oe(S.value, "%")
          }]
        }, null)]
      }), n.default && C("div", {
        class: "v-progress-linear__content"
      }, [n.default({
        value: S.value,
        buffer: M.value
      })])]
    })), {};
  }
}), Tl = $({
  loading: [Boolean, String]
}, "loader");
function wl(t) {
  let e = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : pn();
  return {
    loaderClasses: x(() => ({
      [`${e}--loading`]: t.loading
    }))
  };
}
function tf(t, e) {
  var i;
  let {
    slots: n
  } = e;
  return C("div", {
    class: `${t.name}__loader`
  }, [((i = n.default) == null ? void 0 : i.call(n, {
    color: t.color,
    isActive: t.active
  })) || C(ef, {
    absolute: t.absolute,
    active: t.active,
    color: t.color,
    height: "2",
    indeterminate: !0
  }, null)]);
}
const sy = ["underlined", "outlined", "filled", "solo", "solo-inverted", "solo-filled", "plain"], El = $({
  appendInnerIcon: xe,
  bgColor: String,
  clearable: Boolean,
  clearIcon: {
    type: xe,
    default: "$clear"
  },
  active: Boolean,
  centerAffix: {
    type: Boolean,
    default: void 0
  },
  color: String,
  baseColor: String,
  dirty: Boolean,
  disabled: {
    type: Boolean,
    default: null
  },
  error: Boolean,
  flat: Boolean,
  label: String,
  persistentClear: Boolean,
  prependInnerIcon: xe,
  reverse: Boolean,
  singleLine: Boolean,
  variant: {
    type: String,
    default: "filled",
    validator: (t) => sy.includes(t)
  },
  "onClick:clear": Xt(),
  "onClick:appendInner": Xt(),
  "onClick:prependInner": Xt(),
  ...ue(),
  ...Tl(),
  ...Ct(),
  ...ke()
}, "VField"), Al = K()({
  name: "VField",
  inheritAttrs: !1,
  props: {
    id: String,
    ...Ph(),
    ...El()
  },
  emits: {
    "update:focused": (t) => !0,
    "update:modelValue": (t) => !0
  },
  setup(t, e) {
    let {
      attrs: n,
      emit: i,
      slots: a
    } = e;
    const {
      themeClasses: o
    } = $e(t), {
      loaderClasses: r
    } = wl(t), {
      focusClasses: s,
      isFocused: l,
      focus: c,
      blur: u
    } = _l(t), {
      InputIcon: d
    } = ph(t), {
      roundedClasses: h
    } = yt(t), {
      rtlClasses: f
    } = Qt(), g = x(() => t.dirty || t.active), m = x(() => !t.singleLine && !!(t.label || a.label)), v = _n(), y = x(() => t.id || `input-${v}`), p = x(() => `${y.value}-messages`), M = Z(), S = Z(), b = Z(), T = x(() => ["plain", "underlined"].includes(t.variant)), {
      backgroundColorClasses: _,
      backgroundColorStyles: P
    } = Pt(te(t, "bgColor")), {
      textColorClasses: w,
      textColorStyles: I
    } = fn(x(() => t.error || t.disabled ? void 0 : g.value && l.value ? t.color : t.baseColor));
    Q(g, (R) => {
      if (m.value) {
        const V = M.value.$el, N = S.value.$el;
        requestAnimationFrame(() => {
          const G = gl(V), X = N.getBoundingClientRect(), E = X.x - G.x, B = X.y - G.y - (G.height / 2 - X.height / 2), D = X.width / 0.75, k = Math.abs(D - G.width) > 1 ? {
            maxWidth: oe(D)
          } : void 0, W = getComputedStyle(V), U = getComputedStyle(N), L = parseFloat(W.transitionDuration) * 1e3 || 150, ee = parseFloat(U.getPropertyValue("--v-field-label-scale")), J = U.getPropertyValue("color");
          V.style.visibility = "visible", N.style.visibility = "hidden", Ji(V, {
            transform: `translate(${E}px, ${B}px) scale(${ee})`,
            color: J,
            ...k
          }, {
            duration: L,
            easing: tr,
            direction: R ? "normal" : "reverse"
          }).finished.then(() => {
            V.style.removeProperty("visibility"), N.style.removeProperty("visibility");
          });
        });
      }
    }, {
      flush: "post"
    });
    const z = x(() => ({
      isActive: g,
      isFocused: l,
      controlRef: b,
      blur: u,
      focus: c
    }));
    function A(R) {
      R.target !== document.activeElement && R.preventDefault();
    }
    return ie(() => {
      var E, B, D;
      const R = t.variant === "outlined", V = a["prepend-inner"] || t.prependInnerIcon, N = !!(t.clearable || a.clear), G = !!(a["append-inner"] || t.appendInnerIcon || N), X = () => a.label ? a.label({
        ...z.value,
        label: t.label,
        props: {
          for: y.value
        }
      }) : t.label;
      return C("div", se({
        class: ["v-field", {
          "v-field--active": g.value,
          "v-field--appended": G,
          "v-field--center-affix": t.centerAffix ?? !T.value,
          "v-field--disabled": t.disabled,
          "v-field--dirty": t.dirty,
          "v-field--error": t.error,
          "v-field--flat": t.flat,
          "v-field--has-background": !!t.bgColor,
          "v-field--persistent-clear": t.persistentClear,
          "v-field--prepended": V,
          "v-field--reverse": t.reverse,
          "v-field--single-line": t.singleLine,
          "v-field--no-label": !X(),
          [`v-field--variant-${t.variant}`]: !0
        }, o.value, _.value, s.value, r.value, h.value, f.value, t.class],
        style: [P.value, t.style],
        onClick: A
      }, n), [C("div", {
        class: "v-field__overlay"
      }, null), C(tf, {
        name: "v-field",
        active: !!t.loading,
        color: t.error ? "error" : typeof t.loading == "string" ? t.loading : t.color
      }, {
        default: a.loader
      }), V && C("div", {
        key: "prepend",
        class: "v-field__prepend-inner"
      }, [t.prependInnerIcon && C(d, {
        key: "prepend-icon",
        name: "prependInner"
      }, null), (E = a["prepend-inner"]) == null ? void 0 : E.call(a, z.value)]), C("div", {
        class: "v-field__field",
        "data-no-activator": ""
      }, [["filled", "solo", "solo-inverted", "solo-filled"].includes(t.variant) && m.value && C(Vo, {
        key: "floating-label",
        ref: S,
        class: [w.value],
        floating: !0,
        for: y.value,
        style: I.value
      }, {
        default: () => [X()]
      }), C(Vo, {
        ref: M,
        for: y.value
      }, {
        default: () => [X()]
      }), (B = a.default) == null ? void 0 : B.call(a, {
        ...z.value,
        props: {
          id: y.value,
          class: "v-field__input",
          "aria-describedby": p.value
        },
        focus: c,
        blur: u
      })]), N && C(xh, {
        key: "clear"
      }, {
        default: () => [Ze(C("div", {
          class: "v-field__clearable",
          onMousedown: (k) => {
            k.preventDefault(), k.stopPropagation();
          }
        }, [a.clear ? a.clear() : C(d, {
          name: "clear"
        }, null)]), [[ui, t.dirty]])]
      }), G && C("div", {
        key: "append",
        class: "v-field__append-inner"
      }, [(D = a["append-inner"]) == null ? void 0 : D.call(a, z.value), t.appendInnerIcon && C(d, {
        key: "append-icon",
        name: "appendInner"
      }, null)]), C("div", {
        class: ["v-field__outline", w.value],
        style: I.value
      }, [R && C(de, null, [C("div", {
        class: "v-field__outline__start"
      }, null), m.value && C("div", {
        class: "v-field__outline__notch"
      }, [C(Vo, {
        ref: S,
        floating: !0,
        for: y.value
      }, {
        default: () => [X()]
      })]), C("div", {
        class: "v-field__outline__end"
      }, null)]), T.value && m.value && C(Vo, {
        ref: S,
        floating: !0,
        for: y.value
      }, {
        default: () => [X()]
      })])]);
    }), {
      controlRef: b
    };
  }
});
function nf(t) {
  const e = Object.keys(Al.props).filter((n) => !ul(n) && n !== "class" && n !== "style");
  return Ud(t, e);
}
const ly = ["color", "file", "time", "date", "datetime-local", "week", "month"], Rl = $({
  autofocus: Boolean,
  counter: [Boolean, Number, String],
  counterValue: [Number, Function],
  prefix: String,
  placeholder: String,
  persistentPlaceholder: Boolean,
  persistentCounter: Boolean,
  suffix: String,
  role: String,
  type: {
    type: String,
    default: "text"
  },
  modelModifiers: Object,
  ...bl(),
  ...El()
}, "VTextField"), On = K()({
  name: "VTextField",
  directives: {
    Intersect: yl
  },
  inheritAttrs: !1,
  props: Rl(),
  emits: {
    "click:control": (t) => !0,
    "mousedown:control": (t) => !0,
    "update:focused": (t) => !0,
    "update:modelValue": (t) => !0
  },
  setup(t, e) {
    let {
      attrs: n,
      emit: i,
      slots: a
    } = e;
    const o = Be(t, "modelValue"), {
      isFocused: r,
      focus: s,
      blur: l
    } = _l(t), c = x(() => typeof t.counterValue == "function" ? t.counterValue(o.value) : typeof t.counterValue == "number" ? t.counterValue : (o.value ?? "").toString().length), u = x(() => {
      if (n.maxlength)
        return n.maxlength;
      if (!(!t.counter || typeof t.counter != "number" && typeof t.counter != "string"))
        return t.counter;
    }), d = x(() => ["plain", "underlined"].includes(t.variant));
    function h(T, _) {
      var P, w;
      !t.autofocus || !T || (w = (P = _[0].target) == null ? void 0 : P.focus) == null || w.call(P);
    }
    const f = Z(), g = Z(), m = Z(), v = x(() => ly.includes(t.type) || t.persistentPlaceholder || r.value || t.active);
    function y() {
      var T;
      m.value !== document.activeElement && ((T = m.value) == null || T.focus()), r.value || s();
    }
    function p(T) {
      i("mousedown:control", T), T.target !== m.value && (y(), T.preventDefault());
    }
    function M(T) {
      y(), i("click:control", T);
    }
    function S(T) {
      T.stopPropagation(), y(), je(() => {
        o.value = null, Zd(t["onClick:clear"], T);
      });
    }
    function b(T) {
      var P;
      const _ = T.target;
      if (o.value = _.value, (P = t.modelModifiers) != null && P.trim && ["text", "search", "password", "tel", "url"].includes(t.type)) {
        const w = [_.selectionStart, _.selectionEnd];
        je(() => {
          _.selectionStart = w[0], _.selectionEnd = w[1];
        });
      }
    }
    return ie(() => {
      const T = !!(a.counter || t.counter !== !1 && t.counter != null), _ = !!(T || a.details), [P, w] = dl(n), {
        modelValue: I,
        ...z
      } = ar.filterProps(t), A = nf(t);
      return C(ar, se({
        ref: f,
        modelValue: o.value,
        "onUpdate:modelValue": (R) => o.value = R,
        class: ["v-text-field", {
          "v-text-field--prefixed": t.prefix,
          "v-text-field--suffixed": t.suffix,
          "v-input--plain-underlined": d.value
        }, t.class],
        style: t.style
      }, P, z, {
        centerAffix: !d.value,
        focused: r.value
      }), {
        ...a,
        default: (R) => {
          let {
            id: V,
            isDisabled: N,
            isDirty: G,
            isReadonly: X,
            isValid: E
          } = R;
          return C(Al, se({
            ref: g,
            onMousedown: p,
            onClick: M,
            "onClick:clear": S,
            "onClick:prependInner": t["onClick:prependInner"],
            "onClick:appendInner": t["onClick:appendInner"],
            role: t.role
          }, A, {
            id: V.value,
            active: v.value || G.value,
            dirty: G.value || t.dirty,
            disabled: N.value,
            focused: r.value,
            error: E.value === !1
          }), {
            ...a,
            default: (B) => {
              let {
                props: {
                  class: D,
                  ...k
                }
              } = B;
              const W = Ze(C("input", se({
                ref: m,
                value: o.value,
                onInput: b,
                autofocus: t.autofocus,
                readonly: X.value,
                disabled: N.value,
                name: t.name,
                placeholder: t.placeholder,
                size: 1,
                type: t.type,
                onFocus: y,
                onBlur: l
              }, k, w), null), [[Jt("intersect"), {
                handler: h
              }, null, {
                once: !0
              }]]);
              return C(de, null, [t.prefix && C("span", {
                class: "v-text-field__prefix"
              }, [C("span", {
                class: "v-text-field__prefix__text"
              }, [t.prefix])]), a.default ? C("div", {
                class: D,
                "data-no-activator": ""
              }, [a.default(), W]) : vm(W, {
                class: D
              }), t.suffix && C("span", {
                class: "v-text-field__suffix"
              }, [C("span", {
                class: "v-text-field__suffix__text"
              }, [t.suffix])])]);
            }
          });
        },
        details: _ ? (R) => {
          var V;
          return C(de, null, [(V = a.details) == null ? void 0 : V.call(a, R), T && C(de, null, [C("span", null, null), C(Jh, {
            active: t.persistentCounter || r.value,
            value: c.value,
            max: u.value
          }, a.counter)])]);
        } : void 0
      });
    }), ba({}, f, g, m);
  }
});
const cy = $({
  renderless: Boolean,
  ...ue()
}, "VVirtualScrollItem"), uy = K()({
  name: "VVirtualScrollItem",
  inheritAttrs: !1,
  props: cy(),
  emits: {
    "update:height": (t) => !0
  },
  setup(t, e) {
    let {
      attrs: n,
      emit: i,
      slots: a
    } = e;
    const {
      resizeRef: o,
      contentRect: r
    } = Ii(void 0, "border");
    Q(() => {
      var s;
      return (s = r.value) == null ? void 0 : s.height;
    }, (s) => {
      s != null && i("update:height", s);
    }), ie(() => {
      var s, l;
      return t.renderless ? C(de, null, [(s = a.default) == null ? void 0 : s.call(a, {
        itemRef: o
      })]) : C("div", se({
        ref: o,
        class: ["v-virtual-scroll__item", t.class],
        style: t.style
      }, n), [(l = a.default) == null ? void 0 : l.call(a)]);
    });
  }
}), dy = -1, hy = 1, ss = 100, fy = $({
  itemHeight: {
    type: [Number, String],
    default: null
  },
  height: [Number, String]
}, "virtual");
function gy(t, e) {
  const n = br(), i = q(0);
  Ht(() => {
    i.value = parseFloat(t.itemHeight || 0);
  });
  const a = q(0), o = q(Math.ceil(
    // Assume 16px items filling the entire screen height if
    // not provided. This is probably incorrect but it minimises
    // the chance of ending up with empty space at the bottom.
    // The default value is set here to avoid poisoning getSize()
    (parseInt(t.height) || n.height.value) / (i.value || 16)
  ) || 1), r = q(0), s = q(0), l = Z(), c = Z();
  let u = 0;
  const {
    resizeRef: d,
    contentRect: h
  } = Ii();
  Ht(() => {
    d.value = l.value;
  });
  const f = x(() => {
    var B;
    return l.value === document.documentElement ? n.height.value : ((B = h.value) == null ? void 0 : B.height) || parseInt(t.height) || 0;
  }), g = x(() => !!(l.value && c.value && f.value && i.value));
  let m = Array.from({
    length: e.value.length
  }), v = Array.from({
    length: e.value.length
  });
  const y = q(0);
  let p = -1;
  function M(B) {
    return m[B] || i.value;
  }
  const S = ev(() => {
    const B = performance.now();
    v[0] = 0;
    const D = e.value.length;
    for (let k = 1; k <= D - 1; k++)
      v[k] = (v[k - 1] || 0) + M(k - 1);
    y.value = Math.max(y.value, performance.now() - B);
  }, y), b = Q(g, (B) => {
    B && (b(), u = c.value.offsetTop, S.immediate(), N(), ~p && je(() => {
      ht && window.requestAnimationFrame(() => {
        X(p), p = -1;
      });
    }));
  });
  Q(f, (B, D) => {
    D && N();
  }), Tt(() => {
    S.clear();
  });
  function T(B, D) {
    const k = m[B], W = i.value;
    i.value = W ? Math.min(i.value, D) : D, (k !== D || W !== i.value) && (m[B] = D, S());
  }
  function _(B) {
    return B = ai(B, 0, e.value.length - 1), v[B] || 0;
  }
  function P(B) {
    return my(v, B);
  }
  let w = 0, I = 0, z = 0;
  function A() {
    if (!l.value || !c.value)
      return;
    const B = l.value.scrollTop, D = performance.now();
    D - z > 500 ? (I = Math.sign(B - w), u = c.value.offsetTop) : I = B - w, w = B, z = D, N();
  }
  function R() {
    !l.value || !c.value || (I = 0, z = 0, N());
  }
  let V = -1;
  function N() {
    cancelAnimationFrame(V), V = requestAnimationFrame(G);
  }
  function G() {
    if (!l.value || !f.value)
      return;
    const B = w - u, D = Math.sign(I), k = Math.max(0, B - ss), W = ai(P(k), 0, e.value.length), U = B + f.value + ss, L = ai(P(U) + 1, W + 1, e.value.length);
    if (
      // Only update the side we're scrolling towards,
      // the other side will be updated incidentally
      (D !== dy || W < a.value) && (D !== hy || L > o.value)
    ) {
      const ee = _(a.value) - _(W), J = _(L) - _(o.value);
      Math.max(ee, J) > ss ? (a.value = W, o.value = L) : (W <= 0 && (a.value = W), L >= e.value.length && (o.value = L));
    }
    r.value = _(a.value), s.value = _(e.value.length) - _(o.value);
  }
  function X(B) {
    const D = _(B);
    !l.value || B && !D ? p = B : l.value.scrollTop = D;
  }
  const E = x(() => e.value.slice(a.value, o.value).map((B, D) => ({
    raw: B,
    index: D + a.value
  })));
  return Q(e, () => {
    m = Array.from({
      length: e.value.length
    }), v = Array.from({
      length: e.value.length
    }), S.immediate(), N();
  }, {
    deep: !0
  }), {
    containerRef: l,
    markerRef: c,
    computedItems: E,
    paddingTop: r,
    paddingBottom: s,
    scrollToIndex: X,
    handleScroll: A,
    handleScrollend: R,
    handleItemResize: T
  };
}
function my(t, e) {
  let n = t.length - 1, i = 0, a = 0, o = null, r = -1;
  if (t[n] < e)
    return n;
  for (; i <= n; )
    if (a = i + n >> 1, o = t[a], o > e)
      n = a - 1;
    else if (o < e)
      r = a, i = a + 1;
    else
      return o === e ? a : i;
  return r;
}
const vy = $({
  items: {
    type: Array,
    default: () => []
  },
  renderless: Boolean,
  ...fy(),
  ...ue(),
  ...hi()
}, "VVirtualScroll"), af = K()({
  name: "VVirtualScroll",
  props: vy(),
  setup(t, e) {
    let {
      slots: n
    } = e;
    const i = He("VVirtualScroll"), {
      dimensionStyles: a
    } = fi(t), {
      containerRef: o,
      markerRef: r,
      handleScroll: s,
      handleScrollend: l,
      handleItemResize: c,
      scrollToIndex: u,
      paddingTop: d,
      paddingBottom: h,
      computedItems: f
    } = gy(t, te(t, "items"));
    return Yt(() => t.renderless, () => {
      function g() {
        var y, p;
        const v = (arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : !1) ? "addEventListener" : "removeEventListener";
        o.value === document.documentElement ? (document[v]("scroll", s, {
          passive: !0
        }), document[v]("scrollend", l)) : ((y = o.value) == null || y[v]("scroll", s, {
          passive: !0
        }), (p = o.value) == null || p[v]("scrollend", l));
      }
      nt(() => {
        o.value = th(i.vnode.el, !0), g(!0);
      }), Tt(g);
    }), ie(() => {
      const g = f.value.map((m) => C(uy, {
        key: m.index,
        renderless: t.renderless,
        "onUpdate:height": (v) => c(m.index, v)
      }, {
        default: (v) => {
          var y;
          return (y = n.default) == null ? void 0 : y.call(n, {
            item: m.raw,
            index: m.index,
            ...v
          });
        }
      }));
      return t.renderless ? C(de, null, [C("div", {
        ref: r,
        class: "v-virtual-scroll__spacer",
        style: {
          paddingTop: oe(d.value)
        }
      }, null), g, C("div", {
        class: "v-virtual-scroll__spacer",
        style: {
          paddingBottom: oe(h.value)
        }
      }, null)]) : C("div", {
        ref: o,
        class: ["v-virtual-scroll", t.class],
        onScrollPassive: s,
        onScrollend: l,
        style: [a.value, t.style]
      }, [C("div", {
        ref: r,
        class: "v-virtual-scroll__container",
        style: {
          paddingTop: oe(d.value),
          paddingBottom: oe(h.value)
        }
      }, [g])]);
    }), {
      scrollToIndex: u
    };
  }
});
function of(t, e) {
  const n = q(!1);
  let i;
  function a(s) {
    cancelAnimationFrame(i), n.value = !0, i = requestAnimationFrame(() => {
      i = requestAnimationFrame(() => {
        n.value = !1;
      });
    });
  }
  async function o() {
    await new Promise((s) => requestAnimationFrame(s)), await new Promise((s) => requestAnimationFrame(s)), await new Promise((s) => requestAnimationFrame(s)), await new Promise((s) => {
      if (n.value) {
        const l = Q(n, () => {
          l(), s();
        });
      } else
        s();
    });
  }
  async function r(s) {
    var u, d;
    if (s.key === "Tab" && ((u = e.value) == null || u.focus()), !["PageDown", "PageUp", "Home", "End"].includes(s.key))
      return;
    const l = (d = t.value) == null ? void 0 : d.$el;
    if (!l)
      return;
    (s.key === "Home" || s.key === "End") && l.scrollTo({
      top: s.key === "Home" ? 0 : l.scrollHeight,
      behavior: "smooth"
    }), await o();
    const c = l.querySelectorAll(":scope > :not(.v-virtual-scroll__spacer)");
    if (s.key === "PageDown" || s.key === "Home") {
      const h = l.getBoundingClientRect().top;
      for (const f of c)
        if (f.getBoundingClientRect().top >= h) {
          f.focus();
          break;
        }
    } else {
      const h = l.getBoundingClientRect().bottom;
      for (const f of [...c].reverse())
        if (f.getBoundingClientRect().bottom <= h) {
          f.focus();
          break;
        }
    }
  }
  return {
    onListScroll: a,
    onListKeydown: r
  };
}
const rf = $({
  chips: Boolean,
  closableChips: Boolean,
  closeText: {
    type: String,
    default: "$vuetify.close"
  },
  openText: {
    type: String,
    default: "$vuetify.open"
  },
  eager: Boolean,
  hideNoData: Boolean,
  hideSelected: Boolean,
  listProps: {
    type: Object
  },
  menu: Boolean,
  menuIcon: {
    type: xe,
    default: "$dropdown"
  },
  menuProps: {
    type: Object
  },
  multiple: Boolean,
  noDataText: {
    type: String,
    default: "$vuetify.noDataText"
  },
  openOnClear: Boolean,
  itemColor: String,
  ...$h({
    itemChildren: !1
  })
}, "Select"), Cy = $({
  ...rf(),
  ...Li(Rl({
    modelValue: null,
    role: "combobox"
  }), ["validationValue", "dirty", "appendInnerIcon"]),
  ...ya({
    transition: {
      component: bh
    }
  })
}, "VSelect");
K()({
  name: "VSelect",
  props: Cy(),
  emits: {
    "update:focused": (t) => !0,
    "update:modelValue": (t) => !0,
    "update:menu": (t) => !0
  },
  setup(t, e) {
    let {
      slots: n
    } = e;
    const {
      t: i
    } = _a(), a = Z(), o = Z(), r = Z(), s = Be(t, "menu"), l = x({
      get: () => s.value,
      set: (E) => {
        var B;
        s.value && !E && ((B = o.value) != null && B.ΨopenChildren) || (s.value = E);
      }
    }), {
      items: c,
      transformIn: u,
      transformOut: d
    } = Uh(t), h = Be(t, "modelValue", [], (E) => u(E === null ? [null] : Dt(E)), (E) => {
      const B = d(E);
      return t.multiple ? B : B[0] ?? null;
    }), f = x(() => typeof t.counterValue == "function" ? t.counterValue(h.value) : typeof t.counterValue == "number" ? t.counterValue : h.value.length), g = Sl(), m = x(() => h.value.map((E) => E.value)), v = q(!1), y = x(() => l.value ? t.closeText : t.openText);
    let p = "", M;
    const S = x(() => t.hideSelected ? c.value.filter((E) => !h.value.some((B) => B === E)) : c.value), b = x(() => t.hideNoData && !S.value.length || t.readonly || (g == null ? void 0 : g.isReadonly.value)), T = x(() => {
      var E;
      return {
        ...t.menuProps,
        activatorProps: {
          ...((E = t.menuProps) == null ? void 0 : E.activatorProps) || {},
          "aria-haspopup": "listbox"
          // Set aria-haspopup to 'listbox'
        }
      };
    }), _ = Z(), {
      onListScroll: P,
      onListKeydown: w
    } = of(_, a);
    function I(E) {
      t.openOnClear && (l.value = !0);
    }
    function z() {
      b.value || (l.value = !l.value);
    }
    function A(E) {
      var U, L;
      if (!E.key || t.readonly || g != null && g.isReadonly.value)
        return;
      ["Enter", " ", "ArrowDown", "ArrowUp", "Home", "End"].includes(E.key) && E.preventDefault(), ["Enter", "ArrowDown", " "].includes(E.key) && (l.value = !0), ["Escape", "Tab"].includes(E.key) && (l.value = !1), E.key === "Home" ? (U = _.value) == null || U.focus("first") : E.key === "End" && ((L = _.value) == null || L.focus("last"));
      const B = 1e3;
      function D(ee) {
        const J = ee.key.length === 1, ae = !ee.ctrlKey && !ee.metaKey && !ee.altKey;
        return J && ae;
      }
      if (t.multiple || !D(E))
        return;
      const k = performance.now();
      k - M > B && (p = ""), p += E.key.toLowerCase(), M = k;
      const W = c.value.find((ee) => ee.title.toLowerCase().startsWith(p));
      W !== void 0 && (h.value = [W]);
    }
    function R(E) {
      if (t.multiple) {
        const B = h.value.findIndex((D) => t.valueComparator(D.value, E.value));
        if (B === -1)
          h.value = [...h.value, E];
        else {
          const D = [...h.value];
          D.splice(B, 1), h.value = D;
        }
      } else
        h.value = [E], l.value = !1;
    }
    function V(E) {
      var B;
      (B = _.value) != null && B.$el.contains(E.relatedTarget) || (l.value = !1);
    }
    function N() {
      var E;
      v.value && ((E = a.value) == null || E.focus());
    }
    function G(E) {
      v.value = !0;
    }
    function X(E) {
      if (E == null)
        h.value = [];
      else if (ra(a.value, ":autofill") || ra(a.value, ":-webkit-autofill")) {
        const B = c.value.find((D) => D.title === E);
        B && R(B);
      } else
        a.value && (a.value.value = "");
    }
    return Q(l, () => {
      if (!t.hideSelected && l.value && h.value.length) {
        const E = S.value.findIndex((B) => h.value.some((D) => t.valueComparator(D.value, B.value)));
        ht && window.requestAnimationFrame(() => {
          var B;
          E >= 0 && ((B = r.value) == null || B.scrollToIndex(E));
        });
      }
    }), Q(S, (E, B) => {
      v.value && (!E.length && t.hideNoData && (l.value = !1), !B.length && E.length && (l.value = !0));
    }), ie(() => {
      const E = !!(t.chips || n.chip), B = !!(!t.hideNoData || S.value.length || n["prepend-item"] || n["append-item"] || n["no-data"]), D = h.value.length > 0, k = On.filterProps(t), W = D || !v.value && t.label && !t.persistentPlaceholder ? void 0 : t.placeholder;
      return C(On, se({
        ref: a
      }, k, {
        modelValue: h.value.map((U) => U.props.value).join(", "),
        "onUpdate:modelValue": X,
        focused: v.value,
        "onUpdate:focused": (U) => v.value = U,
        validationValue: h.externalValue,
        counterValue: f.value,
        dirty: D,
        class: ["v-select", {
          "v-select--active-menu": l.value,
          "v-select--chips": !!t.chips,
          [`v-select--${t.multiple ? "multiple" : "single"}`]: !0,
          "v-select--selected": h.value.length,
          "v-select--selection-slot": !!n.selection
        }, t.class],
        style: t.style,
        inputmode: "none",
        placeholder: W,
        "onClick:clear": I,
        "onMousedown:control": z,
        onBlur: V,
        onKeydown: A,
        "aria-label": i(y.value),
        title: i(y.value)
      }), {
        ...n,
        default: () => C(de, null, [C(wr, se({
          ref: o,
          modelValue: l.value,
          "onUpdate:modelValue": (U) => l.value = U,
          activator: "parent",
          contentClass: "v-select__content",
          disabled: b.value,
          eager: t.eager,
          maxHeight: 310,
          openOnClick: !1,
          closeOnContentClick: !1,
          transition: t.transition,
          onAfterLeave: N
        }, T.value), {
          default: () => [B && C(Sa, se({
            ref: _,
            selected: m.value,
            selectStrategy: t.multiple ? "independent" : "single-independent",
            onMousedown: (U) => U.preventDefault(),
            onKeydown: w,
            onFocusin: G,
            onScrollPassive: P,
            tabindex: "-1",
            "aria-live": "polite",
            color: t.itemColor ?? t.color
          }, t.listProps), {
            default: () => {
              var U, L, ee;
              return [(U = n["prepend-item"]) == null ? void 0 : U.call(n), !S.value.length && !t.hideNoData && (((L = n["no-data"]) == null ? void 0 : L.call(n)) ?? C(mn, {
                title: i(t.noDataText)
              }, null)), C(af, {
                ref: r,
                renderless: !0,
                items: S.value
              }, {
                default: (J) => {
                  var We;
                  let {
                    item: ae,
                    index: j,
                    itemRef: le
                  } = J;
                  const pe = se(ae.props, {
                    ref: le,
                    key: j,
                    onClick: () => R(ae)
                  });
                  return ((We = n.item) == null ? void 0 : We.call(n, {
                    item: ae,
                    index: j,
                    props: pe
                  })) ?? C(mn, se(pe, {
                    role: "option"
                  }), {
                    prepend: (ye) => {
                      let {
                        isSelected: Ue
                      } = ye;
                      return C(de, null, [t.multiple && !t.hideSelected ? C(Ch, {
                        key: ae.value,
                        modelValue: Ue,
                        ripple: !1,
                        tabindex: "-1"
                      }, null) : void 0, ae.props.prependAvatar && C(si, {
                        image: ae.props.prependAvatar
                      }, null), ae.props.prependIcon && C(Ie, {
                        icon: ae.props.prependIcon
                      }, null)]);
                    }
                  });
                }
              }), (ee = n["append-item"]) == null ? void 0 : ee.call(n)];
            }
          })]
        }), h.value.map((U, L) => {
          function ee(le) {
            le.stopPropagation(), le.preventDefault(), R(U);
          }
          const J = {
            "onClick:close": ee,
            onMousedown(le) {
              le.preventDefault(), le.stopPropagation();
            },
            modelValue: !0,
            "onUpdate:modelValue": void 0
          }, ae = E ? !!n.chip : !!n.selection, j = ae ? fl(E ? n.chip({
            item: U,
            index: L,
            props: J
          }) : n.selection({
            item: U,
            index: L
          })) : void 0;
          if (!(ae && !j))
            return C("div", {
              key: U.value,
              class: "v-select__selection"
            }, [E ? n.chip ? C(Xe, {
              key: "chip-defaults",
              defaults: {
                VChip: {
                  closable: t.closableChips,
                  size: "small",
                  text: U.title
                }
              }
            }, {
              default: () => [j]
            }) : C(Lh, se({
              key: "chip",
              closable: t.closableChips,
              size: "small",
              text: U.title,
              disabled: U.props.disabled
            }, J), null) : j ?? C("span", {
              class: "v-select__selection-text"
            }, [U.title, t.multiple && L < h.value.length - 1 && C("span", {
              class: "v-select__selection-comma"
            }, [ct(",")])])]);
        })]),
        "append-inner": function() {
          var J;
          for (var U = arguments.length, L = new Array(U), ee = 0; ee < U; ee++)
            L[ee] = arguments[ee];
          return C(de, null, [(J = n["append-inner"]) == null ? void 0 : J.call(n, ...L), t.menuIcon ? C(Ie, {
            class: "v-select__menu-icon",
            icon: t.menuIcon
          }, null) : void 0]);
        }
      });
    }), ba({
      isFocused: v,
      menu: l,
      select: R
    }, a);
  }
});
const yy = (t, e, n) => t == null || e == null ? -1 : t.toString().toLocaleLowerCase().indexOf(e.toString().toLocaleLowerCase()), py = $({
  customFilter: Function,
  customKeyFilter: Object,
  filterKeys: [Array, String],
  filterMode: {
    type: String,
    default: "intersection"
  },
  noFilter: Boolean
}, "filter");
function _y(t, e, n) {
  var s;
  const i = [], a = (n == null ? void 0 : n.default) ?? yy, o = n != null && n.filterKeys ? Dt(n.filterKeys) : !1, r = Object.keys((n == null ? void 0 : n.customKeyFilter) ?? {}).length;
  if (!(t != null && t.length))
    return i;
  e:
    for (let l = 0; l < t.length; l++) {
      const [c, u = c] = Dt(t[l]), d = {}, h = {};
      let f = -1;
      if (e && !(n != null && n.noFilter)) {
        if (typeof c == "object") {
          const v = o || Object.keys(u);
          for (const y of v) {
            const p = rn(u, y, u), M = (s = n == null ? void 0 : n.customKeyFilter) == null ? void 0 : s[y];
            if (f = M ? M(p, e, c) : a(p, e, c), f !== -1 && f !== !1)
              M ? d[y] = f : h[y] = f;
            else if ((n == null ? void 0 : n.filterMode) === "every")
              continue e;
          }
        } else
          f = a(c, e, c), f !== -1 && f !== !1 && (h.title = f);
        const g = Object.keys(h).length, m = Object.keys(d).length;
        if (!g && !m || (n == null ? void 0 : n.filterMode) === "union" && m !== r && !g || (n == null ? void 0 : n.filterMode) === "intersection" && (m !== r || !g))
          continue;
      }
      i.push({
        index: l,
        matches: {
          ...h,
          ...d
        }
      });
    }
  return i;
}
function Sy(t, e, n, i) {
  const a = Z([]), o = Z(/* @__PURE__ */ new Map()), r = x(() => i != null && i.transform ? O(e).map((l) => [l, i.transform(l)]) : O(e));
  Ht(() => {
    const l = typeof n == "function" ? n() : O(n), c = typeof l != "string" && typeof l != "number" ? "" : String(l), u = _y(r.value, c, {
      customKeyFilter: {
        ...t.customKeyFilter,
        ...O(i == null ? void 0 : i.customKeyFilter)
      },
      default: t.customFilter,
      filterKeys: t.filterKeys,
      filterMode: t.filterMode,
      noFilter: t.noFilter
    }), d = O(e), h = [], f = /* @__PURE__ */ new Map();
    u.forEach((g) => {
      let {
        index: m,
        matches: v
      } = g;
      const y = d[m];
      h.push(y), f.set(y.value, v);
    }), a.value = h, o.value = f;
  });
  function s(l) {
    return o.value.get(l.value);
  }
  return {
    filteredItems: a,
    filteredMatches: o,
    getMatches: s
  };
}
function by(t, e, n) {
  if (e == null)
    return t;
  if (Array.isArray(e))
    throw new Error("Multiple matches is not implemented");
  return typeof e == "number" && ~e ? C(de, null, [C("span", {
    class: "v-autocomplete__unmask"
  }, [t.substr(0, e)]), C("span", {
    class: "v-autocomplete__mask"
  }, [t.substr(e, n)]), C("span", {
    class: "v-autocomplete__unmask"
  }, [t.substr(e + n)])]) : t;
}
const My = $({
  autoSelectFirst: {
    type: [Boolean, String]
  },
  clearOnSelect: Boolean,
  search: String,
  ...py({
    filterKeys: ["title"]
  }),
  ...rf(),
  ...Li(Rl({
    modelValue: null,
    role: "combobox"
  }), ["validationValue", "dirty", "appendInnerIcon"]),
  ...ya({
    transition: !1
  })
}, "VAutocomplete"), ls = K()({
  name: "VAutocomplete",
  props: My(),
  emits: {
    "update:focused": (t) => !0,
    "update:search": (t) => !0,
    "update:modelValue": (t) => !0,
    "update:menu": (t) => !0
  },
  setup(t, e) {
    let {
      slots: n
    } = e;
    const {
      t: i
    } = _a(), a = Z(), o = q(!1), r = q(!0), s = q(!1), l = Z(), c = Z(), u = Be(t, "menu"), d = x({
      get: () => u.value,
      set: (j) => {
        var le;
        u.value && !j && ((le = l.value) != null && le.ΨopenChildren) || (u.value = j);
      }
    }), h = q(-1), f = x(() => {
      var j;
      return (j = a.value) == null ? void 0 : j.color;
    }), g = x(() => d.value ? t.closeText : t.openText), {
      items: m,
      transformIn: v,
      transformOut: y
    } = Uh(t), {
      textColorClasses: p,
      textColorStyles: M
    } = fn(f), S = Be(t, "search", ""), b = Be(t, "modelValue", [], (j) => v(j === null ? [null] : Dt(j)), (j) => {
      const le = y(j);
      return t.multiple ? le : le[0] ?? null;
    }), T = x(() => typeof t.counterValue == "function" ? t.counterValue(b.value) : typeof t.counterValue == "number" ? t.counterValue : b.value.length), _ = Sl(), {
      filteredItems: P,
      getMatches: w
    } = Sy(t, m, () => r.value ? "" : S.value), I = x(() => t.hideSelected ? P.value.filter((j) => !b.value.some((le) => le.value === j.value)) : P.value), z = x(() => b.value.map((j) => j.props.value)), A = x(() => {
      var le;
      return (t.autoSelectFirst === !0 || t.autoSelectFirst === "exact" && S.value === ((le = I.value[0]) == null ? void 0 : le.title)) && I.value.length > 0 && !r.value && !s.value;
    }), R = x(() => t.hideNoData && !I.value.length || t.readonly || (_ == null ? void 0 : _.isReadonly.value)), V = Z(), {
      onListScroll: N,
      onListKeydown: G
    } = of(V, a);
    function X(j) {
      t.openOnClear && (d.value = !0), S.value = "";
    }
    function E() {
      R.value || (d.value = !0);
    }
    function B(j) {
      R.value || (o.value && (j.preventDefault(), j.stopPropagation()), d.value = !d.value);
    }
    function D(j) {
      var We, ye, Ue;
      if (t.readonly || _ != null && _.isReadonly.value)
        return;
      const le = a.value.selectionStart, pe = b.value.length;
      if ((h.value > -1 || ["Enter", "ArrowDown", "ArrowUp"].includes(j.key)) && j.preventDefault(), ["Enter", "ArrowDown"].includes(j.key) && (d.value = !0), ["Escape"].includes(j.key) && (d.value = !1), A.value && ["Enter", "Tab"].includes(j.key) && ae(I.value[0]), j.key === "ArrowDown" && A.value && ((We = V.value) == null || We.focus("next")), !!t.multiple) {
        if (["Backspace", "Delete"].includes(j.key)) {
          if (h.value < 0) {
            j.key === "Backspace" && !S.value && (h.value = pe - 1);
            return;
          }
          const Fe = h.value, at = b.value[h.value];
          at && !at.props.disabled && ae(at), h.value = Fe >= pe - 1 ? pe - 2 : Fe;
        }
        if (j.key === "ArrowLeft") {
          if (h.value < 0 && le > 0)
            return;
          const Fe = h.value > -1 ? h.value - 1 : pe - 1;
          b.value[Fe] ? h.value = Fe : (h.value = -1, a.value.setSelectionRange((ye = S.value) == null ? void 0 : ye.length, (Ue = S.value) == null ? void 0 : Ue.length));
        }
        if (j.key === "ArrowRight") {
          if (h.value < 0)
            return;
          const Fe = h.value + 1;
          b.value[Fe] ? h.value = Fe : (h.value = -1, a.value.setSelectionRange(0, 0));
        }
      }
    }
    function k(j) {
      if (ra(a.value, ":autofill") || ra(a.value, ":-webkit-autofill")) {
        const le = m.value.find((pe) => pe.title === j.target.value);
        le && ae(le);
      }
    }
    function W() {
      var j;
      o.value && (r.value = !0, (j = a.value) == null || j.focus());
    }
    function U(j) {
      o.value = !0, setTimeout(() => {
        s.value = !0;
      });
    }
    function L(j) {
      s.value = !1;
    }
    function ee(j) {
      (j == null || j === "" && !t.multiple) && (b.value = []);
    }
    const J = q(!1);
    function ae(j) {
      let le = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : !0;
      if (!j.props.disabled)
        if (t.multiple) {
          const pe = b.value.findIndex((We) => t.valueComparator(We.value, j.value));
          if (pe === -1)
            b.value = [...b.value, j];
          else {
            const We = [...b.value];
            We.splice(pe, 1), b.value = We;
          }
          t.clearOnSelect && (S.value = "");
        } else
          b.value = le ? [j] : [], J.value = !0, S.value = le ? j.title : "", d.value = !1, r.value = !0, je(() => J.value = !1);
    }
    return Q(o, (j, le) => {
      var pe;
      j !== le && (j ? (J.value = !0, S.value = t.multiple ? "" : String(((pe = b.value.at(-1)) == null ? void 0 : pe.props.title) ?? ""), r.value = !0, je(() => J.value = !1)) : (!t.multiple && S.value == null ? b.value = [] : A.value && !s.value && !b.value.some((We) => {
        let {
          value: ye
        } = We;
        return ye === I.value[0].value;
      }) && ae(I.value[0]), d.value = !1, S.value = "", h.value = -1));
    }), Q(S, (j) => {
      !o.value || J.value || (j && (d.value = !0), r.value = !j);
    }), Q(d, () => {
      if (!t.hideSelected && d.value && b.value.length) {
        const j = I.value.findIndex((le) => b.value.some((pe) => le.value === pe.value));
        ht && window.requestAnimationFrame(() => {
          var le;
          j >= 0 && ((le = c.value) == null || le.scrollToIndex(j));
        });
      }
    }), Q(I, (j, le) => {
      o.value && (!j.length && t.hideNoData && (d.value = !1), !le.length && j.length && (d.value = !0));
    }), ie(() => {
      const j = !!(t.chips || n.chip), le = !!(!t.hideNoData || I.value.length || n["prepend-item"] || n["append-item"] || n["no-data"]), pe = b.value.length > 0, We = On.filterProps(t);
      return C(On, se({
        ref: a
      }, We, {
        modelValue: S.value,
        "onUpdate:modelValue": [(ye) => S.value = ye, ee],
        focused: o.value,
        "onUpdate:focused": (ye) => o.value = ye,
        validationValue: b.externalValue,
        counterValue: T.value,
        dirty: pe,
        onChange: k,
        class: ["v-autocomplete", `v-autocomplete--${t.multiple ? "multiple" : "single"}`, {
          "v-autocomplete--active-menu": d.value,
          "v-autocomplete--chips": !!t.chips,
          "v-autocomplete--selection-slot": !!n.selection,
          "v-autocomplete--selecting-index": h.value > -1
        }, t.class],
        style: t.style,
        readonly: t.readonly,
        placeholder: pe ? void 0 : t.placeholder,
        "onClick:clear": X,
        "onMousedown:control": E,
        onKeydown: D
      }), {
        ...n,
        default: () => C(de, null, [C(wr, se({
          ref: l,
          modelValue: d.value,
          "onUpdate:modelValue": (ye) => d.value = ye,
          activator: "parent",
          contentClass: "v-autocomplete__content",
          disabled: R.value,
          eager: t.eager,
          maxHeight: 310,
          openOnClick: !1,
          closeOnContentClick: !1,
          transition: t.transition,
          onAfterLeave: W
        }, t.menuProps), {
          default: () => [le && C(Sa, se({
            ref: V,
            selected: z.value,
            selectStrategy: t.multiple ? "independent" : "single-independent",
            onMousedown: (ye) => ye.preventDefault(),
            onKeydown: G,
            onFocusin: U,
            onFocusout: L,
            onScrollPassive: N,
            tabindex: "-1",
            "aria-live": "polite",
            color: t.itemColor ?? t.color
          }, t.listProps), {
            default: () => {
              var ye, Ue, Fe;
              return [(ye = n["prepend-item"]) == null ? void 0 : ye.call(n), !I.value.length && !t.hideNoData && (((Ue = n["no-data"]) == null ? void 0 : Ue.call(n)) ?? C(mn, {
                title: i(t.noDataText)
              }, null)), C(af, {
                ref: c,
                renderless: !0,
                items: I.value
              }, {
                default: (at) => {
                  var Ci;
                  let {
                    item: ze,
                    index: pt,
                    itemRef: zt
                  } = at;
                  const Bi = se(ze.props, {
                    ref: zt,
                    key: pt,
                    active: A.value && pt === 0 ? !0 : void 0,
                    onClick: () => ae(ze)
                  });
                  return ((Ci = n.item) == null ? void 0 : Ci.call(n, {
                    item: ze,
                    index: pt,
                    props: Bi
                  })) ?? C(mn, Bi, {
                    prepend: (Pn) => {
                      let {
                        isSelected: Ke
                      } = Pn;
                      return C(de, null, [t.multiple && !t.hideSelected ? C(Ch, {
                        key: ze.value,
                        modelValue: Ke,
                        ripple: !1,
                        tabindex: "-1"
                      }, null) : void 0, ze.props.prependAvatar && C(si, {
                        image: ze.props.prependAvatar
                      }, null), ze.props.prependIcon && C(Ie, {
                        icon: ze.props.prependIcon
                      }, null)]);
                    },
                    title: () => {
                      var Pn, Ke;
                      return r.value ? ze.title : by(ze.title, (Pn = w(ze)) == null ? void 0 : Pn.title, ((Ke = S.value) == null ? void 0 : Ke.length) ?? 0);
                    }
                  });
                }
              }), (Fe = n["append-item"]) == null ? void 0 : Fe.call(n)];
            }
          })]
        }), b.value.map((ye, Ue) => {
          function Fe(zt) {
            zt.stopPropagation(), zt.preventDefault(), ae(ye, !1);
          }
          const at = {
            "onClick:close": Fe,
            onMousedown(zt) {
              zt.preventDefault(), zt.stopPropagation();
            },
            modelValue: !0,
            "onUpdate:modelValue": void 0
          }, ze = j ? !!n.chip : !!n.selection, pt = ze ? fl(j ? n.chip({
            item: ye,
            index: Ue,
            props: at
          }) : n.selection({
            item: ye,
            index: Ue
          })) : void 0;
          if (!(ze && !pt))
            return C("div", {
              key: ye.value,
              class: ["v-autocomplete__selection", Ue === h.value && ["v-autocomplete__selection--selected", p.value]],
              style: Ue === h.value ? M.value : {}
            }, [j ? n.chip ? C(Xe, {
              key: "chip-defaults",
              defaults: {
                VChip: {
                  closable: t.closableChips,
                  size: "small",
                  text: ye.title
                }
              }
            }, {
              default: () => [pt]
            }) : C(Lh, se({
              key: "chip",
              closable: t.closableChips,
              size: "small",
              text: ye.title,
              disabled: ye.props.disabled
            }, at), null) : pt ?? C("span", {
              class: "v-autocomplete__selection-text"
            }, [ye.title, t.multiple && Ue < b.value.length - 1 && C("span", {
              class: "v-autocomplete__selection-comma"
            }, [ct(",")])])]);
        })]),
        "append-inner": function() {
          var at;
          for (var ye = arguments.length, Ue = new Array(ye), Fe = 0; Fe < ye; Fe++)
            Ue[Fe] = arguments[Fe];
          return C(de, null, [(at = n["append-inner"]) == null ? void 0 : at.call(n, ...Ue), t.menuIcon ? C(Ie, {
            class: "v-autocomplete__menu-icon",
            icon: t.menuIcon,
            onMousedown: B,
            onClick: iv,
            "aria-label": i(g.value),
            title: i(g.value)
          }, null) : void 0]);
        }
      });
    }), ba({
      isFocused: o,
      isPristine: r,
      menu: d,
      search: S,
      filteredItems: P,
      select: ae
    }, a);
  }
});
const xy = $({
  fluid: {
    type: Boolean,
    default: !1
  },
  ...ue(),
  ...Le()
}, "VContainer"), vn = K()({
  name: "VContainer",
  props: xy(),
  setup(t, e) {
    let {
      slots: n
    } = e;
    const {
      rtlClasses: i
    } = Qt();
    return ie(() => C(t.tag, {
      class: ["v-container", {
        "v-container--fluid": t.fluid
      }, i.value, t.class],
      style: t.style
    }, n)), {};
  }
}), sf = (() => Sr.reduce((t, e) => (t[e] = {
  type: [Boolean, String, Number],
  default: !1
}, t), {}))(), lf = (() => Sr.reduce((t, e) => {
  const n = "offset" + lo(e);
  return t[n] = {
    type: [String, Number],
    default: null
  }, t;
}, {}))(), cf = (() => Sr.reduce((t, e) => {
  const n = "order" + lo(e);
  return t[n] = {
    type: [String, Number],
    default: null
  }, t;
}, {}))(), _u = {
  col: Object.keys(sf),
  offset: Object.keys(lf),
  order: Object.keys(cf)
};
function Py(t, e, n) {
  let i = t;
  if (!(n == null || n === !1)) {
    if (e) {
      const a = e.replace(t, "");
      i += `-${a}`;
    }
    return t === "col" && (i = "v-" + i), t === "col" && (n === "" || n === !0) || (i += `-${n}`), i.toLowerCase();
  }
}
const Ty = ["auto", "start", "end", "center", "baseline", "stretch"], wy = $({
  cols: {
    type: [Boolean, String, Number],
    default: !1
  },
  ...sf,
  offset: {
    type: [String, Number],
    default: null
  },
  ...lf,
  order: {
    type: [String, Number],
    default: null
  },
  ...cf,
  alignSelf: {
    type: String,
    default: null,
    validator: (t) => Ty.includes(t)
  },
  ...ue(),
  ...Le()
}, "VCol"), jt = K()({
  name: "VCol",
  props: wy(),
  setup(t, e) {
    let {
      slots: n
    } = e;
    const i = x(() => {
      const a = [];
      let o;
      for (o in _u)
        _u[o].forEach((s) => {
          const l = t[s], c = Py(o, s, l);
          c && a.push(c);
        });
      const r = a.some((s) => s.startsWith("v-col-"));
      return a.push({
        // Default to .v-col if no other col-{bp}-* classes generated nor `cols` specified.
        "v-col": !r || !t.cols,
        [`v-col-${t.cols}`]: t.cols,
        [`offset-${t.offset}`]: t.offset,
        [`order-${t.order}`]: t.order,
        [`align-self-${t.alignSelf}`]: t.alignSelf
      }), a;
    });
    return () => {
      var a;
      return ma(t.tag, {
        class: [i.value, t.class],
        style: t.style
      }, (a = n.default) == null ? void 0 : a.call(n));
    };
  }
}), Il = ["start", "end", "center"], uf = ["space-between", "space-around", "space-evenly"];
function zl(t, e) {
  return Sr.reduce((n, i) => {
    const a = t + lo(i);
    return n[a] = e(), n;
  }, {});
}
const Ey = [...Il, "baseline", "stretch"], df = (t) => Ey.includes(t), hf = zl("align", () => ({
  type: String,
  default: null,
  validator: df
})), Ay = [...Il, ...uf], ff = (t) => Ay.includes(t), gf = zl("justify", () => ({
  type: String,
  default: null,
  validator: ff
})), Ry = [...Il, ...uf, "stretch"], mf = (t) => Ry.includes(t), vf = zl("alignContent", () => ({
  type: String,
  default: null,
  validator: mf
})), Su = {
  align: Object.keys(hf),
  justify: Object.keys(gf),
  alignContent: Object.keys(vf)
}, Iy = {
  align: "align",
  justify: "justify",
  alignContent: "align-content"
};
function zy(t, e, n) {
  let i = Iy[t];
  if (n != null) {
    if (e) {
      const a = e.replace(t, "");
      i += `-${a}`;
    }
    return i += `-${n}`, i.toLowerCase();
  }
}
const Ly = $({
  dense: Boolean,
  noGutters: Boolean,
  align: {
    type: String,
    default: null,
    validator: df
  },
  ...hf,
  justify: {
    type: String,
    default: null,
    validator: ff
  },
  ...gf,
  alignContent: {
    type: String,
    default: null,
    validator: mf
  },
  ...vf,
  ...ue(),
  ...Le()
}, "VRow"), sa = K()({
  name: "VRow",
  props: Ly(),
  setup(t, e) {
    let {
      slots: n
    } = e;
    const i = x(() => {
      const a = [];
      let o;
      for (o in Su)
        Su[o].forEach((r) => {
          const s = t[r], l = zy(o, r, s);
          l && a.push(l);
        });
      return a.push({
        "v-row--no-gutters": t.noGutters,
        "v-row--dense": t.dense,
        [`align-${t.align}`]: t.align,
        [`justify-${t.justify}`]: t.justify,
        [`align-content-${t.alignContent}`]: t.alignContent
      }), a;
    });
    return () => {
      var a;
      return ma(t.tag, {
        class: ["v-row", i.value, t.class],
        style: t.style
      }, (a = n.default) == null ? void 0 : a.call(n));
    };
  }
}), Vy = {
  __name: "Address",
  setup(t) {
    const e = Wn(), { data: n } = Kt(e), i = n.value.store, a = i.addressMode, o = Dd(), r = Z([]), s = Z([]), l = Z([]), c = (g = !1) => {
      o.region && o.province && !g || o.region && on[o.region] && (s.value = Object.keys(on[o.region]), o.province = "", l.value = [], o.city = "");
    }, u = (g = !1) => {
      var m;
      o.region && o.province && o.city && !g || o.province && ((m = on[o.region]) != null && m[o.province]) && (l.value = on[o.region][o.province], o.city = "");
    }, d = () => {
      for (const g in on)
        if (on[g][o.province]) {
          o.region = g, u();
          break;
        }
    }, h = () => {
      for (const g in on)
        for (const m in on[g]) {
          const v = on[g][m];
          if (l.value.every((p) => v.includes(p))) {
            o.province = m, o.region = g;
            break;
          }
        }
    }, f = () => {
      a === 3 ? (l.value = i.cities, h(), o.city = "") : a === 2 && (o.province = i.province, d());
    };
    return Q(() => o.region, () => {
      a == 1 && (console.log("Cambio regione"), c(!0));
    }), Q(() => o.province, () => {
      a === 1 ? u(!0) : a === 2 && d();
    }), nt(() => {
      o.region && (c(), o.province && u()), a === 1 ? r.value = Object.keys(on) : f();
    }), (g, m) => (H(), Te("div", null, [
      C(sa, null, {
        default: Y(() => [
          C(jt, { cols: "6" }, {
            default: Y(() => [
              C(On, {
                modelValue: O(o).firstname,
                "onUpdate:modelValue": m[0] || (m[0] = (v) => O(o).firstname = v),
                label: "Nome",
                placeholder: "Inserisci il nome",
                outlined: "",
                dense: "",
                rules: [(v) => !!v || "Campo obbligatorio"]
              }, null, 8, ["modelValue", "rules"])
            ]),
            _: 1
          }),
          C(jt, { cols: "6" }, {
            default: Y(() => [
              C(On, {
                modelValue: O(o).lastname,
                "onUpdate:modelValue": m[1] || (m[1] = (v) => O(o).lastname = v),
                label: "Cognome",
                placeholder: "Inserisci il cognome",
                outlined: "",
                dense: "",
                rules: [(v) => !!v || "Campo obbligatorio"]
              }, null, 8, ["modelValue", "rules"])
            ]),
            _: 1
          })
        ]),
        _: 1
      }),
      C(ls, {
        modelValue: O(o).region,
        "onUpdate:modelValue": m[2] || (m[2] = (v) => O(o).region = v),
        items: r.value,
        label: "Seleziona una regione",
        placeholder: "Inserisci la regione",
        "hide-no-data": "",
        "hide-selected": "",
        readonly: O(a) === 2,
        outlined: "",
        dense: "",
        rules: [(v) => !!v || "Campo obbligatorio"]
      }, null, 8, ["modelValue", "items", "readonly", "rules"]),
      C(ls, {
        modelValue: O(o).province,
        "onUpdate:modelValue": m[3] || (m[3] = (v) => O(o).province = v),
        items: s.value,
        label: "Seleziona una provincia",
        placeholder: "Inserisci la provincia",
        "hide-no-data": "",
        "hide-selected": "",
        readonly: O(a) === 2,
        disabled: O(a) === 1 ? !O(o).region : !1,
        outlined: "",
        dense: "",
        rules: [(v) => !!v || "Campo obbligatorio"]
      }, null, 8, ["modelValue", "items", "readonly", "disabled", "rules"]),
      C(ls, {
        modelValue: O(o).city,
        "onUpdate:modelValue": m[4] || (m[4] = (v) => O(o).city = v),
        items: l.value,
        label: "Seleziona una città",
        placeholder: "Inserisci la città",
        "hide-no-data": "",
        "hide-selected": "",
        disabled: O(a) === 1 ? !O(o).province : !1,
        outlined: "",
        dense: "",
        rules: [(v) => !!v || "Campo obbligatorio"]
      }, null, 8, ["modelValue", "items", "disabled", "rules"]),
      C(On, {
        modelValue: O(o).address,
        "onUpdate:modelValue": m[5] || (m[5] = (v) => O(o).address = v),
        label: "Inserisci la via e il numero civico",
        placeholder: "Via e numero",
        outlined: "",
        dense: "",
        rules: [(v) => !!v || "Campo obbligatorio"]
      }, null, 8, ["modelValue", "rules"])
    ]));
  }
}, By = uo("popup", {
  state: () => ({
    message: "",
    type: ""
  }),
  actions: {
    setPopup(t, e) {
      this.message = "", this.type = "", setTimeout(() => {
        this.message = t, this.type = e;
      }, 50);
    }
  }
});
const Cf = $({
  divided: Boolean,
  ...bn(),
  ...ue(),
  ...Sn(),
  ...en(),
  ...Ct(),
  ...Le(),
  ...ke(),
  ...gi()
}, "VBtnGroup"), bu = K()({
  name: "VBtnGroup",
  props: Cf(),
  setup(t, e) {
    let {
      slots: n
    } = e;
    const {
      themeClasses: i
    } = $e(t), {
      densityClasses: a
    } = Un(t), {
      borderClasses: o
    } = Mn(t), {
      elevationClasses: r
    } = tn(t), {
      roundedClasses: s
    } = yt(t);
    yn({
      VBtn: {
        height: "auto",
        color: te(t, "color"),
        density: te(t, "density"),
        flat: !0,
        variant: te(t, "variant")
      }
    }), ie(() => C(t.tag, {
      class: ["v-btn-group", {
        "v-btn-group--divided": t.divided
      }, i.value, o.value, a.value, r.value, s.value, t.class],
      style: t.style
    }, n));
  }
}), yf = Symbol.for("vuetify:v-btn-toggle"), Fy = $({
  ...Cf(),
  ...Mr()
}, "VBtnToggle");
K()({
  name: "VBtnToggle",
  props: Fy(),
  emits: {
    "update:modelValue": (t) => !0
  },
  setup(t, e) {
    let {
      slots: n
    } = e;
    const {
      isSelected: i,
      next: a,
      prev: o,
      select: r,
      selected: s
    } = So(t, yf);
    return ie(() => {
      const l = bu.filterProps(t);
      return C(bu, se({
        class: ["v-btn-toggle", t.class]
      }, l, {
        style: t.style
      }), {
        default: () => {
          var c;
          return [(c = n.default) == null ? void 0 : c.call(n, {
            isSelected: i,
            next: a,
            prev: o,
            select: r,
            selected: s
          })];
        }
      });
    }), {
      next: a,
      prev: o,
      select: r
    };
  }
});
const ky = $({
  bgColor: String,
  color: String,
  indeterminate: [Boolean, String],
  modelValue: {
    type: [Number, String],
    default: 0
  },
  rotate: {
    type: [Number, String],
    default: 0
  },
  width: {
    type: [Number, String],
    default: 4
  },
  ...ue(),
  ...mo(),
  ...Le({
    tag: "div"
  }),
  ...ke()
}, "VProgressCircular"), Oy = K()({
  name: "VProgressCircular",
  props: ky(),
  setup(t, e) {
    let {
      slots: n
    } = e;
    const i = 20, a = 2 * Math.PI * i, o = Z(), {
      themeClasses: r
    } = $e(t), {
      sizeClasses: s,
      sizeStyles: l
    } = vo(t), {
      textColorClasses: c,
      textColorStyles: u
    } = fn(te(t, "color")), {
      textColorClasses: d,
      textColorStyles: h
    } = fn(te(t, "bgColor")), {
      intersectionRef: f,
      isIntersecting: g
    } = Qh(), {
      resizeRef: m,
      contentRect: v
    } = Ii(), y = x(() => Math.max(0, Math.min(100, parseFloat(t.modelValue)))), p = x(() => Number(t.width)), M = x(() => l.value ? Number(t.size) : v.value ? v.value.width : Math.max(p.value, 32)), S = x(() => i / (1 - p.value / M.value) * 2), b = x(() => p.value / M.value * S.value), T = x(() => oe((100 - y.value) / 100 * a));
    return Ht(() => {
      f.value = o.value, m.value = o.value;
    }), ie(() => C(t.tag, {
      ref: o,
      class: ["v-progress-circular", {
        "v-progress-circular--indeterminate": !!t.indeterminate,
        "v-progress-circular--visible": g.value,
        "v-progress-circular--disable-shrink": t.indeterminate === "disable-shrink"
      }, r.value, s.value, c.value, t.class],
      style: [l.value, u.value, t.style],
      role: "progressbar",
      "aria-valuemin": "0",
      "aria-valuemax": "100",
      "aria-valuenow": t.indeterminate ? void 0 : y.value
    }, {
      default: () => [C("svg", {
        style: {
          transform: `rotate(calc(-90deg + ${Number(t.rotate)}deg))`
        },
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: `0 0 ${S.value} ${S.value}`
      }, [C("circle", {
        class: ["v-progress-circular__underlay", d.value],
        style: h.value,
        fill: "transparent",
        cx: "50%",
        cy: "50%",
        r: i,
        "stroke-width": b.value,
        "stroke-dasharray": a,
        "stroke-dashoffset": 0
      }, null), C("circle", {
        class: "v-progress-circular__overlay",
        fill: "transparent",
        cx: "50%",
        cy: "50%",
        r: i,
        "stroke-width": b.value,
        "stroke-dasharray": a,
        "stroke-dashoffset": T.value
      }, null)]), n.default && C("div", {
        class: "v-progress-circular__content"
      }, [n.default({
        value: y.value
      })])]
    })), {};
  }
}), Dy = ["static", "relative", "fixed", "absolute", "sticky"], Ll = $({
  position: {
    type: String,
    validator: (
      /* istanbul ignore next */
      (t) => Dy.includes(t)
    )
  }
}, "position");
function Vl(t) {
  let e = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : pn();
  return {
    positionClasses: x(() => t.position ? `${e}--${t.position}` : void 0)
  };
}
function Gy(t, e) {
  Q(() => {
    var n;
    return (n = t.isActive) == null ? void 0 : n.value;
  }, (n) => {
    t.isLink.value && n && e && je(() => {
      e(!0);
    });
  }, {
    immediate: !0
  });
}
const pf = $({
  active: {
    type: Boolean,
    default: void 0
  },
  symbol: {
    type: null,
    default: yf
  },
  flat: Boolean,
  icon: [Boolean, String, Function, Object],
  prependIcon: xe,
  appendIcon: xe,
  block: Boolean,
  slim: Boolean,
  stacked: Boolean,
  ripple: {
    type: [Boolean, Object],
    default: !0
  },
  text: String,
  ...bn(),
  ...ue(),
  ...Sn(),
  ...hi(),
  ...en(),
  ...po(),
  ...Tl(),
  ...Er(),
  ...Ll(),
  ...Ct(),
  ...Pr(),
  ...mo(),
  ...Le({
    tag: "button"
  }),
  ...ke(),
  ...gi({
    variant: "elevated"
  })
}, "VBtn"), _t = K()({
  name: "VBtn",
  directives: {
    Ripple: pa
  },
  props: pf(),
  emits: {
    "group:selected": (t) => !0
  },
  setup(t, e) {
    let {
      attrs: n,
      slots: i
    } = e;
    const {
      themeClasses: a
    } = $e(t), {
      borderClasses: o
    } = Mn(t), {
      colorClasses: r,
      colorStyles: s,
      variantClasses: l
    } = yo(t), {
      densityClasses: c
    } = Un(t), {
      dimensionStyles: u
    } = fi(t), {
      elevationClasses: d
    } = tn(t), {
      loaderClasses: h
    } = wl(t), {
      locationStyles: f
    } = Ar(t), {
      positionClasses: g
    } = Vl(t), {
      roundedClasses: m
    } = yt(t), {
      sizeClasses: v,
      sizeStyles: y
    } = vo(t), p = _o(t, t.symbol, !1), M = xr(t, n), S = x(() => {
      var w;
      return t.active !== void 0 ? t.active : M.isLink.value ? (w = M.isActive) == null ? void 0 : w.value : p == null ? void 0 : p.isSelected.value;
    }), b = x(() => (p == null ? void 0 : p.disabled.value) || t.disabled), T = x(() => t.variant === "elevated" && !(t.disabled || t.flat || t.border)), _ = x(() => {
      if (!(t.value === void 0 || typeof t.value == "symbol"))
        return Object(t.value) === t.value ? JSON.stringify(t.value, null, 0) : t.value;
    });
    function P(w) {
      var I;
      b.value || M.isLink.value && (w.metaKey || w.ctrlKey || w.shiftKey || w.button !== 0 || n.target === "_blank") || ((I = M.navigate) == null || I.call(M, w), p == null || p.toggle());
    }
    return Gy(M, p == null ? void 0 : p.select), ie(() => {
      var V, N;
      const w = M.isLink.value ? "a" : t.tag, I = !!(t.prependIcon || i.prepend), z = !!(t.appendIcon || i.append), A = !!(t.icon && t.icon !== !0), R = (p == null ? void 0 : p.isSelected.value) && (!M.isLink.value || ((V = M.isActive) == null ? void 0 : V.value)) || !p || ((N = M.isActive) == null ? void 0 : N.value);
      return Ze(C(w, {
        type: w === "a" ? void 0 : "button",
        class: ["v-btn", p == null ? void 0 : p.selectedClass.value, {
          "v-btn--active": S.value,
          "v-btn--block": t.block,
          "v-btn--disabled": b.value,
          "v-btn--elevated": T.value,
          "v-btn--flat": t.flat,
          "v-btn--icon": !!t.icon,
          "v-btn--loading": t.loading,
          "v-btn--slim": t.slim,
          "v-btn--stacked": t.stacked
        }, a.value, o.value, R ? r.value : void 0, c.value, d.value, h.value, g.value, m.value, v.value, l.value, t.class],
        style: [R ? s.value : void 0, u.value, f.value, y.value, t.style],
        disabled: b.value || void 0,
        href: M.href.value,
        onClick: P,
        value: _.value
      }, {
        default: () => {
          var G;
          return [Co(!0, "v-btn"), !t.icon && I && C("span", {
            key: "prepend",
            class: "v-btn__prepend"
          }, [i.prepend ? C(Xe, {
            key: "prepend-defaults",
            disabled: !t.prependIcon,
            defaults: {
              VIcon: {
                icon: t.prependIcon
              }
            }
          }, i.prepend) : C(Ie, {
            key: "prepend-icon",
            icon: t.prependIcon
          }, null)]), C("span", {
            class: "v-btn__content",
            "data-no-activator": ""
          }, [!i.default && A ? C(Ie, {
            key: "content-icon",
            icon: t.icon
          }, null) : C(Xe, {
            key: "content-defaults",
            disabled: !A,
            defaults: {
              VIcon: {
                icon: t.icon
              }
            }
          }, {
            default: () => {
              var X;
              return [((X = i.default) == null ? void 0 : X.call(i)) ?? t.text];
            }
          })]), !t.icon && z && C("span", {
            key: "append",
            class: "v-btn__append"
          }, [i.append ? C(Xe, {
            key: "append-defaults",
            disabled: !t.appendIcon,
            defaults: {
              VIcon: {
                icon: t.appendIcon
              }
            }
          }, i.append) : C(Ie, {
            key: "append-icon",
            icon: t.appendIcon
          }, null)]), !!t.loading && C("span", {
            key: "loader",
            class: "v-btn__loader"
          }, [((G = i.loader) == null ? void 0 : G.call(i)) ?? C(Oy, {
            color: typeof t.loading == "boolean" ? void 0 : t.loading,
            indeterminate: !0,
            size: "23",
            width: "2"
          }, null)])];
        }
      }), [[Jt("ripple"), !b.value && t.ripple, null]]);
    }), {
      group: p
    };
  }
});
const _f = K()({
  name: "VCardActions",
  props: ue(),
  setup(t, e) {
    let {
      slots: n
    } = e;
    return yn({
      VBtn: {
        slim: !0,
        variant: "text"
      }
    }), ie(() => {
      var i;
      return C("div", {
        class: ["v-card-actions", t.class],
        style: t.style
      }, [(i = n.default) == null ? void 0 : i.call(n)]);
    }), {};
  }
}), Sf = go("v-card-subtitle"), Bl = go("v-card-title"), Ny = $({
  appendAvatar: String,
  appendIcon: xe,
  prependAvatar: String,
  prependIcon: xe,
  subtitle: [String, Number],
  title: [String, Number],
  ...ue(),
  ...Sn()
}, "VCardItem"), $y = K()({
  name: "VCardItem",
  props: Ny(),
  setup(t, e) {
    let {
      slots: n
    } = e;
    return ie(() => {
      var c;
      const i = !!(t.prependAvatar || t.prependIcon), a = !!(i || n.prepend), o = !!(t.appendAvatar || t.appendIcon), r = !!(o || n.append), s = !!(t.title != null || n.title), l = !!(t.subtitle != null || n.subtitle);
      return C("div", {
        class: ["v-card-item", t.class],
        style: t.style
      }, [a && C("div", {
        key: "prepend",
        class: "v-card-item__prepend"
      }, [n.prepend ? C(Xe, {
        key: "prepend-defaults",
        disabled: !i,
        defaults: {
          VAvatar: {
            density: t.density,
            image: t.prependAvatar
          },
          VIcon: {
            density: t.density,
            icon: t.prependIcon
          }
        }
      }, n.prepend) : C(de, null, [t.prependAvatar && C(si, {
        key: "prepend-avatar",
        density: t.density,
        image: t.prependAvatar
      }, null), t.prependIcon && C(Ie, {
        key: "prepend-icon",
        density: t.density,
        icon: t.prependIcon
      }, null)])]), C("div", {
        class: "v-card-item__content"
      }, [s && C(Bl, {
        key: "title"
      }, {
        default: () => {
          var u;
          return [((u = n.title) == null ? void 0 : u.call(n)) ?? t.title];
        }
      }), l && C(Sf, {
        key: "subtitle"
      }, {
        default: () => {
          var u;
          return [((u = n.subtitle) == null ? void 0 : u.call(n)) ?? t.subtitle];
        }
      }), (c = n.default) == null ? void 0 : c.call(n)]), r && C("div", {
        key: "append",
        class: "v-card-item__append"
      }, [n.append ? C(Xe, {
        key: "append-defaults",
        disabled: !o,
        defaults: {
          VAvatar: {
            density: t.density,
            image: t.appendAvatar
          },
          VIcon: {
            density: t.density,
            icon: t.appendIcon
          }
        }
      }, n.append) : C(de, null, [t.appendIcon && C(Ie, {
        key: "append-icon",
        density: t.density,
        icon: t.appendIcon
      }, null), t.appendAvatar && C(si, {
        key: "append-avatar",
        density: t.density,
        image: t.appendAvatar
      }, null)])])]);
    }), {};
  }
}), Fl = go("v-card-text"), Wy = $({
  appendAvatar: String,
  appendIcon: xe,
  disabled: Boolean,
  flat: Boolean,
  hover: Boolean,
  image: String,
  link: {
    type: Boolean,
    default: void 0
  },
  prependAvatar: String,
  prependIcon: xe,
  ripple: {
    type: [Boolean, Object],
    default: !0
  },
  subtitle: [String, Number],
  text: [String, Number],
  title: [String, Number],
  ...bn(),
  ...ue(),
  ...Sn(),
  ...hi(),
  ...en(),
  ...Tl(),
  ...Er(),
  ...Ll(),
  ...Ct(),
  ...Pr(),
  ...Le(),
  ...ke(),
  ...gi({
    variant: "elevated"
  })
}, "VCard"), Mo = K()({
  name: "VCard",
  directives: {
    Ripple: pa
  },
  props: Wy(),
  setup(t, e) {
    let {
      attrs: n,
      slots: i
    } = e;
    const {
      themeClasses: a
    } = $e(t), {
      borderClasses: o
    } = Mn(t), {
      colorClasses: r,
      colorStyles: s,
      variantClasses: l
    } = yo(t), {
      densityClasses: c
    } = Un(t), {
      dimensionStyles: u
    } = fi(t), {
      elevationClasses: d
    } = tn(t), {
      loaderClasses: h
    } = wl(t), {
      locationStyles: f
    } = Ar(t), {
      positionClasses: g
    } = Vl(t), {
      roundedClasses: m
    } = yt(t), v = xr(t, n), y = x(() => t.link !== !1 && v.isLink.value), p = x(() => !t.disabled && t.link !== !1 && (t.link || v.isClickable.value));
    return ie(() => {
      const M = y.value ? "a" : t.tag, S = !!(i.title || t.title != null), b = !!(i.subtitle || t.subtitle != null), T = S || b, _ = !!(i.append || t.appendAvatar || t.appendIcon), P = !!(i.prepend || t.prependAvatar || t.prependIcon), w = !!(i.image || t.image), I = T || P || _, z = !!(i.text || t.text != null);
      return Ze(C(M, {
        class: ["v-card", {
          "v-card--disabled": t.disabled,
          "v-card--flat": t.flat,
          "v-card--hover": t.hover && !(t.disabled || t.flat),
          "v-card--link": p.value
        }, a.value, o.value, r.value, c.value, d.value, h.value, g.value, m.value, l.value, t.class],
        style: [s.value, u.value, f.value, t.style],
        href: v.href.value,
        onClick: p.value && v.navigate,
        tabindex: t.disabled ? -1 : void 0
      }, {
        default: () => {
          var A;
          return [w && C("div", {
            key: "image",
            class: "v-card__image"
          }, [i.image ? C(Xe, {
            key: "image-defaults",
            disabled: !t.image,
            defaults: {
              VImg: {
                cover: !0,
                src: t.image
              }
            }
          }, i.image) : C(gn, {
            key: "image-img",
            cover: !0,
            src: t.image
          }, null)]), C(tf, {
            name: "v-card",
            active: !!t.loading,
            color: typeof t.loading == "boolean" ? void 0 : t.loading
          }, {
            default: i.loader
          }), I && C($y, {
            key: "item",
            prependAvatar: t.prependAvatar,
            prependIcon: t.prependIcon,
            title: t.title,
            subtitle: t.subtitle,
            appendAvatar: t.appendAvatar,
            appendIcon: t.appendIcon
          }, {
            default: i.item,
            prepend: i.prepend,
            title: i.title,
            subtitle: i.subtitle,
            append: i.append
          }), z && C(Fl, {
            key: "text"
          }, {
            default: () => {
              var R;
              return [((R = i.text) == null ? void 0 : R.call(i)) ?? t.text];
            }
          }), (A = i.default) == null ? void 0 : A.call(i), i.actions && C(_f, null, {
            default: i.actions
          }), Co(p.value, "v-card")];
        }
      }), [[Jt("ripple"), p.value && t.ripple]]);
    }), {};
  }
}), Uy = { class: "font-weight-bold" }, Xy = { style: { "flex-grow": "1" } }, Yy = { style: { "font-size": "16px", "font-weight": "bold" } }, jy = { style: { display: "flex", "align-items": "center" } }, Zy = { style: { "font-size": "15px", "font-weight": "bold" } }, Hy = {
  __name: "Cart",
  setup(t) {
    const e = By(), n = Gd(), i = Z([]), a = Z(!1), o = Z(!1), { isMobile: r } = va(), s = Wn(), { data: l } = Kt(s), c = l.value.store;
    ll.getRequestGenericBE("products", {}, function(_) {
      i.value = _;
    });
    const u = x(() => n.products.reduce((_, P) => _ + P.quantity, 0)), d = x(() => n.products.reduce((_, P) => {
      const w = M(P.product);
      return _ + w * P.quantity;
    }, 0).toFixed(2) + " €"), h = async () => {
      c.addressMode ? a.value = !0 : await f();
    }, f = async () => {
      const { products: _ } = Kt(n), I = await (await fetch("https://generic-be-test.replit.app/stripe-session", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(_.value)
      })).json();
      I.url ? window.location.href = I.url : I.status == "ko" && alert(I.message);
    }, g = () => {
      a.value = !1;
    }, m = () => {
      try {
        n.removeAllProduct(), e.setPopup("Carrello svuotato correttamente!", "success");
      } catch {
        e.setPopup("Impossibile svuotare il carrello!", "error");
      }
    }, v = Z({}), y = (_) => {
      if (v.value[_] = i.value.find((P) => P.id == _).name, v.value[_]) {
        const P = v.value[_];
        if (P.length > 18) {
          const w = P.slice(0, 19);
          return w.endsWith(" ") ? w.trimEnd() + "..." : w + "...";
        }
        return P;
      }
      return "Caricamento...";
    }, p = Z({}), M = (_) => {
      const P = i.value.find((w) => w.id == _).price;
      return p.value[_] = parseFloat(P) / 100, p.value[_] ? p.value[_] : 0;
    }, S = (_) => {
      n.addProduct(_);
    }, b = (_) => {
      n.removeProduct(_);
    }, T = (_) => {
      const P = i.value.find((w) => w.id == _);
      return P != null && P.image ? P.image : "https://4kwallpapers.com/images/walls/thumbs_3t/11056.jpg";
    };
    return (_, P) => (H(), fe(wr, {
      modelValue: o.value,
      "onUpdate:modelValue": P[2] || (P[2] = (w) => o.value = w),
      transition: "scale-transition",
      "close-on-content-click": !1,
      "onClick:outside": P[3] || (P[3] = (w) => o.value = !1)
    }, {
      activator: Y(({ props: w }) => [
        O(r) ? (H(), fe(_t, Bc(se({ key: 0 }, w)), {
          default: Y(() => [
            C(Ie, { icon: "mdi-cart-outline" }),
            ct(" (" + st(u.value) + ") ", 1)
          ]),
          _: 2
        }, 1040)) : Ae("", !0),
        O(r) ? Ae("", !0) : (H(), fe(_t, Bc(se({ key: 1 }, w)), {
          default: Y(() => [
            C(Ie, {
              icon: "mdi-cart-outline",
              start: ""
            }),
            ct(" Carrello (" + st(u.value) + ") ", 1)
          ]),
          _: 2
        }, 1040))
      ]),
      default: Y(() => [
        C(Mo, {
          class: "mt-4",
          style: { width: "400px", "background-color": "#f5f5f5" }
        }, {
          default: Y(() => [
            C(Bl, null, {
              default: Y(() => [
                ve("span", Uy, st(a.value ? "Indirizzo di Spedizione" : "Riepilogo Ordini"), 1)
              ]),
              _: 1
            }),
            C(Fl, null, {
              default: Y(() => [
                a.value ? (H(), fe(O(Vy), { key: 0 })) : (H(), fe(Sa, { key: 1 }, {
                  default: Y(() => [
                    (H(!0), Te(de, null, Rt(O(n).products, (w) => (H(), fe(mn, { class: "py-4" }, {
                      default: Y(() => [
                        C(sa, {
                          align: "center",
                          style: { width: "100%" }
                        }, {
                          default: Y(() => [
                            C(jt, { class: "d-flex align-center" }, {
                              default: Y(() => [
                                C(gn, {
                                  src: T(w.product),
                                  alt: "product image",
                                  width: "40",
                                  class: "mr-3"
                                }, null, 8, ["src"]),
                                ve("div", Xy, [
                                  ve("p", Yy, st(y(w.product)), 1),
                                  ve("div", jy, [
                                    P[4] || (P[4] = ve("p", { class: "text-caption" }, "Quantità:", -1)),
                                    C(_t, {
                                      onClick: Wa((I) => b(w), ["stop"]),
                                      icon: "mdi-minus",
                                      size: "x-small",
                                      style: { margin: "0 5px", "box-shadow": "none" }
                                    }, null, 8, ["onClick"]),
                                    ct(" " + st(w.quantity) + " ", 1),
                                    C(_t, {
                                      onClick: Wa((I) => S(w), ["stop"]),
                                      icon: "mdi-plus",
                                      size: "x-small",
                                      style: { margin: "0 0 0 5px", "box-shadow": "none" }
                                    }, null, 8, ["onClick"])
                                  ])
                                ]),
                                ve("p", Zy, st(M(w.product) + " €"), 1)
                              ]),
                              _: 2
                            }, 1024)
                          ]),
                          _: 2
                        }, 1024)
                      ]),
                      _: 2
                    }, 1024))), 256))
                  ]),
                  _: 1
                }))
              ]),
              _: 1
            }),
            a.value ? Ae("", !0) : (H(), fe(Sf, {
              key: 0,
              class: "text-right",
              style: { "font-size": "18px", "font-weight": "bold", "padding-right": "16px" }
            }, {
              default: Y(() => [
                ct(" Prezzo Totale: " + st(d.value), 1)
              ]),
              _: 1
            })),
            C(_f, null, {
              default: Y(() => [
                C(_t, {
                  onClick: P[0] || (P[0] = (w) => a.value ? f() : h()),
                  color: "primary"
                }, {
                  default: Y(() => [
                    ct(st(a.value ? "Invia Ordine" : "Procedi al Checkout"), 1)
                  ]),
                  _: 1
                }),
                C(_t, {
                  onClick: P[1] || (P[1] = (w) => a.value ? g() : m()),
                  color: "error"
                }, {
                  default: Y(() => [
                    ct(st(a.value ? "Torna Indietro" : "Svuota Carrello"), 1)
                  ]),
                  _: 1
                })
              ]),
              _: 1
            })
          ]),
          _: 1
        })
      ]),
      _: 1
    }, 8, ["modelValue"]));
  }
}, Mu = /* @__PURE__ */ ho(Hy, [["__scopeId", "data-v-b1968016"]]), mi = uo("language", {
  state: () => ({
    locale: "it"
  }),
  actions: {
    setLocale(t) {
      this.locale = t;
    },
    getText(t) {
      return typeof t == "string" ? t : typeof t == "object" ? t[this.locale] : "";
    },
    getAncor(t) {
      return t ? typeof t == "string" ? t : typeof t == "object" ? Object.values(t)[0] : "" : "";
    }
  },
  persist: {
    storage: localStorage
  }
});
const Ky = ["src"], qy = ["src"], Jy = ["src"], Qy = {
  __name: "Language",
  setup(t) {
    const e = Wn(), n = mi(), { data: i } = Kt(e), { locale: a } = Kt(n), o = i.value.info.locales, r = x(() => o.length === 2 ? o.find((u) => u !== a.value) : null), s = (u) => `https://flagcdn.com/w40/${u}.png`, l = () => {
      r.value && (n.locale = r.value);
    }, c = (u) => {
      n.locale = u;
    };
    return (u, d) => (H(), Te(de, null, [
      O(o).length == 2 ? (H(), Te("img", {
        key: 0,
        src: s(r.value),
        class: "flag",
        onClick: l,
        style: { margin: "16px" }
      }, null, 8, Ky)) : Ae("", !0),
      O(o).length > 2 ? (H(), fe(wr, { key: 1 }, {
        activator: Y(({ props: h }) => [
          ve("div", se(h, { class: "flag-wrapper" }), [
            ve("img", {
              src: s(O(a)),
              class: "flag",
              style: { width: "20px", height: "20px" }
            }, null, 8, qy),
            C(Ie, { class: "arrow" }, {
              default: Y(() => d[0] || (d[0] = [
                ct("mdi-menu-down")
              ])),
              _: 1
            })
          ], 16)
        ]),
        default: Y(() => [
          C(Sa, {
            style: { width: "48px", height: "fit-content" },
            class: "d-flex justify-center flex-column align-center"
          }, {
            default: Y(() => [
              (H(!0), Te(de, null, Rt(O(o), (h) => (H(), fe(mn, {
                key: h,
                onClick: (f) => c(h),
                style: { padding: "0", height: "35px", "min-height": "auto" }
              }, {
                default: Y(() => [
                  ve("img", {
                    src: s(h),
                    style: { width: "20px", height: "20px" },
                    class: "flag"
                  }, null, 8, Jy)
                ]),
                _: 2
              }, 1032, ["onClick"]))), 128))
            ]),
            _: 1
          })
        ]),
        _: 1
      })) : Ae("", !0)
    ], 64));
  }
}, xu = /* @__PURE__ */ ho(Qy, [["__scopeId", "data-v-d1ce1a9a"]]);
const bf = $({
  text: String,
  ...ue(),
  ...Le()
}, "VToolbarTitle"), Mf = K()({
  name: "VToolbarTitle",
  props: bf(),
  setup(t, e) {
    let {
      slots: n
    } = e;
    return ie(() => {
      const i = !!(n.default || n.text || t.text);
      return C(t.tag, {
        class: ["v-toolbar-title", t.class],
        style: t.style
      }, {
        default: () => {
          var a;
          return [i && C("div", {
            class: "v-toolbar-title__placeholder"
          }, [n.text ? n.text() : t.text, (a = n.default) == null ? void 0 : a.call(n)])];
        }
      });
    }), {};
  }
}), ep = [null, "prominent", "default", "comfortable", "compact"], xf = $({
  absolute: Boolean,
  collapse: Boolean,
  color: String,
  density: {
    type: String,
    default: "default",
    validator: (t) => ep.includes(t)
  },
  extended: Boolean,
  extensionHeight: {
    type: [Number, String],
    default: 48
  },
  flat: Boolean,
  floating: Boolean,
  height: {
    type: [Number, String],
    default: 64
  },
  image: String,
  title: String,
  ...bn(),
  ...ue(),
  ...en(),
  ...Ct(),
  ...Le({
    tag: "header"
  }),
  ...ke()
}, "VToolbar"), Pu = K()({
  name: "VToolbar",
  props: xf(),
  setup(t, e) {
    var f;
    let {
      slots: n
    } = e;
    const {
      backgroundColorClasses: i,
      backgroundColorStyles: a
    } = Pt(te(t, "color")), {
      borderClasses: o
    } = Mn(t), {
      elevationClasses: r
    } = tn(t), {
      roundedClasses: s
    } = yt(t), {
      themeClasses: l
    } = $e(t), {
      rtlClasses: c
    } = Qt(), u = q(!!(t.extended || (f = n.extension) != null && f.call(n))), d = x(() => parseInt(Number(t.height) + (t.density === "prominent" ? Number(t.height) : 0) - (t.density === "comfortable" ? 8 : 0) - (t.density === "compact" ? 16 : 0), 10)), h = x(() => u.value ? parseInt(Number(t.extensionHeight) + (t.density === "prominent" ? Number(t.extensionHeight) : 0) - (t.density === "comfortable" ? 4 : 0) - (t.density === "compact" ? 8 : 0), 10) : 0);
    return yn({
      VBtn: {
        variant: "text"
      }
    }), ie(() => {
      var y;
      const g = !!(t.title || n.title), m = !!(n.image || t.image), v = (y = n.extension) == null ? void 0 : y.call(n);
      return u.value = !!(t.extended || v), C(t.tag, {
        class: ["v-toolbar", {
          "v-toolbar--absolute": t.absolute,
          "v-toolbar--collapse": t.collapse,
          "v-toolbar--flat": t.flat,
          "v-toolbar--floating": t.floating,
          [`v-toolbar--density-${t.density}`]: !0
        }, i.value, o.value, r.value, s.value, l.value, c.value, t.class],
        style: [a.value, t.style]
      }, {
        default: () => [m && C("div", {
          key: "image",
          class: "v-toolbar__image"
        }, [n.image ? C(Xe, {
          key: "image-defaults",
          disabled: !t.image,
          defaults: {
            VImg: {
              cover: !0,
              src: t.image
            }
          }
        }, n.image) : C(gn, {
          key: "image-img",
          cover: !0,
          src: t.image
        }, null)]), C(Xe, {
          defaults: {
            VTabs: {
              height: oe(d.value)
            }
          }
        }, {
          default: () => {
            var p, M, S;
            return [C("div", {
              class: "v-toolbar__content",
              style: {
                height: oe(d.value)
              }
            }, [n.prepend && C("div", {
              class: "v-toolbar__prepend"
            }, [(p = n.prepend) == null ? void 0 : p.call(n)]), g && C(Mf, {
              key: "title",
              text: t.title
            }, {
              text: n.title
            }), (M = n.default) == null ? void 0 : M.call(n), n.append && C("div", {
              class: "v-toolbar__append"
            }, [(S = n.append) == null ? void 0 : S.call(n)])])];
          }
        }), C(Xe, {
          defaults: {
            VTabs: {
              height: oe(h.value)
            }
          }
        }, {
          default: () => [C(pl, null, {
            default: () => [u.value && C("div", {
              class: "v-toolbar__extension",
              style: {
                height: oe(h.value)
              }
            }, [v])]
          })]
        })]
      });
    }), {
      contentHeight: d,
      extensionHeight: h
    };
  }
}), rr = Symbol.for("vuetify:layout"), Pf = Symbol.for("vuetify:layout-item"), Tu = 1e3, tp = $({
  overlaps: {
    type: Array,
    default: () => []
  },
  fullHeight: Boolean
}, "layout"), kl = $({
  name: {
    type: String
  },
  order: {
    type: [Number, String],
    default: 0
  },
  absolute: Boolean
}, "layout-item");
function np() {
  const t = Ne(rr);
  if (!t)
    throw new Error("[Vuetify] Could not find injected layout");
  return {
    getLayoutItem: t.getLayoutItem,
    mainRect: t.mainRect,
    mainStyles: t.mainStyles
  };
}
function Ol(t) {
  const e = Ne(rr);
  if (!e)
    throw new Error("[Vuetify] Could not find injected layout");
  const n = t.id ?? `layout-item-${_n()}`, i = He("useLayoutItem");
  it(Pf, {
    id: n
  });
  const a = q(!1);
  Cm(() => a.value = !0), ym(() => a.value = !1);
  const {
    layoutItemStyles: o,
    layoutItemScrimStyles: r
  } = e.register(i, {
    ...t,
    active: x(() => a.value ? !1 : t.active.value),
    id: n
  });
  return vt(() => e.unregister(n)), {
    layoutItemStyles: o,
    layoutRect: e.layoutRect,
    layoutItemScrimStyles: r
  };
}
const ip = (t, e, n, i) => {
  let a = {
    top: 0,
    left: 0,
    right: 0,
    bottom: 0
  };
  const o = [{
    id: "",
    layer: {
      ...a
    }
  }];
  for (const r of t) {
    const s = e.get(r), l = n.get(r), c = i.get(r);
    if (!s || !l || !c)
      continue;
    const u = {
      ...a,
      [s.value]: parseInt(a[s.value], 10) + (c.value ? parseInt(l.value, 10) : 0)
    };
    o.push({
      id: r,
      layer: u
    }), a = u;
  }
  return o;
};
function ap(t) {
  const e = Ne(rr, null), n = x(() => e ? e.rootZIndex.value - 100 : Tu), i = Z([]), a = Fn(/* @__PURE__ */ new Map()), o = Fn(/* @__PURE__ */ new Map()), r = Fn(/* @__PURE__ */ new Map()), s = Fn(/* @__PURE__ */ new Map()), l = Fn(/* @__PURE__ */ new Map()), {
    resizeRef: c,
    contentRect: u
  } = Ii(), d = x(() => {
    const T = /* @__PURE__ */ new Map(), _ = t.overlaps ?? [];
    for (const P of _.filter((w) => w.includes(":"))) {
      const [w, I] = P.split(":");
      if (!i.value.includes(w) || !i.value.includes(I))
        continue;
      const z = a.get(w), A = a.get(I), R = o.get(w), V = o.get(I);
      !z || !A || !R || !V || (T.set(I, {
        position: z.value,
        amount: parseInt(R.value, 10)
      }), T.set(w, {
        position: A.value,
        amount: -parseInt(V.value, 10)
      }));
    }
    return T;
  }), h = x(() => {
    const T = [...new Set([...r.values()].map((P) => P.value))].sort((P, w) => P - w), _ = [];
    for (const P of T) {
      const w = i.value.filter((I) => {
        var z;
        return ((z = r.get(I)) == null ? void 0 : z.value) === P;
      });
      _.push(...w);
    }
    return ip(_, a, o, s);
  }), f = x(() => !Array.from(l.values()).some((T) => T.value)), g = x(() => h.value[h.value.length - 1].layer), m = x(() => ({
    "--v-layout-left": oe(g.value.left),
    "--v-layout-right": oe(g.value.right),
    "--v-layout-top": oe(g.value.top),
    "--v-layout-bottom": oe(g.value.bottom),
    ...f.value ? void 0 : {
      transition: "none"
    }
  })), v = x(() => h.value.slice(1).map((T, _) => {
    let {
      id: P
    } = T;
    const {
      layer: w
    } = h.value[_], I = o.get(P), z = a.get(P);
    return {
      id: P,
      ...w,
      size: Number(I.value),
      position: z.value
    };
  })), y = (T) => v.value.find((_) => _.id === T), p = He("createLayout"), M = q(!1);
  nt(() => {
    M.value = !0;
  }), it(rr, {
    register: (T, _) => {
      let {
        id: P,
        order: w,
        position: I,
        layoutSize: z,
        elementSize: A,
        active: R,
        disableTransitions: V,
        absolute: N
      } = _;
      r.set(P, w), a.set(P, I), o.set(P, z), s.set(P, R), V && l.set(P, V);
      const X = Oa(Pf, p == null ? void 0 : p.vnode).indexOf(T);
      X > -1 ? i.value.splice(X, 0, P) : i.value.push(P);
      const E = x(() => v.value.findIndex((W) => W.id === P)), B = x(() => n.value + h.value.length * 2 - E.value * 2), D = x(() => {
        const W = I.value === "left" || I.value === "right", U = I.value === "right", L = I.value === "bottom", ee = {
          [I.value]: 0,
          zIndex: B.value,
          transform: `translate${W ? "X" : "Y"}(${(R.value ? 0 : -110) * (U || L ? -1 : 1)}%)`,
          position: N.value || n.value !== Tu ? "absolute" : "fixed",
          ...f.value ? void 0 : {
            transition: "none"
          }
        };
        if (!M.value)
          return ee;
        const J = v.value[E.value];
        if (!J)
          throw new Error(`[Vuetify] Could not find layout item "${P}"`);
        const ae = d.value.get(P);
        return ae && (J[ae.position] += ae.amount), {
          ...ee,
          height: W ? `calc(100% - ${J.top}px - ${J.bottom}px)` : A.value ? `${A.value}px` : void 0,
          left: U ? void 0 : `${J.left}px`,
          right: U ? `${J.right}px` : void 0,
          top: I.value !== "bottom" ? `${J.top}px` : void 0,
          bottom: I.value !== "top" ? `${J.bottom}px` : void 0,
          width: W ? A.value ? `${A.value}px` : void 0 : `calc(100% - ${J.left}px - ${J.right}px)`
        };
      }), k = x(() => ({
        zIndex: B.value - 1
      }));
      return {
        layoutItemStyles: D,
        layoutItemScrimStyles: k,
        zIndex: B
      };
    },
    unregister: (T) => {
      r.delete(T), a.delete(T), o.delete(T), s.delete(T), l.delete(T), i.value = i.value.filter((_) => _ !== T);
    },
    mainRect: g,
    mainStyles: m,
    getLayoutItem: y,
    items: v,
    layoutRect: u,
    rootZIndex: n
  });
  const S = x(() => ["v-layout", {
    "v-layout--full-height": t.fullHeight
  }]), b = x(() => ({
    zIndex: e ? n.value : void 0,
    position: e ? "relative" : void 0,
    overflow: e ? "hidden" : void 0
  }));
  return {
    layoutClasses: S,
    layoutStyles: b,
    getLayoutItem: y,
    items: v,
    layoutRect: u,
    layoutRef: c
  };
}
const op = $({
  scrollTarget: {
    type: String
  },
  scrollThreshold: {
    type: [String, Number],
    default: 300
  }
}, "scroll");
function rp(t) {
  let e = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
  const {
    canScroll: n
  } = e;
  let i = 0;
  const a = Z(null), o = q(0), r = q(0), s = q(0), l = q(!1), c = q(!1), u = x(() => Number(t.scrollThreshold)), d = x(() => ai((u.value - o.value) / u.value || 0)), h = () => {
    const f = a.value;
    !f || n && !n.value || (i = o.value, o.value = "window" in f ? f.pageYOffset : f.scrollTop, c.value = o.value < i, s.value = Math.abs(o.value - u.value));
  };
  return Q(c, () => {
    r.value = r.value || o.value;
  }), Q(l, () => {
    r.value = 0;
  }), nt(() => {
    Q(() => t.scrollTarget, (f) => {
      var m;
      const g = f ? document.querySelector(f) : window;
      if (!g) {
        Ri(`Unable to locate element with identifier ${f}`);
        return;
      }
      g !== a.value && ((m = a.value) == null || m.removeEventListener("scroll", h), a.value = g, a.value.addEventListener("scroll", h, {
        passive: !0
      }));
    }, {
      immediate: !0
    });
  }), vt(() => {
    var f;
    (f = a.value) == null || f.removeEventListener("scroll", h);
  }), n && Q(n, h, {
    immediate: !0
  }), {
    scrollThreshold: u,
    currentScroll: o,
    currentThreshold: s,
    isScrollActive: l,
    scrollRatio: d,
    // required only for testing
    // probably can be removed
    // later (2 chars chlng)
    isScrollingUp: c,
    savedScroll: r
  };
}
const sp = $({
  scrollBehavior: String,
  modelValue: {
    type: Boolean,
    default: !0
  },
  location: {
    type: String,
    default: "top",
    validator: (t) => ["top", "bottom"].includes(t)
  },
  ...xf(),
  ...kl(),
  ...op(),
  height: {
    type: [Number, String],
    default: 64
  }
}, "VAppBar"), wu = K()({
  name: "VAppBar",
  props: sp(),
  emits: {
    "update:modelValue": (t) => !0
  },
  setup(t, e) {
    let {
      slots: n
    } = e;
    const i = Z(), a = Be(t, "modelValue"), o = x(() => {
      var p;
      const y = new Set(((p = t.scrollBehavior) == null ? void 0 : p.split(" ")) ?? []);
      return {
        hide: y.has("hide"),
        // fullyHide: behavior.has('fully-hide'),
        inverted: y.has("inverted"),
        collapse: y.has("collapse"),
        elevate: y.has("elevate"),
        fadeImage: y.has("fade-image")
        // shrink: behavior.has('shrink'),
      };
    }), r = x(() => {
      const y = o.value;
      return y.hide || // behavior.fullyHide ||
      y.inverted || y.collapse || y.elevate || y.fadeImage || // behavior.shrink ||
      !a.value;
    }), {
      currentScroll: s,
      scrollThreshold: l,
      isScrollingUp: c,
      scrollRatio: u
    } = rp(t, {
      canScroll: r
    }), d = x(() => t.collapse || o.value.collapse && (o.value.inverted ? u.value > 0 : u.value === 0)), h = x(() => t.flat || o.value.elevate && (o.value.inverted ? s.value > 0 : s.value === 0)), f = x(() => o.value.fadeImage ? o.value.inverted ? 1 - u.value : u.value : void 0), g = x(() => {
      var M, S;
      if (o.value.hide && o.value.inverted)
        return 0;
      const y = ((M = i.value) == null ? void 0 : M.contentHeight) ?? 0, p = ((S = i.value) == null ? void 0 : S.extensionHeight) ?? 0;
      return y + p;
    });
    Yt(x(() => !!t.scrollBehavior), () => {
      Ht(() => {
        o.value.hide ? o.value.inverted ? a.value = s.value > l.value : a.value = c.value || s.value < l.value : a.value = !0;
      });
    });
    const {
      ssrBootStyles: m
    } = bo(), {
      layoutItemStyles: v
    } = Ol({
      id: t.name,
      order: x(() => parseInt(t.order, 10)),
      position: te(t, "location"),
      layoutSize: g,
      elementSize: q(void 0),
      active: a,
      absolute: te(t, "absolute")
    });
    return ie(() => {
      const y = Pu.filterProps(t);
      return C(Pu, se({
        ref: i,
        class: ["v-app-bar", {
          "v-app-bar--bottom": t.location === "bottom"
        }, t.class],
        style: [{
          ...v.value,
          "--v-toolbar-image-opacity": f.value,
          height: void 0,
          ...m.value
        }, t.style]
      }, y, {
        collapse: d.value,
        flat: h.value
      }), n);
    }), {};
  }
}), lp = $({
  ...pf({
    icon: "$menu",
    variant: "text"
  })
}, "VAppBarNavIcon"), Eu = K()({
  name: "VAppBarNavIcon",
  props: lp(),
  setup(t, e) {
    let {
      slots: n
    } = e;
    return ie(() => C(_t, se(t, {
      class: ["v-app-bar-nav-icon"]
    }), n)), {};
  }
}), Au = K()({
  name: "VAppBarTitle",
  props: bf(),
  setup(t, e) {
    let {
      slots: n
    } = e;
    return ie(() => C(Mf, se(t, {
      class: "v-app-bar-title"
    }), n)), {};
  }
});
function cp(t) {
  let {
    rootEl: e,
    isSticky: n,
    layoutItemStyles: i
  } = t;
  const a = q(!1), o = q(0), r = x(() => {
    const c = typeof a.value == "boolean" ? "top" : a.value;
    return [n.value ? {
      top: "auto",
      bottom: "auto",
      height: void 0
    } : void 0, a.value ? {
      [c]: oe(o.value)
    } : {
      top: i.value.top
    }];
  });
  nt(() => {
    Q(n, (c) => {
      c ? window.addEventListener("scroll", l, {
        passive: !0
      }) : window.removeEventListener("scroll", l);
    }, {
      immediate: !0
    });
  }), vt(() => {
    window.removeEventListener("scroll", l);
  });
  let s = 0;
  function l() {
    const c = s > window.scrollY ? "up" : "down", u = e.value.getBoundingClientRect(), d = parseFloat(i.value.top ?? 0), h = window.scrollY - Math.max(0, o.value - d), f = u.height + Math.max(o.value, d) - window.scrollY - window.innerHeight, g = parseFloat(getComputedStyle(e.value).getPropertyValue("--v-body-scroll-y")) || 0;
    u.height < window.innerHeight - d ? (a.value = "top", o.value = d) : c === "up" && a.value === "bottom" || c === "down" && a.value === "top" ? (o.value = window.scrollY + u.top - g, a.value = !0) : c === "down" && f <= 0 ? (o.value = 0, a.value = "bottom") : c === "up" && h <= 0 && (g ? a.value !== "top" && (o.value = -h + g + d, a.value = "top") : (o.value = u.top + h, a.value = "top")), s = window.scrollY;
  }
  return {
    isStuck: a,
    stickyStyles: r
  };
}
const up = 100, dp = 20;
function Ru(t) {
  const e = 1.41421356237;
  return (t < 0 ? -1 : 1) * Math.sqrt(Math.abs(t)) * e;
}
function Iu(t) {
  if (t.length < 2)
    return 0;
  if (t.length === 2)
    return t[1].t === t[0].t ? 0 : (t[1].d - t[0].d) / (t[1].t - t[0].t);
  let e = 0;
  for (let n = t.length - 1; n > 0; n--) {
    if (t[n].t === t[n - 1].t)
      continue;
    const i = Ru(e), a = (t[n].d - t[n - 1].d) / (t[n].t - t[n - 1].t);
    e += (a - i) * Math.abs(a), n === t.length - 1 && (e *= 0.5);
  }
  return Ru(e) * 1e3;
}
function hp() {
  const t = {};
  function e(a) {
    Array.from(a.changedTouches).forEach((o) => {
      (t[o.identifier] ?? (t[o.identifier] = new nv(dp))).push([a.timeStamp, o]);
    });
  }
  function n(a) {
    Array.from(a.changedTouches).forEach((o) => {
      delete t[o.identifier];
    });
  }
  function i(a) {
    var c;
    const o = (c = t[a]) == null ? void 0 : c.values().reverse();
    if (!o)
      throw new Error(`No samples for touch id ${a}`);
    const r = o[0], s = [], l = [];
    for (const u of o) {
      if (r[0] - u[0] > up)
        break;
      s.push({
        t: u[0],
        d: u[1].clientX
      }), l.push({
        t: u[0],
        d: u[1].clientY
      });
    }
    return {
      x: Iu(s),
      y: Iu(l),
      get direction() {
        const {
          x: u,
          y: d
        } = this, [h, f] = [Math.abs(u), Math.abs(d)];
        return h > f && u >= 0 ? "right" : h > f && u <= 0 ? "left" : f > h && d >= 0 ? "down" : f > h && d <= 0 ? "up" : fp();
      }
    };
  }
  return {
    addMovement: e,
    endTouch: n,
    getVelocity: i
  };
}
function fp() {
  throw new Error();
}
function gp(t) {
  let {
    isActive: e,
    isTemporary: n,
    width: i,
    touchless: a,
    position: o
  } = t;
  nt(() => {
    window.addEventListener("touchstart", y, {
      passive: !0
    }), window.addEventListener("touchmove", p, {
      passive: !1
    }), window.addEventListener("touchend", M, {
      passive: !0
    });
  }), vt(() => {
    window.removeEventListener("touchstart", y), window.removeEventListener("touchmove", p), window.removeEventListener("touchend", M);
  });
  const r = x(() => ["left", "right"].includes(o.value)), {
    addMovement: s,
    endTouch: l,
    getVelocity: c
  } = hp();
  let u = !1;
  const d = q(!1), h = q(0), f = q(0);
  let g;
  function m(b, T) {
    return (o.value === "left" ? b : o.value === "right" ? document.documentElement.clientWidth - b : o.value === "top" ? b : o.value === "bottom" ? document.documentElement.clientHeight - b : Gi()) - (T ? i.value : 0);
  }
  function v(b) {
    let T = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : !0;
    const _ = o.value === "left" ? (b - f.value) / i.value : o.value === "right" ? (document.documentElement.clientWidth - b - f.value) / i.value : o.value === "top" ? (b - f.value) / i.value : o.value === "bottom" ? (document.documentElement.clientHeight - b - f.value) / i.value : Gi();
    return T ? Math.max(0, Math.min(1, _)) : _;
  }
  function y(b) {
    if (a.value)
      return;
    const T = b.changedTouches[0].clientX, _ = b.changedTouches[0].clientY, P = 25, w = o.value === "left" ? T < P : o.value === "right" ? T > document.documentElement.clientWidth - P : o.value === "top" ? _ < P : o.value === "bottom" ? _ > document.documentElement.clientHeight - P : Gi(), I = e.value && (o.value === "left" ? T < i.value : o.value === "right" ? T > document.documentElement.clientWidth - i.value : o.value === "top" ? _ < i.value : o.value === "bottom" ? _ > document.documentElement.clientHeight - i.value : Gi());
    (w || I || e.value && n.value) && (u = !0, g = [T, _], f.value = m(r.value ? T : _, e.value), h.value = v(r.value ? T : _), l(b), s(b));
  }
  function p(b) {
    const T = b.changedTouches[0].clientX, _ = b.changedTouches[0].clientY;
    if (u) {
      if (!b.cancelable) {
        u = !1;
        return;
      }
      const w = Math.abs(T - g[0]), I = Math.abs(_ - g[1]);
      (r.value ? w > I && w > 3 : I > w && I > 3) ? (d.value = !0, u = !1) : (r.value ? I : w) > 3 && (u = !1);
    }
    if (!d.value)
      return;
    b.preventDefault(), s(b);
    const P = v(r.value ? T : _, !1);
    h.value = Math.max(0, Math.min(1, P)), P > 1 ? f.value = m(r.value ? T : _, !0) : P < 0 && (f.value = m(r.value ? T : _, !1));
  }
  function M(b) {
    if (u = !1, !d.value)
      return;
    s(b), d.value = !1;
    const T = c(b.changedTouches[0].identifier), _ = Math.abs(T.x), P = Math.abs(T.y);
    (r.value ? _ > P && _ > 400 : P > _ && P > 3) ? e.value = T.direction === ({
      left: "right",
      right: "left",
      top: "down",
      bottom: "up"
    }[o.value] || Gi()) : e.value = h.value > 0.5;
  }
  const S = x(() => d.value ? {
    transform: o.value === "left" ? `translateX(calc(-100% + ${h.value * i.value}px))` : o.value === "right" ? `translateX(calc(100% - ${h.value * i.value}px))` : o.value === "top" ? `translateY(calc(-100% + ${h.value * i.value}px))` : o.value === "bottom" ? `translateY(calc(100% - ${h.value * i.value}px))` : Gi(),
    transition: "none"
  } : void 0);
  return {
    isDragging: d,
    dragProgress: h,
    dragStyles: S
  };
}
function Gi() {
  throw new Error();
}
const mp = ["start", "end", "left", "right", "top", "bottom"], vp = $({
  color: String,
  disableResizeWatcher: Boolean,
  disableRouteWatcher: Boolean,
  expandOnHover: Boolean,
  floating: Boolean,
  modelValue: {
    type: Boolean,
    default: null
  },
  permanent: Boolean,
  rail: {
    type: Boolean,
    default: null
  },
  railWidth: {
    type: [Number, String],
    default: 56
  },
  scrim: {
    type: [Boolean, String],
    default: !0
  },
  image: String,
  temporary: Boolean,
  touchless: Boolean,
  width: {
    type: [Number, String],
    default: 256
  },
  location: {
    type: String,
    default: "start",
    validator: (t) => mp.includes(t)
  },
  sticky: Boolean,
  ...bn(),
  ...ue(),
  ...wh(),
  ...en(),
  ...kl(),
  ...Ct(),
  ...Le({
    tag: "nav"
  }),
  ...ke()
}, "VNavigationDrawer"), Cp = K()({
  name: "VNavigationDrawer",
  props: vp(),
  emits: {
    "update:modelValue": (t) => !0,
    "update:rail": (t) => !0
  },
  setup(t, e) {
    let {
      attrs: n,
      emit: i,
      slots: a
    } = e;
    const {
      isRtl: o
    } = Qt(), {
      themeClasses: r
    } = $e(t), {
      borderClasses: s
    } = Mn(t), {
      backgroundColorClasses: l,
      backgroundColorStyles: c
    } = Pt(te(t, "color")), {
      elevationClasses: u
    } = tn(t), {
      displayClasses: d,
      mobile: h
    } = br(t), {
      roundedClasses: f
    } = yt(t), g = zh(), m = Be(t, "modelValue", null, (D) => !!D), {
      ssrBootStyles: v
    } = bo(), {
      scopeId: y
    } = Pl(), p = Z(), M = q(!1), S = x(() => t.rail && t.expandOnHover && M.value ? Number(t.width) : Number(t.rail ? t.railWidth : t.width)), b = x(() => Es(t.location, o.value)), T = x(() => !t.permanent && (h.value || t.temporary)), _ = x(() => t.sticky && !T.value && b.value !== "bottom");
    Yt(() => t.expandOnHover && t.rail != null, () => {
      Q(M, (D) => i("update:rail", !D));
    }), Yt(() => !t.disableResizeWatcher, () => {
      Q(T, (D) => !t.permanent && je(() => m.value = !D));
    }), Yt(() => !t.disableRouteWatcher && !!g, () => {
      Q(g.currentRoute, () => T.value && (m.value = !1));
    }), Q(() => t.permanent, (D) => {
      D && (m.value = !0);
    }), nl(() => {
      t.modelValue != null || T.value || (m.value = t.permanent || !h.value);
    });
    const {
      isDragging: P,
      dragProgress: w,
      dragStyles: I
    } = gp({
      isActive: m,
      isTemporary: T,
      width: S,
      touchless: te(t, "touchless"),
      position: b
    }), z = x(() => {
      const D = T.value ? 0 : t.rail && t.expandOnHover ? Number(t.railWidth) : S.value;
      return P.value ? D * w.value : D;
    }), {
      layoutItemStyles: A,
      layoutItemScrimStyles: R
    } = Ol({
      id: t.name,
      order: x(() => parseInt(t.order, 10)),
      position: b,
      layoutSize: z,
      elementSize: S,
      active: x(() => m.value || P.value),
      disableTransitions: x(() => P.value),
      absolute: x(() => (
        // eslint-disable-next-line @typescript-eslint/no-use-before-define
        t.absolute || _.value && typeof V.value != "string"
      ))
    }), {
      isStuck: V,
      stickyStyles: N
    } = cp({
      rootEl: p,
      isSticky: _,
      layoutItemStyles: A
    }), G = Pt(x(() => typeof t.scrim == "string" ? t.scrim : null)), X = x(() => ({
      ...P.value ? {
        opacity: w.value * 0.2,
        transition: "none"
      } : void 0,
      ...R.value
    }));
    yn({
      VList: {
        bgColor: "transparent"
      }
    });
    function E() {
      M.value = !0;
    }
    function B() {
      M.value = !1;
    }
    return ie(() => {
      const D = a.image || t.image;
      return C(de, null, [C(t.tag, se({
        ref: p,
        onMouseenter: E,
        onMouseleave: B,
        class: ["v-navigation-drawer", `v-navigation-drawer--${b.value}`, {
          "v-navigation-drawer--expand-on-hover": t.expandOnHover,
          "v-navigation-drawer--floating": t.floating,
          "v-navigation-drawer--is-hovering": M.value,
          "v-navigation-drawer--rail": t.rail,
          "v-navigation-drawer--temporary": T.value,
          "v-navigation-drawer--active": m.value,
          "v-navigation-drawer--sticky": _.value
        }, r.value, l.value, s.value, d.value, u.value, f.value, t.class],
        style: [c.value, A.value, I.value, v.value, N.value, t.style]
      }, y, n), {
        default: () => {
          var k, W, U, L;
          return [D && C("div", {
            key: "image",
            class: "v-navigation-drawer__img"
          }, [a.image ? (k = a.image) == null ? void 0 : k.call(a, {
            image: t.image
          }) : C("img", {
            src: t.image,
            alt: ""
          }, null)]), a.prepend && C("div", {
            class: "v-navigation-drawer__prepend"
          }, [(W = a.prepend) == null ? void 0 : W.call(a)]), C("div", {
            class: "v-navigation-drawer__content"
          }, [(U = a.default) == null ? void 0 : U.call(a)]), a.append && C("div", {
            class: "v-navigation-drawer__append"
          }, [(L = a.append) == null ? void 0 : L.call(a)])];
        }
      }), C(ri, {
        name: "fade-transition"
      }, {
        default: () => [T.value && (P.value || m.value) && !!t.scrim && C("div", se({
          class: ["v-navigation-drawer__scrim", G.backgroundColorClasses.value],
          style: [X.value, G.backgroundColorStyles.value],
          onClick: () => m.value = !1
        }, y), null)]
      })]);
    }), {
      isStuck: V
    };
  }
}), yp = ["onClick"], pp = { class: "d-flex align-center" }, _p = ["src"], Sp = { class: "d-flex align-center" }, bp = ["src"], Mp = { class: "desktop-menu d-flex justify-center align-center" }, xp = {
  __name: "AppBar",
  setup(t) {
    const { getText: e, getAncor: n } = mi(), i = Gd(), a = Z(null), o = Wn(), { data: r } = Kt(o), s = r.value.info, l = r.value.components, c = r.value.addOn, u = c && c.includes("Shop"), d = c && c.includes("Multilingual") && s.locales.length > 1, { isMobile: h } = va(), f = (v) => {
      if (v.type === "ancor") {
        const y = n(v.path).toLowerCase(), p = document.getElementById(y);
        if (p) {
          const S = p.getBoundingClientRect().top + window.scrollY - 64;
          window.scrollTo({ top: S, behavior: "smooth" });
        }
      } else
        v.type === "externalLink" ? window.open(v.path, "_blank") : v.type === "internalLink" && (window.location.href = v.path);
    }, g = x(() => {
      let v = [];
      return c && c.includes("VirtualTour") && v.push({
        title: "Virtual Tour",
        path: "https://test-virtual-tour.replit.app/",
        type: "externalLink"
      }), c && c.includes("Blog") && v.push({
        title: "Blog",
        path: "/blog",
        type: "internalLink"
      }), v = v.concat(l.filter((y) => y.menu).map((y) => ({
        title: e(y.menu),
        path: n(y.menu).toLowerCase(),
        type: "ancor"
      }))), s.menuHomeLink ? [{ title: "Home", path: "/", type: "internalLink" }, ...v] : v;
    }), m = x(() => i.products.reduce((v, y) => v + y.quantity, 0));
    return (v, y) => (H(), Te(de, null, [
      C(Cp, {
        modelValue: a.value,
        "onUpdate:modelValue": y[0] || (y[0] = (p) => a.value = p),
        location: "bottom",
        temporary: "",
        touchless: ""
      }, {
        default: Y(() => [
          C(Sa, null, {
            default: Y(() => [
              (H(!0), Te(de, null, Rt(g.value, (p) => (H(), fe(mn, {
                key: p.path
              }, {
                default: Y(() => [
                  ve("div", {
                    onClick: (M) => f(p)
                  }, st(p.title), 9, yp)
                ]),
                _: 2
              }, 1024))), 128))
            ]),
            _: 1
          })
        ]),
        _: 1
      }, 8, ["modelValue"]),
      O(h) ? (H(), fe(wu, {
        key: 0,
        elevation: 2,
        color: O(s).primaryColor
      }, {
        default: Y(() => [
          C(Eu, {
            onClick: y[1] || (y[1] = Wa((p) => a.value = !a.value, ["stop"]))
          }),
          C(Au, null, {
            default: Y(() => [
              ve("div", pp, [
                O(s).logo && (O(s).logoMode === "logo" || O(s).logoMode === "both") ? (H(), Te("img", {
                  key: 0,
                  src: O(s).logo,
                  alt: "Logo",
                  style: { height: "40px", "max-width": "150px" }
                }, null, 8, _p)) : Ae("", !0),
                O(s).logoMode === "text" || O(s).logoMode === "both" || !O(s).logoMode ? (H(), Te("b", {
                  key: 1,
                  style: mt({ marginLeft: O(s).logoMode === "both" ? "10px" : "0" })
                }, st(O(s).name), 5)) : Ae("", !0)
              ])
            ]),
            _: 1
          }),
          O(u) && m.value != 0 ? (H(), fe(Mu, { key: 0 })) : Ae("", !0),
          O(d) ? (H(), fe(xu, { key: 1 })) : Ae("", !0)
        ]),
        _: 1
      }, 8, ["color"])) : Ae("", !0),
      O(h) ? Ae("", !0) : (H(), fe(wu, {
        key: 1,
        elevation: 2,
        color: O(s).primaryColor
      }, {
        default: Y(() => [
          O(h) ? (H(), fe(Eu, {
            key: 0,
            onClick: y[2] || (y[2] = Wa((p) => a.value = !a.value, ["stop"]))
          })) : Ae("", !0),
          C(Au, null, {
            default: Y(() => [
              ve("div", Sp, [
                O(s).logo && (O(s).logoMode === "logo" || O(s).logoMode === "both") ? (H(), Te("img", {
                  key: 0,
                  src: O(s).logo,
                  alt: "Logo",
                  style: { height: "40px", "max-width": "150px" }
                }, null, 8, bp)) : Ae("", !0),
                O(s).logoMode === "text" || O(s).logoMode === "both" || !O(s).logoMode ? (H(), Te("b", {
                  key: 1,
                  style: mt({ marginLeft: O(s).logoMode === "both" ? "10px" : "0" })
                }, st(O(s).name), 5)) : Ae("", !0)
              ])
            ]),
            _: 1
          }),
          ve("div", Mp, [
            (H(!0), Te(de, null, Rt(g.value, (p) => (H(), fe(_t, {
              key: p.path,
              variant: "text",
              onClick: (M) => f(p)
            }, {
              default: Y(() => [
                ct(st(p.title), 1)
              ]),
              _: 2
            }, 1032, ["onClick"]))), 128)),
            O(u) && m.value != 0 ? (H(), fe(Mu, { key: 0 })) : Ae("", !0),
            O(d) ? (H(), fe(xu, { key: 1 })) : Ae("", !0)
          ])
        ]),
        _: 1
      }, 8, ["color"]))
    ], 64));
  }
};
const Pp = $({
  app: Boolean,
  color: String,
  height: {
    type: [Number, String],
    default: "auto"
  },
  ...bn(),
  ...ue(),
  ...en(),
  ...kl(),
  ...Ct(),
  ...Le({
    tag: "footer"
  }),
  ...ke()
}, "VFooter"), Tp = K()({
  name: "VFooter",
  props: Pp(),
  setup(t, e) {
    let {
      slots: n
    } = e;
    const {
      themeClasses: i
    } = $e(t), {
      backgroundColorClasses: a,
      backgroundColorStyles: o
    } = Pt(te(t, "color")), {
      borderClasses: r
    } = Mn(t), {
      elevationClasses: s
    } = tn(t), {
      roundedClasses: l
    } = yt(t), c = q(32), {
      resizeRef: u
    } = Ii((f) => {
      f.length && (c.value = f[0].target.clientHeight);
    }), d = x(() => t.height === "auto" ? c.value : parseInt(t.height, 10)), {
      layoutItemStyles: h
    } = Ol({
      id: t.name,
      order: x(() => parseInt(t.order, 10)),
      position: x(() => "bottom"),
      layoutSize: d,
      elementSize: x(() => t.height === "auto" ? void 0 : d.value),
      active: x(() => t.app),
      absolute: te(t, "absolute")
    });
    return ie(() => C(t.tag, {
      ref: u,
      class: ["v-footer", i.value, a.value, r.value, s.value, l.value, t.class],
      style: [o.value, t.app ? h.value : {
        height: oe(t.height)
      }, t.style]
    }, n)), {};
  }
}), wp = { key: 0 }, Ep = {
  __name: "Footer",
  setup(t) {
    const e = Wn(), { data: n } = Kt(e), i = n.value.info;
    return (a, o) => (H(), fe(Tp, {
      elevation: "2",
      color: O(i).primaryColor
    }, {
      default: Y(() => [
        C(vn, null, {
          default: Y(() => [
            C(sa, null, {
              default: Y(() => [
                C(jt, { cols: "6" }, {
                  default: Y(() => [
                    ct(st((/* @__PURE__ */ new Date()).getFullYear()) + " — ", 1),
                    ve("strong", null, st(O(i).name), 1),
                    O(i).iva ? (H(), Te("div", wp, "P. IVA " + st(O(i).iva), 1)) : Ae("", !0)
                  ]),
                  _: 1
                }),
                C(jt, {
                  cols: "6",
                  class: "text-right"
                }, {
                  default: Y(() => [
                    ve("a", {
                      href: "/PrivacyPolicyForm.pdf",
                      target: "_blank",
                      style: { color: "#42b983", "font-weight": "bold", transition: "color 0.3s ease" },
                      onMouseover: o[0] || (o[0] = (r) => r.target.style.color = "#2c3e50"),
                      onMouseleave: o[1] || (o[1] = (r) => r.target.style.color = "#42b983")
                    }, " Privacy Policy ", 32),
                    ve("div", null, [
                      o[6] || (o[6] = ct(" Powered by ")),
                      ve("a", {
                        href: "https://fastsite.it",
                        target: "_blank",
                        style: { color: "#42b983", "font-weight": "bold", transition: "color 0.3s ease" },
                        onMouseover: o[2] || (o[2] = (r) => r.target.style.color = "#2c3e50"),
                        onMouseleave: o[3] || (o[3] = (r) => r.target.style.color = "#42b983")
                      }, [
                        o[5] || (o[5] = ct(" Fast-Site ")),
                        C(Ie, { right: "" }, {
                          default: Y(() => o[4] || (o[4] = [
                            ct("mdi-web")
                          ])),
                          _: 1
                        })
                      ], 32)
                    ])
                  ]),
                  _: 1
                })
              ]),
              _: 1
            })
          ]),
          _: 1
        })
      ]),
      _: 1
    }, 8, ["color"]));
  }
};
class Ap {
  /**
   * @param {string} type Type.
   */
  constructor(e) {
    this.propagationStopped, this.defaultPrevented, this.type = e, this.target = null;
  }
  /**
   * Prevent default. This means that no emulated `click`, `singleclick` or `doubleclick` events
   * will be fired.
   * @api
   */
  preventDefault() {
    this.defaultPrevented = !0;
  }
  /**
   * Stop event propagation.
   * @api
   */
  stopPropagation() {
    this.propagationStopped = !0;
  }
}
const Xn = Ap, la = {
  /**
   * Triggered when a property is changed.
   * @event module:ol/Object.ObjectEvent#propertychange
   * @api
   */
  PROPERTYCHANGE: "propertychange"
};
class Rp {
  constructor() {
    this.disposed = !1;
  }
  /**
   * Clean up.
   */
  dispose() {
    this.disposed || (this.disposed = !0, this.disposeInternal());
  }
  /**
   * Extension point for disposable objects.
   * @protected
   */
  disposeInternal() {
  }
}
const Dl = Rp;
function Ip(t, e, n) {
  let i, a;
  n = n || Dn;
  let o = 0, r = t.length, s = !1;
  for (; o < r; )
    i = o + (r - o >> 1), a = +n(t[i], e), a < 0 ? o = i + 1 : (r = i, s = !a);
  return s ? o : ~o;
}
function Dn(t, e) {
  return t > e ? 1 : t < e ? -1 : 0;
}
function Gl(t, e, n) {
  if (t[0] <= e)
    return 0;
  const i = t.length;
  if (e <= t[i - 1])
    return i - 1;
  if (typeof n == "function") {
    for (let a = 1; a < i; ++a) {
      const o = t[a];
      if (o === e)
        return a;
      if (o < e)
        return n(e, t[a - 1], o) > 0 ? a - 1 : a;
    }
    return i - 1;
  }
  if (n > 0) {
    for (let a = 1; a < i; ++a)
      if (t[a] < e)
        return a - 1;
    return i - 1;
  }
  if (n < 0) {
    for (let a = 1; a < i; ++a)
      if (t[a] <= e)
        return a;
    return i - 1;
  }
  for (let a = 1; a < i; ++a) {
    if (t[a] == e)
      return a;
    if (t[a] < e)
      return t[a - 1] - e < e - t[a] ? a - 1 : a;
  }
  return i - 1;
}
function zp(t, e, n) {
  for (; e < n; ) {
    const i = t[e];
    t[e] = t[n], t[n] = i, ++e, --n;
  }
}
function Nl(t, e) {
  const n = Array.isArray(e) ? e : [e], i = n.length;
  for (let a = 0; a < i; a++)
    t[t.length] = n[a];
}
function vi(t, e) {
  const n = t.length;
  if (n !== e.length)
    return !1;
  for (let i = 0; i < n; i++)
    if (t[i] !== e[i])
      return !1;
  return !0;
}
function Lp(t, e, n) {
  const i = e || Dn;
  return t.every(function(a, o) {
    if (o === 0)
      return !0;
    const r = i(t[o - 1], a);
    return !(r > 0 || n && r === 0);
  });
}
function Za() {
  return !0;
}
function Rr() {
  return !1;
}
function ca() {
}
function Tf(t) {
  let e = !1, n, i, a;
  return function() {
    const o = Array.prototype.slice.call(arguments);
    return (!e || this !== a || !vi(o, i)) && (e = !0, a = this, i = o, n = t.apply(this, arguments)), n;
  };
}
function Vp(t) {
  function e() {
    let n;
    try {
      n = t();
    } catch (i) {
      return Promise.reject(i);
    }
    return n instanceof Promise ? n : Promise.resolve(n);
  }
  return e();
}
function xo(t) {
  for (const e in t)
    delete t[e];
}
function ua(t) {
  let e;
  for (e in t)
    return !1;
  return !e;
}
class Bp extends Dl {
  /**
   * @param {*} [target] Default event target for dispatched events.
   */
  constructor(e) {
    super(), this.eventTarget_ = e, this.pendingRemovals_ = null, this.dispatching_ = null, this.listeners_ = null;
  }
  /**
   * @param {string} type Type.
   * @param {import("../events.js").Listener} listener Listener.
   */
  addEventListener(e, n) {
    if (!e || !n)
      return;
    const i = this.listeners_ || (this.listeners_ = {}), a = i[e] || (i[e] = []);
    a.includes(n) || a.push(n);
  }
  /**
   * Dispatches an event and calls all listeners listening for events
   * of this type. The event parameter can either be a string or an
   * Object with a `type` property.
   *
   * @param {import("./Event.js").default|string} event Event object.
   * @return {boolean|undefined} `false` if anyone called preventDefault on the
   *     event object or if any of the listeners returned false.
   * @api
   */
  dispatchEvent(e) {
    const n = typeof e == "string", i = n ? e : e.type, a = this.listeners_ && this.listeners_[i];
    if (!a)
      return;
    const o = n ? new Xn(e) : (
      /** @type {Event} */
      e
    );
    o.target || (o.target = this.eventTarget_ || this);
    const r = this.dispatching_ || (this.dispatching_ = {}), s = this.pendingRemovals_ || (this.pendingRemovals_ = {});
    i in r || (r[i] = 0, s[i] = 0), ++r[i];
    let l;
    for (let c = 0, u = a.length; c < u; ++c)
      if ("handleEvent" in a[c] ? l = /** @type {import("../events.js").ListenerObject} */
      a[c].handleEvent(o) : l = /** @type {import("../events.js").ListenerFunction} */
      a[c].call(this, o), l === !1 || o.propagationStopped) {
        l = !1;
        break;
      }
    if (--r[i] === 0) {
      let c = s[i];
      for (delete s[i]; c--; )
        this.removeEventListener(i, ca);
      delete r[i];
    }
    return l;
  }
  /**
   * Clean up.
   */
  disposeInternal() {
    this.listeners_ && xo(this.listeners_);
  }
  /**
   * Get the listeners for a specified event type. Listeners are returned in the
   * order that they will be called in.
   *
   * @param {string} type Type.
   * @return {Array<import("../events.js").Listener>|undefined} Listeners.
   */
  getListeners(e) {
    return this.listeners_ && this.listeners_[e] || void 0;
  }
  /**
   * @param {string} [type] Type. If not provided,
   *     `true` will be returned if this event target has any listeners.
   * @return {boolean} Has listeners.
   */
  hasListener(e) {
    return this.listeners_ ? e ? e in this.listeners_ : Object.keys(this.listeners_).length > 0 : !1;
  }
  /**
   * @param {string} type Type.
   * @param {import("../events.js").Listener} listener Listener.
   */
  removeEventListener(e, n) {
    if (!this.listeners_)
      return;
    const i = this.listeners_[e];
    if (!i)
      return;
    const a = i.indexOf(n);
    a !== -1 && (this.pendingRemovals_ && e in this.pendingRemovals_ ? (i[a] = ca, ++this.pendingRemovals_[e]) : (i.splice(a, 1), i.length === 0 && delete this.listeners_[e]));
  }
}
const Ir = Bp, ge = {
  /**
   * Generic change event. Triggered when the revision counter is increased.
   * @event module:ol/events/Event~BaseEvent#change
   * @api
   */
  CHANGE: "change",
  /**
   * Generic error event. Triggered when an error occurs.
   * @event module:ol/events/Event~BaseEvent#error
   * @api
   */
  ERROR: "error",
  BLUR: "blur",
  CLEAR: "clear",
  CONTEXTMENU: "contextmenu",
  CLICK: "click",
  DBLCLICK: "dblclick",
  DRAGENTER: "dragenter",
  DRAGOVER: "dragover",
  DROP: "drop",
  FOCUS: "focus",
  KEYDOWN: "keydown",
  KEYPRESS: "keypress",
  LOAD: "load",
  RESIZE: "resize",
  TOUCHMOVE: "touchmove",
  WHEEL: "wheel"
};
function Me(t, e, n, i, a) {
  if (i && i !== t && (n = n.bind(i)), a) {
    const r = n;
    n = function() {
      t.removeEventListener(e, n), r.apply(this, arguments);
    };
  }
  const o = {
    target: t,
    type: e,
    listener: n
  };
  return t.addEventListener(e, n), o;
}
function sr(t, e, n, i) {
  return Me(t, e, n, i, !0);
}
function Ve(t) {
  t && t.target && (t.target.removeEventListener(t.type, t.listener), xo(t));
}
class zr extends Ir {
  constructor() {
    super(), this.on = /** @type {ObservableOnSignature<import("./events").EventsKey>} */
    this.onInternal, this.once = /** @type {ObservableOnSignature<import("./events").EventsKey>} */
    this.onceInternal, this.un = /** @type {ObservableOnSignature<void>} */
    this.unInternal, this.revision_ = 0;
  }
  /**
   * Increases the revision counter and dispatches a 'change' event.
   * @api
   */
  changed() {
    ++this.revision_, this.dispatchEvent(ge.CHANGE);
  }
  /**
   * Get the version number for this object.  Each time the object is modified,
   * its version number will be incremented.
   * @return {number} Revision.
   * @api
   */
  getRevision() {
    return this.revision_;
  }
  /**
   * @param {string|Array<string>} type Type.
   * @param {function((Event|import("./events/Event").default)): ?} listener Listener.
   * @return {import("./events.js").EventsKey|Array<import("./events.js").EventsKey>} Event key.
   * @protected
   */
  onInternal(e, n) {
    if (Array.isArray(e)) {
      const i = e.length, a = new Array(i);
      for (let o = 0; o < i; ++o)
        a[o] = Me(this, e[o], n);
      return a;
    }
    return Me(
      this,
      /** @type {string} */
      e,
      n
    );
  }
  /**
   * @param {string|Array<string>} type Type.
   * @param {function((Event|import("./events/Event").default)): ?} listener Listener.
   * @return {import("./events.js").EventsKey|Array<import("./events.js").EventsKey>} Event key.
   * @protected
   */
  onceInternal(e, n) {
    let i;
    if (Array.isArray(e)) {
      const a = e.length;
      i = new Array(a);
      for (let o = 0; o < a; ++o)
        i[o] = sr(this, e[o], n);
    } else
      i = sr(
        this,
        /** @type {string} */
        e,
        n
      );
    return n.ol_key = i, i;
  }
  /**
   * Unlisten for a certain type of event.
   * @param {string|Array<string>} type Type.
   * @param {function((Event|import("./events/Event").default)): ?} listener Listener.
   * @protected
   */
  unInternal(e, n) {
    const i = (
      /** @type {Object} */
      n.ol_key
    );
    if (i)
      Fp(i);
    else if (Array.isArray(e))
      for (let a = 0, o = e.length; a < o; ++a)
        this.removeEventListener(e[a], n);
    else
      this.removeEventListener(e, n);
  }
}
zr.prototype.on;
zr.prototype.once;
zr.prototype.un;
function Fp(t) {
  if (Array.isArray(t))
    for (let e = 0, n = t.length; e < n; ++e)
      Ve(t[e]);
  else
    Ve(
      /** @type {import("./events.js").EventsKey} */
      t
    );
}
const wf = zr;
function be() {
  throw new Error("Unimplemented abstract method.");
}
let kp = 0;
function we(t) {
  return t.ol_uid || (t.ol_uid = String(++kp));
}
class zu extends Xn {
  /**
   * @param {string} type The event type.
   * @param {string} key The property name.
   * @param {*} oldValue The old value for `key`.
   */
  constructor(e, n, i) {
    super(e), this.key = n, this.oldValue = i;
  }
}
class Op extends wf {
  /**
   * @param {Object<string, *>} [values] An object with key-value pairs.
   */
  constructor(e) {
    super(), this.on, this.once, this.un, we(this), this.values_ = null, e !== void 0 && this.setProperties(e);
  }
  /**
   * Gets a value.
   * @param {string} key Key name.
   * @return {*} Value.
   * @api
   */
  get(e) {
    let n;
    return this.values_ && this.values_.hasOwnProperty(e) && (n = this.values_[e]), n;
  }
  /**
   * Get a list of object property names.
   * @return {Array<string>} List of property names.
   * @api
   */
  getKeys() {
    return this.values_ && Object.keys(this.values_) || [];
  }
  /**
   * Get an object of all property names and values.
   * @return {Object<string, *>} Object.
   * @api
   */
  getProperties() {
    return this.values_ && Object.assign({}, this.values_) || {};
  }
  /**
   * Get an object of all property names and values.
   * @return {Object<string, *>?} Object.
   */
  getPropertiesInternal() {
    return this.values_;
  }
  /**
   * @return {boolean} The object has properties.
   */
  hasProperties() {
    return !!this.values_;
  }
  /**
   * @param {string} key Key name.
   * @param {*} oldValue Old value.
   */
  notify(e, n) {
    let i;
    i = `change:${e}`, this.hasListener(i) && this.dispatchEvent(new zu(i, e, n)), i = la.PROPERTYCHANGE, this.hasListener(i) && this.dispatchEvent(new zu(i, e, n));
  }
  /**
   * @param {string} key Key name.
   * @param {import("./events.js").Listener} listener Listener.
   */
  addChangeListener(e, n) {
    this.addEventListener(`change:${e}`, n);
  }
  /**
   * @param {string} key Key name.
   * @param {import("./events.js").Listener} listener Listener.
   */
  removeChangeListener(e, n) {
    this.removeEventListener(`change:${e}`, n);
  }
  /**
   * Sets a value.
   * @param {string} key Key name.
   * @param {*} value Value.
   * @param {boolean} [silent] Update without triggering an event.
   * @api
   */
  set(e, n, i) {
    const a = this.values_ || (this.values_ = {});
    if (i)
      a[e] = n;
    else {
      const o = a[e];
      a[e] = n, o !== n && this.notify(e, o);
    }
  }
  /**
   * Sets a collection of key-value pairs.  Note that this changes any existing
   * properties and adds new ones (it does not remove any existing properties).
   * @param {Object<string, *>} values Values.
   * @param {boolean} [silent] Update without triggering an event.
   * @api
   */
  setProperties(e, n) {
    for (const i in e)
      this.set(i, e[i], n);
  }
  /**
   * Apply any properties from another object without triggering events.
   * @param {BaseObject} source The source object.
   * @protected
   */
  applyProperties(e) {
    e.values_ && Object.assign(this.values_ || (this.values_ = {}), e.values_);
  }
  /**
   * Unsets a property.
   * @param {string} key Key name.
   * @param {boolean} [silent] Unset without triggering an event.
   * @api
   */
  unset(e, n) {
    if (this.values_ && e in this.values_) {
      const i = this.values_[e];
      delete this.values_[e], ua(this.values_) && (this.values_ = null), n || this.notify(e, i);
    }
  }
}
const xn = Op, St = {
  /**
   * Triggered when an item is added to the collection.
   * @event module:ol/Collection.CollectionEvent#add
   * @api
   */
  ADD: "add",
  /**
   * Triggered when an item is removed from the collection.
   * @event module:ol/Collection.CollectionEvent#remove
   * @api
   */
  REMOVE: "remove"
}, Lu = {
  LENGTH: "length"
};
class Bo extends Xn {
  /**
   * @param {import("./CollectionEventType.js").default} type Type.
   * @param {T} element Element.
   * @param {number} index The index of the added or removed element.
   */
  constructor(e, n, i) {
    super(e), this.element = n, this.index = i;
  }
}
class Dp extends xn {
  /**
   * @param {Array<T>} [array] Array.
   * @param {Options} [options] Collection options.
   */
  constructor(e, n) {
    if (super(), this.on, this.once, this.un, n = n || {}, this.unique_ = !!n.unique, this.array_ = e || [], this.unique_)
      for (let i = 0, a = this.array_.length; i < a; ++i)
        this.assertUnique_(this.array_[i], i);
    this.updateLength_();
  }
  /**
   * Remove all elements from the collection.
   * @api
   */
  clear() {
    for (; this.getLength() > 0; )
      this.pop();
  }
  /**
   * Add elements to the collection.  This pushes each item in the provided array
   * to the end of the collection.
   * @param {!Array<T>} arr Array.
   * @return {Collection<T>} This collection.
   * @api
   */
  extend(e) {
    for (let n = 0, i = e.length; n < i; ++n)
      this.push(e[n]);
    return this;
  }
  /**
   * Iterate over each element, calling the provided callback.
   * @param {function(T, number, Array<T>): *} f The function to call
   *     for every element. This function takes 3 arguments (the element, the
   *     index and the array). The return value is ignored.
   * @api
   */
  forEach(e) {
    const n = this.array_;
    for (let i = 0, a = n.length; i < a; ++i)
      e(n[i], i, n);
  }
  /**
   * Get a reference to the underlying Array object. Warning: if the array
   * is mutated, no events will be dispatched by the collection, and the
   * collection's "length" property won't be in sync with the actual length
   * of the array.
   * @return {!Array<T>} Array.
   * @api
   */
  getArray() {
    return this.array_;
  }
  /**
   * Get the element at the provided index.
   * @param {number} index Index.
   * @return {T} Element.
   * @api
   */
  item(e) {
    return this.array_[e];
  }
  /**
   * Get the length of this collection.
   * @return {number} The length of the array.
   * @observable
   * @api
   */
  getLength() {
    return this.get(Lu.LENGTH);
  }
  /**
   * Insert an element at the provided index.
   * @param {number} index Index.
   * @param {T} elem Element.
   * @api
   */
  insertAt(e, n) {
    if (e < 0 || e > this.getLength())
      throw new Error("Index out of bounds: " + e);
    this.unique_ && this.assertUnique_(n), this.array_.splice(e, 0, n), this.updateLength_(), this.dispatchEvent(
      new Bo(St.ADD, n, e)
    );
  }
  /**
   * Remove the last element of the collection and return it.
   * Return `undefined` if the collection is empty.
   * @return {T|undefined} Element.
   * @api
   */
  pop() {
    return this.removeAt(this.getLength() - 1);
  }
  /**
   * Insert the provided element at the end of the collection.
   * @param {T} elem Element.
   * @return {number} New length of the collection.
   * @api
   */
  push(e) {
    this.unique_ && this.assertUnique_(e);
    const n = this.getLength();
    return this.insertAt(n, e), this.getLength();
  }
  /**
   * Remove the first occurrence of an element from the collection.
   * @param {T} elem Element.
   * @return {T|undefined} The removed element or undefined if none found.
   * @api
   */
  remove(e) {
    const n = this.array_;
    for (let i = 0, a = n.length; i < a; ++i)
      if (n[i] === e)
        return this.removeAt(i);
  }
  /**
   * Remove the element at the provided index and return it.
   * Return `undefined` if the collection does not contain this index.
   * @param {number} index Index.
   * @return {T|undefined} Value.
   * @api
   */
  removeAt(e) {
    if (e < 0 || e >= this.getLength())
      return;
    const n = this.array_[e];
    return this.array_.splice(e, 1), this.updateLength_(), this.dispatchEvent(
      /** @type {CollectionEvent<T>} */
      new Bo(St.REMOVE, n, e)
    ), n;
  }
  /**
   * Set the element at the provided index.
   * @param {number} index Index.
   * @param {T} elem Element.
   * @api
   */
  setAt(e, n) {
    const i = this.getLength();
    if (e >= i) {
      this.insertAt(e, n);
      return;
    }
    if (e < 0)
      throw new Error("Index out of bounds: " + e);
    this.unique_ && this.assertUnique_(n, e);
    const a = this.array_[e];
    this.array_[e] = n, this.dispatchEvent(
      /** @type {CollectionEvent<T>} */
      new Bo(St.REMOVE, a, e)
    ), this.dispatchEvent(
      /** @type {CollectionEvent<T>} */
      new Bo(St.ADD, n, e)
    );
  }
  /**
   * @private
   */
  updateLength_() {
    this.set(Lu.LENGTH, this.array_.length);
  }
  /**
   * @private
   * @param {T} elem Element.
   * @param {number} [except] Optional index to ignore.
   */
  assertUnique_(e, n) {
    for (let i = 0, a = this.array_.length; i < a; ++i)
      if (this.array_[i] === e && i !== n)
        throw new Error("Duplicate item added to a unique collection");
  }
}
const cn = Dp, Ee = {
  OPACITY: "opacity",
  VISIBLE: "visible",
  EXTENT: "extent",
  Z_INDEX: "zIndex",
  MAX_RESOLUTION: "maxResolution",
  MIN_RESOLUTION: "minResolution",
  MAX_ZOOM: "maxZoom",
  MIN_ZOOM: "minZoom",
  SOURCE: "source",
  MAP: "map"
};
function Se(t, e) {
  if (!t)
    throw new Error(e);
}
function Ye(t, e, n) {
  return Math.min(Math.max(t, e), n);
}
function Gp(t, e, n, i, a, o) {
  const r = a - n, s = o - i;
  if (r !== 0 || s !== 0) {
    const l = ((t - n) * r + (e - i) * s) / (r * r + s * s);
    l > 1 ? (n = a, i = o) : l > 0 && (n += r * l, i += s * l);
  }
  return na(t, e, n, i);
}
function na(t, e, n, i) {
  const a = n - t, o = i - e;
  return a * a + o * o;
}
function Np(t) {
  const e = t.length;
  for (let i = 0; i < e; i++) {
    let a = i, o = Math.abs(t[i][i]);
    for (let s = i + 1; s < e; s++) {
      const l = Math.abs(t[s][i]);
      l > o && (o = l, a = s);
    }
    if (o === 0)
      return null;
    const r = t[a];
    t[a] = t[i], t[i] = r;
    for (let s = i + 1; s < e; s++) {
      const l = -t[s][i] / t[i][i];
      for (let c = i; c < e + 1; c++)
        i == c ? t[s][c] = 0 : t[s][c] += l * t[i][c];
    }
  }
  const n = new Array(e);
  for (let i = e - 1; i >= 0; i--) {
    n[i] = t[i][e] / t[i][i];
    for (let a = i - 1; a >= 0; a--)
      t[a][e] -= t[a][i] * n[i];
  }
  return n;
}
function Ho(t) {
  return t * Math.PI / 180;
}
function ia(t, e) {
  const n = t % e;
  return n * e < 0 ? n + e : n;
}
function kt(t, e, n) {
  return t + n * (e - t);
}
function $l(t, e) {
  const n = Math.pow(10, e);
  return Math.round(t * n) / n;
}
function Fo(t, e) {
  return Math.floor($l(t, e));
}
function ko(t, e) {
  return Math.ceil($l(t, e));
}
class $p extends xn {
  /**
   * @param {Options} options Layer options.
   */
  constructor(e) {
    super(), this.on, this.once, this.un, this.background_ = e.background;
    const n = Object.assign({}, e);
    typeof e.properties == "object" && (delete n.properties, Object.assign(n, e.properties)), n[Ee.OPACITY] = e.opacity !== void 0 ? e.opacity : 1, Se(
      typeof n[Ee.OPACITY] == "number",
      "Layer opacity must be a number"
    ), n[Ee.VISIBLE] = e.visible !== void 0 ? e.visible : !0, n[Ee.Z_INDEX] = e.zIndex, n[Ee.MAX_RESOLUTION] = e.maxResolution !== void 0 ? e.maxResolution : 1 / 0, n[Ee.MIN_RESOLUTION] = e.minResolution !== void 0 ? e.minResolution : 0, n[Ee.MIN_ZOOM] = e.minZoom !== void 0 ? e.minZoom : -1 / 0, n[Ee.MAX_ZOOM] = e.maxZoom !== void 0 ? e.maxZoom : 1 / 0, this.className_ = n.className !== void 0 ? n.className : "ol-layer", delete n.className, this.setProperties(n), this.state_ = null;
  }
  /**
   * Get the background for this layer.
   * @return {BackgroundColor|false} Layer background.
   */
  getBackground() {
    return this.background_;
  }
  /**
   * @return {string} CSS class name.
   */
  getClassName() {
    return this.className_;
  }
  /**
   * This method is not meant to be called by layers or layer renderers because the state
   * is incorrect if the layer is included in a layer group.
   *
   * @param {boolean} [managed] Layer is managed.
   * @return {import("./Layer.js").State} Layer state.
   */
  getLayerState(e) {
    const n = this.state_ || /** @type {?} */
    {
      layer: this,
      managed: e === void 0 ? !0 : e
    }, i = this.getZIndex();
    return n.opacity = Ye(Math.round(this.getOpacity() * 100) / 100, 0, 1), n.visible = this.getVisible(), n.extent = this.getExtent(), n.zIndex = i === void 0 && !n.managed ? 1 / 0 : i, n.maxResolution = this.getMaxResolution(), n.minResolution = Math.max(this.getMinResolution(), 0), n.minZoom = this.getMinZoom(), n.maxZoom = this.getMaxZoom(), this.state_ = n, n;
  }
  /**
   * @abstract
   * @param {Array<import("./Layer.js").default>} [array] Array of layers (to be
   *     modified in place).
   * @return {Array<import("./Layer.js").default>} Array of layers.
   */
  getLayersArray(e) {
    return be();
  }
  /**
   * @abstract
   * @param {Array<import("./Layer.js").State>} [states] Optional list of layer
   *     states (to be modified in place).
   * @return {Array<import("./Layer.js").State>} List of layer states.
   */
  getLayerStatesArray(e) {
    return be();
  }
  /**
   * Return the {@link module:ol/extent~Extent extent} of the layer or `undefined` if it
   * will be visible regardless of extent.
   * @return {import("../extent.js").Extent|undefined} The layer extent.
   * @observable
   * @api
   */
  getExtent() {
    return (
      /** @type {import("../extent.js").Extent|undefined} */
      this.get(Ee.EXTENT)
    );
  }
  /**
   * Return the maximum resolution of the layer. Returns Infinity if
   * the layer has no maximum resolution set.
   * @return {number} The maximum resolution of the layer.
   * @observable
   * @api
   */
  getMaxResolution() {
    return (
      /** @type {number} */
      this.get(Ee.MAX_RESOLUTION)
    );
  }
  /**
   * Return the minimum resolution of the layer. Returns 0 if
   * the layer has no minimum resolution set.
   * @return {number} The minimum resolution of the layer.
   * @observable
   * @api
   */
  getMinResolution() {
    return (
      /** @type {number} */
      this.get(Ee.MIN_RESOLUTION)
    );
  }
  /**
   * Return the minimum zoom level of the layer. Returns -Infinity if
   * the layer has no minimum zoom set.
   * @return {number} The minimum zoom level of the layer.
   * @observable
   * @api
   */
  getMinZoom() {
    return (
      /** @type {number} */
      this.get(Ee.MIN_ZOOM)
    );
  }
  /**
   * Return the maximum zoom level of the layer. Returns Infinity if
   * the layer has no maximum zoom set.
   * @return {number} The maximum zoom level of the layer.
   * @observable
   * @api
   */
  getMaxZoom() {
    return (
      /** @type {number} */
      this.get(Ee.MAX_ZOOM)
    );
  }
  /**
   * Return the opacity of the layer (between 0 and 1).
   * @return {number} The opacity of the layer.
   * @observable
   * @api
   */
  getOpacity() {
    return (
      /** @type {number} */
      this.get(Ee.OPACITY)
    );
  }
  /**
   * @abstract
   * @return {import("../source/Source.js").State} Source state.
   */
  getSourceState() {
    return be();
  }
  /**
   * Return the value of this layer's `visible` property. To find out whether the layer
   * is visible on a map, use `isVisible()` instead.
   * @return {boolean} The value of the `visible` property of the layer.
   * @observable
   * @api
   */
  getVisible() {
    return (
      /** @type {boolean} */
      this.get(Ee.VISIBLE)
    );
  }
  /**
   * Return the Z-index of the layer, which is used to order layers before
   * rendering. Returns undefined if the layer is unmanaged.
   * @return {number|undefined} The Z-index of the layer.
   * @observable
   * @api
   */
  getZIndex() {
    return (
      /** @type {number|undefined} */
      this.get(Ee.Z_INDEX)
    );
  }
  /**
   * Sets the background color.
   * @param {BackgroundColor} [background] Background color.
   */
  setBackground(e) {
    this.background_ = e, this.changed();
  }
  /**
   * Set the extent at which the layer is visible.  If `undefined`, the layer
   * will be visible at all extents.
   * @param {import("../extent.js").Extent|undefined} extent The extent of the layer.
   * @observable
   * @api
   */
  setExtent(e) {
    this.set(Ee.EXTENT, e);
  }
  /**
   * Set the maximum resolution at which the layer is visible.
   * @param {number} maxResolution The maximum resolution of the layer.
   * @observable
   * @api
   */
  setMaxResolution(e) {
    this.set(Ee.MAX_RESOLUTION, e);
  }
  /**
   * Set the minimum resolution at which the layer is visible.
   * @param {number} minResolution The minimum resolution of the layer.
   * @observable
   * @api
   */
  setMinResolution(e) {
    this.set(Ee.MIN_RESOLUTION, e);
  }
  /**
   * Set the maximum zoom (exclusive) at which the layer is visible.
   * Note that the zoom levels for layer visibility are based on the
   * view zoom level, which may be different from a tile source zoom level.
   * @param {number} maxZoom The maximum zoom of the layer.
   * @observable
   * @api
   */
  setMaxZoom(e) {
    this.set(Ee.MAX_ZOOM, e);
  }
  /**
   * Set the minimum zoom (inclusive) at which the layer is visible.
   * Note that the zoom levels for layer visibility are based on the
   * view zoom level, which may be different from a tile source zoom level.
   * @param {number} minZoom The minimum zoom of the layer.
   * @observable
   * @api
   */
  setMinZoom(e) {
    this.set(Ee.MIN_ZOOM, e);
  }
  /**
   * Set the opacity of the layer, allowed values range from 0 to 1.
   * @param {number} opacity The opacity of the layer.
   * @observable
   * @api
   */
  setOpacity(e) {
    Se(typeof e == "number", "Layer opacity must be a number"), this.set(Ee.OPACITY, e);
  }
  /**
   * Set the visibility of the layer (`true` or `false`).
   * @param {boolean} visible The visibility of the layer.
   * @observable
   * @api
   */
  setVisible(e) {
    this.set(Ee.VISIBLE, e);
  }
  /**
   * Set Z-index of the layer, which is used to order layers before rendering.
   * The default Z-index is 0.
   * @param {number} zindex The z-index of the layer.
   * @observable
   * @api
   */
  setZIndex(e) {
    this.set(Ee.Z_INDEX, e);
  }
  /**
   * Clean up.
   */
  disposeInternal() {
    this.state_ && (this.state_.layer = null, this.state_ = null), super.disposeInternal();
  }
}
const Ef = $p, Ot = {
  /**
   * Triggered before a layer is rendered.
   * @event module:ol/render/Event~RenderEvent#prerender
   * @api
   */
  PRERENDER: "prerender",
  /**
   * Triggered after a layer is rendered.
   * @event module:ol/render/Event~RenderEvent#postrender
   * @api
   */
  POSTRENDER: "postrender",
  /**
   * Triggered before layers are composed.  When dispatched by the map, the event object will not have
   * a `context` set.  When dispatched by a layer, the event object will have a `context` set.  Only
   * WebGL layers currently dispatch this event.
   * @event module:ol/render/Event~RenderEvent#precompose
   * @api
   */
  PRECOMPOSE: "precompose",
  /**
   * Triggered after layers are composed.  When dispatched by the map, the event object will not have
   * a `context` set.  When dispatched by a layer, the event object will have a `context` set.  Only
   * WebGL layers currently dispatch this event.
   * @event module:ol/render/Event~RenderEvent#postcompose
   * @api
   */
  POSTCOMPOSE: "postcompose",
  /**
   * Triggered when rendering is complete, i.e. all sources and tiles have
   * finished loading for the current viewport, and all tiles are faded in.
   * The event object will not have a `context` set.
   * @event module:ol/render/Event~RenderEvent#rendercomplete
   * @api
   */
  RENDERCOMPLETE: "rendercomplete"
}, lt = {
  ANIMATING: 0,
  INTERACTING: 1
}, Ut = {
  CENTER: "center",
  RESOLUTION: "resolution",
  ROTATION: "rotation"
}, Wp = 42, Wl = 256, Ha = {
  // use the radius of the Normal sphere
  radians: 6370997 / (2 * Math.PI),
  degrees: 2 * Math.PI * 6370997 / 360,
  ft: 0.3048,
  m: 1,
  "us-ft": 1200 / 3937
};
class Up {
  /**
   * @param {Options} options Projection options.
   */
  constructor(e) {
    this.code_ = e.code, this.units_ = /** @type {import("./Units.js").Units} */
    e.units, this.extent_ = e.extent !== void 0 ? e.extent : null, this.worldExtent_ = e.worldExtent !== void 0 ? e.worldExtent : null, this.axisOrientation_ = e.axisOrientation !== void 0 ? e.axisOrientation : "enu", this.global_ = e.global !== void 0 ? e.global : !1, this.canWrapX_ = !!(this.global_ && this.extent_), this.getPointResolutionFunc_ = e.getPointResolution, this.defaultTileGrid_ = null, this.metersPerUnit_ = e.metersPerUnit;
  }
  /**
   * @return {boolean} The projection is suitable for wrapping the x-axis
   */
  canWrapX() {
    return this.canWrapX_;
  }
  /**
   * Get the code for this projection, e.g. 'EPSG:4326'.
   * @return {string} Code.
   * @api
   */
  getCode() {
    return this.code_;
  }
  /**
   * Get the validity extent for this projection.
   * @return {import("../extent.js").Extent} Extent.
   * @api
   */
  getExtent() {
    return this.extent_;
  }
  /**
   * Get the units of this projection.
   * @return {import("./Units.js").Units} Units.
   * @api
   */
  getUnits() {
    return this.units_;
  }
  /**
   * Get the amount of meters per unit of this projection.  If the projection is
   * not configured with `metersPerUnit` or a units identifier, the return is
   * `undefined`.
   * @return {number|undefined} Meters.
   * @api
   */
  getMetersPerUnit() {
    return this.metersPerUnit_ || Ha[this.units_];
  }
  /**
   * Get the world extent for this projection.
   * @return {import("../extent.js").Extent} Extent.
   * @api
   */
  getWorldExtent() {
    return this.worldExtent_;
  }
  /**
   * Get the axis orientation of this projection.
   * Example values are:
   * enu - the default easting, northing, elevation.
   * neu - northing, easting, up - useful for "lat/long" geographic coordinates,
   *     or south orientated transverse mercator.
   * wnu - westing, northing, up - some planetary coordinate systems have
   *     "west positive" coordinate systems
   * @return {string} Axis orientation.
   * @api
   */
  getAxisOrientation() {
    return this.axisOrientation_;
  }
  /**
   * Is this projection a global projection which spans the whole world?
   * @return {boolean} Whether the projection is global.
   * @api
   */
  isGlobal() {
    return this.global_;
  }
  /**
   * Set if the projection is a global projection which spans the whole world
   * @param {boolean} global Whether the projection is global.
   * @api
   */
  setGlobal(e) {
    this.global_ = e, this.canWrapX_ = !!(e && this.extent_);
  }
  /**
   * @return {import("../tilegrid/TileGrid.js").default} The default tile grid.
   */
  getDefaultTileGrid() {
    return this.defaultTileGrid_;
  }
  /**
   * @param {import("../tilegrid/TileGrid.js").default} tileGrid The default tile grid.
   */
  setDefaultTileGrid(e) {
    this.defaultTileGrid_ = e;
  }
  /**
   * Set the validity extent for this projection.
   * @param {import("../extent.js").Extent} extent Extent.
   * @api
   */
  setExtent(e) {
    this.extent_ = e, this.canWrapX_ = !!(this.global_ && e);
  }
  /**
   * Set the world extent for this projection.
   * @param {import("../extent.js").Extent} worldExtent World extent
   *     [minlon, minlat, maxlon, maxlat].
   * @api
   */
  setWorldExtent(e) {
    this.worldExtent_ = e;
  }
  /**
   * Set the getPointResolution function (see {@link module:ol/proj.getPointResolution}
   * for this projection.
   * @param {function(number, import("../coordinate.js").Coordinate):number} func Function
   * @api
   */
  setGetPointResolution(e) {
    this.getPointResolutionFunc_ = e;
  }
  /**
   * Get the custom point resolution function for this projection (if set).
   * @return {function(number, import("../coordinate.js").Coordinate):number|undefined} The custom point
   * resolution function (if set).
   */
  getPointResolutionFunc() {
    return this.getPointResolutionFunc_;
  }
}
const Af = Up, Po = 6378137, Qi = Math.PI * Po, Xp = [-Qi, -Qi, Qi, Qi], Yp = [-180, -85, 180, 85], Oo = Po * Math.log(Math.tan(Math.PI / 2));
class Ni extends Af {
  /**
   * @param {string} code Code.
   */
  constructor(e) {
    super({
      code: e,
      units: "m",
      extent: Xp,
      global: !0,
      worldExtent: Yp,
      getPointResolution: function(n, i) {
        return n / Math.cosh(i[1] / Po);
      }
    });
  }
}
const Vu = [
  new Ni("EPSG:3857"),
  new Ni("EPSG:102100"),
  new Ni("EPSG:102113"),
  new Ni("EPSG:900913"),
  new Ni("http://www.opengis.net/def/crs/EPSG/0/3857"),
  new Ni("http://www.opengis.net/gml/srs/epsg.xml#3857")
];
function jp(t, e, n) {
  const i = t.length;
  n = n > 1 ? n : 2, e === void 0 && (n > 2 ? e = t.slice() : e = new Array(i));
  for (let a = 0; a < i; a += n) {
    e[a] = Qi * t[a] / 180;
    let o = Po * Math.log(Math.tan(Math.PI * (+t[a + 1] + 90) / 360));
    o > Oo ? o = Oo : o < -Oo && (o = -Oo), e[a + 1] = o;
  }
  return e;
}
function Zp(t, e, n) {
  const i = t.length;
  n = n > 1 ? n : 2, e === void 0 && (n > 2 ? e = t.slice() : e = new Array(i));
  for (let a = 0; a < i; a += n)
    e[a] = 180 * t[a] / Qi, e[a + 1] = 360 * Math.atan(Math.exp(t[a + 1] / Po)) / Math.PI - 90;
  return e;
}
const Hp = 6378137, Bu = [-180, -90, 180, 90], Kp = Math.PI * Hp / 180;
class _i extends Af {
  /**
   * @param {string} code Code.
   * @param {string} [axisOrientation] Axis orientation.
   */
  constructor(e, n) {
    super({
      code: e,
      units: "degrees",
      extent: Bu,
      axisOrientation: n,
      global: !0,
      metersPerUnit: Kp,
      worldExtent: Bu
    });
  }
}
const Fu = [
  new _i("CRS:84"),
  new _i("EPSG:4326", "neu"),
  new _i("urn:ogc:def:crs:OGC:1.3:CRS84"),
  new _i("urn:ogc:def:crs:OGC:2:84"),
  new _i("http://www.opengis.net/def/crs/OGC/1.3/CRS84"),
  new _i("http://www.opengis.net/gml/srs/epsg.xml#4326", "neu"),
  new _i("http://www.opengis.net/def/crs/EPSG/0/4326", "neu")
];
let Os = {};
function qp(t) {
  return Os[t] || Os[t.replace(/urn:(x-)?ogc:def:crs:EPSG:(.*:)?(\w+)$/, "EPSG:$3")] || null;
}
function Jp(t, e) {
  Os[t] = e;
}
let aa = {};
function lr(t, e, n) {
  const i = t.getCode(), a = e.getCode();
  i in aa || (aa[i] = {}), aa[i][a] = n;
}
function Qp(t, e) {
  let n;
  return t in aa && e in aa[t] && (n = aa[t][e]), n;
}
const qe = {
  UNKNOWN: 0,
  INTERSECTING: 1,
  ABOVE: 2,
  RIGHT: 4,
  BELOW: 8,
  LEFT: 16
};
function ku(t) {
  const e = Gt();
  for (let n = 0, i = t.length; n < i; ++n)
    Da(e, t[n]);
  return e;
}
function Ul(t, e, n) {
  return n ? (n[0] = t[0] - e, n[1] = t[1] - e, n[2] = t[2] + e, n[3] = t[3] + e, n) : [
    t[0] - e,
    t[1] - e,
    t[2] + e,
    t[3] + e
  ];
}
function Rf(t, e) {
  return e ? (e[0] = t[0], e[1] = t[1], e[2] = t[2], e[3] = t[3], e) : t.slice();
}
function If(t, e, n) {
  let i, a;
  return e < t[0] ? i = t[0] - e : t[2] < e ? i = e - t[2] : i = 0, n < t[1] ? a = t[1] - n : t[3] < n ? a = n - t[3] : a = 0, i * i + a * a;
}
function da(t, e) {
  return zf(t, e[0], e[1]);
}
function ea(t, e) {
  return t[0] <= e[0] && e[2] <= t[2] && t[1] <= e[1] && e[3] <= t[3];
}
function zf(t, e, n) {
  return t[0] <= e && e <= t[2] && t[1] <= n && n <= t[3];
}
function Ds(t, e) {
  const n = t[0], i = t[1], a = t[2], o = t[3], r = e[0], s = e[1];
  let l = qe.UNKNOWN;
  return r < n ? l = l | qe.LEFT : r > a && (l = l | qe.RIGHT), s < i ? l = l | qe.BELOW : s > o && (l = l | qe.ABOVE), l === qe.UNKNOWN && (l = qe.INTERSECTING), l;
}
function Gt() {
  return [1 / 0, 1 / 0, -1 / 0, -1 / 0];
}
function li(t, e, n, i, a) {
  return a ? (a[0] = t, a[1] = e, a[2] = n, a[3] = i, a) : [t, e, n, i];
}
function Lr(t) {
  return li(1 / 0, 1 / 0, -1 / 0, -1 / 0, t);
}
function Lf(t, e) {
  const n = t[0], i = t[1];
  return li(n, i, n, i, e);
}
function Xl(t, e, n, i, a) {
  const o = Lr(a);
  return Vf(o, t, e, n, i);
}
function Ka(t, e) {
  return t[0] == e[0] && t[2] == e[2] && t[1] == e[1] && t[3] == e[3];
}
function e_(t, e) {
  return e[0] < t[0] && (t[0] = e[0]), e[2] > t[2] && (t[2] = e[2]), e[1] < t[1] && (t[1] = e[1]), e[3] > t[3] && (t[3] = e[3]), t;
}
function Da(t, e) {
  e[0] < t[0] && (t[0] = e[0]), e[0] > t[2] && (t[2] = e[0]), e[1] < t[1] && (t[1] = e[1]), e[1] > t[3] && (t[3] = e[1]);
}
function Vf(t, e, n, i, a) {
  for (; n < i; n += a)
    t_(t, e[n], e[n + 1]);
  return t;
}
function t_(t, e, n) {
  t[0] = Math.min(t[0], e), t[1] = Math.min(t[1], n), t[2] = Math.max(t[2], e), t[3] = Math.max(t[3], n);
}
function Bf(t, e) {
  let n;
  return n = e(Vr(t)), n || (n = e(Br(t)), n) || (n = e(Fr(t)), n) || (n = e(Vi(t)), n) ? n : !1;
}
function Gs(t) {
  let e = 0;
  return kr(t) || (e = Re(t) * ut(t)), e;
}
function Vr(t) {
  return [t[0], t[1]];
}
function Br(t) {
  return [t[2], t[1]];
}
function zi(t) {
  return [(t[0] + t[2]) / 2, (t[1] + t[3]) / 2];
}
function n_(t, e) {
  let n;
  if (e === "bottom-left")
    n = Vr(t);
  else if (e === "bottom-right")
    n = Br(t);
  else if (e === "top-left")
    n = Vi(t);
  else if (e === "top-right")
    n = Fr(t);
  else
    throw new Error("Invalid corner");
  return n;
}
function Ns(t, e, n, i, a) {
  const [o, r, s, l, c, u, d, h] = $s(
    t,
    e,
    n,
    i
  );
  return li(
    Math.min(o, s, c, d),
    Math.min(r, l, u, h),
    Math.max(o, s, c, d),
    Math.max(r, l, u, h),
    a
  );
}
function $s(t, e, n, i) {
  const a = e * i[0] / 2, o = e * i[1] / 2, r = Math.cos(n), s = Math.sin(n), l = a * r, c = a * s, u = o * r, d = o * s, h = t[0], f = t[1];
  return [
    h - l + d,
    f - c - u,
    h - l - d,
    f - c + u,
    h + l - d,
    f + c + u,
    h + l + d,
    f + c - u,
    h - l + d,
    f - c - u
  ];
}
function ut(t) {
  return t[3] - t[1];
}
function Ga(t, e, n) {
  const i = n || Gt();
  return Mt(t, e) ? (t[0] > e[0] ? i[0] = t[0] : i[0] = e[0], t[1] > e[1] ? i[1] = t[1] : i[1] = e[1], t[2] < e[2] ? i[2] = t[2] : i[2] = e[2], t[3] < e[3] ? i[3] = t[3] : i[3] = e[3]) : Lr(i), i;
}
function Vi(t) {
  return [t[0], t[3]];
}
function Fr(t) {
  return [t[2], t[3]];
}
function Re(t) {
  return t[2] - t[0];
}
function Mt(t, e) {
  return t[0] <= e[2] && t[2] >= e[0] && t[1] <= e[3] && t[3] >= e[1];
}
function kr(t) {
  return t[2] < t[0] || t[3] < t[1];
}
function i_(t, e) {
  return e ? (e[0] = t[0], e[1] = t[1], e[2] = t[2], e[3] = t[3], e) : t;
}
function a_(t, e, n) {
  let i = !1;
  const a = Ds(t, e), o = Ds(t, n);
  if (a === qe.INTERSECTING || o === qe.INTERSECTING)
    i = !0;
  else {
    const r = t[0], s = t[1], l = t[2], c = t[3], u = e[0], d = e[1], h = n[0], f = n[1], g = (f - d) / (h - u);
    let m, v;
    o & qe.ABOVE && !(a & qe.ABOVE) && (m = h - (f - c) / g, i = m >= r && m <= l), !i && o & qe.RIGHT && !(a & qe.RIGHT) && (v = f - (h - l) * g, i = v >= s && v <= c), !i && o & qe.BELOW && !(a & qe.BELOW) && (m = h - (f - s) / g, i = m >= r && m <= l), !i && o & qe.LEFT && !(a & qe.LEFT) && (v = f - (h - r) * g, i = v >= s && v <= c);
  }
  return i;
}
function Ff(t, e) {
  const n = e.getExtent(), i = zi(t);
  if (e.canWrapX() && (i[0] < n[0] || i[0] >= n[2])) {
    const a = Re(n), r = Math.floor(
      (i[0] - n[0]) / a
    ) * a;
    t[0] -= r, t[2] -= r;
  }
  return t;
}
function o_(t, e) {
  if (e.canWrapX()) {
    const n = e.getExtent();
    if (!isFinite(t[0]) || !isFinite(t[2]))
      return [[n[0], t[1], n[2], t[3]]];
    Ff(t, e);
    const i = Re(n);
    if (Re(t) > i)
      return [[n[0], t[1], n[2], t[3]]];
    if (t[0] < n[0])
      return [
        [t[0] + i, t[1], n[2], t[3]],
        [n[0], t[1], t[2], t[3]]
      ];
    if (t[2] > n[2])
      return [
        [t[0], t[1], n[2], t[3]],
        [n[0], t[1], t[2] - i, t[3]]
      ];
  }
  return [t];
}
function r_(t, e) {
  return t[0] += +e[0], t[1] += +e[1], t;
}
function cr(t, e) {
  let n = !0;
  for (let i = t.length - 1; i >= 0; --i)
    if (t[i] != e[i]) {
      n = !1;
      break;
    }
  return n;
}
function Yl(t, e) {
  const n = Math.cos(e), i = Math.sin(e), a = t[0] * n - t[1] * i, o = t[1] * n + t[0] * i;
  return t[0] = a, t[1] = o, t;
}
function s_(t, e) {
  return t[0] *= e, t[1] *= e, t;
}
function kf(t, e) {
  if (e.canWrapX()) {
    const n = Re(e.getExtent()), i = l_(t, e, n);
    i && (t[0] -= i * n);
  }
  return t;
}
function l_(t, e, n) {
  const i = e.getExtent();
  let a = 0;
  return e.canWrapX() && (t[0] < i[0] || t[0] > i[2]) && (n = n || Re(i), a = Math.floor(
    (t[0] - i[0]) / n
  )), a;
}
const c_ = 63710088e-1;
function Ou(t, e, n) {
  n = n || c_;
  const i = Ho(t[1]), a = Ho(e[1]), o = (a - i) / 2, r = Ho(e[0] - t[0]) / 2, s = Math.sin(o) * Math.sin(o) + Math.sin(r) * Math.sin(r) * Math.cos(i) * Math.cos(a);
  return 2 * n * Math.atan2(Math.sqrt(s), Math.sqrt(1 - s));
}
const Of = {
  info: 1,
  warn: 2,
  error: 3,
  none: 4
};
let u_ = Of.info;
function Df(...t) {
  u_ > Of.warn || console.warn(...t);
}
let Ws = !0;
function Gf(t) {
  Ws = !(t === void 0 ? !0 : t);
}
function jl(t, e) {
  if (e !== void 0) {
    for (let n = 0, i = t.length; n < i; ++n)
      e[n] = t[n];
    e = e;
  } else
    e = t.slice();
  return e;
}
function Nf(t, e) {
  if (e !== void 0 && t !== e) {
    for (let n = 0, i = t.length; n < i; ++n)
      e[n] = t[n];
    t = e;
  }
  return t;
}
function d_(t) {
  Jp(t.getCode(), t), lr(t, t, jl);
}
function h_(t) {
  t.forEach(d_);
}
function Nt(t) {
  return typeof t == "string" ? qp(
    /** @type {string} */
    t
  ) : (
    /** @type {Projection} */
    t || null
  );
}
function Du(t, e, n, i) {
  t = Nt(t);
  let a;
  const o = t.getPointResolutionFunc();
  if (o) {
    if (a = o(e, n), i && i !== t.getUnits()) {
      const r = t.getMetersPerUnit();
      r && (a = a * r / Ha[i]);
    }
  } else {
    const r = t.getUnits();
    if (r == "degrees" && !i || i == "degrees")
      a = e;
    else {
      const s = Or(
        t,
        Nt("EPSG:4326")
      );
      if (s === Nf && r !== "degrees")
        a = e * t.getMetersPerUnit();
      else {
        let c = [
          n[0] - e / 2,
          n[1],
          n[0] + e / 2,
          n[1],
          n[0],
          n[1] - e / 2,
          n[0],
          n[1] + e / 2
        ];
        c = s(c, c, 2);
        const u = Ou(c.slice(0, 2), c.slice(2, 4)), d = Ou(c.slice(4, 6), c.slice(6, 8));
        a = (u + d) / 2;
      }
      const l = i ? Ha[i] : t.getMetersPerUnit();
      l !== void 0 && (a /= l);
    }
  }
  return a;
}
function Gu(t) {
  h_(t), t.forEach(function(e) {
    t.forEach(function(n) {
      e !== n && lr(e, n, jl);
    });
  });
}
function f_(t, e, n, i) {
  t.forEach(function(a) {
    e.forEach(function(o) {
      lr(a, o, n), lr(o, a, i);
    });
  });
}
function Zl(t, e) {
  return t ? typeof t == "string" ? Nt(t) : (
    /** @type {Projection} */
    t
  ) : Nt(e);
}
function Nu(t, e) {
  return Gf(), $f(
    t,
    "EPSG:4326",
    e !== void 0 ? e : "EPSG:3857"
  );
}
function Yi(t, e) {
  if (t === e)
    return !0;
  const n = t.getUnits() === e.getUnits();
  return (t.getCode() === e.getCode() || Or(t, e) === jl) && n;
}
function Or(t, e) {
  const n = t.getCode(), i = e.getCode();
  let a = Qp(n, i);
  return a || (a = Nf), a;
}
function ur(t, e) {
  const n = Nt(t), i = Nt(e);
  return Or(n, i);
}
function $f(t, e, n) {
  return ur(e, n)(t, void 0, t.length);
}
let g_ = null;
function m_() {
  return g_;
}
function Us(t, e) {
  return t;
}
function Ln(t, e) {
  return Ws && !cr(t, [0, 0]) && t[0] >= -180 && t[0] <= 180 && t[1] >= -90 && t[1] <= 90 && (Ws = !1, Df(
    "Call useGeographic() from ol/proj once to work with [longitude, latitude] coordinates."
  )), t;
}
function Hl(t, e) {
  return t;
}
function xi(t, e) {
  return t;
}
function v_() {
  Gu(Vu), Gu(Fu), f_(
    Fu,
    Vu,
    jp,
    Zp
  );
}
v_();
function $u(t, e, n) {
  return (
    /**
     * @param {import("./coordinate.js").Coordinate|undefined} center Center.
     * @param {number|undefined} resolution Resolution.
     * @param {import("./size.js").Size} size Viewport size; unused if `onlyCenter` was specified.
     * @param {boolean} [isMoving] True if an interaction or animation is in progress.
     * @param {Array<number>} [centerShift] Shift between map center and viewport center.
     * @return {import("./coordinate.js").Coordinate|undefined} Center.
     */
    function(i, a, o, r, s) {
      if (!i)
        return;
      if (!a && !e)
        return i;
      const l = e ? 0 : o[0] * a, c = e ? 0 : o[1] * a, u = s ? s[0] : 0, d = s ? s[1] : 0;
      let h = t[0] + l / 2 + u, f = t[2] - l / 2 + u, g = t[1] + c / 2 + d, m = t[3] - c / 2 + d;
      h > f && (h = (f + h) / 2, f = h), g > m && (g = (m + g) / 2, m = g);
      let v = Ye(i[0], h, f), y = Ye(i[1], g, m);
      if (r && n && a) {
        const p = 30 * a;
        v += -p * Math.log(1 + Math.max(0, h - i[0]) / p) + p * Math.log(1 + Math.max(0, i[0] - f) / p), y += -p * Math.log(1 + Math.max(0, g - i[1]) / p) + p * Math.log(1 + Math.max(0, i[1] - m) / p);
      }
      return [v, y];
    }
  );
}
function C_(t) {
  return t;
}
function Kl(t, e, n, i) {
  const a = Re(e) / n[0], o = ut(e) / n[1];
  return i ? Math.min(t, Math.max(a, o)) : Math.min(t, Math.min(a, o));
}
function ql(t, e, n) {
  let i = Math.min(t, e);
  const a = 50;
  return i *= Math.log(1 + a * Math.max(0, t / e - 1)) / a + 1, n && (i = Math.max(i, n), i /= Math.log(1 + a * Math.max(0, n / t - 1)) / a + 1), Ye(i, n / 2, e * 2);
}
function y_(t, e, n, i) {
  return e = e !== void 0 ? e : !0, /**
   * @param {number|undefined} resolution Resolution.
   * @param {number} direction Direction.
   * @param {import("./size.js").Size} size Viewport size.
   * @param {boolean} [isMoving] True if an interaction or animation is in progress.
   * @return {number|undefined} Resolution.
   */
  function(a, o, r, s) {
    if (a !== void 0) {
      const l = t[0], c = t[t.length - 1], u = n ? Kl(
        l,
        n,
        r,
        i
      ) : l;
      if (s)
        return e ? ql(
          a,
          u,
          c
        ) : Ye(a, c, u);
      const d = Math.min(u, a), h = Math.floor(Gl(t, d, o));
      return t[h] > u && h < t.length - 1 ? t[h + 1] : t[h];
    }
  };
}
function p_(t, e, n, i, a, o) {
  return i = i !== void 0 ? i : !0, n = n !== void 0 ? n : 0, /**
   * @param {number|undefined} resolution Resolution.
   * @param {number} direction Direction.
   * @param {import("./size.js").Size} size Viewport size.
   * @param {boolean} [isMoving] True if an interaction or animation is in progress.
   * @return {number|undefined} Resolution.
   */
  function(r, s, l, c) {
    if (r !== void 0) {
      const u = a ? Kl(
        e,
        a,
        l,
        o
      ) : e;
      if (c)
        return i ? ql(
          r,
          u,
          n
        ) : Ye(r, n, u);
      const d = 1e-9, h = Math.ceil(
        Math.log(e / u) / Math.log(t) - d
      ), f = -s * (0.5 - d) + 0.5, g = Math.min(u, r), m = Math.floor(
        Math.log(e / g) / Math.log(t) + f
      ), v = Math.max(h, m), y = e / Math.pow(t, v);
      return Ye(y, n, u);
    }
  };
}
function Wu(t, e, n, i, a) {
  return n = n !== void 0 ? n : !0, /**
   * @param {number|undefined} resolution Resolution.
   * @param {number} direction Direction.
   * @param {import("./size.js").Size} size Viewport size.
   * @param {boolean} [isMoving] True if an interaction or animation is in progress.
   * @return {number|undefined} Resolution.
   */
  function(o, r, s, l) {
    if (o !== void 0) {
      const c = i ? Kl(
        t,
        i,
        s,
        a
      ) : t;
      return !n || !l ? Ye(o, e, c) : ql(
        o,
        c,
        e
      );
    }
  };
}
function Jl(t) {
  if (t !== void 0)
    return 0;
}
function Uu(t) {
  if (t !== void 0)
    return t;
}
function __(t) {
  const e = 2 * Math.PI / t;
  return (
    /**
     * @param {number|undefined} rotation Rotation.
     * @param {boolean} [isMoving] True if an interaction or animation is in progress.
     * @return {number|undefined} Rotation.
     */
    function(n, i) {
      if (i)
        return n;
      if (n !== void 0)
        return n = Math.floor(n / e + 0.5) * e, n;
    }
  );
}
function S_(t) {
  const e = t === void 0 ? Ho(5) : t;
  return (
    /**
     * @param {number|undefined} rotation Rotation.
     * @param {boolean} [isMoving] True if an interaction or animation is in progress.
     * @return {number|undefined} Rotation.
     */
    function(n, i) {
      return i || n === void 0 ? n : Math.abs(n) <= e ? 0 : n;
    }
  );
}
function Wf(t) {
  return Math.pow(t, 3);
}
function Ma(t) {
  return 1 - Wf(1 - t);
}
function b_(t) {
  return 3 * t * t - 2 * t * t * t;
}
function M_(t) {
  return t;
}
new Array(6);
function Zt() {
  return [1, 0, 0, 1, 0, 0];
}
function x_(t, e) {
  return t[0] = e[0], t[1] = e[1], t[2] = e[2], t[3] = e[3], t[4] = e[4], t[5] = e[5], t;
}
function Je(t, e) {
  const n = e[0], i = e[1];
  return e[0] = t[0] * n + t[2] * i + t[4], e[1] = t[1] * n + t[3] * i + t[5], e;
}
function Cn(t, e, n, i, a, o, r, s) {
  const l = Math.sin(o), c = Math.cos(o);
  return t[0] = i * c, t[1] = a * l, t[2] = -i * l, t[3] = a * c, t[4] = r * i * c - s * i * l + e, t[5] = r * a * l + s * a * c + n, t;
}
function Ql(t, e) {
  const n = P_(e);
  Se(n !== 0, "Transformation matrix cannot be inverted");
  const i = e[0], a = e[1], o = e[2], r = e[3], s = e[4], l = e[5];
  return t[0] = r / n, t[1] = -a / n, t[2] = -o / n, t[3] = i / n, t[4] = (o * l - r * s) / n, t[5] = -(i * l - a * s) / n, t;
}
function P_(t) {
  return t[0] * t[3] - t[1] * t[2];
}
const Xu = [1e6, 1e6, 1e6, 1e6, 2, 2];
function Uf(t) {
  return "matrix(" + t.map(
    (n, i) => Math.round(n * Xu[i]) / Xu[i]
  ).join(", ") + ")";
}
function oi(t, e, n, i, a, o) {
  o = o || [];
  let r = 0;
  for (let s = e; s < n; s += i) {
    const l = t[s], c = t[s + 1];
    o[r++] = a[0] * l + a[2] * c + a[4], o[r++] = a[1] * l + a[3] * c + a[5];
  }
  return o && o.length != r && (o.length = r), o;
}
function Xf(t, e, n, i, a, o, r) {
  r = r || [];
  const s = Math.cos(a), l = Math.sin(a), c = o[0], u = o[1];
  let d = 0;
  for (let h = e; h < n; h += i) {
    const f = t[h] - c, g = t[h + 1] - u;
    r[d++] = c + f * s - g * l, r[d++] = u + f * l + g * s;
    for (let m = h + 2; m < h + i; ++m)
      r[d++] = t[m];
  }
  return r && r.length != d && (r.length = d), r;
}
function T_(t, e, n, i, a, o, r, s) {
  s = s || [];
  const l = r[0], c = r[1];
  let u = 0;
  for (let d = e; d < n; d += i) {
    const h = t[d] - l, f = t[d + 1] - c;
    s[u++] = l + a * h, s[u++] = c + o * f;
    for (let g = d + 2; g < d + i; ++g)
      s[u++] = t[g];
  }
  return s && s.length != u && (s.length = u), s;
}
function w_(t, e, n, i, a, o, r) {
  r = r || [];
  let s = 0;
  for (let l = e; l < n; l += i) {
    r[s++] = t[l] + a, r[s++] = t[l + 1] + o;
    for (let c = l + 2; c < l + i; ++c)
      r[s++] = t[c];
  }
  return r && r.length != s && (r.length = s), r;
}
const Yu = Zt();
class E_ extends xn {
  constructor() {
    super(), this.extent_ = Gt(), this.extentRevision_ = -1, this.simplifiedGeometryMaxMinSquaredTolerance = 0, this.simplifiedGeometryRevision = 0, this.simplifyTransformedInternal = Tf(
      (e, n, i) => {
        if (!i)
          return this.getSimplifiedGeometry(n);
        const a = this.clone();
        return a.applyTransform(i), a.getSimplifiedGeometry(n);
      }
    );
  }
  /**
   * Get a transformed and simplified version of the geometry.
   * @abstract
   * @param {number} squaredTolerance Squared tolerance.
   * @param {import("../proj.js").TransformFunction} [transform] Optional transform function.
   * @return {Geometry} Simplified geometry.
   */
  simplifyTransformed(e, n) {
    return this.simplifyTransformedInternal(
      this.getRevision(),
      e,
      n
    );
  }
  /**
   * Make a complete copy of the geometry.
   * @abstract
   * @return {!Geometry} Clone.
   */
  clone() {
    return be();
  }
  /**
   * @abstract
   * @param {number} x X.
   * @param {number} y Y.
   * @param {import("../coordinate.js").Coordinate} closestPoint Closest point.
   * @param {number} minSquaredDistance Minimum squared distance.
   * @return {number} Minimum squared distance.
   */
  closestPointXY(e, n, i, a) {
    return be();
  }
  /**
   * @param {number} x X.
   * @param {number} y Y.
   * @return {boolean} Contains (x, y).
   */
  containsXY(e, n) {
    const i = this.getClosestPoint([e, n]);
    return i[0] === e && i[1] === n;
  }
  /**
   * Return the closest point of the geometry to the passed point as
   * {@link module:ol/coordinate~Coordinate coordinate}.
   * @param {import("../coordinate.js").Coordinate} point Point.
   * @param {import("../coordinate.js").Coordinate} [closestPoint] Closest point.
   * @return {import("../coordinate.js").Coordinate} Closest point.
   * @api
   */
  getClosestPoint(e, n) {
    return n = n || [NaN, NaN], this.closestPointXY(e[0], e[1], n, 1 / 0), n;
  }
  /**
   * Returns true if this geometry includes the specified coordinate. If the
   * coordinate is on the boundary of the geometry, returns false.
   * @param {import("../coordinate.js").Coordinate} coordinate Coordinate.
   * @return {boolean} Contains coordinate.
   * @api
   */
  intersectsCoordinate(e) {
    return this.containsXY(e[0], e[1]);
  }
  /**
   * @abstract
   * @param {import("../extent.js").Extent} extent Extent.
   * @protected
   * @return {import("../extent.js").Extent} extent Extent.
   */
  computeExtent(e) {
    return be();
  }
  /**
   * Get the extent of the geometry.
   * @param {import("../extent.js").Extent} [extent] Extent.
   * @return {import("../extent.js").Extent} extent Extent.
   * @api
   */
  getExtent(e) {
    if (this.extentRevision_ != this.getRevision()) {
      const n = this.computeExtent(this.extent_);
      (isNaN(n[0]) || isNaN(n[1])) && Lr(n), this.extentRevision_ = this.getRevision();
    }
    return i_(this.extent_, e);
  }
  /**
   * Rotate the geometry around a given coordinate. This modifies the geometry
   * coordinates in place.
   * @abstract
   * @param {number} angle Rotation angle in radians.
   * @param {import("../coordinate.js").Coordinate} anchor The rotation center.
   * @api
   */
  rotate(e, n) {
    be();
  }
  /**
   * Scale the geometry (with an optional origin).  This modifies the geometry
   * coordinates in place.
   * @abstract
   * @param {number} sx The scaling factor in the x-direction.
   * @param {number} [sy] The scaling factor in the y-direction (defaults to sx).
   * @param {import("../coordinate.js").Coordinate} [anchor] The scale origin (defaults to the center
   *     of the geometry extent).
   * @api
   */
  scale(e, n, i) {
    be();
  }
  /**
   * Create a simplified version of this geometry.  For linestrings, this uses
   * the [Douglas Peucker](https://en.wikipedia.org/wiki/Ramer-Douglas-Peucker_algorithm)
   * algorithm.  For polygons, a quantization-based
   * simplification is used to preserve topology.
   * @param {number} tolerance The tolerance distance for simplification.
   * @return {Geometry} A new, simplified version of the original geometry.
   * @api
   */
  simplify(e) {
    return this.getSimplifiedGeometry(e * e);
  }
  /**
   * Create a simplified version of this geometry using the Douglas Peucker
   * algorithm.
   * See https://en.wikipedia.org/wiki/Ramer-Douglas-Peucker_algorithm.
   * @abstract
   * @param {number} squaredTolerance Squared tolerance.
   * @return {Geometry} Simplified geometry.
   */
  getSimplifiedGeometry(e) {
    return be();
  }
  /**
   * Get the type of this geometry.
   * @abstract
   * @return {Type} Geometry type.
   */
  getType() {
    return be();
  }
  /**
   * Apply a transform function to the coordinates of the geometry.
   * The geometry is modified in place.
   * If you do not want the geometry modified in place, first `clone()` it and
   * then use this function on the clone.
   * @abstract
   * @param {import("../proj.js").TransformFunction} transformFn Transform function.
   * Called with a flat array of geometry coordinates.
   */
  applyTransform(e) {
    be();
  }
  /**
   * Test if the geometry and the passed extent intersect.
   * @abstract
   * @param {import("../extent.js").Extent} extent Extent.
   * @return {boolean} `true` if the geometry and the extent intersect.
   */
  intersectsExtent(e) {
    return be();
  }
  /**
   * Translate the geometry.  This modifies the geometry coordinates in place.  If
   * instead you want a new geometry, first `clone()` this geometry.
   * @abstract
   * @param {number} deltaX Delta X.
   * @param {number} deltaY Delta Y.
   * @api
   */
  translate(e, n) {
    be();
  }
  /**
   * Transform each coordinate of the geometry from one coordinate reference
   * system to another. The geometry is modified in place.
   * For example, a line will be transformed to a line and a circle to a circle.
   * If you do not want the geometry modified in place, first `clone()` it and
   * then use this function on the clone.
   *
   * @param {import("../proj.js").ProjectionLike} source The current projection.  Can be a
   *     string identifier or a {@link module:ol/proj/Projection~Projection} object.
   * @param {import("../proj.js").ProjectionLike} destination The desired projection.  Can be a
   *     string identifier or a {@link module:ol/proj/Projection~Projection} object.
   * @return {this} This geometry.  Note that original geometry is
   *     modified in place.
   * @api
   */
  transform(e, n) {
    const i = Nt(e), a = i.getUnits() == "tile-pixels" ? function(o, r, s) {
      const l = i.getExtent(), c = i.getWorldExtent(), u = ut(c) / ut(l);
      return Cn(
        Yu,
        c[0],
        c[3],
        u,
        -u,
        0,
        0,
        0
      ), oi(
        o,
        0,
        o.length,
        s,
        Yu,
        r
      ), ur(i, n)(
        o,
        r,
        s
      );
    } : ur(i, n);
    return this.applyTransform(a), this;
  }
}
const A_ = E_;
class R_ extends A_ {
  constructor() {
    super(), this.layout = "XY", this.stride = 2, this.flatCoordinates;
  }
  /**
   * @param {import("../extent.js").Extent} extent Extent.
   * @protected
   * @return {import("../extent.js").Extent} extent Extent.
   */
  computeExtent(e) {
    return Xl(
      this.flatCoordinates,
      0,
      this.flatCoordinates.length,
      this.stride,
      e
    );
  }
  /**
   * @abstract
   * @return {Array<*> | null} Coordinates.
   */
  getCoordinates() {
    return be();
  }
  /**
   * Return the first coordinate of the geometry.
   * @return {import("../coordinate.js").Coordinate} First coordinate.
   * @api
   */
  getFirstCoordinate() {
    return this.flatCoordinates.slice(0, this.stride);
  }
  /**
   * @return {Array<number>} Flat coordinates.
   */
  getFlatCoordinates() {
    return this.flatCoordinates;
  }
  /**
   * Return the last coordinate of the geometry.
   * @return {import("../coordinate.js").Coordinate} Last point.
   * @api
   */
  getLastCoordinate() {
    return this.flatCoordinates.slice(
      this.flatCoordinates.length - this.stride
    );
  }
  /**
   * Return the {@link import("./Geometry.js").GeometryLayout layout} of the geometry.
   * @return {import("./Geometry.js").GeometryLayout} Layout.
   * @api
   */
  getLayout() {
    return this.layout;
  }
  /**
   * Create a simplified version of this geometry using the Douglas Peucker algorithm.
   * @param {number} squaredTolerance Squared tolerance.
   * @return {SimpleGeometry} Simplified geometry.
   */
  getSimplifiedGeometry(e) {
    if (this.simplifiedGeometryRevision !== this.getRevision() && (this.simplifiedGeometryMaxMinSquaredTolerance = 0, this.simplifiedGeometryRevision = this.getRevision()), e < 0 || this.simplifiedGeometryMaxMinSquaredTolerance !== 0 && e <= this.simplifiedGeometryMaxMinSquaredTolerance)
      return this;
    const n = this.getSimplifiedGeometryInternal(e);
    return n.getFlatCoordinates().length < this.flatCoordinates.length ? n : (this.simplifiedGeometryMaxMinSquaredTolerance = e, this);
  }
  /**
   * @param {number} squaredTolerance Squared tolerance.
   * @return {SimpleGeometry} Simplified geometry.
   * @protected
   */
  getSimplifiedGeometryInternal(e) {
    return this;
  }
  /**
   * @return {number} Stride.
   */
  getStride() {
    return this.stride;
  }
  /**
   * @param {import("./Geometry.js").GeometryLayout} layout Layout.
   * @param {Array<number>} flatCoordinates Flat coordinates.
   */
  setFlatCoordinates(e, n) {
    this.stride = ju(e), this.layout = e, this.flatCoordinates = n;
  }
  /**
   * @abstract
   * @param {!Array<*>} coordinates Coordinates.
   * @param {import("./Geometry.js").GeometryLayout} [layout] Layout.
   */
  setCoordinates(e, n) {
    be();
  }
  /**
   * @param {import("./Geometry.js").GeometryLayout|undefined} layout Layout.
   * @param {Array<*>} coordinates Coordinates.
   * @param {number} nesting Nesting.
   * @protected
   */
  setLayout(e, n, i) {
    let a;
    if (e)
      a = ju(e);
    else {
      for (let o = 0; o < i; ++o) {
        if (n.length === 0) {
          this.layout = "XY", this.stride = 2;
          return;
        }
        n = /** @type {Array<unknown>} */
        n[0];
      }
      a = n.length, e = I_(a);
    }
    this.layout = e, this.stride = a;
  }
  /**
   * Apply a transform function to the coordinates of the geometry.
   * The geometry is modified in place.
   * If you do not want the geometry modified in place, first `clone()` it and
   * then use this function on the clone.
   * @param {import("../proj.js").TransformFunction} transformFn Transform function.
   * Called with a flat array of geometry coordinates.
   * @api
   */
  applyTransform(e) {
    this.flatCoordinates && (e(this.flatCoordinates, this.flatCoordinates, this.stride), this.changed());
  }
  /**
   * Rotate the geometry around a given coordinate. This modifies the geometry
   * coordinates in place.
   * @param {number} angle Rotation angle in counter-clockwise radians.
   * @param {import("../coordinate.js").Coordinate} anchor The rotation center.
   * @api
   */
  rotate(e, n) {
    const i = this.getFlatCoordinates();
    if (i) {
      const a = this.getStride();
      Xf(
        i,
        0,
        i.length,
        a,
        e,
        n,
        i
      ), this.changed();
    }
  }
  /**
   * Scale the geometry (with an optional origin).  This modifies the geometry
   * coordinates in place.
   * @param {number} sx The scaling factor in the x-direction.
   * @param {number} [sy] The scaling factor in the y-direction (defaults to sx).
   * @param {import("../coordinate.js").Coordinate} [anchor] The scale origin (defaults to the center
   *     of the geometry extent).
   * @api
   */
  scale(e, n, i) {
    n === void 0 && (n = e), i || (i = zi(this.getExtent()));
    const a = this.getFlatCoordinates();
    if (a) {
      const o = this.getStride();
      T_(
        a,
        0,
        a.length,
        o,
        e,
        n,
        i,
        a
      ), this.changed();
    }
  }
  /**
   * Translate the geometry.  This modifies the geometry coordinates in place.  If
   * instead you want a new geometry, first `clone()` this geometry.
   * @param {number} deltaX Delta X.
   * @param {number} deltaY Delta Y.
   * @api
   */
  translate(e, n) {
    const i = this.getFlatCoordinates();
    if (i) {
      const a = this.getStride();
      w_(
        i,
        0,
        i.length,
        a,
        e,
        n,
        i
      ), this.changed();
    }
  }
}
function I_(t) {
  let e;
  return t == 2 ? e = "XY" : t == 3 ? e = "XYZ" : t == 4 && (e = "XYZM"), /** @type {import("./Geometry.js").GeometryLayout} */
  e;
}
function ju(t) {
  let e;
  return t == "XY" ? e = 2 : t == "XYZ" || t == "XYM" ? e = 3 : t == "XYZM" && (e = 4), /** @type {number} */
  e;
}
function z_(t, e, n) {
  const i = t.getFlatCoordinates();
  if (!i)
    return null;
  const a = t.getStride();
  return oi(
    i,
    0,
    i.length,
    a,
    e,
    n
  );
}
const ec = R_;
function Zu(t, e, n, i, a, o, r) {
  const s = t[e], l = t[e + 1], c = t[n] - s, u = t[n + 1] - l;
  let d;
  if (c === 0 && u === 0)
    d = e;
  else {
    const h = ((a - s) * c + (o - l) * u) / (c * c + u * u);
    if (h > 1)
      d = n;
    else if (h > 0) {
      for (let f = 0; f < i; ++f)
        r[f] = kt(
          t[e + f],
          t[n + f],
          h
        );
      r.length = i;
      return;
    } else
      d = e;
  }
  for (let h = 0; h < i; ++h)
    r[h] = t[d + h];
  r.length = i;
}
function Yf(t, e, n, i, a) {
  let o = t[e], r = t[e + 1];
  for (e += i; e < n; e += i) {
    const s = t[e], l = t[e + 1], c = na(o, r, s, l);
    c > a && (a = c), o = s, r = l;
  }
  return a;
}
function L_(t, e, n, i, a) {
  for (let o = 0, r = n.length; o < r; ++o) {
    const s = n[o];
    a = Yf(t, e, s, i, a), e = s;
  }
  return a;
}
function jf(t, e, n, i, a, o, r, s, l, c, u) {
  if (e == n)
    return c;
  let d, h;
  if (a === 0) {
    if (h = na(
      r,
      s,
      t[e],
      t[e + 1]
    ), h < c) {
      for (d = 0; d < i; ++d)
        l[d] = t[e + d];
      return l.length = i, h;
    }
    return c;
  }
  u = u || [NaN, NaN];
  let f = e + i;
  for (; f < n; )
    if (Zu(
      t,
      f - i,
      f,
      i,
      r,
      s,
      u
    ), h = na(r, s, u[0], u[1]), h < c) {
      for (c = h, d = 0; d < i; ++d)
        l[d] = u[d];
      l.length = i, f += i;
    } else
      f += i * Math.max(
        (Math.sqrt(h) - Math.sqrt(c)) / a | 0,
        1
      );
  if (o && (Zu(
    t,
    n - i,
    e,
    i,
    r,
    s,
    u
  ), h = na(r, s, u[0], u[1]), h < c)) {
    for (c = h, d = 0; d < i; ++d)
      l[d] = u[d];
    l.length = i;
  }
  return c;
}
function V_(t, e, n, i, a, o, r, s, l, c, u) {
  u = u || [NaN, NaN];
  for (let d = 0, h = n.length; d < h; ++d) {
    const f = n[d];
    c = jf(
      t,
      e,
      f,
      i,
      a,
      o,
      r,
      s,
      l,
      c,
      u
    ), e = f;
  }
  return c;
}
function B_(t, e, n, i) {
  for (let a = 0, o = n.length; a < o; ++a)
    t[e++] = n[a];
  return e;
}
function Zf(t, e, n, i) {
  for (let a = 0, o = n.length; a < o; ++a) {
    const r = n[a];
    for (let s = 0; s < i; ++s)
      t[e++] = r[s];
  }
  return e;
}
function F_(t, e, n, i, a) {
  a = a || [];
  let o = 0;
  for (let r = 0, s = n.length; r < s; ++r) {
    const l = Zf(
      t,
      e,
      n[r],
      i
    );
    a[o++] = l, e = l;
  }
  return a.length = o, a;
}
function tc(t, e, n, i, a, o, r) {
  const s = (n - e) / i;
  if (s < 3) {
    for (; e < n; e += i)
      o[r++] = t[e], o[r++] = t[e + 1];
    return r;
  }
  const l = new Array(s);
  l[0] = 1, l[s - 1] = 1;
  const c = [e, n - i];
  let u = 0;
  for (; c.length > 0; ) {
    const d = c.pop(), h = c.pop();
    let f = 0;
    const g = t[h], m = t[h + 1], v = t[d], y = t[d + 1];
    for (let p = h + i; p < d; p += i) {
      const M = t[p], S = t[p + 1], b = Gp(M, S, g, m, v, y);
      b > f && (u = p, f = b);
    }
    f > a && (l[(u - e) / i] = 1, h + i < u && c.push(h, u), u + i < d && c.push(u, d));
  }
  for (let d = 0; d < s; ++d)
    l[d] && (o[r++] = t[e + d * i], o[r++] = t[e + d * i + 1]);
  return r;
}
function k_(t, e, n, i, a, o, r, s) {
  for (let l = 0, c = n.length; l < c; ++l) {
    const u = n[l];
    r = tc(
      t,
      e,
      u,
      i,
      a,
      o,
      r
    ), s.push(r), e = u;
  }
  return r;
}
function Mi(t, e) {
  return e * Math.round(t / e);
}
function O_(t, e, n, i, a, o, r) {
  if (e == n)
    return r;
  let s = Mi(t[e], a), l = Mi(t[e + 1], a);
  e += i, o[r++] = s, o[r++] = l;
  let c, u;
  do
    if (c = Mi(t[e], a), u = Mi(t[e + 1], a), e += i, e == n)
      return o[r++] = c, o[r++] = u, r;
  while (c == s && u == l);
  for (; e < n; ) {
    const d = Mi(t[e], a), h = Mi(t[e + 1], a);
    if (e += i, d == c && h == u)
      continue;
    const f = c - s, g = u - l, m = d - s, v = h - l;
    if (f * v == g * m && (f < 0 && m < f || f == m || f > 0 && m > f) && (g < 0 && v < g || g == v || g > 0 && v > g)) {
      c = d, u = h;
      continue;
    }
    o[r++] = c, o[r++] = u, s = c, l = u, c = d, u = h;
  }
  return o[r++] = c, o[r++] = u, r;
}
function Hf(t, e, n, i, a, o, r, s) {
  for (let l = 0, c = n.length; l < c; ++l) {
    const u = n[l];
    r = O_(
      t,
      e,
      u,
      i,
      a,
      o,
      r
    ), s.push(r), e = u;
  }
  return r;
}
function ta(t, e, n, i, a) {
  a = a !== void 0 ? a : [];
  let o = 0;
  for (let r = e; r < n; r += i)
    a[o++] = t.slice(r, r + i);
  return a.length = o, a;
}
function dr(t, e, n, i, a) {
  a = a !== void 0 ? a : [];
  let o = 0;
  for (let r = 0, s = n.length; r < s; ++r) {
    const l = n[r];
    a[o++] = ta(
      t,
      e,
      l,
      i,
      a[o]
    ), e = l;
  }
  return a.length = o, a;
}
function Hu(t, e, n, i, a) {
  a = a !== void 0 ? a : [];
  let o = 0;
  for (let r = 0, s = n.length; r < s; ++r) {
    const l = n[r];
    a[o++] = l.length === 1 && l[0] === e ? [] : dr(
      t,
      e,
      l,
      i,
      a[o]
    ), e = l[l.length - 1];
  }
  return a.length = o, a;
}
function Kf(t, e, n, i) {
  let a = 0, o = t[n - i], r = t[n - i + 1];
  for (; e < n; e += i) {
    const s = t[e], l = t[e + 1];
    a += r * s - o * l, o = s, r = l;
  }
  return a / 2;
}
function D_(t, e, n, i) {
  let a = 0;
  for (let o = 0, r = n.length; o < r; ++o) {
    const s = n[o];
    a += Kf(t, e, s, i), e = s;
  }
  return a;
}
class hr extends ec {
  /**
   * @param {Array<import("../coordinate.js").Coordinate>|Array<number>} coordinates Coordinates.
   *     For internal use, flat coordinates in combination with `layout` are also accepted.
   * @param {import("./Geometry.js").GeometryLayout} [layout] Layout.
   */
  constructor(e, n) {
    super(), this.maxDelta_ = -1, this.maxDeltaRevision_ = -1, n !== void 0 && !Array.isArray(e[0]) ? this.setFlatCoordinates(
      n,
      /** @type {Array<number>} */
      e
    ) : this.setCoordinates(
      /** @type {Array<import("../coordinate.js").Coordinate>} */
      e,
      n
    );
  }
  /**
   * Make a complete copy of the geometry.
   * @return {!LinearRing} Clone.
   * @api
   */
  clone() {
    return new hr(this.flatCoordinates.slice(), this.layout);
  }
  /**
   * @param {number} x X.
   * @param {number} y Y.
   * @param {import("../coordinate.js").Coordinate} closestPoint Closest point.
   * @param {number} minSquaredDistance Minimum squared distance.
   * @return {number} Minimum squared distance.
   */
  closestPointXY(e, n, i, a) {
    return a < If(this.getExtent(), e, n) ? a : (this.maxDeltaRevision_ != this.getRevision() && (this.maxDelta_ = Math.sqrt(
      Yf(
        this.flatCoordinates,
        0,
        this.flatCoordinates.length,
        this.stride,
        0
      )
    ), this.maxDeltaRevision_ = this.getRevision()), jf(
      this.flatCoordinates,
      0,
      this.flatCoordinates.length,
      this.stride,
      this.maxDelta_,
      !0,
      e,
      n,
      i,
      a
    ));
  }
  /**
   * Return the area of the linear ring on projected plane.
   * @return {number} Area (on projected plane).
   * @api
   */
  getArea() {
    return Kf(
      this.flatCoordinates,
      0,
      this.flatCoordinates.length,
      this.stride
    );
  }
  /**
   * Return the coordinates of the linear ring.
   * @return {Array<import("../coordinate.js").Coordinate>} Coordinates.
   * @api
   */
  getCoordinates() {
    return ta(
      this.flatCoordinates,
      0,
      this.flatCoordinates.length,
      this.stride
    );
  }
  /**
   * @param {number} squaredTolerance Squared tolerance.
   * @return {LinearRing} Simplified LinearRing.
   * @protected
   */
  getSimplifiedGeometryInternal(e) {
    const n = [];
    return n.length = tc(
      this.flatCoordinates,
      0,
      this.flatCoordinates.length,
      this.stride,
      e,
      n,
      0
    ), new hr(n, "XY");
  }
  /**
   * Get the type of this geometry.
   * @return {import("./Geometry.js").Type} Geometry type.
   * @api
   */
  getType() {
    return "LinearRing";
  }
  /**
   * Test if the geometry and the passed extent intersect.
   * @param {import("../extent.js").Extent} extent Extent.
   * @return {boolean} `true` if the geometry and the extent intersect.
   * @api
   */
  intersectsExtent(e) {
    return !1;
  }
  /**
   * Set the coordinates of the linear ring.
   * @param {!Array<import("../coordinate.js").Coordinate>} coordinates Coordinates.
   * @param {import("./Geometry.js").GeometryLayout} [layout] Layout.
   * @api
   */
  setCoordinates(e, n) {
    this.setLayout(n, e, 1), this.flatCoordinates || (this.flatCoordinates = []), this.flatCoordinates.length = Zf(
      this.flatCoordinates,
      0,
      e,
      this.stride
    ), this.changed();
  }
}
const Ku = hr;
class nc extends ec {
  /**
   * @param {import("../coordinate.js").Coordinate} coordinates Coordinates.
   * @param {import("./Geometry.js").GeometryLayout} [layout] Layout.
   */
  constructor(e, n) {
    super(), this.setCoordinates(e, n);
  }
  /**
   * Make a complete copy of the geometry.
   * @return {!Point} Clone.
   * @api
   */
  clone() {
    const e = new nc(this.flatCoordinates.slice(), this.layout);
    return e.applyProperties(this), e;
  }
  /**
   * @param {number} x X.
   * @param {number} y Y.
   * @param {import("../coordinate.js").Coordinate} closestPoint Closest point.
   * @param {number} minSquaredDistance Minimum squared distance.
   * @return {number} Minimum squared distance.
   */
  closestPointXY(e, n, i, a) {
    const o = this.flatCoordinates, r = na(
      e,
      n,
      o[0],
      o[1]
    );
    if (r < a) {
      const s = this.stride;
      for (let l = 0; l < s; ++l)
        i[l] = o[l];
      return i.length = s, r;
    }
    return a;
  }
  /**
   * Return the coordinate of the point.
   * @return {import("../coordinate.js").Coordinate} Coordinates.
   * @api
   */
  getCoordinates() {
    return this.flatCoordinates.slice();
  }
  /**
   * @param {import("../extent.js").Extent} extent Extent.
   * @protected
   * @return {import("../extent.js").Extent} extent Extent.
   */
  computeExtent(e) {
    return Lf(this.flatCoordinates, e);
  }
  /**
   * Get the type of this geometry.
   * @return {import("./Geometry.js").Type} Geometry type.
   * @api
   */
  getType() {
    return "Point";
  }
  /**
   * Test if the geometry and the passed extent intersect.
   * @param {import("../extent.js").Extent} extent Extent.
   * @return {boolean} `true` if the geometry and the extent intersect.
   * @api
   */
  intersectsExtent(e) {
    return zf(e, this.flatCoordinates[0], this.flatCoordinates[1]);
  }
  /**
   * @param {!Array<*>} coordinates Coordinates.
   * @param {import("./Geometry.js").GeometryLayout} [layout] Layout.
   * @api
   */
  setCoordinates(e, n) {
    this.setLayout(n, e, 0), this.flatCoordinates || (this.flatCoordinates = []), this.flatCoordinates.length = B_(
      this.flatCoordinates,
      0,
      e,
      this.stride
    ), this.changed();
  }
}
const qf = nc;
function G_(t, e, n, i, a) {
  return !Bf(
    a,
    /**
     * @param {import("../../coordinate.js").Coordinate} coordinate Coordinate.
     * @return {boolean} Contains (x, y).
     */
    function(r) {
      return !Pi(
        t,
        e,
        n,
        i,
        r[0],
        r[1]
      );
    }
  );
}
function Pi(t, e, n, i, a, o) {
  let r = 0, s = t[n - i], l = t[n - i + 1];
  for (; e < n; e += i) {
    const c = t[e], u = t[e + 1];
    l <= o ? u > o && (c - s) * (o - l) - (a - s) * (u - l) > 0 && r++ : u <= o && (c - s) * (o - l) - (a - s) * (u - l) < 0 && r--, s = c, l = u;
  }
  return r !== 0;
}
function Jf(t, e, n, i, a, o) {
  if (n.length === 0 || !Pi(t, e, n[0], i, a, o))
    return !1;
  for (let r = 1, s = n.length; r < s; ++r)
    if (Pi(t, n[r - 1], n[r], i, a, o))
      return !1;
  return !0;
}
function ic(t, e, n, i, a, o, r) {
  let s, l, c, u, d, h, f;
  const g = a[o + 1], m = [];
  for (let p = 0, M = n.length; p < M; ++p) {
    const S = n[p];
    for (u = t[S - i], h = t[S - i + 1], s = e; s < S; s += i)
      d = t[s], f = t[s + 1], (g <= h && f <= g || h <= g && g <= f) && (c = (g - h) / (f - h) * (d - u) + u, m.push(c)), u = d, h = f;
  }
  let v = NaN, y = -1 / 0;
  for (m.sort(Dn), u = m[0], s = 1, l = m.length; s < l; ++s) {
    d = m[s];
    const p = Math.abs(d - u);
    p > y && (c = (u + d) / 2, Jf(t, e, n, i, c, g) && (v = c, y = p)), u = d;
  }
  return isNaN(v) && (v = a[o]), r ? (r.push(v, g, y), r) : [v, g, y];
}
function N_(t, e, n, i, a) {
  let o = [];
  for (let r = 0, s = n.length; r < s; ++r) {
    const l = n[r];
    o = ic(
      t,
      e,
      l,
      i,
      a,
      2 * r,
      o
    ), e = l[l.length - 1];
  }
  return o;
}
function $_(t, e, n, i, a) {
  let o;
  for (e += i; e < n; e += i)
    if (o = a(
      t.slice(e - i, e),
      t.slice(e, e + i)
    ), o)
      return o;
  return !1;
}
function Qf(t, e, n, i, a) {
  const o = Vf(
    Gt(),
    t,
    e,
    n,
    i
  );
  return Mt(a, o) ? ea(a, o) || o[0] >= a[0] && o[2] <= a[2] || o[1] >= a[1] && o[3] <= a[3] ? !0 : $_(
    t,
    e,
    n,
    i,
    /**
     * @param {import("../../coordinate.js").Coordinate} point1 Start point.
     * @param {import("../../coordinate.js").Coordinate} point2 End point.
     * @return {boolean} `true` if the segment and the extent intersect,
     *     `false` otherwise.
     */
    function(r, s) {
      return a_(a, r, s);
    }
  ) : !1;
}
function eg(t, e, n, i, a) {
  return !!(Qf(t, e, n, i, a) || Pi(
    t,
    e,
    n,
    i,
    a[0],
    a[1]
  ) || Pi(
    t,
    e,
    n,
    i,
    a[0],
    a[3]
  ) || Pi(
    t,
    e,
    n,
    i,
    a[2],
    a[1]
  ) || Pi(
    t,
    e,
    n,
    i,
    a[2],
    a[3]
  ));
}
function W_(t, e, n, i, a) {
  if (!eg(t, e, n[0], i, a))
    return !1;
  if (n.length === 1)
    return !0;
  for (let o = 1, r = n.length; o < r; ++o)
    if (G_(
      t,
      n[o - 1],
      n[o],
      i,
      a
    ) && !Qf(
      t,
      n[o - 1],
      n[o],
      i,
      a
    ))
      return !1;
  return !0;
}
function U_(t, e, n, i) {
  for (; e < n - i; ) {
    for (let a = 0; a < i; ++a) {
      const o = t[e + a];
      t[e + a] = t[n - i + a], t[n - i + a] = o;
    }
    e += i, n -= i;
  }
}
function ac(t, e, n, i) {
  let a = 0, o = t[n - i], r = t[n - i + 1];
  for (; e < n; e += i) {
    const s = t[e], l = t[e + 1];
    a += (s - o) * (l + r), o = s, r = l;
  }
  return a === 0 ? void 0 : a > 0;
}
function X_(t, e, n, i, a) {
  a = a !== void 0 ? a : !1;
  for (let o = 0, r = n.length; o < r; ++o) {
    const s = n[o], l = ac(
      t,
      e,
      s,
      i
    );
    if (o === 0) {
      if (a && l || !a && !l)
        return !1;
    } else if (a && !l || !a && l)
      return !1;
    e = s;
  }
  return !0;
}
function qu(t, e, n, i, a) {
  a = a !== void 0 ? a : !1;
  for (let o = 0, r = n.length; o < r; ++o) {
    const s = n[o], l = ac(
      t,
      e,
      s,
      i
    );
    (o === 0 ? a && l || !a && !l : a && !l || !a && l) && U_(t, e, s, i), e = s;
  }
  return e;
}
function Y_(t, e) {
  const n = [];
  let i = 0, a = 0, o;
  for (let r = 0, s = e.length; r < s; ++r) {
    const l = e[r], c = ac(t, i, l, 2);
    if (o === void 0 && (o = c), c === o)
      n.push(e.slice(a, r + 1));
    else {
      if (n.length === 0)
        continue;
      n[n.length - 1].push(e[a]);
    }
    a = r + 1, i = l;
  }
  return n;
}
class qa extends ec {
  /**
   * @param {!Array<Array<import("../coordinate.js").Coordinate>>|!Array<number>} coordinates
   *     Array of linear rings that define the polygon. The first linear ring of the
   *     array defines the outer-boundary or surface of the polygon. Each subsequent
   *     linear ring defines a hole in the surface of the polygon. A linear ring is
   *     an array of vertices' coordinates where the first coordinate and the last are
   *     equivalent. (For internal use, flat coordinates in combination with
   *     `layout` and `ends` are also accepted.)
   * @param {import("./Geometry.js").GeometryLayout} [layout] Layout.
   * @param {Array<number>} [ends] Ends (for internal use with flat coordinates).
   */
  constructor(e, n, i) {
    super(), this.ends_ = [], this.flatInteriorPointRevision_ = -1, this.flatInteriorPoint_ = null, this.maxDelta_ = -1, this.maxDeltaRevision_ = -1, this.orientedRevision_ = -1, this.orientedFlatCoordinates_ = null, n !== void 0 && i ? (this.setFlatCoordinates(
      n,
      /** @type {Array<number>} */
      e
    ), this.ends_ = i) : this.setCoordinates(
      /** @type {Array<Array<import("../coordinate.js").Coordinate>>} */
      e,
      n
    );
  }
  /**
   * Append the passed linear ring to this polygon.
   * @param {LinearRing} linearRing Linear ring.
   * @api
   */
  appendLinearRing(e) {
    this.flatCoordinates ? Nl(this.flatCoordinates, e.getFlatCoordinates()) : this.flatCoordinates = e.getFlatCoordinates().slice(), this.ends_.push(this.flatCoordinates.length), this.changed();
  }
  /**
   * Make a complete copy of the geometry.
   * @return {!Polygon} Clone.
   * @api
   */
  clone() {
    const e = new qa(
      this.flatCoordinates.slice(),
      this.layout,
      this.ends_.slice()
    );
    return e.applyProperties(this), e;
  }
  /**
   * @param {number} x X.
   * @param {number} y Y.
   * @param {import("../coordinate.js").Coordinate} closestPoint Closest point.
   * @param {number} minSquaredDistance Minimum squared distance.
   * @return {number} Minimum squared distance.
   */
  closestPointXY(e, n, i, a) {
    return a < If(this.getExtent(), e, n) ? a : (this.maxDeltaRevision_ != this.getRevision() && (this.maxDelta_ = Math.sqrt(
      L_(
        this.flatCoordinates,
        0,
        this.ends_,
        this.stride,
        0
      )
    ), this.maxDeltaRevision_ = this.getRevision()), V_(
      this.flatCoordinates,
      0,
      this.ends_,
      this.stride,
      this.maxDelta_,
      !0,
      e,
      n,
      i,
      a
    ));
  }
  /**
   * @param {number} x X.
   * @param {number} y Y.
   * @return {boolean} Contains (x, y).
   */
  containsXY(e, n) {
    return Jf(
      this.getOrientedFlatCoordinates(),
      0,
      this.ends_,
      this.stride,
      e,
      n
    );
  }
  /**
   * Return the area of the polygon on projected plane.
   * @return {number} Area (on projected plane).
   * @api
   */
  getArea() {
    return D_(
      this.getOrientedFlatCoordinates(),
      0,
      this.ends_,
      this.stride
    );
  }
  /**
   * Get the coordinate array for this geometry.  This array has the structure
   * of a GeoJSON coordinate array for polygons.
   *
   * @param {boolean} [right] Orient coordinates according to the right-hand
   *     rule (counter-clockwise for exterior and clockwise for interior rings).
   *     If `false`, coordinates will be oriented according to the left-hand rule
   *     (clockwise for exterior and counter-clockwise for interior rings).
   *     By default, coordinate orientation will depend on how the geometry was
   *     constructed.
   * @return {Array<Array<import("../coordinate.js").Coordinate>>} Coordinates.
   * @api
   */
  getCoordinates(e) {
    let n;
    return e !== void 0 ? (n = this.getOrientedFlatCoordinates().slice(), qu(n, 0, this.ends_, this.stride, e)) : n = this.flatCoordinates, dr(n, 0, this.ends_, this.stride);
  }
  /**
   * @return {Array<number>} Ends.
   */
  getEnds() {
    return this.ends_;
  }
  /**
   * @return {Array<number>} Interior point.
   */
  getFlatInteriorPoint() {
    if (this.flatInteriorPointRevision_ != this.getRevision()) {
      const e = zi(this.getExtent());
      this.flatInteriorPoint_ = ic(
        this.getOrientedFlatCoordinates(),
        0,
        this.ends_,
        this.stride,
        e,
        0
      ), this.flatInteriorPointRevision_ = this.getRevision();
    }
    return (
      /** @type {import("../coordinate.js").Coordinate} */
      this.flatInteriorPoint_
    );
  }
  /**
   * Return an interior point of the polygon.
   * @return {Point} Interior point as XYM coordinate, where M is the
   * length of the horizontal intersection that the point belongs to.
   * @api
   */
  getInteriorPoint() {
    return new qf(this.getFlatInteriorPoint(), "XYM");
  }
  /**
   * Return the number of rings of the polygon,  this includes the exterior
   * ring and any interior rings.
   *
   * @return {number} Number of rings.
   * @api
   */
  getLinearRingCount() {
    return this.ends_.length;
  }
  /**
   * Return the Nth linear ring of the polygon geometry. Return `null` if the
   * given index is out of range.
   * The exterior linear ring is available at index `0` and the interior rings
   * at index `1` and beyond.
   *
   * @param {number} index Index.
   * @return {LinearRing|null} Linear ring.
   * @api
   */
  getLinearRing(e) {
    return e < 0 || this.ends_.length <= e ? null : new Ku(
      this.flatCoordinates.slice(
        e === 0 ? 0 : this.ends_[e - 1],
        this.ends_[e]
      ),
      this.layout
    );
  }
  /**
   * Return the linear rings of the polygon.
   * @return {Array<LinearRing>} Linear rings.
   * @api
   */
  getLinearRings() {
    const e = this.layout, n = this.flatCoordinates, i = this.ends_, a = [];
    let o = 0;
    for (let r = 0, s = i.length; r < s; ++r) {
      const l = i[r], c = new Ku(
        n.slice(o, l),
        e
      );
      a.push(c), o = l;
    }
    return a;
  }
  /**
   * @return {Array<number>} Oriented flat coordinates.
   */
  getOrientedFlatCoordinates() {
    if (this.orientedRevision_ != this.getRevision()) {
      const e = this.flatCoordinates;
      X_(e, 0, this.ends_, this.stride) ? this.orientedFlatCoordinates_ = e : (this.orientedFlatCoordinates_ = e.slice(), this.orientedFlatCoordinates_.length = qu(
        this.orientedFlatCoordinates_,
        0,
        this.ends_,
        this.stride
      )), this.orientedRevision_ = this.getRevision();
    }
    return (
      /** @type {Array<number>} */
      this.orientedFlatCoordinates_
    );
  }
  /**
   * @param {number} squaredTolerance Squared tolerance.
   * @return {Polygon} Simplified Polygon.
   * @protected
   */
  getSimplifiedGeometryInternal(e) {
    const n = [], i = [];
    return n.length = Hf(
      this.flatCoordinates,
      0,
      this.ends_,
      this.stride,
      Math.sqrt(e),
      n,
      0,
      i
    ), new qa(n, "XY", i);
  }
  /**
   * Get the type of this geometry.
   * @return {import("./Geometry.js").Type} Geometry type.
   * @api
   */
  getType() {
    return "Polygon";
  }
  /**
   * Test if the geometry and the passed extent intersect.
   * @param {import("../extent.js").Extent} extent Extent.
   * @return {boolean} `true` if the geometry and the extent intersect.
   * @api
   */
  intersectsExtent(e) {
    return W_(
      this.getOrientedFlatCoordinates(),
      0,
      this.ends_,
      this.stride,
      e
    );
  }
  /**
   * Set the coordinates of the polygon.
   * @param {!Array<Array<import("../coordinate.js").Coordinate>>} coordinates Coordinates.
   * @param {import("./Geometry.js").GeometryLayout} [layout] Layout.
   * @api
   */
  setCoordinates(e, n) {
    this.setLayout(n, e, 2), this.flatCoordinates || (this.flatCoordinates = []);
    const i = F_(
      this.flatCoordinates,
      0,
      e,
      this.stride,
      this.ends_
    );
    this.flatCoordinates.length = i.length === 0 ? 0 : i[i.length - 1], this.changed();
  }
}
function Ju(t) {
  if (kr(t))
    throw new Error("Cannot create polygon from empty extent");
  const e = t[0], n = t[1], i = t[2], a = t[3], o = [
    e,
    n,
    e,
    a,
    i,
    a,
    i,
    n,
    e,
    n
  ];
  return new qa(o, "XY", [o.length]);
}
const cs = 0;
class j_ extends xn {
  /**
   * @param {ViewOptions} [options] View options.
   */
  constructor(e) {
    super(), this.on, this.once, this.un, e = Object.assign({}, e), this.hints_ = [0, 0], this.animations_ = [], this.updateAnimationKey_, this.projection_ = Zl(e.projection, "EPSG:3857"), this.viewportSize_ = [100, 100], this.targetCenter_ = null, this.targetResolution_, this.targetRotation_, this.nextCenter_ = null, this.nextResolution_, this.nextRotation_, this.cancelAnchor_ = void 0, e.projection && Gf(), e.center && (e.center = Ln(e.center, this.projection_)), e.extent && (e.extent = xi(e.extent, this.projection_)), this.applyOptions_(e);
  }
  /**
   * Set up the view with the given options.
   * @param {ViewOptions} options View options.
   */
  applyOptions_(e) {
    const n = Object.assign({}, e);
    for (const s in Ut)
      delete n[s];
    this.setProperties(n, !0);
    const i = H_(e);
    this.maxResolution_ = i.maxResolution, this.minResolution_ = i.minResolution, this.zoomFactor_ = i.zoomFactor, this.resolutions_ = e.resolutions, this.padding_ = e.padding, this.minZoom_ = i.minZoom;
    const a = Z_(e), o = i.constraint, r = K_(e);
    this.constraints_ = {
      center: a,
      resolution: o,
      rotation: r
    }, this.setRotation(e.rotation !== void 0 ? e.rotation : 0), this.setCenterInternal(
      e.center !== void 0 ? e.center : null
    ), e.resolution !== void 0 ? this.setResolution(e.resolution) : e.zoom !== void 0 && this.setZoom(e.zoom);
  }
  /**
   * Padding (in css pixels).
   * If the map viewport is partially covered with other content (overlays) along
   * its edges, this setting allows to shift the center of the viewport away from that
   * content. The order of the values in the array is top, right, bottom, left.
   * The default is no padding, which is equivalent to `[0, 0, 0, 0]`.
   * @type {Array<number>|undefined}
   * @api
   */
  get padding() {
    return this.padding_;
  }
  set padding(e) {
    let n = this.padding_;
    this.padding_ = e;
    const i = this.getCenterInternal();
    if (i) {
      const a = e || [0, 0, 0, 0];
      n = n || [0, 0, 0, 0];
      const o = this.getResolution(), r = o / 2 * (a[3] - n[3] + n[1] - a[1]), s = o / 2 * (a[0] - n[0] + n[2] - a[2]);
      this.setCenterInternal([i[0] + r, i[1] - s]);
    }
  }
  /**
   * Get an updated version of the view options used to construct the view.  The
   * current resolution (or zoom), center, and rotation are applied to any stored
   * options.  The provided options can be used to apply new min/max zoom or
   * resolution limits.
   * @param {ViewOptions} newOptions New options to be applied.
   * @return {ViewOptions} New options updated with the current view state.
   */
  getUpdatedOptions_(e) {
    const n = this.getProperties();
    return n.resolution !== void 0 ? n.resolution = this.getResolution() : n.zoom = this.getZoom(), n.center = this.getCenterInternal(), n.rotation = this.getRotation(), Object.assign({}, n, e);
  }
  /**
   * Animate the view.  The view's center, zoom (or resolution), and rotation
   * can be animated for smooth transitions between view states.  For example,
   * to animate the view to a new zoom level:
   *
   *     view.animate({zoom: view.getZoom() + 1});
   *
   * By default, the animation lasts one second and uses in-and-out easing.  You
   * can customize this behavior by including `duration` (in milliseconds) and
   * `easing` options (see {@link module:ol/easing}).
   *
   * To chain together multiple animations, call the method with multiple
   * animation objects.  For example, to first zoom and then pan:
   *
   *     view.animate({zoom: 10}, {center: [0, 0]});
   *
   * If you provide a function as the last argument to the animate method, it
   * will get called at the end of an animation series.  The callback will be
   * called with `true` if the animation series completed on its own or `false`
   * if it was cancelled.
   *
   * Animations are cancelled by user interactions (e.g. dragging the map) or by
   * calling `view.setCenter()`, `view.setResolution()`, or `view.setRotation()`
   * (or another method that calls one of these).
   *
   * @param {...(AnimationOptions|function(boolean): void)} var_args Animation
   *     options.  Multiple animations can be run in series by passing multiple
   *     options objects.  To run multiple animations in parallel, call the method
   *     multiple times.  An optional callback can be provided as a final
   *     argument.  The callback will be called with a boolean indicating whether
   *     the animation completed without being cancelled.
   * @api
   */
  animate(e) {
    this.isDef() && !this.getAnimating() && this.resolveConstraints(0);
    const n = new Array(arguments.length);
    for (let i = 0; i < n.length; ++i) {
      let a = arguments[i];
      a.center && (a = Object.assign({}, a), a.center = Ln(
        a.center,
        this.getProjection()
      )), a.anchor && (a = Object.assign({}, a), a.anchor = Ln(
        a.anchor,
        this.getProjection()
      )), n[i] = a;
    }
    this.animateInternal.apply(this, n);
  }
  /**
   * @param {...(AnimationOptions|function(boolean): void)} var_args Animation options.
   */
  animateInternal(e) {
    let n = arguments.length, i;
    n > 1 && typeof arguments[n - 1] == "function" && (i = arguments[n - 1], --n);
    let a = 0;
    for (; a < n && !this.isDef(); ++a) {
      const u = arguments[a];
      u.center && this.setCenterInternal(u.center), u.zoom !== void 0 ? this.setZoom(u.zoom) : u.resolution && this.setResolution(u.resolution), u.rotation !== void 0 && this.setRotation(u.rotation);
    }
    if (a === n) {
      i && Do(i, !0);
      return;
    }
    let o = Date.now(), r = this.targetCenter_.slice(), s = this.targetResolution_, l = this.targetRotation_;
    const c = [];
    for (; a < n; ++a) {
      const u = (
        /** @type {AnimationOptions} */
        arguments[a]
      ), d = {
        start: o,
        complete: !1,
        anchor: u.anchor,
        duration: u.duration !== void 0 ? u.duration : 1e3,
        easing: u.easing || b_,
        callback: i
      };
      if (u.center && (d.sourceCenter = r, d.targetCenter = u.center.slice(), r = d.targetCenter), u.zoom !== void 0 ? (d.sourceResolution = s, d.targetResolution = this.getResolutionForZoom(u.zoom), s = d.targetResolution) : u.resolution && (d.sourceResolution = s, d.targetResolution = u.resolution, s = d.targetResolution), u.rotation !== void 0) {
        d.sourceRotation = l;
        const h = ia(u.rotation - l + Math.PI, 2 * Math.PI) - Math.PI;
        d.targetRotation = l + h, l = d.targetRotation;
      }
      q_(d) ? d.complete = !0 : o += d.duration, c.push(d);
    }
    this.animations_.push(c), this.setHint(lt.ANIMATING, 1), this.updateAnimations_();
  }
  /**
   * Determine if the view is being animated.
   * @return {boolean} The view is being animated.
   * @api
   */
  getAnimating() {
    return this.hints_[lt.ANIMATING] > 0;
  }
  /**
   * Determine if the user is interacting with the view, such as panning or zooming.
   * @return {boolean} The view is being interacted with.
   * @api
   */
  getInteracting() {
    return this.hints_[lt.INTERACTING] > 0;
  }
  /**
   * Cancel any ongoing animations.
   * @api
   */
  cancelAnimations() {
    this.setHint(lt.ANIMATING, -this.hints_[lt.ANIMATING]);
    let e;
    for (let n = 0, i = this.animations_.length; n < i; ++n) {
      const a = this.animations_[n];
      if (a[0].callback && Do(a[0].callback, !1), !e)
        for (let o = 0, r = a.length; o < r; ++o) {
          const s = a[o];
          if (!s.complete) {
            e = s.anchor;
            break;
          }
        }
    }
    this.animations_.length = 0, this.cancelAnchor_ = e, this.nextCenter_ = null, this.nextResolution_ = NaN, this.nextRotation_ = NaN;
  }
  /**
   * Update all animations.
   */
  updateAnimations_() {
    if (this.updateAnimationKey_ !== void 0 && (cancelAnimationFrame(this.updateAnimationKey_), this.updateAnimationKey_ = void 0), !this.getAnimating())
      return;
    const e = Date.now();
    let n = !1;
    for (let i = this.animations_.length - 1; i >= 0; --i) {
      const a = this.animations_[i];
      let o = !0;
      for (let r = 0, s = a.length; r < s; ++r) {
        const l = a[r];
        if (l.complete)
          continue;
        const c = e - l.start;
        let u = l.duration > 0 ? c / l.duration : 1;
        u >= 1 ? (l.complete = !0, u = 1) : o = !1;
        const d = l.easing(u);
        if (l.sourceCenter) {
          const h = l.sourceCenter[0], f = l.sourceCenter[1], g = l.targetCenter[0], m = l.targetCenter[1];
          this.nextCenter_ = l.targetCenter;
          const v = h + d * (g - h), y = f + d * (m - f);
          this.targetCenter_ = [v, y];
        }
        if (l.sourceResolution && l.targetResolution) {
          const h = d === 1 ? l.targetResolution : l.sourceResolution + d * (l.targetResolution - l.sourceResolution);
          if (l.anchor) {
            const f = this.getViewportSize_(this.getRotation()), g = this.constraints_.resolution(
              h,
              0,
              f,
              !0
            );
            this.targetCenter_ = this.calculateCenterZoom(
              g,
              l.anchor
            );
          }
          this.nextResolution_ = l.targetResolution, this.targetResolution_ = h, this.applyTargetState_(!0);
        }
        if (l.sourceRotation !== void 0 && l.targetRotation !== void 0) {
          const h = d === 1 ? ia(l.targetRotation + Math.PI, 2 * Math.PI) - Math.PI : l.sourceRotation + d * (l.targetRotation - l.sourceRotation);
          if (l.anchor) {
            const f = this.constraints_.rotation(
              h,
              !0
            );
            this.targetCenter_ = this.calculateCenterRotate(
              f,
              l.anchor
            );
          }
          this.nextRotation_ = l.targetRotation, this.targetRotation_ = h;
        }
        if (this.applyTargetState_(!0), n = !0, !l.complete)
          break;
      }
      if (o) {
        this.animations_[i] = null, this.setHint(lt.ANIMATING, -1), this.nextCenter_ = null, this.nextResolution_ = NaN, this.nextRotation_ = NaN;
        const r = a[0].callback;
        r && Do(r, !0);
      }
    }
    this.animations_ = this.animations_.filter(Boolean), n && this.updateAnimationKey_ === void 0 && (this.updateAnimationKey_ = requestAnimationFrame(
      this.updateAnimations_.bind(this)
    ));
  }
  /**
   * @param {number} rotation Target rotation.
   * @param {import("./coordinate.js").Coordinate} anchor Rotation anchor.
   * @return {import("./coordinate.js").Coordinate|undefined} Center for rotation and anchor.
   */
  calculateCenterRotate(e, n) {
    let i;
    const a = this.getCenterInternal();
    return a !== void 0 && (i = [a[0] - n[0], a[1] - n[1]], Yl(i, e - this.getRotation()), r_(i, n)), i;
  }
  /**
   * @param {number} resolution Target resolution.
   * @param {import("./coordinate.js").Coordinate} anchor Zoom anchor.
   * @return {import("./coordinate.js").Coordinate|undefined} Center for resolution and anchor.
   */
  calculateCenterZoom(e, n) {
    let i;
    const a = this.getCenterInternal(), o = this.getResolution();
    if (a !== void 0 && o !== void 0) {
      const r = n[0] - e * (n[0] - a[0]) / o, s = n[1] - e * (n[1] - a[1]) / o;
      i = [r, s];
    }
    return i;
  }
  /**
   * Returns the current viewport size.
   * @private
   * @param {number} [rotation] Take into account the rotation of the viewport when giving the size
   * @return {import("./size.js").Size} Viewport size or `[100, 100]` when no viewport is found.
   */
  getViewportSize_(e) {
    const n = this.viewportSize_;
    if (e) {
      const i = n[0], a = n[1];
      return [
        Math.abs(i * Math.cos(e)) + Math.abs(a * Math.sin(e)),
        Math.abs(i * Math.sin(e)) + Math.abs(a * Math.cos(e))
      ];
    }
    return n;
  }
  /**
   * Stores the viewport size on the view. The viewport size is not read every time from the DOM
   * to avoid performance hit and layout reflow.
   * This should be done on map size change.
   * Note: the constraints are not resolved during an animation to avoid stopping it
   * @param {import("./size.js").Size} [size] Viewport size; if undefined, [100, 100] is assumed
   */
  setViewportSize(e) {
    this.viewportSize_ = Array.isArray(e) ? e.slice() : [100, 100], this.getAnimating() || this.resolveConstraints(0);
  }
  /**
   * Get the view center.
   * @return {import("./coordinate.js").Coordinate|undefined} The center of the view.
   * @observable
   * @api
   */
  getCenter() {
    const e = this.getCenterInternal();
    return e && Us(e, this.getProjection());
  }
  /**
   * Get the view center without transforming to user projection.
   * @return {import("./coordinate.js").Coordinate|undefined} The center of the view.
   */
  getCenterInternal() {
    return (
      /** @type {import("./coordinate.js").Coordinate|undefined} */
      this.get(Ut.CENTER)
    );
  }
  /**
   * @return {Constraints} Constraints.
   */
  getConstraints() {
    return this.constraints_;
  }
  /**
   * @return {boolean} Resolution constraint is set
   */
  getConstrainResolution() {
    return this.get("constrainResolution");
  }
  /**
   * @param {Array<number>} [hints] Destination array.
   * @return {Array<number>} Hint.
   */
  getHints(e) {
    return e !== void 0 ? (e[0] = this.hints_[0], e[1] = this.hints_[1], e) : this.hints_.slice();
  }
  /**
   * Calculate the extent for the current view state and the passed box size.
   * @param {import("./size.js").Size} [size] The pixel dimensions of the box
   * into which the calculated extent should fit. Defaults to the size of the
   * map the view is associated with.
   * If no map or multiple maps are connected to the view, provide the desired
   * box size (e.g. `map.getSize()`).
   * @return {import("./extent.js").Extent} Extent.
   * @api
   */
  calculateExtent(e) {
    const n = this.calculateExtentInternal(e);
    return Hl(n, this.getProjection());
  }
  /**
   * @param {import("./size.js").Size} [size] Box pixel size. If not provided,
   * the map's last known viewport size will be used.
   * @return {import("./extent.js").Extent} Extent.
   */
  calculateExtentInternal(e) {
    e = e || this.getViewportSizeMinusPadding_();
    const n = (
      /** @type {!import("./coordinate.js").Coordinate} */
      this.getCenterInternal()
    );
    Se(n, "The view center is not defined");
    const i = (
      /** @type {!number} */
      this.getResolution()
    );
    Se(i !== void 0, "The view resolution is not defined");
    const a = (
      /** @type {!number} */
      this.getRotation()
    );
    return Se(a !== void 0, "The view rotation is not defined"), Ns(n, i, a, e);
  }
  /**
   * Get the maximum resolution of the view.
   * @return {number} The maximum resolution of the view.
   * @api
   */
  getMaxResolution() {
    return this.maxResolution_;
  }
  /**
   * Get the minimum resolution of the view.
   * @return {number} The minimum resolution of the view.
   * @api
   */
  getMinResolution() {
    return this.minResolution_;
  }
  /**
   * Get the maximum zoom level for the view.
   * @return {number} The maximum zoom level.
   * @api
   */
  getMaxZoom() {
    return (
      /** @type {number} */
      this.getZoomForResolution(this.minResolution_)
    );
  }
  /**
   * Set a new maximum zoom level for the view.
   * @param {number} zoom The maximum zoom level.
   * @api
   */
  setMaxZoom(e) {
    this.applyOptions_(this.getUpdatedOptions_({ maxZoom: e }));
  }
  /**
   * Get the minimum zoom level for the view.
   * @return {number} The minimum zoom level.
   * @api
   */
  getMinZoom() {
    return (
      /** @type {number} */
      this.getZoomForResolution(this.maxResolution_)
    );
  }
  /**
   * Set a new minimum zoom level for the view.
   * @param {number} zoom The minimum zoom level.
   * @api
   */
  setMinZoom(e) {
    this.applyOptions_(this.getUpdatedOptions_({ minZoom: e }));
  }
  /**
   * Set whether the view should allow intermediary zoom levels.
   * @param {boolean} enabled Whether the resolution is constrained.
   * @api
   */
  setConstrainResolution(e) {
    this.applyOptions_(this.getUpdatedOptions_({ constrainResolution: e }));
  }
  /**
   * Get the view projection.
   * @return {import("./proj/Projection.js").default} The projection of the view.
   * @api
   */
  getProjection() {
    return this.projection_;
  }
  /**
   * Get the view resolution.
   * @return {number|undefined} The resolution of the view.
   * @observable
   * @api
   */
  getResolution() {
    return (
      /** @type {number|undefined} */
      this.get(Ut.RESOLUTION)
    );
  }
  /**
   * Get the resolutions for the view. This returns the array of resolutions
   * passed to the constructor of the View, or undefined if none were given.
   * @return {Array<number>|undefined} The resolutions of the view.
   * @api
   */
  getResolutions() {
    return this.resolutions_;
  }
  /**
   * Get the resolution for a provided extent (in map units) and size (in pixels).
   * @param {import("./extent.js").Extent} extent Extent.
   * @param {import("./size.js").Size} [size] Box pixel size.
   * @return {number} The resolution at which the provided extent will render at
   *     the given size.
   * @api
   */
  getResolutionForExtent(e, n) {
    return this.getResolutionForExtentInternal(
      xi(e, this.getProjection()),
      n
    );
  }
  /**
   * Get the resolution for a provided extent (in map units) and size (in pixels).
   * @param {import("./extent.js").Extent} extent Extent.
   * @param {import("./size.js").Size} [size] Box pixel size.
   * @return {number} The resolution at which the provided extent will render at
   *     the given size.
   */
  getResolutionForExtentInternal(e, n) {
    n = n || this.getViewportSizeMinusPadding_();
    const i = Re(e) / n[0], a = ut(e) / n[1];
    return Math.max(i, a);
  }
  /**
   * Return a function that returns a value between 0 and 1 for a
   * resolution. Exponential scaling is assumed.
   * @param {number} [power] Power.
   * @return {function(number): number} Resolution for value function.
   */
  getResolutionForValueFunction(e) {
    e = e || 2;
    const n = this.getConstrainedResolution(this.maxResolution_), i = this.minResolution_, a = Math.log(n / i) / Math.log(e);
    return (
      /**
       * @param {number} value Value.
       * @return {number} Resolution.
       */
      function(o) {
        return n / Math.pow(e, o * a);
      }
    );
  }
  /**
   * Get the view rotation.
   * @return {number} The rotation of the view in radians.
   * @observable
   * @api
   */
  getRotation() {
    return (
      /** @type {number} */
      this.get(Ut.ROTATION)
    );
  }
  /**
   * Return a function that returns a resolution for a value between
   * 0 and 1. Exponential scaling is assumed.
   * @param {number} [power] Power.
   * @return {function(number): number} Value for resolution function.
   */
  getValueForResolutionFunction(e) {
    const n = Math.log(e || 2), i = this.getConstrainedResolution(this.maxResolution_), a = this.minResolution_, o = Math.log(i / a) / n;
    return (
      /**
       * @param {number} resolution Resolution.
       * @return {number} Value.
       */
      function(r) {
        return Math.log(i / r) / n / o;
      }
    );
  }
  /**
   * Returns the size of the viewport minus padding.
   * @private
   * @param {number} [rotation] Take into account the rotation of the viewport when giving the size
   * @return {import("./size.js").Size} Viewport size reduced by the padding.
   */
  getViewportSizeMinusPadding_(e) {
    let n = this.getViewportSize_(e);
    const i = this.padding_;
    return i && (n = [
      n[0] - i[1] - i[3],
      n[1] - i[0] - i[2]
    ]), n;
  }
  /**
   * @return {State} View state.
   */
  getState() {
    const e = this.getProjection(), n = this.getResolution(), i = this.getRotation();
    let a = (
      /** @type {import("./coordinate.js").Coordinate} */
      this.getCenterInternal()
    );
    const o = this.padding_;
    if (o) {
      const r = this.getViewportSizeMinusPadding_();
      a = us(
        a,
        this.getViewportSize_(),
        [r[0] / 2 + o[3], r[1] / 2 + o[0]],
        n,
        i
      );
    }
    return {
      center: a.slice(0),
      projection: e !== void 0 ? e : null,
      resolution: n,
      nextCenter: this.nextCenter_,
      nextResolution: this.nextResolution_,
      nextRotation: this.nextRotation_,
      rotation: i,
      zoom: this.getZoom()
    };
  }
  /**
   * @return {ViewStateLayerStateExtent} Like `FrameState`, but just `viewState` and `extent`.
   */
  getViewStateAndExtent() {
    return {
      viewState: this.getState(),
      extent: this.calculateExtent()
    };
  }
  /**
   * Get the current zoom level. This method may return non-integer zoom levels
   * if the view does not constrain the resolution, or if an interaction or
   * animation is underway.
   * @return {number|undefined} Zoom.
   * @api
   */
  getZoom() {
    let e;
    const n = this.getResolution();
    return n !== void 0 && (e = this.getZoomForResolution(n)), e;
  }
  /**
   * Get the zoom level for a resolution.
   * @param {number} resolution The resolution.
   * @return {number|undefined} The zoom level for the provided resolution.
   * @api
   */
  getZoomForResolution(e) {
    let n = this.minZoom_ || 0, i, a;
    if (this.resolutions_) {
      const o = Gl(this.resolutions_, e, 1);
      n = o, i = this.resolutions_[o], o == this.resolutions_.length - 1 ? a = 2 : a = i / this.resolutions_[o + 1];
    } else
      i = this.maxResolution_, a = this.zoomFactor_;
    return n + Math.log(i / e) / Math.log(a);
  }
  /**
   * Get the resolution for a zoom level.
   * @param {number} zoom Zoom level.
   * @return {number} The view resolution for the provided zoom level.
   * @api
   */
  getResolutionForZoom(e) {
    if (this.resolutions_) {
      if (this.resolutions_.length <= 1)
        return 0;
      const n = Ye(
        Math.floor(e),
        0,
        this.resolutions_.length - 2
      ), i = this.resolutions_[n] / this.resolutions_[n + 1];
      return this.resolutions_[n] / Math.pow(i, Ye(e - n, 0, 1));
    }
    return this.maxResolution_ / Math.pow(this.zoomFactor_, e - this.minZoom_);
  }
  /**
   * Fit the given geometry or extent based on the given map size and border.
   * The size is pixel dimensions of the box to fit the extent into.
   * In most cases you will want to use the map size, that is `map.getSize()`.
   * Takes care of the map angle.
   * @param {import("./geom/SimpleGeometry.js").default|import("./extent.js").Extent} geometryOrExtent The geometry or
   *     extent to fit the view to.
   * @param {FitOptions} [options] Options.
   * @api
   */
  fit(e, n) {
    let i;
    if (Se(
      Array.isArray(e) || typeof /** @type {?} */
      e.getSimplifiedGeometry == "function",
      "Invalid extent or geometry provided as `geometry`"
    ), Array.isArray(e)) {
      Se(
        !kr(e),
        "Cannot fit empty extent provided as `geometry`"
      );
      const a = xi(e, this.getProjection());
      i = Ju(a);
    } else if (e.getType() === "Circle") {
      const a = xi(
        e.getExtent(),
        this.getProjection()
      );
      i = Ju(a), i.rotate(this.getRotation(), zi(a));
    } else
      i = e;
    this.fitInternal(i, n);
  }
  /**
   * Calculate rotated extent
   * @param {import("./geom/SimpleGeometry.js").default} geometry The geometry.
   * @return {import("./extent").Extent} The rotated extent for the geometry.
   */
  rotatedExtentForGeometry(e) {
    const n = this.getRotation(), i = Math.cos(n), a = Math.sin(-n), o = e.getFlatCoordinates(), r = e.getStride();
    let s = 1 / 0, l = 1 / 0, c = -1 / 0, u = -1 / 0;
    for (let d = 0, h = o.length; d < h; d += r) {
      const f = o[d] * i - o[d + 1] * a, g = o[d] * a + o[d + 1] * i;
      s = Math.min(s, f), l = Math.min(l, g), c = Math.max(c, f), u = Math.max(u, g);
    }
    return [s, l, c, u];
  }
  /**
   * @param {import("./geom/SimpleGeometry.js").default} geometry The geometry.
   * @param {FitOptions} [options] Options.
   */
  fitInternal(e, n) {
    n = n || {};
    let i = n.size;
    i || (i = this.getViewportSizeMinusPadding_());
    const a = n.padding !== void 0 ? n.padding : [0, 0, 0, 0], o = n.nearest !== void 0 ? n.nearest : !1;
    let r;
    n.minResolution !== void 0 ? r = n.minResolution : n.maxZoom !== void 0 ? r = this.getResolutionForZoom(n.maxZoom) : r = 0;
    const s = this.rotatedExtentForGeometry(e);
    let l = this.getResolutionForExtentInternal(s, [
      i[0] - a[1] - a[3],
      i[1] - a[0] - a[2]
    ]);
    l = isNaN(l) ? r : Math.max(l, r), l = this.getConstrainedResolution(l, o ? 0 : 1);
    const c = this.getRotation(), u = Math.sin(c), d = Math.cos(c), h = zi(s);
    h[0] += (a[1] - a[3]) / 2 * l, h[1] += (a[0] - a[2]) / 2 * l;
    const f = h[0] * d - h[1] * u, g = h[1] * d + h[0] * u, m = this.getConstrainedCenter([f, g], l), v = n.callback ? n.callback : ca;
    n.duration !== void 0 ? this.animateInternal(
      {
        resolution: l,
        center: m,
        duration: n.duration,
        easing: n.easing
      },
      v
    ) : (this.targetResolution_ = l, this.targetCenter_ = m, this.applyTargetState_(!1, !0), Do(v, !0));
  }
  /**
   * Center on coordinate and view position.
   * @param {import("./coordinate.js").Coordinate} coordinate Coordinate.
   * @param {import("./size.js").Size} size Box pixel size.
   * @param {import("./pixel.js").Pixel} position Position on the view to center on.
   * @api
   */
  centerOn(e, n, i) {
    this.centerOnInternal(
      Ln(e, this.getProjection()),
      n,
      i
    );
  }
  /**
   * @param {import("./coordinate.js").Coordinate} coordinate Coordinate.
   * @param {import("./size.js").Size} size Box pixel size.
   * @param {import("./pixel.js").Pixel} position Position on the view to center on.
   */
  centerOnInternal(e, n, i) {
    this.setCenterInternal(
      us(
        e,
        n,
        i,
        this.getResolution(),
        this.getRotation()
      )
    );
  }
  /**
   * Calculates the shift between map and viewport center.
   * @param {import("./coordinate.js").Coordinate} center Center.
   * @param {number} resolution Resolution.
   * @param {number} rotation Rotation.
   * @param {import("./size.js").Size} size Size.
   * @return {Array<number>|undefined} Center shift.
   */
  calculateCenterShift(e, n, i, a) {
    let o;
    const r = this.padding_;
    if (r && e) {
      const s = this.getViewportSizeMinusPadding_(-i), l = us(
        e,
        a,
        [s[0] / 2 + r[3], s[1] / 2 + r[0]],
        n,
        i
      );
      o = [
        e[0] - l[0],
        e[1] - l[1]
      ];
    }
    return o;
  }
  /**
   * @return {boolean} Is defined.
   */
  isDef() {
    return !!this.getCenterInternal() && this.getResolution() !== void 0;
  }
  /**
   * Adds relative coordinates to the center of the view. Any extent constraint will apply.
   * @param {import("./coordinate.js").Coordinate} deltaCoordinates Relative value to add.
   * @api
   */
  adjustCenter(e) {
    const n = Us(this.targetCenter_, this.getProjection());
    this.setCenter([
      n[0] + e[0],
      n[1] + e[1]
    ]);
  }
  /**
   * Adds relative coordinates to the center of the view. Any extent constraint will apply.
   * @param {import("./coordinate.js").Coordinate} deltaCoordinates Relative value to add.
   */
  adjustCenterInternal(e) {
    const n = this.targetCenter_;
    this.setCenterInternal([
      n[0] + e[0],
      n[1] + e[1]
    ]);
  }
  /**
   * Multiply the view resolution by a ratio, optionally using an anchor. Any resolution
   * constraint will apply.
   * @param {number} ratio The ratio to apply on the view resolution.
   * @param {import("./coordinate.js").Coordinate} [anchor] The origin of the transformation.
   * @api
   */
  adjustResolution(e, n) {
    n = n && Ln(n, this.getProjection()), this.adjustResolutionInternal(e, n);
  }
  /**
   * Multiply the view resolution by a ratio, optionally using an anchor. Any resolution
   * constraint will apply.
   * @param {number} ratio The ratio to apply on the view resolution.
   * @param {import("./coordinate.js").Coordinate} [anchor] The origin of the transformation.
   */
  adjustResolutionInternal(e, n) {
    const i = this.getAnimating() || this.getInteracting(), a = this.getViewportSize_(this.getRotation()), o = this.constraints_.resolution(
      this.targetResolution_ * e,
      0,
      a,
      i
    );
    n && (this.targetCenter_ = this.calculateCenterZoom(o, n)), this.targetResolution_ *= e, this.applyTargetState_();
  }
  /**
   * Adds a value to the view zoom level, optionally using an anchor. Any resolution
   * constraint will apply.
   * @param {number} delta Relative value to add to the zoom level.
   * @param {import("./coordinate.js").Coordinate} [anchor] The origin of the transformation.
   * @api
   */
  adjustZoom(e, n) {
    this.adjustResolution(Math.pow(this.zoomFactor_, -e), n);
  }
  /**
   * Adds a value to the view rotation, optionally using an anchor. Any rotation
   * constraint will apply.
   * @param {number} delta Relative value to add to the zoom rotation, in radians.
   * @param {import("./coordinate.js").Coordinate} [anchor] The rotation center.
   * @api
   */
  adjustRotation(e, n) {
    n && (n = Ln(n, this.getProjection())), this.adjustRotationInternal(e, n);
  }
  /**
   * @param {number} delta Relative value to add to the zoom rotation, in radians.
   * @param {import("./coordinate.js").Coordinate} [anchor] The rotation center.
   */
  adjustRotationInternal(e, n) {
    const i = this.getAnimating() || this.getInteracting(), a = this.constraints_.rotation(
      this.targetRotation_ + e,
      i
    );
    n && (this.targetCenter_ = this.calculateCenterRotate(a, n)), this.targetRotation_ += e, this.applyTargetState_();
  }
  /**
   * Set the center of the current view. Any extent constraint will apply.
   * @param {import("./coordinate.js").Coordinate|undefined} center The center of the view.
   * @observable
   * @api
   */
  setCenter(e) {
    this.setCenterInternal(
      e && Ln(e, this.getProjection())
    );
  }
  /**
   * Set the center using the view projection (not the user projection).
   * @param {import("./coordinate.js").Coordinate|undefined} center The center of the view.
   */
  setCenterInternal(e) {
    this.targetCenter_ = e, this.applyTargetState_();
  }
  /**
   * @param {import("./ViewHint.js").default} hint Hint.
   * @param {number} delta Delta.
   * @return {number} New value.
   */
  setHint(e, n) {
    return this.hints_[e] += n, this.changed(), this.hints_[e];
  }
  /**
   * Set the resolution for this view. Any resolution constraint will apply.
   * @param {number|undefined} resolution The resolution of the view.
   * @observable
   * @api
   */
  setResolution(e) {
    this.targetResolution_ = e, this.applyTargetState_();
  }
  /**
   * Set the rotation for this view. Any rotation constraint will apply.
   * @param {number} rotation The rotation of the view in radians.
   * @observable
   * @api
   */
  setRotation(e) {
    this.targetRotation_ = e, this.applyTargetState_();
  }
  /**
   * Zoom to a specific zoom level. Any resolution constrain will apply.
   * @param {number} zoom Zoom level.
   * @api
   */
  setZoom(e) {
    this.setResolution(this.getResolutionForZoom(e));
  }
  /**
   * Recompute rotation/resolution/center based on target values.
   * Note: we have to compute rotation first, then resolution and center considering that
   * parameters can influence one another in case a view extent constraint is present.
   * @param {boolean} [doNotCancelAnims] Do not cancel animations.
   * @param {boolean} [forceMoving] Apply constraints as if the view is moving.
   * @private
   */
  applyTargetState_(e, n) {
    const i = this.getAnimating() || this.getInteracting() || n, a = this.constraints_.rotation(
      this.targetRotation_,
      i
    ), o = this.getViewportSize_(a), r = this.constraints_.resolution(
      this.targetResolution_,
      0,
      o,
      i
    ), s = this.constraints_.center(
      this.targetCenter_,
      r,
      o,
      i,
      this.calculateCenterShift(
        this.targetCenter_,
        r,
        a,
        o
      )
    );
    this.get(Ut.ROTATION) !== a && this.set(Ut.ROTATION, a), this.get(Ut.RESOLUTION) !== r && (this.set(Ut.RESOLUTION, r), this.set("zoom", this.getZoom(), !0)), (!s || !this.get(Ut.CENTER) || !cr(this.get(Ut.CENTER), s)) && this.set(Ut.CENTER, s), this.getAnimating() && !e && this.cancelAnimations(), this.cancelAnchor_ = void 0;
  }
  /**
   * If any constraints need to be applied, an animation will be triggered.
   * This is typically done on interaction end.
   * Note: calling this with a duration of 0 will apply the constrained values straight away,
   * without animation.
   * @param {number} [duration] The animation duration in ms.
   * @param {number} [resolutionDirection] Which direction to zoom.
   * @param {import("./coordinate.js").Coordinate} [anchor] The origin of the transformation.
   */
  resolveConstraints(e, n, i) {
    e = e !== void 0 ? e : 200;
    const a = n || 0, o = this.constraints_.rotation(this.targetRotation_), r = this.getViewportSize_(o), s = this.constraints_.resolution(
      this.targetResolution_,
      a,
      r
    ), l = this.constraints_.center(
      this.targetCenter_,
      s,
      r,
      !1,
      this.calculateCenterShift(
        this.targetCenter_,
        s,
        o,
        r
      )
    );
    if (e === 0 && !this.cancelAnchor_) {
      this.targetResolution_ = s, this.targetRotation_ = o, this.targetCenter_ = l, this.applyTargetState_();
      return;
    }
    i = i || (e === 0 ? this.cancelAnchor_ : void 0), this.cancelAnchor_ = void 0, (this.getResolution() !== s || this.getRotation() !== o || !this.getCenterInternal() || !cr(this.getCenterInternal(), l)) && (this.getAnimating() && this.cancelAnimations(), this.animateInternal({
      rotation: o,
      center: l,
      resolution: s,
      duration: e,
      easing: Ma,
      anchor: i
    }));
  }
  /**
   * Notify the View that an interaction has started.
   * The view state will be resolved to a stable one if needed
   * (depending on its constraints).
   * @api
   */
  beginInteraction() {
    this.resolveConstraints(0), this.setHint(lt.INTERACTING, 1);
  }
  /**
   * Notify the View that an interaction has ended. The view state will be resolved
   * to a stable one if needed (depending on its constraints).
   * @param {number} [duration] Animation duration in ms.
   * @param {number} [resolutionDirection] Which direction to zoom.
   * @param {import("./coordinate.js").Coordinate} [anchor] The origin of the transformation.
   * @api
   */
  endInteraction(e, n, i) {
    i = i && Ln(i, this.getProjection()), this.endInteractionInternal(e, n, i);
  }
  /**
   * Notify the View that an interaction has ended. The view state will be resolved
   * to a stable one if needed (depending on its constraints).
   * @param {number} [duration] Animation duration in ms.
   * @param {number} [resolutionDirection] Which direction to zoom.
   * @param {import("./coordinate.js").Coordinate} [anchor] The origin of the transformation.
   */
  endInteractionInternal(e, n, i) {
    this.getInteracting() && (this.setHint(lt.INTERACTING, -1), this.resolveConstraints(e, n, i));
  }
  /**
   * Get a valid position for the view center according to the current constraints.
   * @param {import("./coordinate.js").Coordinate|undefined} targetCenter Target center position.
   * @param {number} [targetResolution] Target resolution. If not supplied, the current one will be used.
   * This is useful to guess a valid center position at a different zoom level.
   * @return {import("./coordinate.js").Coordinate|undefined} Valid center position.
   */
  getConstrainedCenter(e, n) {
    const i = this.getViewportSize_(this.getRotation());
    return this.constraints_.center(
      e,
      n || this.getResolution(),
      i
    );
  }
  /**
   * Get a valid zoom level according to the current view constraints.
   * @param {number|undefined} targetZoom Target zoom.
   * @param {number} [direction=0] Indicate which resolution should be used
   * by a renderer if the view resolution does not match any resolution of the tile source.
   * If 0, the nearest resolution will be used. If 1, the nearest lower resolution
   * will be used. If -1, the nearest higher resolution will be used.
   * @return {number|undefined} Valid zoom level.
   */
  getConstrainedZoom(e, n) {
    const i = this.getResolutionForZoom(e);
    return this.getZoomForResolution(
      this.getConstrainedResolution(i, n)
    );
  }
  /**
   * Get a valid resolution according to the current view constraints.
   * @param {number|undefined} targetResolution Target resolution.
   * @param {number} [direction=0] Indicate which resolution should be used
   * by a renderer if the view resolution does not match any resolution of the tile source.
   * If 0, the nearest resolution will be used. If 1, the nearest lower resolution
   * will be used. If -1, the nearest higher resolution will be used.
   * @return {number|undefined} Valid resolution.
   */
  getConstrainedResolution(e, n) {
    n = n || 0;
    const i = this.getViewportSize_(this.getRotation());
    return this.constraints_.resolution(e, n, i);
  }
}
function Do(t, e) {
  setTimeout(function() {
    t(e);
  }, 0);
}
function Z_(t) {
  if (t.extent !== void 0) {
    const n = t.smoothExtentConstraint !== void 0 ? t.smoothExtentConstraint : !0;
    return $u(t.extent, t.constrainOnlyCenter, n);
  }
  const e = Zl(t.projection, "EPSG:3857");
  if (t.multiWorld !== !0 && e.isGlobal()) {
    const n = e.getExtent().slice();
    return n[0] = -1 / 0, n[2] = 1 / 0, $u(n, !1, !1);
  }
  return C_;
}
function H_(t) {
  let e, n, i, r = t.minZoom !== void 0 ? t.minZoom : cs, s = t.maxZoom !== void 0 ? t.maxZoom : 28;
  const l = t.zoomFactor !== void 0 ? t.zoomFactor : 2, c = t.multiWorld !== void 0 ? t.multiWorld : !1, u = t.smoothResolutionConstraint !== void 0 ? t.smoothResolutionConstraint : !0, d = t.showFullExtent !== void 0 ? t.showFullExtent : !1, h = Zl(t.projection, "EPSG:3857"), f = h.getExtent();
  let g = t.constrainOnlyCenter, m = t.extent;
  if (!c && !m && h.isGlobal() && (g = !1, m = f), t.resolutions !== void 0) {
    const v = t.resolutions;
    n = v[r], i = v[s] !== void 0 ? v[s] : v[v.length - 1], t.constrainResolution ? e = y_(
      v,
      u,
      !g && m,
      d
    ) : e = Wu(
      n,
      i,
      u,
      !g && m,
      d
    );
  } else {
    const y = (f ? Math.max(Re(f), ut(f)) : (
      // use an extent that can fit the whole world if need be
      360 * Ha.degrees / h.getMetersPerUnit()
    )) / Wl / Math.pow(2, cs), p = y / Math.pow(2, 28 - cs);
    n = t.maxResolution, n !== void 0 ? r = 0 : n = y / Math.pow(l, r), i = t.minResolution, i === void 0 && (t.maxZoom !== void 0 ? t.maxResolution !== void 0 ? i = n / Math.pow(l, s) : i = y / Math.pow(l, s) : i = p), s = r + Math.floor(
      Math.log(n / i) / Math.log(l)
    ), i = n / Math.pow(l, s - r), t.constrainResolution ? e = p_(
      l,
      n,
      i,
      u,
      !g && m,
      d
    ) : e = Wu(
      n,
      i,
      u,
      !g && m,
      d
    );
  }
  return {
    constraint: e,
    maxResolution: n,
    minResolution: i,
    minZoom: r,
    zoomFactor: l
  };
}
function K_(t) {
  if (t.enableRotation !== void 0 ? t.enableRotation : !0) {
    const n = t.constrainRotation;
    return n === void 0 || n === !0 ? S_() : n === !1 ? Uu : typeof n == "number" ? __(n) : Uu;
  }
  return Jl;
}
function q_(t) {
  return !(t.sourceCenter && t.targetCenter && !cr(t.sourceCenter, t.targetCenter) || t.sourceResolution !== t.targetResolution || t.sourceRotation !== t.targetRotation);
}
function us(t, e, n, i, a) {
  const o = Math.cos(-a);
  let r = Math.sin(-a), s = t[0] * o - t[1] * r, l = t[1] * o + t[0] * r;
  s += (e[0] / 2 - n[0]) * i, l += (n[1] - e[1] / 2) * i, r = -r;
  const c = s * o - l * r, u = l * o + s * r;
  return [c, u];
}
const sn = j_;
class J_ extends Ef {
  /**
   * @param {Options<SourceType>} options Layer options.
   */
  constructor(e) {
    const n = Object.assign({}, e);
    delete n.source, super(n), this.on, this.once, this.un, this.mapPrecomposeKey_ = null, this.mapRenderKey_ = null, this.sourceChangeKey_ = null, this.renderer_ = null, this.sourceReady_ = !1, this.rendered = !1, e.render && (this.render = e.render), e.map && this.setMap(e.map), this.addChangeListener(
      Ee.SOURCE,
      this.handleSourcePropertyChange_
    );
    const i = e.source ? (
      /** @type {SourceType} */
      e.source
    ) : null;
    this.setSource(i);
  }
  /**
   * @param {Array<import("./Layer.js").default>} [array] Array of layers (to be modified in place).
   * @return {Array<import("./Layer.js").default>} Array of layers.
   */
  getLayersArray(e) {
    return e = e || [], e.push(this), e;
  }
  /**
   * @param {Array<import("./Layer.js").State>} [states] Optional list of layer states (to be modified in place).
   * @return {Array<import("./Layer.js").State>} List of layer states.
   */
  getLayerStatesArray(e) {
    return e = e || [], e.push(this.getLayerState()), e;
  }
  /**
   * Get the layer source.
   * @return {SourceType|null} The layer source (or `null` if not yet set).
   * @observable
   * @api
   */
  getSource() {
    return (
      /** @type {SourceType} */
      this.get(Ee.SOURCE) || null
    );
  }
  /**
   * @return {SourceType|null} The source being rendered.
   */
  getRenderSource() {
    return this.getSource();
  }
  /**
   * @return {import("../source/Source.js").State} Source state.
   */
  getSourceState() {
    const e = this.getSource();
    return e ? e.getState() : "undefined";
  }
  /**
   * @private
   */
  handleSourceChange_() {
    this.changed(), !(this.sourceReady_ || this.getSource().getState() !== "ready") && (this.sourceReady_ = !0, this.dispatchEvent("sourceready"));
  }
  /**
   * @private
   */
  handleSourcePropertyChange_() {
    this.sourceChangeKey_ && (Ve(this.sourceChangeKey_), this.sourceChangeKey_ = null), this.sourceReady_ = !1;
    const e = this.getSource();
    e && (this.sourceChangeKey_ = Me(
      e,
      ge.CHANGE,
      this.handleSourceChange_,
      this
    ), e.getState() === "ready" && (this.sourceReady_ = !0, setTimeout(() => {
      this.dispatchEvent("sourceready");
    }, 0))), this.changed();
  }
  /**
   * @param {import("../pixel").Pixel} pixel Pixel.
   * @return {Promise<Array<import("../Feature").FeatureLike>>} Promise that resolves with
   * an array of features.
   */
  getFeatures(e) {
    return this.renderer_ ? this.renderer_.getFeatures(e) : Promise.resolve([]);
  }
  /**
   * @param {import("../pixel").Pixel} pixel Pixel.
   * @return {Uint8ClampedArray|Uint8Array|Float32Array|DataView|null} Pixel data.
   */
  getData(e) {
    return !this.renderer_ || !this.rendered ? null : this.renderer_.getData(e);
  }
  /**
   * The layer is visible on the map view, i.e. within its min/max resolution or zoom and
   * extent, not set to `visible: false`, and not inside a layer group that is set
   * to `visible: false`.
   * @param {View|import("../View.js").ViewStateLayerStateExtent} [view] View or {@link import("../Map.js").FrameState}.
   * Only required when the layer is not added to a map.
   * @return {boolean} The layer is visible in the map view.
   * @api
   */
  isVisible(e) {
    let n;
    const i = this.getMapInternal();
    !e && i && (e = i.getView()), e instanceof sn ? n = {
      viewState: e.getState(),
      extent: e.calculateExtent()
    } : n = e, !n.layerStatesArray && i && (n.layerStatesArray = i.getLayerGroup().getLayerStatesArray());
    let a;
    n.layerStatesArray ? a = n.layerStatesArray.find(
      (r) => r.layer === this
    ) : a = this.getLayerState();
    const o = this.getExtent();
    return oc(a, n.viewState) && (!o || Mt(o, n.extent));
  }
  /**
   * Get the attributions of the source of this layer for the given view.
   * @param {View|import("../View.js").ViewStateLayerStateExtent} [view] View or {@link import("../Map.js").FrameState}.
   * Only required when the layer is not added to a map.
   * @return {Array<string>} Attributions for this layer at the given view.
   * @api
   */
  getAttributions(e) {
    if (!this.isVisible(e))
      return [];
    let n;
    const i = this.getSource();
    if (i && (n = i.getAttributions()), !n)
      return [];
    const a = e instanceof sn ? e.getViewStateAndExtent() : e;
    let o = n(a);
    return Array.isArray(o) || (o = [o]), o;
  }
  /**
   * In charge to manage the rendering of the layer. One layer type is
   * bounded with one layer renderer.
   * @param {?import("../Map.js").FrameState} frameState Frame state.
   * @param {HTMLElement} target Target which the renderer may (but need not) use
   * for rendering its content.
   * @return {HTMLElement|null} The rendered element.
   */
  render(e, n) {
    const i = this.getRenderer();
    return i.prepareFrame(e) ? (this.rendered = !0, i.renderFrame(e, n)) : null;
  }
  /**
   * Called when a layer is not visible during a map render.
   */
  unrender() {
    this.rendered = !1;
  }
  /** @return {string} Declutter */
  getDeclutter() {
  }
  /**
   * @param {import("../Map.js").FrameState} frameState Frame state.
   * @param {import("../layer/Layer.js").State} layerState Layer state.
   */
  renderDeclutter(e, n) {
  }
  /**
   * When the renderer follows a layout -> render approach, do the final rendering here.
   * @param {import('../Map.js').FrameState} frameState Frame state
   */
  renderDeferred(e) {
    const n = this.getRenderer();
    n && n.renderDeferred(e);
  }
  /**
   * For use inside the library only.
   * @param {import("../Map.js").default|null} map Map.
   */
  setMapInternal(e) {
    e || this.unrender(), this.set(Ee.MAP, e);
  }
  /**
   * For use inside the library only.
   * @return {import("../Map.js").default|null} Map.
   */
  getMapInternal() {
    return this.get(Ee.MAP);
  }
  /**
   * Sets the layer to be rendered on top of other layers on a map. The map will
   * not manage this layer in its layers collection. This
   * is useful for temporary layers. To remove an unmanaged layer from the map,
   * use `#setMap(null)`.
   *
   * To add the layer to a map and have it managed by the map, use
   * {@link module:ol/Map~Map#addLayer} instead.
   * @param {import("../Map.js").default|null} map Map.
   * @api
   */
  setMap(e) {
    this.mapPrecomposeKey_ && (Ve(this.mapPrecomposeKey_), this.mapPrecomposeKey_ = null), e || this.changed(), this.mapRenderKey_ && (Ve(this.mapRenderKey_), this.mapRenderKey_ = null), e && (this.mapPrecomposeKey_ = Me(
      e,
      Ot.PRECOMPOSE,
      function(n) {
        const a = /** @type {import("../render/Event.js").default} */ n.frameState.layerStatesArray, o = this.getLayerState(!1);
        Se(
          !a.some(function(r) {
            return r.layer === o.layer;
          }),
          "A layer can only be added to the map once. Use either `layer.setMap()` or `map.addLayer()`, not both."
        ), a.push(o);
      },
      this
    ), this.mapRenderKey_ = Me(this, ge.CHANGE, e.render, e), this.changed());
  }
  /**
   * Set the layer source.
   * @param {SourceType|null} source The layer source.
   * @observable
   * @api
   */
  setSource(e) {
    this.set(Ee.SOURCE, e);
  }
  /**
   * Get the renderer for this layer.
   * @return {RendererType|null} The layer renderer.
   */
  getRenderer() {
    return this.renderer_ || (this.renderer_ = this.createRenderer()), this.renderer_;
  }
  /**
   * @return {boolean} The layer has a renderer.
   */
  hasRenderer() {
    return !!this.renderer_;
  }
  /**
   * Create a renderer for this layer.
   * @return {RendererType} A layer renderer.
   * @protected
   */
  createRenderer() {
    return null;
  }
  /**
   * Clean up.
   */
  disposeInternal() {
    this.renderer_ && (this.renderer_.dispose(), delete this.renderer_), this.setSource(null), super.disposeInternal();
  }
}
function oc(t, e) {
  if (!t.visible)
    return !1;
  const n = e.resolution;
  if (n < t.minResolution || n >= t.maxResolution)
    return !1;
  const i = e.zoom;
  return i > t.minZoom && i <= t.maxZoom;
}
const Dr = J_;
function Q_(t, e, n, i, a) {
  tg(t, e, n || 0, i || t.length - 1, a || eS);
}
function tg(t, e, n, i, a) {
  for (; i > n; ) {
    if (i - n > 600) {
      var o = i - n + 1, r = e - n + 1, s = Math.log(o), l = 0.5 * Math.exp(2 * s / 3), c = 0.5 * Math.sqrt(s * l * (o - l) / o) * (r - o / 2 < 0 ? -1 : 1), u = Math.max(n, Math.floor(e - r * l / o + c)), d = Math.min(i, Math.floor(e + (o - r) * l / o + c));
      tg(t, e, u, d, a);
    }
    var h = t[e], f = n, g = i;
    for (Ra(t, n, e), a(t[i], h) > 0 && Ra(t, n, i); f < g; ) {
      for (Ra(t, f, g), f++, g--; a(t[f], h) < 0; )
        f++;
      for (; a(t[g], h) > 0; )
        g--;
    }
    a(t[n], h) === 0 ? Ra(t, n, g) : (g++, Ra(t, g, i)), g <= e && (n = g + 1), e <= g && (i = g - 1);
  }
}
function Ra(t, e, n) {
  var i = t[e];
  t[e] = t[n], t[n] = i;
}
function eS(t, e) {
  return t < e ? -1 : t > e ? 1 : 0;
}
let ng = class {
  constructor(e = 9) {
    this._maxEntries = Math.max(4, e), this._minEntries = Math.max(2, Math.ceil(this._maxEntries * 0.4)), this.clear();
  }
  all() {
    return this._all(this.data, []);
  }
  search(e) {
    let n = this.data;
    const i = [];
    if (!No(e, n))
      return i;
    const a = this.toBBox, o = [];
    for (; n; ) {
      for (let r = 0; r < n.children.length; r++) {
        const s = n.children[r], l = n.leaf ? a(s) : s;
        No(e, l) && (n.leaf ? i.push(s) : hs(e, l) ? this._all(s, i) : o.push(s));
      }
      n = o.pop();
    }
    return i;
  }
  collides(e) {
    let n = this.data;
    if (!No(e, n))
      return !1;
    const i = [];
    for (; n; ) {
      for (let a = 0; a < n.children.length; a++) {
        const o = n.children[a], r = n.leaf ? this.toBBox(o) : o;
        if (No(e, r)) {
          if (n.leaf || hs(e, r))
            return !0;
          i.push(o);
        }
      }
      n = i.pop();
    }
    return !1;
  }
  load(e) {
    if (!(e && e.length))
      return this;
    if (e.length < this._minEntries) {
      for (let i = 0; i < e.length; i++)
        this.insert(e[i]);
      return this;
    }
    let n = this._build(e.slice(), 0, e.length - 1, 0);
    if (!this.data.children.length)
      this.data = n;
    else if (this.data.height === n.height)
      this._splitRoot(this.data, n);
    else {
      if (this.data.height < n.height) {
        const i = this.data;
        this.data = n, n = i;
      }
      this._insert(n, this.data.height - n.height - 1, !0);
    }
    return this;
  }
  insert(e) {
    return e && this._insert(e, this.data.height - 1), this;
  }
  clear() {
    return this.data = ji([]), this;
  }
  remove(e, n) {
    if (!e)
      return this;
    let i = this.data;
    const a = this.toBBox(e), o = [], r = [];
    let s, l, c;
    for (; i || o.length; ) {
      if (i || (i = o.pop(), l = o[o.length - 1], s = r.pop(), c = !0), i.leaf) {
        const u = tS(e, i.children, n);
        if (u !== -1)
          return i.children.splice(u, 1), o.push(i), this._condense(o), this;
      }
      !c && !i.leaf && hs(i, a) ? (o.push(i), r.push(s), s = 0, l = i, i = i.children[0]) : l ? (s++, i = l.children[s], c = !1) : i = null;
    }
    return this;
  }
  toBBox(e) {
    return e;
  }
  compareMinX(e, n) {
    return e.minX - n.minX;
  }
  compareMinY(e, n) {
    return e.minY - n.minY;
  }
  toJSON() {
    return this.data;
  }
  fromJSON(e) {
    return this.data = e, this;
  }
  _all(e, n) {
    const i = [];
    for (; e; )
      e.leaf ? n.push(...e.children) : i.push(...e.children), e = i.pop();
    return n;
  }
  _build(e, n, i, a) {
    const o = i - n + 1;
    let r = this._maxEntries, s;
    if (o <= r)
      return s = ji(e.slice(n, i + 1)), $i(s, this.toBBox), s;
    a || (a = Math.ceil(Math.log(o) / Math.log(r)), r = Math.ceil(o / Math.pow(r, a - 1))), s = ji([]), s.leaf = !1, s.height = a;
    const l = Math.ceil(o / r), c = l * Math.ceil(Math.sqrt(r));
    Qu(e, n, i, c, this.compareMinX);
    for (let u = n; u <= i; u += c) {
      const d = Math.min(u + c - 1, i);
      Qu(e, u, d, l, this.compareMinY);
      for (let h = u; h <= d; h += l) {
        const f = Math.min(h + l - 1, d);
        s.children.push(this._build(e, h, f, a - 1));
      }
    }
    return $i(s, this.toBBox), s;
  }
  _chooseSubtree(e, n, i, a) {
    for (; a.push(n), !(n.leaf || a.length - 1 === i); ) {
      let o = 1 / 0, r = 1 / 0, s;
      for (let l = 0; l < n.children.length; l++) {
        const c = n.children[l], u = ds(c), d = aS(e, c) - u;
        d < r ? (r = d, o = u < o ? u : o, s = c) : d === r && u < o && (o = u, s = c);
      }
      n = s || n.children[0];
    }
    return n;
  }
  _insert(e, n, i) {
    const a = i ? e : this.toBBox(e), o = [], r = this._chooseSubtree(a, this.data, n, o);
    for (r.children.push(e), Fa(r, a); n >= 0 && o[n].children.length > this._maxEntries; )
      this._split(o, n), n--;
    this._adjustParentBBoxes(a, o, n);
  }
  // split overflowed node into two
  _split(e, n) {
    const i = e[n], a = i.children.length, o = this._minEntries;
    this._chooseSplitAxis(i, o, a);
    const r = this._chooseSplitIndex(i, o, a), s = ji(i.children.splice(r, i.children.length - r));
    s.height = i.height, s.leaf = i.leaf, $i(i, this.toBBox), $i(s, this.toBBox), n ? e[n - 1].children.push(s) : this._splitRoot(i, s);
  }
  _splitRoot(e, n) {
    this.data = ji([e, n]), this.data.height = e.height + 1, this.data.leaf = !1, $i(this.data, this.toBBox);
  }
  _chooseSplitIndex(e, n, i) {
    let a, o = 1 / 0, r = 1 / 0;
    for (let s = n; s <= i - n; s++) {
      const l = Ba(e, 0, s, this.toBBox), c = Ba(e, s, i, this.toBBox), u = oS(l, c), d = ds(l) + ds(c);
      u < o ? (o = u, a = s, r = d < r ? d : r) : u === o && d < r && (r = d, a = s);
    }
    return a || i - n;
  }
  // sorts node children by the best axis for split
  _chooseSplitAxis(e, n, i) {
    const a = e.leaf ? this.compareMinX : nS, o = e.leaf ? this.compareMinY : iS, r = this._allDistMargin(e, n, i, a), s = this._allDistMargin(e, n, i, o);
    r < s && e.children.sort(a);
  }
  // total margin of all possible split distributions where each node is at least m full
  _allDistMargin(e, n, i, a) {
    e.children.sort(a);
    const o = this.toBBox, r = Ba(e, 0, n, o), s = Ba(e, i - n, i, o);
    let l = Go(r) + Go(s);
    for (let c = n; c < i - n; c++) {
      const u = e.children[c];
      Fa(r, e.leaf ? o(u) : u), l += Go(r);
    }
    for (let c = i - n - 1; c >= n; c--) {
      const u = e.children[c];
      Fa(s, e.leaf ? o(u) : u), l += Go(s);
    }
    return l;
  }
  _adjustParentBBoxes(e, n, i) {
    for (let a = i; a >= 0; a--)
      Fa(n[a], e);
  }
  _condense(e) {
    for (let n = e.length - 1, i; n >= 0; n--)
      e[n].children.length === 0 ? n > 0 ? (i = e[n - 1].children, i.splice(i.indexOf(e[n]), 1)) : this.clear() : $i(e[n], this.toBBox);
  }
};
function tS(t, e, n) {
  if (!n)
    return e.indexOf(t);
  for (let i = 0; i < e.length; i++)
    if (n(t, e[i]))
      return i;
  return -1;
}
function $i(t, e) {
  Ba(t, 0, t.children.length, e, t);
}
function Ba(t, e, n, i, a) {
  a || (a = ji(null)), a.minX = 1 / 0, a.minY = 1 / 0, a.maxX = -1 / 0, a.maxY = -1 / 0;
  for (let o = e; o < n; o++) {
    const r = t.children[o];
    Fa(a, t.leaf ? i(r) : r);
  }
  return a;
}
function Fa(t, e) {
  return t.minX = Math.min(t.minX, e.minX), t.minY = Math.min(t.minY, e.minY), t.maxX = Math.max(t.maxX, e.maxX), t.maxY = Math.max(t.maxY, e.maxY), t;
}
function nS(t, e) {
  return t.minX - e.minX;
}
function iS(t, e) {
  return t.minY - e.minY;
}
function ds(t) {
  return (t.maxX - t.minX) * (t.maxY - t.minY);
}
function Go(t) {
  return t.maxX - t.minX + (t.maxY - t.minY);
}
function aS(t, e) {
  return (Math.max(e.maxX, t.maxX) - Math.min(e.minX, t.minX)) * (Math.max(e.maxY, t.maxY) - Math.min(e.minY, t.minY));
}
function oS(t, e) {
  const n = Math.max(t.minX, e.minX), i = Math.max(t.minY, e.minY), a = Math.min(t.maxX, e.maxX), o = Math.min(t.maxY, e.maxY);
  return Math.max(0, a - n) * Math.max(0, o - i);
}
function hs(t, e) {
  return t.minX <= e.minX && t.minY <= e.minY && e.maxX <= t.maxX && e.maxY <= t.maxY;
}
function No(t, e) {
  return e.minX <= t.maxX && e.minY <= t.maxY && e.maxX >= t.minX && e.maxY >= t.minY;
}
function ji(t) {
  return {
    children: t,
    height: 1,
    leaf: !0,
    minX: 1 / 0,
    minY: 1 / 0,
    maxX: -1 / 0,
    maxY: -1 / 0
  };
}
function Qu(t, e, n, i, a) {
  const o = [e, n];
  for (; o.length; ) {
    if (n = o.pop(), e = o.pop(), n - e <= i)
      continue;
    const r = e + Math.ceil((n - e) / i / 2) * i;
    Q_(t, r, e, n, a), o.push(e, r, r, n);
  }
}
const Ce = {
  IDLE: 0,
  LOADING: 1,
  LOADED: 2,
  ERROR: 3,
  EMPTY: 4
};
function ed(t) {
  return t[0] > 0 && t[1] > 0;
}
function rS(t, e, n) {
  return n === void 0 && (n = [0, 0]), n[0] = t[0] * e + 0.5 | 0, n[1] = t[1] * e + 0.5 | 0, n;
}
function At(t, e) {
  return Array.isArray(t) ? t : (e === void 0 ? e = [t, t] : (e[0] = t, e[1] = t), e);
}
class rc {
  /**
   * @param {Options} options Options.
   */
  constructor(e) {
    this.opacity_ = e.opacity, this.rotateWithView_ = e.rotateWithView, this.rotation_ = e.rotation, this.scale_ = e.scale, this.scaleArray_ = At(e.scale), this.displacement_ = e.displacement, this.declutterMode_ = e.declutterMode;
  }
  /**
   * Clones the style.
   * @return {ImageStyle} The cloned style.
   * @api
   */
  clone() {
    const e = this.getScale();
    return new rc({
      opacity: this.getOpacity(),
      scale: Array.isArray(e) ? e.slice() : e,
      rotation: this.getRotation(),
      rotateWithView: this.getRotateWithView(),
      displacement: this.getDisplacement().slice(),
      declutterMode: this.getDeclutterMode()
    });
  }
  /**
   * Get the symbolizer opacity.
   * @return {number} Opacity.
   * @api
   */
  getOpacity() {
    return this.opacity_;
  }
  /**
   * Determine whether the symbolizer rotates with the map.
   * @return {boolean} Rotate with map.
   * @api
   */
  getRotateWithView() {
    return this.rotateWithView_;
  }
  /**
   * Get the symoblizer rotation.
   * @return {number} Rotation.
   * @api
   */
  getRotation() {
    return this.rotation_;
  }
  /**
   * Get the symbolizer scale.
   * @return {number|import("../size.js").Size} Scale.
   * @api
   */
  getScale() {
    return this.scale_;
  }
  /**
   * Get the symbolizer scale array.
   * @return {import("../size.js").Size} Scale array.
   */
  getScaleArray() {
    return this.scaleArray_;
  }
  /**
   * Get the displacement of the shape
   * @return {Array<number>} Shape's center displacement
   * @api
   */
  getDisplacement() {
    return this.displacement_;
  }
  /**
   * Get the declutter mode of the shape
   * @return {import("./Style.js").DeclutterMode} Shape's declutter mode
   * @api
   */
  getDeclutterMode() {
    return this.declutterMode_;
  }
  /**
   * Get the anchor point in pixels. The anchor determines the center point for the
   * symbolizer.
   * @abstract
   * @return {Array<number>} Anchor.
   */
  getAnchor() {
    return be();
  }
  /**
   * Get the image element for the symbolizer.
   * @abstract
   * @param {number} pixelRatio Pixel ratio.
   * @return {import('../DataTile.js').ImageLike} Image element.
   */
  getImage(e) {
    return be();
  }
  /**
   * @abstract
   * @return {import('../DataTile.js').ImageLike} Image element.
   */
  getHitDetectionImage() {
    return be();
  }
  /**
   * Get the image pixel ratio.
   * @param {number} pixelRatio Pixel ratio.
   * @return {number} Pixel ratio.
   */
  getPixelRatio(e) {
    return 1;
  }
  /**
   * @abstract
   * @return {import("../ImageState.js").default} Image state.
   */
  getImageState() {
    return be();
  }
  /**
   * @abstract
   * @return {import("../size.js").Size} Image size.
   */
  getImageSize() {
    return be();
  }
  /**
   * Get the origin of the symbolizer.
   * @abstract
   * @return {Array<number>} Origin.
   */
  getOrigin() {
    return be();
  }
  /**
   * Get the size of the symbolizer (in pixels).
   * @abstract
   * @return {import("../size.js").Size} Size.
   */
  getSize() {
    return be();
  }
  /**
   * Set the displacement.
   *
   * @param {Array<number>} displacement Displacement.
   * @api
   */
  setDisplacement(e) {
    this.displacement_ = e;
  }
  /**
   * Set the opacity.
   *
   * @param {number} opacity Opacity.
   * @api
   */
  setOpacity(e) {
    this.opacity_ = e;
  }
  /**
   * Set whether to rotate the style with the view.
   *
   * @param {boolean} rotateWithView Rotate with map.
   * @api
   */
  setRotateWithView(e) {
    this.rotateWithView_ = e;
  }
  /**
   * Set the rotation.
   *
   * @param {number} rotation Rotation.
   * @api
   */
  setRotation(e) {
    this.rotation_ = e;
  }
  /**
   * Set the scale.
   *
   * @param {number|import("../size.js").Size} scale Scale.
   * @api
   */
  setScale(e) {
    this.scale_ = e, this.scaleArray_ = At(e);
  }
  /**
   * @abstract
   * @param {function(import("../events/Event.js").default): void} listener Listener function.
   */
  listenImageChange(e) {
    be();
  }
  /**
   * Load not yet loaded URI.
   * @abstract
   */
  load() {
    be();
  }
  /**
   * @abstract
   * @param {function(import("../events/Event.js").default): void} listener Listener function.
   */
  unlistenImageChange(e) {
    be();
  }
  /**
   * @return {Promise<void>} `false` or Promise that resolves when the style is ready to use.
   */
  ready() {
    return Promise.resolve();
  }
}
const ig = rc, Ja = {
  name: "rgb",
  min: [0, 0, 0],
  max: [255, 255, 255],
  channel: ["red", "green", "blue"],
  alias: ["RGB"]
};
var et = {
  name: "xyz",
  min: [0, 0, 0],
  channel: ["X", "Y", "Z"],
  alias: ["XYZ", "ciexyz", "cie1931"]
};
et.whitepoint = {
  //1931 2°
  2: {
    //incadescent
    A: [109.85, 100, 35.585],
    // B:[],
    C: [98.074, 100, 118.232],
    D50: [96.422, 100, 82.521],
    D55: [95.682, 100, 92.149],
    //daylight
    D65: [95.045592705167, 100, 108.9057750759878],
    D75: [94.972, 100, 122.638],
    //flourescent
    // F1: [],
    F2: [99.187, 100, 67.395],
    // F3: [],
    // F4: [],
    // F5: [],
    // F6:[],
    F7: [95.044, 100, 108.755],
    // F8: [],
    // F9: [],
    // F10: [],
    F11: [100.966, 100, 64.37],
    // F12: [],
    E: [100, 100, 100]
  },
  //1964  10°
  10: {
    //incadescent
    A: [111.144, 100, 35.2],
    C: [97.285, 100, 116.145],
    D50: [96.72, 100, 81.427],
    D55: [95.799, 100, 90.926],
    //daylight
    D65: [94.811, 100, 107.304],
    D75: [94.416, 100, 120.641],
    //flourescent
    F2: [103.28, 100, 69.026],
    F7: [95.792, 100, 107.687],
    F11: [103.866, 100, 65.627],
    E: [100, 100, 100]
  }
};
et.max = et.whitepoint[2].D65;
et.rgb = function(t, e) {
  e = e || et.whitepoint[2].E;
  var n = t[0] / e[0], i = t[1] / e[1], a = t[2] / e[2], o, r, s;
  return o = n * 3.240969941904521 + i * -1.537383177570093 + a * -0.498610760293, r = n * -0.96924363628087 + i * 1.87596750150772 + a * 0.041555057407175, s = n * 0.055630079696993 + i * -0.20397695888897 + a * 1.056971514242878, o = o > 31308e-7 ? 1.055 * Math.pow(o, 1 / 2.4) - 0.055 : o = o * 12.92, r = r > 31308e-7 ? 1.055 * Math.pow(r, 1 / 2.4) - 0.055 : r = r * 12.92, s = s > 31308e-7 ? 1.055 * Math.pow(s, 1 / 2.4) - 0.055 : s = s * 12.92, o = Math.min(Math.max(0, o), 1), r = Math.min(Math.max(0, r), 1), s = Math.min(Math.max(0, s), 1), [o * 255, r * 255, s * 255];
};
Ja.xyz = function(t, e) {
  var n = t[0] / 255, i = t[1] / 255, a = t[2] / 255;
  n = n > 0.04045 ? Math.pow((n + 0.055) / 1.055, 2.4) : n / 12.92, i = i > 0.04045 ? Math.pow((i + 0.055) / 1.055, 2.4) : i / 12.92, a = a > 0.04045 ? Math.pow((a + 0.055) / 1.055, 2.4) : a / 12.92;
  var o = n * 0.41239079926595 + i * 0.35758433938387 + a * 0.18048078840183, r = n * 0.21263900587151 + i * 0.71516867876775 + a * 0.072192315360733, s = n * 0.019330818715591 + i * 0.11919477979462 + a * 0.95053215224966;
  return e = e || et.whitepoint[2].E, [o * e[0], r * e[1], s * e[2]];
};
const sc = {
  name: "luv",
  //NOTE: luv has no rigidly defined limits
  //easyrgb fails to get proper coords
  //boronine states no rigid limits
  //colorMine refers this ones:
  min: [0, -134, -140],
  max: [100, 224, 122],
  channel: ["lightness", "u", "v"],
  alias: ["LUV", "cieluv", "cie1976"],
  xyz: function(t, e, n) {
    var i, a, o, r, s, l, c, u, d, h, f, g, m;
    if (o = t[0], r = t[1], s = t[2], o === 0)
      return [0, 0, 0];
    var v = 0.0011070564598794539;
    return e = e || "D65", n = n || 2, d = et.whitepoint[n][e][0], h = et.whitepoint[n][e][1], f = et.whitepoint[n][e][2], g = 4 * d / (d + 15 * h + 3 * f), m = 9 * h / (d + 15 * h + 3 * f), i = r / (13 * o) + g || 0, a = s / (13 * o) + m || 0, c = o > 8 ? h * Math.pow((o + 16) / 116, 3) : h * o * v, l = c * 9 * i / (4 * a) || 0, u = c * (12 - 3 * i - 20 * a) / (4 * a) || 0, [l, c, u];
  }
};
et.luv = function(t, e, n) {
  var i, a, o, r, s, l, c, u, d, h, f, g, m, v = 0.008856451679035631, y = 903.2962962962961;
  e = e || "D65", n = n || 2, d = et.whitepoint[n][e][0], h = et.whitepoint[n][e][1], f = et.whitepoint[n][e][2], g = 4 * d / (d + 15 * h + 3 * f), m = 9 * h / (d + 15 * h + 3 * f), l = t[0], c = t[1], u = t[2], i = 4 * l / (l + 15 * c + 3 * u) || 0, a = 9 * c / (l + 15 * c + 3 * u) || 0;
  var p = c / h;
  return o = p <= v ? y * p : 116 * Math.pow(p, 1 / 3) - 16, r = 13 * o * (i - g), s = 13 * o * (a - m), [o, r, s];
};
var ag = {
  name: "lchuv",
  channel: ["lightness", "chroma", "hue"],
  alias: ["LCHuv", "cielchuv"],
  min: [0, 0, 0],
  max: [100, 100, 360],
  luv: function(t) {
    var e = t[0], n = t[1], i = t[2], a, o, r;
    return r = i / 360 * 2 * Math.PI, a = n * Math.cos(r), o = n * Math.sin(r), [e, a, o];
  },
  xyz: function(t) {
    return sc.xyz(ag.luv(t));
  }
};
sc.lchuv = function(t) {
  var e = t[0], n = t[1], i = t[2], a = Math.sqrt(n * n + i * i), o = Math.atan2(i, n), r = o * 360 / 2 / Math.PI;
  return r < 0 && (r += 360), [e, a, r];
};
et.lchuv = function(t) {
  return sc.lchuv(et.luv(t));
};
const td = {
  aliceblue: [240, 248, 255],
  antiquewhite: [250, 235, 215],
  aqua: [0, 255, 255],
  aquamarine: [127, 255, 212],
  azure: [240, 255, 255],
  beige: [245, 245, 220],
  bisque: [255, 228, 196],
  black: [0, 0, 0],
  blanchedalmond: [255, 235, 205],
  blue: [0, 0, 255],
  blueviolet: [138, 43, 226],
  brown: [165, 42, 42],
  burlywood: [222, 184, 135],
  cadetblue: [95, 158, 160],
  chartreuse: [127, 255, 0],
  chocolate: [210, 105, 30],
  coral: [255, 127, 80],
  cornflowerblue: [100, 149, 237],
  cornsilk: [255, 248, 220],
  crimson: [220, 20, 60],
  cyan: [0, 255, 255],
  darkblue: [0, 0, 139],
  darkcyan: [0, 139, 139],
  darkgoldenrod: [184, 134, 11],
  darkgray: [169, 169, 169],
  darkgreen: [0, 100, 0],
  darkgrey: [169, 169, 169],
  darkkhaki: [189, 183, 107],
  darkmagenta: [139, 0, 139],
  darkolivegreen: [85, 107, 47],
  darkorange: [255, 140, 0],
  darkorchid: [153, 50, 204],
  darkred: [139, 0, 0],
  darksalmon: [233, 150, 122],
  darkseagreen: [143, 188, 143],
  darkslateblue: [72, 61, 139],
  darkslategray: [47, 79, 79],
  darkslategrey: [47, 79, 79],
  darkturquoise: [0, 206, 209],
  darkviolet: [148, 0, 211],
  deeppink: [255, 20, 147],
  deepskyblue: [0, 191, 255],
  dimgray: [105, 105, 105],
  dimgrey: [105, 105, 105],
  dodgerblue: [30, 144, 255],
  firebrick: [178, 34, 34],
  floralwhite: [255, 250, 240],
  forestgreen: [34, 139, 34],
  fuchsia: [255, 0, 255],
  gainsboro: [220, 220, 220],
  ghostwhite: [248, 248, 255],
  gold: [255, 215, 0],
  goldenrod: [218, 165, 32],
  gray: [128, 128, 128],
  green: [0, 128, 0],
  greenyellow: [173, 255, 47],
  grey: [128, 128, 128],
  honeydew: [240, 255, 240],
  hotpink: [255, 105, 180],
  indianred: [205, 92, 92],
  indigo: [75, 0, 130],
  ivory: [255, 255, 240],
  khaki: [240, 230, 140],
  lavender: [230, 230, 250],
  lavenderblush: [255, 240, 245],
  lawngreen: [124, 252, 0],
  lemonchiffon: [255, 250, 205],
  lightblue: [173, 216, 230],
  lightcoral: [240, 128, 128],
  lightcyan: [224, 255, 255],
  lightgoldenrodyellow: [250, 250, 210],
  lightgray: [211, 211, 211],
  lightgreen: [144, 238, 144],
  lightgrey: [211, 211, 211],
  lightpink: [255, 182, 193],
  lightsalmon: [255, 160, 122],
  lightseagreen: [32, 178, 170],
  lightskyblue: [135, 206, 250],
  lightslategray: [119, 136, 153],
  lightslategrey: [119, 136, 153],
  lightsteelblue: [176, 196, 222],
  lightyellow: [255, 255, 224],
  lime: [0, 255, 0],
  limegreen: [50, 205, 50],
  linen: [250, 240, 230],
  magenta: [255, 0, 255],
  maroon: [128, 0, 0],
  mediumaquamarine: [102, 205, 170],
  mediumblue: [0, 0, 205],
  mediumorchid: [186, 85, 211],
  mediumpurple: [147, 112, 219],
  mediumseagreen: [60, 179, 113],
  mediumslateblue: [123, 104, 238],
  mediumspringgreen: [0, 250, 154],
  mediumturquoise: [72, 209, 204],
  mediumvioletred: [199, 21, 133],
  midnightblue: [25, 25, 112],
  mintcream: [245, 255, 250],
  mistyrose: [255, 228, 225],
  moccasin: [255, 228, 181],
  navajowhite: [255, 222, 173],
  navy: [0, 0, 128],
  oldlace: [253, 245, 230],
  olive: [128, 128, 0],
  olivedrab: [107, 142, 35],
  orange: [255, 165, 0],
  orangered: [255, 69, 0],
  orchid: [218, 112, 214],
  palegoldenrod: [238, 232, 170],
  palegreen: [152, 251, 152],
  paleturquoise: [175, 238, 238],
  palevioletred: [219, 112, 147],
  papayawhip: [255, 239, 213],
  peachpuff: [255, 218, 185],
  peru: [205, 133, 63],
  pink: [255, 192, 203],
  plum: [221, 160, 221],
  powderblue: [176, 224, 230],
  purple: [128, 0, 128],
  rebeccapurple: [102, 51, 153],
  red: [255, 0, 0],
  rosybrown: [188, 143, 143],
  royalblue: [65, 105, 225],
  saddlebrown: [139, 69, 19],
  salmon: [250, 128, 114],
  sandybrown: [244, 164, 96],
  seagreen: [46, 139, 87],
  seashell: [255, 245, 238],
  sienna: [160, 82, 45],
  silver: [192, 192, 192],
  skyblue: [135, 206, 235],
  slateblue: [106, 90, 205],
  slategray: [112, 128, 144],
  slategrey: [112, 128, 144],
  snow: [255, 250, 250],
  springgreen: [0, 255, 127],
  steelblue: [70, 130, 180],
  tan: [210, 180, 140],
  teal: [0, 128, 128],
  thistle: [216, 191, 216],
  tomato: [255, 99, 71],
  turquoise: [64, 224, 208],
  violet: [238, 130, 238],
  wheat: [245, 222, 179],
  white: [255, 255, 255],
  whitesmoke: [245, 245, 245],
  yellow: [255, 255, 0],
  yellowgreen: [154, 205, 50]
};
var nd = {
  red: 0,
  orange: 60,
  yellow: 120,
  green: 180,
  blue: 240,
  purple: 300
};
function sS(t) {
  var u, d;
  var e, n = [], i = 1, a;
  if (typeof t == "number")
    return { space: "rgb", values: [t >>> 16, (t & 65280) >>> 8, t & 255], alpha: 1 };
  if (typeof t == "number")
    return { space: "rgb", values: [t >>> 16, (t & 65280) >>> 8, t & 255], alpha: 1 };
  if (t = String(t).toLowerCase(), td[t])
    n = td[t].slice(), a = "rgb";
  else if (t === "transparent")
    i = 0, a = "rgb", n = [0, 0, 0];
  else if (t[0] === "#") {
    var o = t.slice(1), r = o.length, s = r <= 4;
    i = 1, s ? (n = [
      parseInt(o[0] + o[0], 16),
      parseInt(o[1] + o[1], 16),
      parseInt(o[2] + o[2], 16)
    ], r === 4 && (i = parseInt(o[3] + o[3], 16) / 255)) : (n = [
      parseInt(o[0] + o[1], 16),
      parseInt(o[2] + o[3], 16),
      parseInt(o[4] + o[5], 16)
    ], r === 8 && (i = parseInt(o[6] + o[7], 16) / 255)), n[0] || (n[0] = 0), n[1] || (n[1] = 0), n[2] || (n[2] = 0), a = "rgb";
  } else if (e = /^((?:rgba?|hs[lvb]a?|hwba?|cmyk?|xy[zy]|gray|lab|lchu?v?|[ly]uv|lms|oklch|oklab|color))\s*\(([^\)]*)\)/.exec(t)) {
    var l = e[1];
    a = l.replace(/a$/, "");
    var c = a === "cmyk" ? 4 : a === "gray" ? 1 : 3;
    n = e[2].trim().split(/\s*[,\/]\s*|\s+/), a === "color" && (a = n.shift()), n = n.map(function(h, f) {
      if (h[h.length - 1] === "%")
        return h = parseFloat(h) / 100, f === 3 ? h : a === "rgb" ? h * 255 : a[0] === "h" || a[0] === "l" && !f ? h * 100 : a === "lab" ? h * 125 : a === "lch" ? f < 2 ? h * 150 : h * 360 : a[0] === "o" && !f ? h : a === "oklab" ? h * 0.4 : a === "oklch" ? f < 2 ? h * 0.4 : h * 360 : h;
      if (a[f] === "h" || f === 2 && a[a.length - 1] === "h") {
        if (nd[h] !== void 0)
          return nd[h];
        if (h.endsWith("deg"))
          return parseFloat(h);
        if (h.endsWith("turn"))
          return parseFloat(h) * 360;
        if (h.endsWith("grad"))
          return parseFloat(h) * 360 / 400;
        if (h.endsWith("rad"))
          return parseFloat(h) * 180 / Math.PI;
      }
      return h === "none" ? 0 : parseFloat(h);
    }), i = n.length > c ? n.pop() : 1;
  } else
    /[0-9](?:\s|\/|,)/.test(t) && (n = t.match(/([0-9]+)/g).map(function(h) {
      return parseFloat(h);
    }), a = ((d = (u = t.match(/([a-z])/ig)) == null ? void 0 : u.join("")) == null ? void 0 : d.toLowerCase()) || "rgb");
  return {
    space: a,
    values: n,
    alpha: i
  };
}
const fs = {
  name: "hsl",
  min: [0, 0, 0],
  max: [360, 100, 100],
  channel: ["hue", "saturation", "lightness"],
  alias: ["HSL"],
  rgb: function(t) {
    var e = t[0] / 360, n = t[1] / 100, i = t[2] / 100, a, o, r, s, l, c = 0;
    if (n === 0)
      return l = i * 255, [l, l, l];
    for (o = i < 0.5 ? i * (1 + n) : i + n - i * n, a = 2 * i - o, s = [0, 0, 0]; c < 3; )
      r = e + 1 / 3 * -(c - 1), r < 0 ? r++ : r > 1 && r--, l = 6 * r < 1 ? a + (o - a) * 6 * r : 2 * r < 1 ? o : 3 * r < 2 ? a + (o - a) * (2 / 3 - r) * 6 : a, s[c++] = l * 255;
    return s;
  }
};
Ja.hsl = function(t) {
  var e = t[0] / 255, n = t[1] / 255, i = t[2] / 255, a = Math.min(e, n, i), o = Math.max(e, n, i), r = o - a, s, l, c;
  return o === a ? s = 0 : e === o ? s = (n - i) / r : n === o ? s = 2 + (i - e) / r : i === o && (s = 4 + (e - n) / r), s = Math.min(s * 60, 360), s < 0 && (s += 360), c = (a + o) / 2, o === a ? l = 0 : c <= 0.5 ? l = r / (o + a) : l = r / (2 - o - a), [s, l * 100, c * 100];
};
function lS(t) {
  Array.isArray(t) && t.raw && (t = String.raw(...arguments)), t instanceof Number && (t = +t);
  var e, n = sS(t);
  if (!n.space)
    return [];
  const i = n.space[0] === "h" ? fs.min : Ja.min, a = n.space[0] === "h" ? fs.max : Ja.max;
  return e = Array(3), e[0] = Math.min(Math.max(n.values[0], i[0]), a[0]), e[1] = Math.min(Math.max(n.values[1], i[1]), a[1]), e[2] = Math.min(Math.max(n.values[2], i[2]), a[2]), n.space[0] === "h" && (e = fs.rgb(e)), e.push(Math.min(Math.max(n.alpha, 0), 1)), e;
}
function cS(t) {
  return typeof t == "string" ? t : cc(t);
}
const uS = 1024, Ia = {};
let gs = 0;
function dS(t) {
  if (t.length === 4)
    return t;
  const e = t.slice();
  return e[3] = 1, e;
}
function id(t) {
  const e = et.lchuv(Ja.xyz(t));
  return e[3] = t[3], e;
}
function hS(t) {
  const e = et.rgb(ag.xyz(t));
  return e[3] = t[3], e;
}
function lc(t) {
  if (Ia.hasOwnProperty(t))
    return Ia[t];
  if (gs >= uS) {
    let n = 0;
    for (const i in Ia)
      n++ & 3 || (delete Ia[i], --gs);
  }
  const e = lS(t);
  if (e.length !== 4)
    throw new Error('Failed to parse "' + t + '" as color');
  for (const n of e)
    if (isNaN(n))
      throw new Error('Failed to parse "' + t + '" as color');
  return og(e), Ia[t] = e, ++gs, e;
}
function Qa(t) {
  return Array.isArray(t) ? t : lc(t);
}
function og(t) {
  return t[0] = Ye(t[0] + 0.5 | 0, 0, 255), t[1] = Ye(t[1] + 0.5 | 0, 0, 255), t[2] = Ye(t[2] + 0.5 | 0, 0, 255), t[3] = Ye(t[3], 0, 1), t;
}
function cc(t) {
  let e = t[0];
  e != (e | 0) && (e = e + 0.5 | 0);
  let n = t[1];
  n != (n | 0) && (n = n + 0.5 | 0);
  let i = t[2];
  i != (i | 0) && (i = i + 0.5 | 0);
  const a = t[3] === void 0 ? 1 : Math.round(t[3] * 1e3) / 1e3;
  return "rgba(" + e + "," + n + "," + i + "," + a + ")";
}
function fS(t) {
  try {
    return lc(t), !0;
  } catch {
    return !1;
  }
}
const ci = typeof navigator < "u" && typeof navigator.userAgent < "u" ? navigator.userAgent.toLowerCase() : "", gS = ci.includes("firefox"), mS = ci.includes("safari") && !ci.includes("chrom");
mS && (ci.includes("version/15.4") || /cpu (os|iphone os) 15_4 like mac os x/.test(ci));
const vS = ci.includes("webkit") && !ci.includes("edge"), rg = ci.includes("macintosh"), sg = typeof devicePixelRatio < "u" ? devicePixelRatio : 1, lg = typeof WorkerGlobalScope < "u" && typeof OffscreenCanvas < "u" && self instanceof WorkerGlobalScope, cg = typeof Image < "u" && Image.prototype.decode, ug = function() {
  let t = !1;
  try {
    const e = Object.defineProperty({}, "passive", {
      get: function() {
        t = !0;
      }
    });
    window.addEventListener("_", null, e), window.removeEventListener("_", null, e);
  } catch {
  }
  return t;
}();
function tt(t, e, n, i) {
  let a;
  return n && n.length ? a = /** @type {HTMLCanvasElement} */
  n.shift() : lg ? a = new OffscreenCanvas(t || 300, e || 300) : a = document.createElement("canvas"), t && (a.width = t), e && (a.height = e), /** @type {CanvasRenderingContext2D} */
  a.getContext("2d", i);
}
let ms;
function Xs() {
  return ms || (ms = tt(1, 1)), ms;
}
function Gr(t) {
  const e = t.canvas;
  e.width = 1, e.height = 1, t.clearRect(0, 0, 1, 1);
}
function ad(t, e) {
  const n = e.parentNode;
  n && n.replaceChild(t, e);
}
function Ys(t) {
  return t && t.parentNode ? t.parentNode.removeChild(t) : null;
}
function CS(t) {
  for (; t.lastChild; )
    t.removeChild(t.lastChild);
}
function yS(t, e) {
  const n = t.childNodes;
  for (let i = 0; ; ++i) {
    const a = n[i], o = e[i];
    if (!a && !o)
      break;
    if (a !== o) {
      if (!a) {
        t.appendChild(o);
        continue;
      }
      if (!o) {
        t.removeChild(a), --i;
        continue;
      }
      t.insertBefore(o, a);
    }
  }
}
function pS(t, e, n) {
  const i = (
    /** @type {HTMLImageElement} */
    t
  );
  let a = !0, o = !1, r = !1;
  const s = [
    sr(i, ge.LOAD, function() {
      r = !0, o || e();
    })
  ];
  return i.src && cg ? (o = !0, i.decode().then(function() {
    a && e();
  }).catch(function(l) {
    a && (r ? e() : n());
  })) : s.push(sr(i, ge.ERROR, n)), function() {
    a = !1, s.forEach(Ve);
  };
}
function _S(t, e) {
  return new Promise((n, i) => {
    function a() {
      r(), n(t);
    }
    function o() {
      r(), i(new Error("Image load error"));
    }
    function r() {
      t.removeEventListener("load", a), t.removeEventListener("error", o);
    }
    t.addEventListener("load", a), t.addEventListener("error", o), e && (t.src = e);
  });
}
function SS(t, e) {
  return e && (t.src = e), t.src && cg ? new Promise(
    (n, i) => t.decode().then(() => n(t)).catch(
      (a) => t.complete && t.width ? n(t) : i(a)
    )
  ) : _S(t);
}
class bS {
  constructor() {
    this.cache_ = {}, this.patternCache_ = {}, this.cacheSize_ = 0, this.maxCacheSize_ = 32;
  }
  /**
   * FIXME empty description for jsdoc
   */
  clear() {
    this.cache_ = {}, this.patternCache_ = {}, this.cacheSize_ = 0;
  }
  /**
   * @return {boolean} Can expire cache.
   */
  canExpireCache() {
    return this.cacheSize_ > this.maxCacheSize_;
  }
  /**
   * FIXME empty description for jsdoc
   */
  expire() {
    if (this.canExpireCache()) {
      let e = 0;
      for (const n in this.cache_) {
        const i = this.cache_[n];
        !(e++ & 3) && !i.hasListener() && (delete this.cache_[n], delete this.patternCache_[n], --this.cacheSize_);
      }
    }
  }
  /**
   * @param {string} src Src.
   * @param {?string} crossOrigin Cross origin.
   * @param {import("../color.js").Color|string|null} color Color.
   * @return {import("./IconImage.js").default} Icon image.
   */
  get(e, n, i) {
    const a = vs(e, n, i);
    return a in this.cache_ ? this.cache_[a] : null;
  }
  /**
   * @param {string} src Src.
   * @param {?string} crossOrigin Cross origin.
   * @param {import("../color.js").Color|string|null} color Color.
   * @return {CanvasPattern} Icon image.
   */
  getPattern(e, n, i) {
    const a = vs(e, n, i);
    return a in this.patternCache_ ? this.patternCache_[a] : null;
  }
  /**
   * @param {string} src Src.
   * @param {?string} crossOrigin Cross origin.
   * @param {import("../color.js").Color|string|null} color Color.
   * @param {import("./IconImage.js").default|null} iconImage Icon image.
   * @param {boolean} [pattern] Also cache a `'repeat'` pattern with this `iconImage`.
   */
  set(e, n, i, a, o) {
    const r = vs(e, n, i), s = r in this.cache_;
    this.cache_[r] = a, o && (a.getImageState() === Ce.IDLE && a.load(), a.getImageState() === Ce.LOADING ? a.ready().then(() => {
      this.patternCache_[r] = Xs().createPattern(
        a.getImage(1),
        "repeat"
      );
    }) : this.patternCache_[r] = Xs().createPattern(
      a.getImage(1),
      "repeat"
    )), s || ++this.cacheSize_;
  }
  /**
   * Set the cache size of the icon cache. Default is `32`. Change this value when
   * your map uses more than 32 different icon images and you are not caching icon
   * styles on the application level.
   * @param {number} maxCacheSize Cache max size.
   * @api
   */
  setSize(e) {
    this.maxCacheSize_ = e, this.expire();
  }
}
function vs(t, e, n) {
  const i = n ? Qa(n) : "null";
  return e + ":" + t + ":" + i;
}
const un = new bS();
let za = null;
class MS extends Ir {
  /**
   * @param {HTMLImageElement|HTMLCanvasElement|ImageBitmap|null} image Image.
   * @param {string|undefined} src Src.
   * @param {?string} crossOrigin Cross origin.
   * @param {import("../ImageState.js").default|undefined} imageState Image state.
   * @param {import("../color.js").Color|string|null} color Color.
   */
  constructor(e, n, i, a, o) {
    super(), this.hitDetectionImage_ = null, this.image_ = e, this.crossOrigin_ = i, this.canvas_ = {}, this.color_ = o, this.imageState_ = a === void 0 ? Ce.IDLE : a, this.size_ = e && e.width && e.height ? [e.width, e.height] : null, this.src_ = n, this.tainted_, this.ready_ = null;
  }
  /**
   * @private
   */
  initializeImage_() {
    this.image_ = new Image(), this.crossOrigin_ !== null && (this.image_.crossOrigin = this.crossOrigin_);
  }
  /**
   * @private
   * @return {boolean} The image canvas is tainted.
   */
  isTainted_() {
    if (this.tainted_ === void 0 && this.imageState_ === Ce.LOADED) {
      za || (za = tt(1, 1, void 0, {
        willReadFrequently: !0
      })), za.drawImage(this.image_, 0, 0);
      try {
        za.getImageData(0, 0, 1, 1), this.tainted_ = !1;
      } catch {
        za = null, this.tainted_ = !0;
      }
    }
    return this.tainted_ === !0;
  }
  /**
   * @private
   */
  dispatchChangeEvent_() {
    this.dispatchEvent(ge.CHANGE);
  }
  /**
   * @private
   */
  handleImageError_() {
    this.imageState_ = Ce.ERROR, this.dispatchChangeEvent_();
  }
  /**
   * @private
   */
  handleImageLoad_() {
    this.imageState_ = Ce.LOADED, this.size_ = [this.image_.width, this.image_.height], this.dispatchChangeEvent_();
  }
  /**
   * @param {number} pixelRatio Pixel ratio.
   * @return {HTMLImageElement|HTMLCanvasElement|ImageBitmap} Image or Canvas element or image bitmap.
   */
  getImage(e) {
    return this.image_ || this.initializeImage_(), this.replaceColor_(e), this.canvas_[e] ? this.canvas_[e] : this.image_;
  }
  /**
   * @param {number} pixelRatio Pixel ratio.
   * @return {number} Image or Canvas element.
   */
  getPixelRatio(e) {
    return this.replaceColor_(e), this.canvas_[e] ? e : 1;
  }
  /**
   * @return {import("../ImageState.js").default} Image state.
   */
  getImageState() {
    return this.imageState_;
  }
  /**
   * @return {HTMLImageElement|HTMLCanvasElement|ImageBitmap} Image element.
   */
  getHitDetectionImage() {
    if (this.image_ || this.initializeImage_(), !this.hitDetectionImage_)
      if (this.isTainted_()) {
        const e = this.size_[0], n = this.size_[1], i = tt(e, n);
        i.fillRect(0, 0, e, n), this.hitDetectionImage_ = i.canvas;
      } else
        this.hitDetectionImage_ = this.image_;
    return this.hitDetectionImage_;
  }
  /**
   * Get the size of the icon (in pixels).
   * @return {import("../size.js").Size} Image size.
   */
  getSize() {
    return this.size_;
  }
  /**
   * @return {string|undefined} Image src.
   */
  getSrc() {
    return this.src_;
  }
  /**
   * Load not yet loaded URI.
   */
  load() {
    if (this.imageState_ === Ce.IDLE) {
      this.image_ || this.initializeImage_(), this.imageState_ = Ce.LOADING;
      try {
        this.src_ !== void 0 && (this.image_.src = this.src_);
      } catch {
        this.handleImageError_();
      }
      this.image_ instanceof HTMLImageElement && SS(this.image_, this.src_).then((e) => {
        this.image_ = e, this.handleImageLoad_();
      }).catch(this.handleImageError_.bind(this));
    }
  }
  /**
   * @param {number} pixelRatio Pixel ratio.
   * @private
   */
  replaceColor_(e) {
    if (!this.color_ || this.canvas_[e] || this.imageState_ !== Ce.LOADED)
      return;
    const n = this.image_, i = document.createElement("canvas");
    i.width = Math.ceil(n.width * e), i.height = Math.ceil(n.height * e);
    const a = i.getContext("2d");
    a.scale(e, e), a.drawImage(n, 0, 0), a.globalCompositeOperation = "multiply", a.fillStyle = cS(this.color_), a.fillRect(0, 0, i.width / e, i.height / e), a.globalCompositeOperation = "destination-in", a.drawImage(n, 0, 0), this.canvas_[e] = i;
  }
  /**
   * @return {Promise<void>} Promise that resolves when the image is loaded.
   */
  ready() {
    return this.ready_ || (this.ready_ = new Promise((e) => {
      this.imageState_ === Ce.LOADED || this.imageState_ === Ce.ERROR ? e() : this.addEventListener(ge.CHANGE, function n() {
        (this.imageState_ === Ce.LOADED || this.imageState_ === Ce.ERROR) && (this.removeEventListener(ge.CHANGE, n), e());
      });
    })), this.ready_;
  }
}
function uc(t, e, n, i, a, o) {
  let r = e === void 0 ? void 0 : un.get(e, n, a);
  return r || (r = new MS(
    t,
    t instanceof HTMLImageElement ? t.src || void 0 : e,
    n,
    i,
    a
  ), un.set(e, n, a, r, o)), o && r && !un.getPattern(e, n, a) && un.set(e, n, a, r, o), r;
}
function dn(t) {
  return t ? Array.isArray(t) ? cc(t) : typeof t == "object" && "src" in t ? xS(t) : t : null;
}
function xS(t) {
  if (!t.offset || !t.size)
    return un.getPattern(t.src, "anonymous", t.color);
  const e = t.src + ":" + t.offset, n = un.getPattern(
    e,
    void 0,
    t.color
  );
  if (n)
    return n;
  const i = un.get(t.src, "anonymous", null);
  if (i.getImageState() !== Ce.LOADED)
    return null;
  const a = tt(
    t.size[0],
    t.size[1]
  );
  return a.drawImage(
    i.getImage(1),
    t.offset[0],
    t.offset[1],
    t.size[0],
    t.size[1],
    0,
    0,
    t.size[0],
    t.size[1]
  ), uc(
    a.canvas,
    e,
    void 0,
    Ce.LOADED,
    t.color,
    !0
  ), un.getPattern(e, void 0, t.color);
}
const $o = "ol-hidden", Nr = "ol-unselectable", dc = "ol-control", od = "ol-collapsed", PS = new RegExp(
  [
    "^\\s*(?=(?:(?:[-a-z]+\\s*){0,2}(italic|oblique))?)",
    "(?=(?:(?:[-a-z]+\\s*){0,2}(small-caps))?)",
    "(?=(?:(?:[-a-z]+\\s*){0,2}(bold(?:er)?|lighter|[1-9]00 ))?)",
    "(?:(?:normal|\\1|\\2|\\3)\\s*){0,3}((?:xx?-)?",
    "(?:small|large)|medium|smaller|larger|[\\.\\d]+(?:\\%|in|[cem]m|ex|p[ctx]))",
    "(?:\\s*\\/\\s*(normal|[\\.\\d]+(?:\\%|in|[cem]m|ex|p[ctx])?))",
    `?\\s*([-,\\"\\'\\sa-z]+?)\\s*$`
  ].join(""),
  "i"
), rd = [
  "style",
  "variant",
  "weight",
  "size",
  "lineHeight",
  "family"
], dg = function(t) {
  const e = t.match(PS);
  if (!e)
    return null;
  const n = (
    /** @type {FontParameters} */
    {
      lineHeight: "normal",
      size: "1.2em",
      style: "normal",
      weight: "normal",
      variant: "normal"
    }
  );
  for (let i = 0, a = rd.length; i < a; ++i) {
    const o = e[i + 1];
    o !== void 0 && (n[rd[i]] = o);
  }
  return n.families = n.family.split(/,\s?/), n;
}, hg = "10px sans-serif", bt = "#000", ha = "round", Gn = [], Nn = 0, fa = "round", eo = 10, to = "#000", no = "center", fr = "middle", Ti = [0, 0, 0, 0], io = 1, Vn = new xn();
let Zi = null, js;
const Zs = {}, TS = function() {
  const e = "32px ", n = ["monospace", "serif"], i = n.length, a = "wmytzilWMYTZIL@#/&?$%10";
  let o, r;
  function s(c, u, d) {
    let h = !0;
    for (let f = 0; f < i; ++f) {
      const g = n[f];
      if (r = gr(
        c + " " + u + " " + e + g,
        a
      ), d != g) {
        const m = gr(
          c + " " + u + " " + e + d + "," + g,
          a
        );
        h = h && m != r;
      }
    }
    return !!h;
  }
  function l() {
    let c = !0;
    const u = Vn.getKeys();
    for (let d = 0, h = u.length; d < h; ++d) {
      const f = u[d];
      Vn.get(f) < 100 && (s.apply(this, f.split(`
`)) ? (xo(Zs), Zi = null, js = void 0, Vn.set(f, 100)) : (Vn.set(f, Vn.get(f) + 1, !0), c = !1));
    }
    c && (clearInterval(o), o = void 0);
  }
  return function(c) {
    const u = dg(c);
    if (!u)
      return;
    const d = u.families;
    for (let h = 0, f = d.length; h < f; ++h) {
      const g = d[h], m = u.style + `
` + u.weight + `
` + g;
      Vn.get(m) === void 0 && (Vn.set(m, 100, !0), s(u.style, u.weight, g) || (Vn.set(m, 0, !0), o === void 0 && (o = setInterval(l, 32))));
    }
  };
}(), wS = function() {
  let t;
  return function(e) {
    let n = Zs[e];
    if (n == null) {
      if (lg) {
        const i = dg(e), a = fg(e, "Žg");
        n = (isNaN(Number(i.lineHeight)) ? 1.2 : Number(i.lineHeight)) * (a.actualBoundingBoxAscent + a.actualBoundingBoxDescent);
      } else
        t || (t = document.createElement("div"), t.innerHTML = "M", t.style.minHeight = "0", t.style.maxHeight = "none", t.style.height = "auto", t.style.padding = "0", t.style.border = "none", t.style.position = "absolute", t.style.display = "block", t.style.left = "-99999px"), t.style.font = e, document.body.appendChild(t), n = t.offsetHeight, document.body.removeChild(t);
      Zs[e] = n;
    }
    return n;
  };
}();
function fg(t, e) {
  return Zi || (Zi = tt(1, 1)), t != js && (Zi.font = t, js = Zi.font), Zi.measureText(e);
}
function gr(t, e) {
  return fg(t, e).width;
}
function sd(t, e, n) {
  if (e in n)
    return n[e];
  const i = e.split(`
`).reduce((a, o) => Math.max(a, gr(t, o)), 0);
  return n[e] = i, i;
}
function ES(t, e) {
  const n = [], i = [], a = [];
  let o = 0, r = 0, s = 0, l = 0;
  for (let c = 0, u = e.length; c <= u; c += 2) {
    const d = e[c];
    if (d === `
` || c === u) {
      o = Math.max(o, r), a.push(r), r = 0, s += l;
      continue;
    }
    const h = e[c + 1] || t.font, f = gr(h, d);
    n.push(f), r += f;
    const g = wS(h);
    i.push(g), l = Math.max(l, g);
  }
  return { width: o, height: s, widths: n, heights: i, lineWidths: a };
}
function AS(t, e, n, i, a, o, r, s, l, c, u) {
  t.save(), n !== 1 && (t.globalAlpha === void 0 ? t.globalAlpha = (d) => d.globalAlpha *= n : t.globalAlpha *= n), e && t.transform.apply(t, e), /** @type {*} */
  i.contextInstructions ? (t.translate(l, c), t.scale(u[0], u[1]), RS(
    /** @type {Label} */
    i,
    t
  )) : u[0] < 0 || u[1] < 0 ? (t.translate(l, c), t.scale(u[0], u[1]), t.drawImage(
    /** @type {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} */
    i,
    a,
    o,
    r,
    s,
    0,
    0,
    r,
    s
  )) : t.drawImage(
    /** @type {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} */
    i,
    a,
    o,
    r,
    s,
    l,
    c,
    r * u[0],
    s * u[1]
  ), t.restore();
}
function RS(t, e) {
  const n = t.contextInstructions;
  for (let i = 0, a = n.length; i < a; i += 2)
    Array.isArray(n[i + 1]) ? e[n[i]].apply(
      e,
      n[i + 1]
    ) : e[n[i]] = n[i + 1];
}
class hc extends ig {
  /**
   * @param {Options} options Options.
   */
  constructor(e) {
    super({
      opacity: 1,
      rotateWithView: e.rotateWithView !== void 0 ? e.rotateWithView : !1,
      rotation: e.rotation !== void 0 ? e.rotation : 0,
      scale: e.scale !== void 0 ? e.scale : 1,
      displacement: e.displacement !== void 0 ? e.displacement : [0, 0],
      declutterMode: e.declutterMode
    }), this.canvases_, this.hitDetectionCanvas_ = null, this.fill_ = e.fill !== void 0 ? e.fill : null, this.origin_ = [0, 0], this.points_ = e.points, this.radius_ = e.radius, this.radius2_ = e.radius2, this.angle_ = e.angle !== void 0 ? e.angle : 0, this.stroke_ = e.stroke !== void 0 ? e.stroke : null, this.size_, this.renderOptions_, this.imageState_ = this.fill_ && this.fill_.loading() ? Ce.LOADING : Ce.LOADED, this.imageState_ === Ce.LOADING && this.ready().then(() => this.imageState_ = Ce.LOADED), this.render();
  }
  /**
   * Clones the style.
   * @return {RegularShape} The cloned style.
   * @api
   */
  clone() {
    const e = this.getScale(), n = new hc({
      fill: this.getFill() ? this.getFill().clone() : void 0,
      points: this.getPoints(),
      radius: this.getRadius(),
      radius2: this.getRadius2(),
      angle: this.getAngle(),
      stroke: this.getStroke() ? this.getStroke().clone() : void 0,
      rotation: this.getRotation(),
      rotateWithView: this.getRotateWithView(),
      scale: Array.isArray(e) ? e.slice() : e,
      displacement: this.getDisplacement().slice(),
      declutterMode: this.getDeclutterMode()
    });
    return n.setOpacity(this.getOpacity()), n;
  }
  /**
   * Get the anchor point in pixels. The anchor determines the center point for the
   * symbolizer.
   * @return {Array<number>} Anchor.
   * @api
   */
  getAnchor() {
    const e = this.size_, n = this.getDisplacement(), i = this.getScaleArray();
    return [
      e[0] / 2 - n[0] / i[0],
      e[1] / 2 + n[1] / i[1]
    ];
  }
  /**
   * Get the angle used in generating the shape.
   * @return {number} Shape's rotation in radians.
   * @api
   */
  getAngle() {
    return this.angle_;
  }
  /**
   * Get the fill style for the shape.
   * @return {import("./Fill.js").default|null} Fill style.
   * @api
   */
  getFill() {
    return this.fill_;
  }
  /**
   * Set the fill style.
   * @param {import("./Fill.js").default|null} fill Fill style.
   * @api
   */
  setFill(e) {
    this.fill_ = e, this.render();
  }
  /**
   * @return {HTMLCanvasElement} Image element.
   */
  getHitDetectionImage() {
    return this.hitDetectionCanvas_ || (this.hitDetectionCanvas_ = this.createHitDetectionCanvas_(
      this.renderOptions_
    )), this.hitDetectionCanvas_;
  }
  /**
   * Get the image icon.
   * @param {number} pixelRatio Pixel ratio.
   * @return {HTMLCanvasElement} Image or Canvas element.
   * @api
   */
  getImage(e) {
    let n = this.canvases_[e];
    if (!n) {
      const i = this.renderOptions_, a = tt(
        i.size * e,
        i.size * e
      );
      this.draw_(i, a, e), n = a.canvas, this.canvases_[e] = n;
    }
    return n;
  }
  /**
   * Get the image pixel ratio.
   * @param {number} pixelRatio Pixel ratio.
   * @return {number} Pixel ratio.
   */
  getPixelRatio(e) {
    return e;
  }
  /**
   * @return {import("../size.js").Size} Image size.
   */
  getImageSize() {
    return this.size_;
  }
  /**
   * @return {import("../ImageState.js").default} Image state.
   */
  getImageState() {
    return this.imageState_;
  }
  /**
   * Get the origin of the symbolizer.
   * @return {Array<number>} Origin.
   * @api
   */
  getOrigin() {
    return this.origin_;
  }
  /**
   * Get the number of points for generating the shape.
   * @return {number} Number of points for stars and regular polygons.
   * @api
   */
  getPoints() {
    return this.points_;
  }
  /**
   * Get the (primary) radius for the shape.
   * @return {number} Radius.
   * @api
   */
  getRadius() {
    return this.radius_;
  }
  /**
   * Get the secondary radius for the shape.
   * @return {number|undefined} Radius2.
   * @api
   */
  getRadius2() {
    return this.radius2_;
  }
  /**
   * Get the size of the symbolizer (in pixels).
   * @return {import("../size.js").Size} Size.
   * @api
   */
  getSize() {
    return this.size_;
  }
  /**
   * Get the stroke style for the shape.
   * @return {import("./Stroke.js").default|null} Stroke style.
   * @api
   */
  getStroke() {
    return this.stroke_;
  }
  /**
   * Set the stroke style.
   * @param {import("./Stroke.js").default|null} stroke Stroke style.
   * @api
   */
  setStroke(e) {
    this.stroke_ = e, this.render();
  }
  /**
   * @param {function(import("../events/Event.js").default): void} listener Listener function.
   */
  listenImageChange(e) {
  }
  /**
   * Load not yet loaded URI.
   */
  load() {
  }
  /**
   * @param {function(import("../events/Event.js").default): void} listener Listener function.
   */
  unlistenImageChange(e) {
  }
  /**
   * Calculate additional canvas size needed for the miter.
   * @param {string} lineJoin Line join
   * @param {number} strokeWidth Stroke width
   * @param {number} miterLimit Miter limit
   * @return {number} Additional canvas size needed
   * @private
   */
  calculateLineJoinSize_(e, n, i) {
    if (n === 0 || this.points_ === 1 / 0 || e !== "bevel" && e !== "miter")
      return n;
    let a = this.radius_, o = this.radius2_ === void 0 ? a : this.radius2_;
    if (a < o) {
      const T = a;
      a = o, o = T;
    }
    const r = this.radius2_ === void 0 ? this.points_ : this.points_ * 2, s = 2 * Math.PI / r, l = o * Math.sin(s), c = Math.sqrt(o * o - l * l), u = a - c, d = Math.sqrt(l * l + u * u), h = d / l;
    if (e === "miter" && h <= i)
      return h * n;
    const f = n / 2 / h, g = n / 2 * (u / d), v = Math.sqrt((a + f) * (a + f) + g * g) - a;
    if (this.radius2_ === void 0 || e === "bevel")
      return v * 2;
    const y = a * Math.sin(s), p = Math.sqrt(a * a - y * y), M = o - p, b = Math.sqrt(y * y + M * M) / y;
    if (b <= i) {
      const T = b * n / 2 - o - a;
      return 2 * Math.max(v, T);
    }
    return v * 2;
  }
  /**
   * @return {RenderOptions}  The render options
   * @protected
   */
  createRenderOptions() {
    let e = ha, n = fa, i = 0, a = null, o = 0, r, s = 0;
    this.stroke_ && (r = dn(this.stroke_.getColor() ?? to), s = this.stroke_.getWidth() ?? io, a = this.stroke_.getLineDash(), o = this.stroke_.getLineDashOffset() ?? 0, n = this.stroke_.getLineJoin() ?? fa, e = this.stroke_.getLineCap() ?? ha, i = this.stroke_.getMiterLimit() ?? eo);
    const l = this.calculateLineJoinSize_(n, s, i), c = Math.max(this.radius_, this.radius2_ || 0), u = Math.ceil(2 * c + l);
    return {
      strokeStyle: r,
      strokeWidth: s,
      size: u,
      lineCap: e,
      lineDash: a,
      lineDashOffset: o,
      lineJoin: n,
      miterLimit: i
    };
  }
  /**
   * @protected
   */
  render() {
    this.renderOptions_ = this.createRenderOptions();
    const e = this.renderOptions_.size;
    this.canvases_ = {}, this.hitDetectionCanvas_ = null, this.size_ = [e, e];
  }
  /**
   * @private
   * @param {RenderOptions} renderOptions Render options.
   * @param {CanvasRenderingContext2D} context The rendering context.
   * @param {number} pixelRatio The pixel ratio.
   */
  draw_(e, n, i) {
    if (n.scale(i, i), n.translate(e.size / 2, e.size / 2), this.createPath_(n), this.fill_) {
      let a = this.fill_.getColor();
      a === null && (a = bt), n.fillStyle = dn(a), n.fill();
    }
    e.strokeStyle && (n.strokeStyle = e.strokeStyle, n.lineWidth = e.strokeWidth, e.lineDash && (n.setLineDash(e.lineDash), n.lineDashOffset = e.lineDashOffset), n.lineCap = e.lineCap, n.lineJoin = e.lineJoin, n.miterLimit = e.miterLimit, n.stroke());
  }
  /**
   * @private
   * @param {RenderOptions} renderOptions Render options.
   * @return {HTMLCanvasElement} Canvas containing the icon
   */
  createHitDetectionCanvas_(e) {
    let n;
    if (this.fill_) {
      let i = this.fill_.getColor(), a = 0;
      typeof i == "string" && (i = Qa(i)), i === null ? a = 1 : Array.isArray(i) && (a = i.length === 4 ? i[3] : 1), a === 0 && (n = tt(e.size, e.size), this.drawHitDetectionCanvas_(e, n));
    }
    return n ? n.canvas : this.getImage(1);
  }
  /**
   * @private
   * @param {CanvasRenderingContext2D} context The context to draw in.
   */
  createPath_(e) {
    let n = this.points_;
    const i = this.radius_;
    if (n === 1 / 0)
      e.arc(0, 0, i, 0, 2 * Math.PI);
    else {
      const a = this.radius2_ === void 0 ? i : this.radius2_;
      this.radius2_ !== void 0 && (n *= 2);
      const o = this.angle_ - Math.PI / 2, r = 2 * Math.PI / n;
      for (let s = 0; s < n; s++) {
        const l = o + s * r, c = s % 2 === 0 ? i : a;
        e.lineTo(c * Math.cos(l), c * Math.sin(l));
      }
      e.closePath();
    }
  }
  /**
   * @private
   * @param {RenderOptions} renderOptions Render options.
   * @param {CanvasRenderingContext2D} context The context.
   */
  drawHitDetectionCanvas_(e, n) {
    n.translate(e.size / 2, e.size / 2), this.createPath_(n), n.fillStyle = bt, n.fill(), e.strokeStyle && (n.strokeStyle = e.strokeStyle, n.lineWidth = e.strokeWidth, e.lineDash && (n.setLineDash(e.lineDash), n.lineDashOffset = e.lineDashOffset), n.lineJoin = e.lineJoin, n.miterLimit = e.miterLimit, n.stroke());
  }
  ready() {
    return this.fill_ ? this.fill_.ready() : Promise.resolve();
  }
}
const gg = hc;
class fc extends gg {
  /**
   * @param {Options} [options] Options.
   */
  constructor(e) {
    e = e || { radius: 5 }, super({
      points: 1 / 0,
      fill: e.fill,
      radius: e.radius,
      stroke: e.stroke,
      scale: e.scale !== void 0 ? e.scale : 1,
      rotation: e.rotation !== void 0 ? e.rotation : 0,
      rotateWithView: e.rotateWithView !== void 0 ? e.rotateWithView : !1,
      displacement: e.displacement !== void 0 ? e.displacement : [0, 0],
      declutterMode: e.declutterMode
    });
  }
  /**
   * Clones the style.
   * @return {CircleStyle} The cloned style.
   * @api
   */
  clone() {
    const e = this.getScale(), n = new fc({
      fill: this.getFill() ? this.getFill().clone() : void 0,
      stroke: this.getStroke() ? this.getStroke().clone() : void 0,
      radius: this.getRadius(),
      scale: Array.isArray(e) ? e.slice() : e,
      rotation: this.getRotation(),
      rotateWithView: this.getRotateWithView(),
      displacement: this.getDisplacement().slice(),
      declutterMode: this.getDeclutterMode()
    });
    return n.setOpacity(this.getOpacity()), n;
  }
  /**
   * Set the circle radius.
   *
   * @param {number} radius Circle radius.
   * @api
   */
  setRadius(e) {
    this.radius_ = e, this.render();
  }
}
const mg = fc;
class gc {
  /**
   * @param {Options} [options] Options.
   */
  constructor(e) {
    e = e || {}, this.patternImage_ = null, this.color_ = null, e.color !== void 0 && this.setColor(e.color);
  }
  /**
   * Clones the style. The color is not cloned if it is an {@link module:ol/colorlike~ColorLike}.
   * @return {Fill} The cloned style.
   * @api
   */
  clone() {
    const e = this.getColor();
    return new gc({
      color: Array.isArray(e) ? e.slice() : e || void 0
    });
  }
  /**
   * Get the fill color.
   * @return {import("../color.js").Color|import("../colorlike.js").ColorLike|import('../colorlike.js').PatternDescriptor|null} Color.
   * @api
   */
  getColor() {
    return this.color_;
  }
  /**
   * Set the color.
   *
   * @param {import("../color.js").Color|import("../colorlike.js").ColorLike|import('../colorlike.js').PatternDescriptor|null} color Color.
   * @api
   */
  setColor(e) {
    if (e !== null && typeof e == "object" && "src" in e) {
      const n = uc(
        null,
        e.src,
        "anonymous",
        void 0,
        e.offset ? null : e.color ? e.color : null,
        !(e.offset && e.size)
      );
      n.ready().then(() => {
        this.patternImage_ = null;
      }), n.getImageState() === Ce.IDLE && n.load(), n.getImageState() === Ce.LOADING && (this.patternImage_ = n);
    }
    this.color_ = e;
  }
  /**
   * @return {boolean} The fill style is loading an image pattern.
   */
  loading() {
    return !!this.patternImage_;
  }
  /**
   * @return {Promise<void>} `false` or a promise that resolves when the style is ready to use.
   */
  ready() {
    return this.patternImage_ ? this.patternImage_.ready() : Promise.resolve();
  }
}
const mc = gc;
class vc {
  /**
   * @param {Options} [options] Options.
   */
  constructor(e) {
    e = e || {}, this.color_ = e.color !== void 0 ? e.color : null, this.lineCap_ = e.lineCap, this.lineDash_ = e.lineDash !== void 0 ? e.lineDash : null, this.lineDashOffset_ = e.lineDashOffset, this.lineJoin_ = e.lineJoin, this.miterLimit_ = e.miterLimit, this.width_ = e.width;
  }
  /**
   * Clones the style.
   * @return {Stroke} The cloned style.
   * @api
   */
  clone() {
    const e = this.getColor();
    return new vc({
      color: Array.isArray(e) ? e.slice() : e || void 0,
      lineCap: this.getLineCap(),
      lineDash: this.getLineDash() ? this.getLineDash().slice() : void 0,
      lineDashOffset: this.getLineDashOffset(),
      lineJoin: this.getLineJoin(),
      miterLimit: this.getMiterLimit(),
      width: this.getWidth()
    });
  }
  /**
   * Get the stroke color.
   * @return {import("../color.js").Color|import("../colorlike.js").ColorLike} Color.
   * @api
   */
  getColor() {
    return this.color_;
  }
  /**
   * Get the line cap type for the stroke.
   * @return {CanvasLineCap|undefined} Line cap.
   * @api
   */
  getLineCap() {
    return this.lineCap_;
  }
  /**
   * Get the line dash style for the stroke.
   * @return {Array<number>|null} Line dash.
   * @api
   */
  getLineDash() {
    return this.lineDash_;
  }
  /**
   * Get the line dash offset for the stroke.
   * @return {number|undefined} Line dash offset.
   * @api
   */
  getLineDashOffset() {
    return this.lineDashOffset_;
  }
  /**
   * Get the line join type for the stroke.
   * @return {CanvasLineJoin|undefined} Line join.
   * @api
   */
  getLineJoin() {
    return this.lineJoin_;
  }
  /**
   * Get the miter limit for the stroke.
   * @return {number|undefined} Miter limit.
   * @api
   */
  getMiterLimit() {
    return this.miterLimit_;
  }
  /**
   * Get the stroke width.
   * @return {number|undefined} Width.
   * @api
   */
  getWidth() {
    return this.width_;
  }
  /**
   * Set the color.
   *
   * @param {import("../color.js").Color|import("../colorlike.js").ColorLike} color Color.
   * @api
   */
  setColor(e) {
    this.color_ = e;
  }
  /**
   * Set the line cap.
   *
   * @param {CanvasLineCap|undefined} lineCap Line cap.
   * @api
   */
  setLineCap(e) {
    this.lineCap_ = e;
  }
  /**
   * Set the line dash.
   *
   * @param {Array<number>|null} lineDash Line dash.
   * @api
   */
  setLineDash(e) {
    this.lineDash_ = e;
  }
  /**
   * Set the line dash offset.
   *
   * @param {number|undefined} lineDashOffset Line dash offset.
   * @api
   */
  setLineDashOffset(e) {
    this.lineDashOffset_ = e;
  }
  /**
   * Set the line join.
   *
   * @param {CanvasLineJoin|undefined} lineJoin Line join.
   * @api
   */
  setLineJoin(e) {
    this.lineJoin_ = e;
  }
  /**
   * Set the miter limit.
   *
   * @param {number|undefined} miterLimit Miter limit.
   * @api
   */
  setMiterLimit(e) {
    this.miterLimit_ = e;
  }
  /**
   * Set the width.
   *
   * @param {number|undefined} width Width.
   * @api
   */
  setWidth(e) {
    this.width_ = e;
  }
}
const vg = vc;
class $r {
  /**
   * @param {Options} [options] Style options.
   */
  constructor(e) {
    e = e || {}, this.geometry_ = null, this.geometryFunction_ = ld, e.geometry !== void 0 && this.setGeometry(e.geometry), this.fill_ = e.fill !== void 0 ? e.fill : null, this.image_ = e.image !== void 0 ? e.image : null, this.renderer_ = e.renderer !== void 0 ? e.renderer : null, this.hitDetectionRenderer_ = e.hitDetectionRenderer !== void 0 ? e.hitDetectionRenderer : null, this.stroke_ = e.stroke !== void 0 ? e.stroke : null, this.text_ = e.text !== void 0 ? e.text : null, this.zIndex_ = e.zIndex;
  }
  /**
   * Clones the style.
   * @return {Style} The cloned style.
   * @api
   */
  clone() {
    let e = this.getGeometry();
    return e && typeof e == "object" && (e = /** @type {import("../geom/Geometry.js").default} */
    e.clone()), new $r({
      geometry: e ?? void 0,
      fill: this.getFill() ? this.getFill().clone() : void 0,
      image: this.getImage() ? this.getImage().clone() : void 0,
      renderer: this.getRenderer() ?? void 0,
      stroke: this.getStroke() ? this.getStroke().clone() : void 0,
      text: this.getText() ? this.getText().clone() : void 0,
      zIndex: this.getZIndex()
    });
  }
  /**
   * Get the custom renderer function that was configured with
   * {@link #setRenderer} or the `renderer` constructor option.
   * @return {RenderFunction|null} Custom renderer function.
   * @api
   */
  getRenderer() {
    return this.renderer_;
  }
  /**
   * Sets a custom renderer function for this style. When set, `fill`, `stroke`
   * and `image` options of the style will be ignored.
   * @param {RenderFunction|null} renderer Custom renderer function.
   * @api
   */
  setRenderer(e) {
    this.renderer_ = e;
  }
  /**
   * Sets a custom renderer function for this style used
   * in hit detection.
   * @param {RenderFunction|null} renderer Custom renderer function.
   * @api
   */
  setHitDetectionRenderer(e) {
    this.hitDetectionRenderer_ = e;
  }
  /**
   * Get the custom renderer function that was configured with
   * {@link #setHitDetectionRenderer} or the `hitDetectionRenderer` constructor option.
   * @return {RenderFunction|null} Custom renderer function.
   * @api
   */
  getHitDetectionRenderer() {
    return this.hitDetectionRenderer_;
  }
  /**
   * Get the geometry to be rendered.
   * @return {string|import("../geom/Geometry.js").default|GeometryFunction|null}
   * Feature property or geometry or function that returns the geometry that will
   * be rendered with this style.
   * @api
   */
  getGeometry() {
    return this.geometry_;
  }
  /**
   * Get the function used to generate a geometry for rendering.
   * @return {!GeometryFunction} Function that is called with a feature
   * and returns the geometry to render instead of the feature's geometry.
   * @api
   */
  getGeometryFunction() {
    return this.geometryFunction_;
  }
  /**
   * Get the fill style.
   * @return {import("./Fill.js").default|null} Fill style.
   * @api
   */
  getFill() {
    return this.fill_;
  }
  /**
   * Set the fill style.
   * @param {import("./Fill.js").default|null} fill Fill style.
   * @api
   */
  setFill(e) {
    this.fill_ = e;
  }
  /**
   * Get the image style.
   * @return {import("./Image.js").default|null} Image style.
   * @api
   */
  getImage() {
    return this.image_;
  }
  /**
   * Set the image style.
   * @param {import("./Image.js").default} image Image style.
   * @api
   */
  setImage(e) {
    this.image_ = e;
  }
  /**
   * Get the stroke style.
   * @return {import("./Stroke.js").default|null} Stroke style.
   * @api
   */
  getStroke() {
    return this.stroke_;
  }
  /**
   * Set the stroke style.
   * @param {import("./Stroke.js").default|null} stroke Stroke style.
   * @api
   */
  setStroke(e) {
    this.stroke_ = e;
  }
  /**
   * Get the text style.
   * @return {import("./Text.js").default|null} Text style.
   * @api
   */
  getText() {
    return this.text_;
  }
  /**
   * Set the text style.
   * @param {import("./Text.js").default} text Text style.
   * @api
   */
  setText(e) {
    this.text_ = e;
  }
  /**
   * Get the z-index for the style.
   * @return {number|undefined} ZIndex.
   * @api
   */
  getZIndex() {
    return this.zIndex_;
  }
  /**
   * Set a geometry that is rendered instead of the feature's geometry.
   *
   * @param {string|import("../geom/Geometry.js").default|GeometryFunction} geometry
   *     Feature property or geometry or function returning a geometry to render
   *     for this style.
   * @api
   */
  setGeometry(e) {
    typeof e == "function" ? this.geometryFunction_ = e : typeof e == "string" ? this.geometryFunction_ = function(n) {
      return (
        /** @type {import("../geom/Geometry.js").default} */
        n.get(e)
      );
    } : e ? e !== void 0 && (this.geometryFunction_ = function() {
      return (
        /** @type {import("../geom/Geometry.js").default} */
        e
      );
    }) : this.geometryFunction_ = ld, this.geometry_ = e;
  }
  /**
   * Set the z-index.
   *
   * @param {number|undefined} zIndex ZIndex.
   * @api
   */
  setZIndex(e) {
    this.zIndex_ = e;
  }
}
function IS(t) {
  let e;
  if (typeof t == "function")
    e = t;
  else {
    let n;
    Array.isArray(t) ? n = t : (Se(
      typeof /** @type {?} */
      t.getZIndex == "function",
      "Expected an `Style` or an array of `Style`"
    ), n = [
      /** @type {Style} */
      t
    ]), e = function() {
      return n;
    };
  }
  return e;
}
let Cs = null;
function zS(t, e) {
  if (!Cs) {
    const n = new mc({
      color: "rgba(255,255,255,0.4)"
    }), i = new vg({
      color: "#3399CC",
      width: 1.25
    });
    Cs = [
      new $r({
        image: new mg({
          fill: n,
          stroke: i,
          radius: 5
        }),
        fill: n,
        stroke: i
      })
    ];
  }
  return Cs;
}
function ld(t) {
  return t.getGeometry();
}
const Na = $r;
function cd(t, e, n, i) {
  return n !== void 0 && i !== void 0 ? [n / t, i / e] : n !== void 0 ? n / t : i !== void 0 ? i / e : 1;
}
class Cc extends ig {
  /**
   * @param {Options} [options] Options.
   */
  constructor(e) {
    e = e || {};
    const n = e.opacity !== void 0 ? e.opacity : 1, i = e.rotation !== void 0 ? e.rotation : 0, a = e.scale !== void 0 ? e.scale : 1, o = e.rotateWithView !== void 0 ? e.rotateWithView : !1;
    super({
      opacity: n,
      rotation: i,
      scale: a,
      displacement: e.displacement !== void 0 ? e.displacement : [0, 0],
      rotateWithView: o,
      declutterMode: e.declutterMode
    }), this.anchor_ = e.anchor !== void 0 ? e.anchor : [0.5, 0.5], this.normalizedAnchor_ = null, this.anchorOrigin_ = e.anchorOrigin !== void 0 ? e.anchorOrigin : "top-left", this.anchorXUnits_ = e.anchorXUnits !== void 0 ? e.anchorXUnits : "fraction", this.anchorYUnits_ = e.anchorYUnits !== void 0 ? e.anchorYUnits : "fraction", this.crossOrigin_ = e.crossOrigin !== void 0 ? e.crossOrigin : null;
    const r = e.img !== void 0 ? e.img : null;
    let s = e.src;
    Se(
      !(s !== void 0 && r),
      "`image` and `src` cannot be provided at the same time"
    ), (s === void 0 || s.length === 0) && r && (s = /** @type {HTMLImageElement} */
    r.src || we(r)), Se(
      s !== void 0 && s.length > 0,
      "A defined and non-empty `src` or `image` must be provided"
    ), Se(
      !((e.width !== void 0 || e.height !== void 0) && e.scale !== void 0),
      "`width` or `height` cannot be provided together with `scale`"
    );
    let l;
    if (e.src !== void 0 ? l = Ce.IDLE : r !== void 0 && (r instanceof HTMLImageElement ? r.complete ? l = r.src ? Ce.LOADED : Ce.IDLE : l = Ce.LOADING : l = Ce.LOADED), this.color_ = e.color !== void 0 ? Qa(e.color) : null, this.iconImage_ = uc(
      r,
      /** @type {string} */
      s,
      this.crossOrigin_,
      l,
      this.color_
    ), this.offset_ = e.offset !== void 0 ? e.offset : [0, 0], this.offsetOrigin_ = e.offsetOrigin !== void 0 ? e.offsetOrigin : "top-left", this.origin_ = null, this.size_ = e.size !== void 0 ? e.size : null, e.width !== void 0 || e.height !== void 0) {
      let c, u;
      if (e.size)
        [c, u] = e.size;
      else {
        const d = this.getImage(1);
        if (d.width && d.height)
          c = d.width, u = d.height;
        else if (d instanceof HTMLImageElement) {
          this.initialOptions_ = e;
          const h = () => {
            if (this.unlistenImageChange(h), !this.initialOptions_)
              return;
            const f = this.iconImage_.getSize();
            this.setScale(
              cd(
                f[0],
                f[1],
                e.width,
                e.height
              )
            );
          };
          this.listenImageChange(h);
          return;
        }
      }
      c !== void 0 && this.setScale(
        cd(c, u, e.width, e.height)
      );
    }
  }
  /**
   * Clones the style. The underlying Image/HTMLCanvasElement is not cloned.
   * @return {Icon} The cloned style.
   * @api
   */
  clone() {
    let e, n, i;
    return this.initialOptions_ ? (n = this.initialOptions_.width, i = this.initialOptions_.height) : (e = this.getScale(), e = Array.isArray(e) ? e.slice() : e), new Cc({
      anchor: this.anchor_.slice(),
      anchorOrigin: this.anchorOrigin_,
      anchorXUnits: this.anchorXUnits_,
      anchorYUnits: this.anchorYUnits_,
      color: this.color_ && this.color_.slice ? this.color_.slice() : this.color_ || void 0,
      crossOrigin: this.crossOrigin_,
      offset: this.offset_.slice(),
      offsetOrigin: this.offsetOrigin_,
      opacity: this.getOpacity(),
      rotateWithView: this.getRotateWithView(),
      rotation: this.getRotation(),
      scale: e,
      width: n,
      height: i,
      size: this.size_ !== null ? this.size_.slice() : void 0,
      src: this.getSrc(),
      displacement: this.getDisplacement().slice(),
      declutterMode: this.getDeclutterMode()
    });
  }
  /**
   * Get the anchor point in pixels. The anchor determines the center point for the
   * symbolizer.
   * @return {Array<number>} Anchor.
   * @api
   */
  getAnchor() {
    let e = this.normalizedAnchor_;
    if (!e) {
      e = this.anchor_;
      const a = this.getSize();
      if (this.anchorXUnits_ == "fraction" || this.anchorYUnits_ == "fraction") {
        if (!a)
          return null;
        e = this.anchor_.slice(), this.anchorXUnits_ == "fraction" && (e[0] *= a[0]), this.anchorYUnits_ == "fraction" && (e[1] *= a[1]);
      }
      if (this.anchorOrigin_ != "top-left") {
        if (!a)
          return null;
        e === this.anchor_ && (e = this.anchor_.slice()), (this.anchorOrigin_ == "top-right" || this.anchorOrigin_ == "bottom-right") && (e[0] = -e[0] + a[0]), (this.anchorOrigin_ == "bottom-left" || this.anchorOrigin_ == "bottom-right") && (e[1] = -e[1] + a[1]);
      }
      this.normalizedAnchor_ = e;
    }
    const n = this.getDisplacement(), i = this.getScaleArray();
    return [
      e[0] - n[0] / i[0],
      e[1] + n[1] / i[1]
    ];
  }
  /**
   * Set the anchor point. The anchor determines the center point for the
   * symbolizer.
   *
   * @param {Array<number>} anchor Anchor.
   * @api
   */
  setAnchor(e) {
    this.anchor_ = e, this.normalizedAnchor_ = null;
  }
  /**
   * Get the icon color.
   * @return {import("../color.js").Color} Color.
   * @api
   */
  getColor() {
    return this.color_;
  }
  /**
   * Get the image icon.
   * @param {number} pixelRatio Pixel ratio.
   * @return {HTMLImageElement|HTMLCanvasElement|ImageBitmap} Image or Canvas element. If the Icon
   * style was configured with `src` or with a not let loaded `img`, an `ImageBitmap` will be returned.
   * @api
   */
  getImage(e) {
    return this.iconImage_.getImage(e);
  }
  /**
   * Get the pixel ratio.
   * @param {number} pixelRatio Pixel ratio.
   * @return {number} The pixel ratio of the image.
   * @api
   */
  getPixelRatio(e) {
    return this.iconImage_.getPixelRatio(e);
  }
  /**
   * @return {import("../size.js").Size} Image size.
   */
  getImageSize() {
    return this.iconImage_.getSize();
  }
  /**
   * @return {import("../ImageState.js").default} Image state.
   */
  getImageState() {
    return this.iconImage_.getImageState();
  }
  /**
   * @return {HTMLImageElement|HTMLCanvasElement|ImageBitmap} Image element.
   */
  getHitDetectionImage() {
    return this.iconImage_.getHitDetectionImage();
  }
  /**
   * Get the origin of the symbolizer.
   * @return {Array<number>} Origin.
   * @api
   */
  getOrigin() {
    if (this.origin_)
      return this.origin_;
    let e = this.offset_;
    if (this.offsetOrigin_ != "top-left") {
      const n = this.getSize(), i = this.iconImage_.getSize();
      if (!n || !i)
        return null;
      e = e.slice(), (this.offsetOrigin_ == "top-right" || this.offsetOrigin_ == "bottom-right") && (e[0] = i[0] - n[0] - e[0]), (this.offsetOrigin_ == "bottom-left" || this.offsetOrigin_ == "bottom-right") && (e[1] = i[1] - n[1] - e[1]);
    }
    return this.origin_ = e, this.origin_;
  }
  /**
   * Get the image URL.
   * @return {string|undefined} Image src.
   * @api
   */
  getSrc() {
    return this.iconImage_.getSrc();
  }
  /**
   * Get the size of the icon (in pixels).
   * @return {import("../size.js").Size} Image size.
   * @api
   */
  getSize() {
    return this.size_ ? this.size_ : this.iconImage_.getSize();
  }
  /**
   * Get the width of the icon (in pixels). Will return undefined when the icon image is not yet loaded.
   * @return {number} Icon width (in pixels).
   * @api
   */
  getWidth() {
    const e = this.getScaleArray();
    if (this.size_)
      return this.size_[0] * e[0];
    if (this.iconImage_.getImageState() == Ce.LOADED)
      return this.iconImage_.getSize()[0] * e[0];
  }
  /**
   * Get the height of the icon (in pixels). Will return undefined when the icon image is not yet loaded.
   * @return {number} Icon height (in pixels).
   * @api
   */
  getHeight() {
    const e = this.getScaleArray();
    if (this.size_)
      return this.size_[1] * e[1];
    if (this.iconImage_.getImageState() == Ce.LOADED)
      return this.iconImage_.getSize()[1] * e[1];
  }
  /**
   * Set the scale.
   *
   * @param {number|import("../size.js").Size} scale Scale.
   * @api
   */
  setScale(e) {
    delete this.initialOptions_, super.setScale(e);
  }
  /**
   * @param {function(import("../events/Event.js").default): void} listener Listener function.
   */
  listenImageChange(e) {
    this.iconImage_.addEventListener(ge.CHANGE, e);
  }
  /**
   * Load not yet loaded URI.
   * When rendering a feature with an icon style, the vector renderer will
   * automatically call this method. However, you might want to call this
   * method yourself for preloading or other purposes.
   * @api
   */
  load() {
    this.iconImage_.load();
  }
  /**
   * @param {function(import("../events/Event.js").default): void} listener Listener function.
   */
  unlistenImageChange(e) {
    this.iconImage_.removeEventListener(ge.CHANGE, e);
  }
  ready() {
    return this.iconImage_.ready();
  }
}
const yc = Cc, LS = "#333";
class pc {
  /**
   * @param {Options} [options] Options.
   */
  constructor(e) {
    e = e || {}, this.font_ = e.font, this.rotation_ = e.rotation, this.rotateWithView_ = e.rotateWithView, this.scale_ = e.scale, this.scaleArray_ = At(e.scale !== void 0 ? e.scale : 1), this.text_ = e.text, this.textAlign_ = e.textAlign, this.justify_ = e.justify, this.repeat_ = e.repeat, this.textBaseline_ = e.textBaseline, this.fill_ = e.fill !== void 0 ? e.fill : new mc({ color: LS }), this.maxAngle_ = e.maxAngle !== void 0 ? e.maxAngle : Math.PI / 4, this.placement_ = e.placement !== void 0 ? e.placement : "point", this.overflow_ = !!e.overflow, this.stroke_ = e.stroke !== void 0 ? e.stroke : null, this.offsetX_ = e.offsetX !== void 0 ? e.offsetX : 0, this.offsetY_ = e.offsetY !== void 0 ? e.offsetY : 0, this.backgroundFill_ = e.backgroundFill ? e.backgroundFill : null, this.backgroundStroke_ = e.backgroundStroke ? e.backgroundStroke : null, this.padding_ = e.padding === void 0 ? null : e.padding, this.declutterMode_ = e.declutterMode;
  }
  /**
   * Clones the style.
   * @return {Text} The cloned style.
   * @api
   */
  clone() {
    const e = this.getScale();
    return new pc({
      font: this.getFont(),
      placement: this.getPlacement(),
      repeat: this.getRepeat(),
      maxAngle: this.getMaxAngle(),
      overflow: this.getOverflow(),
      rotation: this.getRotation(),
      rotateWithView: this.getRotateWithView(),
      scale: Array.isArray(e) ? e.slice() : e,
      text: this.getText(),
      textAlign: this.getTextAlign(),
      justify: this.getJustify(),
      textBaseline: this.getTextBaseline(),
      fill: this.getFill() ? this.getFill().clone() : void 0,
      stroke: this.getStroke() ? this.getStroke().clone() : void 0,
      offsetX: this.getOffsetX(),
      offsetY: this.getOffsetY(),
      backgroundFill: this.getBackgroundFill() ? this.getBackgroundFill().clone() : void 0,
      backgroundStroke: this.getBackgroundStroke() ? this.getBackgroundStroke().clone() : void 0,
      padding: this.getPadding() || void 0,
      declutterMode: this.getDeclutterMode()
    });
  }
  /**
   * Get the `overflow` configuration.
   * @return {boolean} Let text overflow the length of the path they follow.
   * @api
   */
  getOverflow() {
    return this.overflow_;
  }
  /**
   * Get the font name.
   * @return {string|undefined} Font.
   * @api
   */
  getFont() {
    return this.font_;
  }
  /**
   * Get the maximum angle between adjacent characters.
   * @return {number} Angle in radians.
   * @api
   */
  getMaxAngle() {
    return this.maxAngle_;
  }
  /**
   * Get the label placement.
   * @return {TextPlacement} Text placement.
   * @api
   */
  getPlacement() {
    return this.placement_;
  }
  /**
   * Get the repeat interval of the text.
   * @return {number|undefined} Repeat interval in pixels.
   * @api
   */
  getRepeat() {
    return this.repeat_;
  }
  /**
   * Get the x-offset for the text.
   * @return {number} Horizontal text offset.
   * @api
   */
  getOffsetX() {
    return this.offsetX_;
  }
  /**
   * Get the y-offset for the text.
   * @return {number} Vertical text offset.
   * @api
   */
  getOffsetY() {
    return this.offsetY_;
  }
  /**
   * Get the fill style for the text.
   * @return {import("./Fill.js").default|null} Fill style.
   * @api
   */
  getFill() {
    return this.fill_;
  }
  /**
   * Determine whether the text rotates with the map.
   * @return {boolean|undefined} Rotate with map.
   * @api
   */
  getRotateWithView() {
    return this.rotateWithView_;
  }
  /**
   * Get the text rotation.
   * @return {number|undefined} Rotation.
   * @api
   */
  getRotation() {
    return this.rotation_;
  }
  /**
   * Get the text scale.
   * @return {number|import("../size.js").Size|undefined} Scale.
   * @api
   */
  getScale() {
    return this.scale_;
  }
  /**
   * Get the symbolizer scale array.
   * @return {import("../size.js").Size} Scale array.
   */
  getScaleArray() {
    return this.scaleArray_;
  }
  /**
   * Get the stroke style for the text.
   * @return {import("./Stroke.js").default|null} Stroke style.
   * @api
   */
  getStroke() {
    return this.stroke_;
  }
  /**
   * Get the text to be rendered.
   * @return {string|Array<string>|undefined} Text.
   * @api
   */
  getText() {
    return this.text_;
  }
  /**
   * Get the text alignment.
   * @return {CanvasTextAlign|undefined} Text align.
   * @api
   */
  getTextAlign() {
    return this.textAlign_;
  }
  /**
   * Get the justification.
   * @return {TextJustify|undefined} Justification.
   * @api
   */
  getJustify() {
    return this.justify_;
  }
  /**
   * Get the text baseline.
   * @return {CanvasTextBaseline|undefined} Text baseline.
   * @api
   */
  getTextBaseline() {
    return this.textBaseline_;
  }
  /**
   * Get the background fill style for the text.
   * @return {import("./Fill.js").default|null} Fill style.
   * @api
   */
  getBackgroundFill() {
    return this.backgroundFill_;
  }
  /**
   * Get the background stroke style for the text.
   * @return {import("./Stroke.js").default|null} Stroke style.
   * @api
   */
  getBackgroundStroke() {
    return this.backgroundStroke_;
  }
  /**
   * Get the padding for the text.
   * @return {Array<number>|null} Padding.
   * @api
   */
  getPadding() {
    return this.padding_;
  }
  /**
   * Get the declutter mode of the shape
   * @return {import("./Style.js").DeclutterMode} Shape's declutter mode
   * @api
   */
  getDeclutterMode() {
    return this.declutterMode_;
  }
  /**
   * Set the `overflow` property.
   *
   * @param {boolean} overflow Let text overflow the path that it follows.
   * @api
   */
  setOverflow(e) {
    this.overflow_ = e;
  }
  /**
   * Set the font.
   *
   * @param {string|undefined} font Font.
   * @api
   */
  setFont(e) {
    this.font_ = e;
  }
  /**
   * Set the maximum angle between adjacent characters.
   *
   * @param {number} maxAngle Angle in radians.
   * @api
   */
  setMaxAngle(e) {
    this.maxAngle_ = e;
  }
  /**
   * Set the x offset.
   *
   * @param {number} offsetX Horizontal text offset.
   * @api
   */
  setOffsetX(e) {
    this.offsetX_ = e;
  }
  /**
   * Set the y offset.
   *
   * @param {number} offsetY Vertical text offset.
   * @api
   */
  setOffsetY(e) {
    this.offsetY_ = e;
  }
  /**
   * Set the text placement.
   *
   * @param {TextPlacement} placement Placement.
   * @api
   */
  setPlacement(e) {
    this.placement_ = e;
  }
  /**
   * Set the repeat interval of the text.
   * @param {number|undefined} [repeat] Repeat interval in pixels.
   * @api
   */
  setRepeat(e) {
    this.repeat_ = e;
  }
  /**
   * Set whether to rotate the text with the view.
   *
   * @param {boolean} rotateWithView Rotate with map.
   * @api
   */
  setRotateWithView(e) {
    this.rotateWithView_ = e;
  }
  /**
   * Set the fill.
   *
   * @param {import("./Fill.js").default|null} fill Fill style.
   * @api
   */
  setFill(e) {
    this.fill_ = e;
  }
  /**
   * Set the rotation.
   *
   * @param {number|undefined} rotation Rotation.
   * @api
   */
  setRotation(e) {
    this.rotation_ = e;
  }
  /**
   * Set the scale.
   *
   * @param {number|import("../size.js").Size|undefined} scale Scale.
   * @api
   */
  setScale(e) {
    this.scale_ = e, this.scaleArray_ = At(e !== void 0 ? e : 1);
  }
  /**
   * Set the stroke.
   *
   * @param {import("./Stroke.js").default|null} stroke Stroke style.
   * @api
   */
  setStroke(e) {
    this.stroke_ = e;
  }
  /**
   * Set the text.
   *
   * @param {string|Array<string>|undefined} text Text.
   * @api
   */
  setText(e) {
    this.text_ = e;
  }
  /**
   * Set the text alignment.
   *
   * @param {CanvasTextAlign|undefined} textAlign Text align.
   * @api
   */
  setTextAlign(e) {
    this.textAlign_ = e;
  }
  /**
   * Set the justification.
   *
   * @param {TextJustify|undefined} justify Justification.
   * @api
   */
  setJustify(e) {
    this.justify_ = e;
  }
  /**
   * Set the text baseline.
   *
   * @param {CanvasTextBaseline|undefined} textBaseline Text baseline.
   * @api
   */
  setTextBaseline(e) {
    this.textBaseline_ = e;
  }
  /**
   * Set the background fill.
   *
   * @param {import("./Fill.js").default|null} fill Fill style.
   * @api
   */
  setBackgroundFill(e) {
    this.backgroundFill_ = e;
  }
  /**
   * Set the background stroke.
   *
   * @param {import("./Stroke.js").default|null} stroke Stroke style.
   * @api
   */
  setBackgroundStroke(e) {
    this.backgroundStroke_ = e;
  }
  /**
   * Set the padding (`[top, right, bottom, left]`).
   *
   * @param {Array<number>|null} padding Padding.
   * @api
   */
  setPadding(e) {
    this.padding_ = e;
  }
}
const VS = pc;
let xa = 0;
const Pa = 0, De = 1 << xa++, ne = 1 << xa++, wt = 1 << xa++, Qe = 1 << xa++, $n = 1 << xa++, ot = Math.pow(2, xa) - 1, Cg = {
  [De]: "boolean",
  [ne]: "number",
  [wt]: "string",
  [Qe]: "color",
  [$n]: "number[]"
}, BS = Object.keys(Cg).map(Number).sort(Dn);
function dt(t) {
  const e = [];
  for (const n of BS)
    FS(t, n) && e.push(Cg[n]);
  return e.length === 0 ? "untyped" : e.length < 3 ? e.join(" or ") : e.slice(0, -1).join(", ") + ", or " + e[e.length - 1];
}
function FS(t, e) {
  return (t & e) === e;
}
function hn(t, e) {
  return !!(t & e);
}
function Wr(t, e) {
  return t === e;
}
class ni {
  /**
   * @param {number} type The value type.
   * @param {LiteralValue} value The literal value.
   */
  constructor(e, n) {
    this.type = e, this.value = n;
  }
}
class kS {
  /**
   * @param {number} type The return type.
   * @param {string} operator The operator.
   * @param {...Expression} args The arguments.
   */
  constructor(e, n, ...i) {
    this.type = e, this.operator = n, this.args = i;
  }
}
function yg() {
  return {
    variables: /* @__PURE__ */ new Set(),
    properties: /* @__PURE__ */ new Set(),
    featureId: !1,
    geometryType: !1,
    style: {}
  };
}
function OS(t) {
  switch (t) {
    case "string":
      return wt;
    case "color":
      return Qe;
    case "number":
      return ne;
    case "boolean":
      return De;
    case "number[]":
      return $n;
    default:
      throw new Error(`Unrecognized type hint: ${t}`);
  }
}
function Pe(t, e, n) {
  switch (typeof t) {
    case "boolean":
      return new ni(De, t);
    case "number":
      return new ni(ne, t);
    case "string": {
      let a = wt;
      return fS(t) && (a |= Qe), Wr(a & n, Pa) || (a &= n), new ni(a, t);
    }
  }
  if (!Array.isArray(t))
    throw new Error("Expression must be an array or a primitive value");
  if (t.length === 0)
    throw new Error("Empty expression");
  if (typeof t[0] == "string")
    return KS(t, e, n);
  for (const a of t)
    if (typeof a != "number")
      throw new Error("Expected an array of numbers");
  let i = $n;
  return (t.length === 3 || t.length === 4) && (i |= Qe), n && (i &= n), new ni(i, t);
}
const F = {
  Get: "get",
  Var: "var",
  Concat: "concat",
  GeometryType: "geometry-type",
  Any: "any",
  All: "all",
  Not: "!",
  Resolution: "resolution",
  Zoom: "zoom",
  Time: "time",
  Equal: "==",
  NotEqual: "!=",
  GreaterThan: ">",
  GreaterThanOrEqualTo: ">=",
  LessThan: "<",
  LessThanOrEqualTo: "<=",
  Multiply: "*",
  Divide: "/",
  Add: "+",
  Subtract: "-",
  Clamp: "clamp",
  Mod: "%",
  Pow: "^",
  Abs: "abs",
  Floor: "floor",
  Ceil: "ceil",
  Round: "round",
  Sin: "sin",
  Cos: "cos",
  Atan: "atan",
  Sqrt: "sqrt",
  Match: "match",
  Between: "between",
  Interpolate: "interpolate",
  Coalesce: "coalesce",
  Case: "case",
  In: "in",
  Number: "number",
  String: "string",
  Array: "array",
  Color: "color",
  Id: "id",
  Band: "band",
  Palette: "palette",
  ToString: "to-string"
}, DS = {
  [F.Get]: he(
    ([t, e]) => e !== void 0 ? OS(
      /** @type {string} */
      /** @type {LiteralExpression} */
      e.value
    ) : ot,
    me(1, 2),
    GS
  ),
  [F.Var]: he(
    ([t]) => t.type,
    me(1, 1),
    NS
  ),
  [F.Id]: he(ne | wt, La, $S),
  [F.Concat]: he(
    wt,
    me(2, 1 / 0),
    _e(ot)
  ),
  [F.GeometryType]: he(wt, La, WS),
  [F.Resolution]: he(ne, La),
  [F.Zoom]: he(ne, La),
  [F.Time]: he(ne, La),
  [F.Any]: he(
    De,
    me(2, 1 / 0),
    _e(De)
  ),
  [F.All]: he(
    De,
    me(2, 1 / 0),
    _e(De)
  ),
  [F.Not]: he(
    De,
    me(1, 1),
    _e(De)
  ),
  [F.Equal]: he(
    De,
    me(2, 2),
    _e(ot),
    Zn
  ),
  [F.NotEqual]: he(
    De,
    me(2, 2),
    _e(ot),
    Zn
  ),
  [F.GreaterThan]: he(
    De,
    me(2, 2),
    _e(ot),
    Zn
  ),
  [F.GreaterThanOrEqualTo]: he(
    De,
    me(2, 2),
    _e(ot),
    Zn
  ),
  [F.LessThan]: he(
    De,
    me(2, 2),
    _e(ot),
    Zn
  ),
  [F.LessThanOrEqualTo]: he(
    De,
    me(2, 2),
    _e(ot),
    Zn
  ),
  [F.Multiply]: he(
    (t) => {
      let e = ne | Qe;
      for (let n = 0; n < t.length; n++)
        e &= t[n].type;
      return e;
    },
    me(2, 1 / 0),
    _e(ne | Qe),
    Zn
  ),
  [F.Coalesce]: he(
    (t) => {
      let e = ot;
      for (let n = 1; n < t.length; n += 2)
        e &= t[n].type;
      return e &= t[t.length - 1].type, e;
    },
    me(2, 1 / 0),
    _e(ot),
    Zn
  ),
  [F.Divide]: he(
    ne,
    me(2, 2),
    _e(ne)
  ),
  [F.Add]: he(
    ne,
    me(2, 1 / 0),
    _e(ne)
  ),
  [F.Subtract]: he(
    ne,
    me(2, 2),
    _e(ne)
  ),
  [F.Clamp]: he(
    ne,
    me(3, 3),
    _e(ne)
  ),
  [F.Mod]: he(
    ne,
    me(2, 2),
    _e(ne)
  ),
  [F.Pow]: he(
    ne,
    me(2, 2),
    _e(ne)
  ),
  [F.Abs]: he(
    ne,
    me(1, 1),
    _e(ne)
  ),
  [F.Floor]: he(
    ne,
    me(1, 1),
    _e(ne)
  ),
  [F.Ceil]: he(
    ne,
    me(1, 1),
    _e(ne)
  ),
  [F.Round]: he(
    ne,
    me(1, 1),
    _e(ne)
  ),
  [F.Sin]: he(
    ne,
    me(1, 1),
    _e(ne)
  ),
  [F.Cos]: he(
    ne,
    me(1, 1),
    _e(ne)
  ),
  [F.Atan]: he(
    ne,
    me(1, 2),
    _e(ne)
  ),
  [F.Sqrt]: he(
    ne,
    me(1, 1),
    _e(ne)
  ),
  [F.Match]: he(
    (t) => {
      let e = ot;
      for (let n = 2; n < t.length; n += 2)
        e &= t[n].type;
      return e &= t[t.length - 1].type, e;
    },
    me(4, 1 / 0),
    ud,
    XS
  ),
  [F.Between]: he(
    De,
    me(3, 3),
    _e(ne)
  ),
  [F.Interpolate]: he(
    (t) => {
      let e = Qe | ne;
      for (let n = 3; n < t.length; n += 2)
        e &= t[n].type;
      return e;
    },
    me(6, 1 / 0),
    ud,
    YS
  ),
  [F.Case]: he(
    (t) => {
      let e = ot;
      for (let n = 1; n < t.length; n += 2)
        e &= t[n].type;
      return e &= t[t.length - 1].type, e;
    },
    me(3, 1 / 0),
    US,
    jS
  ),
  [F.In]: he(De, me(2, 2), ZS),
  [F.Number]: he(
    ne,
    me(1, 1 / 0),
    _e(ot)
  ),
  [F.String]: he(
    wt,
    me(1, 1 / 0),
    _e(ot)
  ),
  [F.Array]: he(
    (t) => t.length === 3 || t.length === 4 ? $n | Qe : $n,
    me(1, 1 / 0),
    _e(ne)
  ),
  [F.Color]: he(
    Qe,
    me(1, 4),
    _e(ne)
  ),
  [F.Band]: he(
    ne,
    me(1, 3),
    _e(ne)
  ),
  [F.Palette]: he(Qe, me(2, 2), HS),
  [F.ToString]: he(
    wt,
    me(1, 1),
    _e(De | ne | wt | Qe)
  )
};
function GS(t, e) {
  const n = Pe(t[1], e);
  if (!(n instanceof ni))
    throw new Error("Expected a literal argument for get operation");
  if (typeof n.value != "string")
    throw new Error("Expected a string argument for get operation");
  if (e.properties.add(n.value), t.length === 3) {
    const i = Pe(t[2], e);
    return [n, i];
  }
  return [n];
}
function NS(t, e, n, i) {
  const a = t[1];
  if (typeof a != "string")
    throw new Error("Expected a string argument for var operation");
  if (e.variables.add(a), !("variables" in e.style) || e.style.variables[a] === void 0)
    return [new ni(ot, a)];
  const o = e.style.variables[a], r = (
    /** @type {LiteralExpression} */
    Pe(o, e)
  );
  if (r.value = a, i && !hn(i, r.type))
    throw new Error(
      `The variable ${a} has type ${dt(
        r.type
      )} but the following type was expected: ${dt(i)}`
    );
  return [r];
}
function $S(t, e) {
  e.featureId = !0;
}
function WS(t, e) {
  e.geometryType = !0;
}
function La(t, e) {
  const n = t[0];
  if (t.length !== 1)
    throw new Error(`Expected no arguments for ${n} operation`);
  return [];
}
function me(t, e) {
  return function(n, i) {
    const a = n[0], o = n.length - 1;
    if (t === e) {
      if (o !== t) {
        const r = t === 1 ? "" : "s";
        throw new Error(
          `Expected ${t} argument${r} for ${a}, got ${o}`
        );
      }
    } else if (o < t || o > e) {
      const r = e === 1 / 0 ? `${t} or more` : `${t} to ${e}`;
      throw new Error(
        `Expected ${r} arguments for ${a}, got ${o}`
      );
    }
  };
}
function _e(t) {
  return function(e, n) {
    const i = e[0], a = e.length - 1, o = new Array(a);
    for (let r = 0; r < a; ++r) {
      const s = Pe(e[r + 1], n);
      if (!hn(t, s.type)) {
        const l = dt(t), c = dt(s.type);
        throw new Error(
          `Unexpected type for argument ${r} of ${i} operation, got ${l} but expected ${c}`
        );
      }
      s.type &= t, o[r] = s;
    }
    return o;
  };
}
function Zn(t, e, n) {
  const i = t[0], a = t.length - 1;
  let o = ot;
  for (let s = 0; s < n.length; ++s)
    o &= n[s].type;
  if (o === Pa)
    throw new Error(
      `No common type could be found for arguments of ${i} operation`
    );
  const r = new Array(a);
  for (let s = 0; s < a; ++s)
    r[s] = Pe(t[s + 1], e, o);
  return r;
}
function US(t, e) {
  const n = t[0], i = t.length - 1;
  if (i % 2 === 0)
    throw new Error(
      `An odd amount of arguments was expected for operation ${n}, got ${JSON.stringify(
        i
      )} instead`
    );
}
function ud(t, e) {
  const n = t[0], i = t.length - 1;
  if (i % 2 === 1)
    throw new Error(
      `An even amount of arguments was expected for operation ${n}, got ${JSON.stringify(
        i
      )} instead`
    );
}
function XS(t, e, n, i) {
  const a = t.length - 1;
  let r = Pe(t[1], e).type;
  const s = Pe(t[t.length - 1], e);
  let l = i !== void 0 ? i & s.type : s.type;
  const c = new Array(a - 2);
  for (let d = 0; d < a - 2; d += 2) {
    const h = Pe(t[d + 2], e), f = Pe(t[d + 3], e);
    r &= h.type, l &= f.type, c[d] = h, c[d + 1] = f;
  }
  const u = wt | ne | De;
  if (!hn(u, r))
    throw new Error(
      `Expected an input of type ${dt(
        u
      )} for the interpolate operation, got ${dt(r)} instead`
    );
  if (Wr(l, Pa))
    throw new Error(
      "Could not find a common output type for the following match operation: " + JSON.stringify(t)
    );
  for (let d = 0; d < a - 2; d += 2) {
    const h = Pe(t[d + 2], e, r), f = Pe(t[d + 3], e, l);
    c[d] = h, c[d + 1] = f;
  }
  return [
    Pe(t[1], e, r),
    ...c,
    Pe(t[t.length - 1], e, l)
  ];
}
function YS(t, e, n, i) {
  const a = t[1];
  let o;
  switch (a[0]) {
    case "linear":
      o = 1;
      break;
    case "exponential":
      if (o = a[1], typeof o != "number")
        throw new Error(
          `Expected a number base for exponential interpolation, got ${JSON.stringify(o)} instead`
        );
      break;
    default:
      o = null;
  }
  if (!o)
    throw new Error(
      `Invalid interpolation type: ${JSON.stringify(a)}`
    );
  o = Pe(o, e);
  let r = Pe(t[2], e);
  if (!hn(ne, r.type))
    throw new Error(
      `Expected an input of type number for the interpolate operation, got ${dt(r.type)} instead`
    );
  r = Pe(t[2], e, ne);
  const s = new Array(t.length - 3);
  for (let l = 0; l < s.length; l += 2) {
    let c = Pe(t[l + 3], e);
    if (!hn(ne, c.type))
      throw new Error(
        `Expected all stop input values in the interpolate operation to be of type number, got ${dt(c.type)} at position ${l + 2} instead`
      );
    let u = Pe(t[l + 4], e);
    if (!hn(ne | Qe, u.type))
      throw new Error(
        `Expected all stop output values in the interpolate operation to be a number or color, got ${dt(u.type)} at position ${l + 3} instead`
      );
    c = Pe(t[l + 3], e, ne), u = Pe(t[l + 4], e, ne | Qe), s[l] = c, s[l + 1] = u;
  }
  return [o, r, ...s];
}
function jS(t, e, n, i) {
  const a = Pe(t[t.length - 1], e);
  let o = i !== void 0 ? i & a.type : a.type;
  const r = new Array(t.length - 1);
  for (let s = 0; s < r.length - 1; s += 2) {
    const l = Pe(t[s + 1], e), c = Pe(t[s + 2], e);
    if (!hn(De, l.type))
      throw new Error(
        `Expected all conditions in the case operation to be of type boolean, got ${dt(l.type)} at position ${s} instead`
      );
    o &= c.type, r[s] = l, r[s + 1] = c;
  }
  if (Wr(o, Pa))
    throw new Error(
      "Could not find a common output type for the following case operation: " + JSON.stringify(t)
    );
  for (let s = 0; s < r.length - 1; s += 2)
    r[s + 1] = Pe(t[s + 2], e, o);
  return r[r.length - 1] = Pe(
    t[t.length - 1],
    e,
    o
  ), r;
}
function ZS(t, e) {
  let n = (
    /** @type {any} */
    t[2]
  );
  if (!Array.isArray(n))
    throw new Error(
      'The "in" operator was provided a literal value which was not an array as second argument.'
    );
  if (typeof n[0] == "string") {
    if (n[0] !== "literal")
      throw new Error(
        'For the "in" operator, a string array should be wrapped in a "literal" operator to disambiguate from expressions.'
      );
    if (!Array.isArray(n[1]))
      throw new Error(
        'The "in" operator was provided a literal value which was not an array as second argument.'
      );
    n = n[1];
  }
  let i = wt | ne;
  const a = new Array(n.length);
  for (let r = 0; r < a.length; r++) {
    const s = Pe(n[r], e);
    i &= s.type, a[r] = s;
  }
  if (Wr(i, Pa))
    throw new Error(
      "Could not find a common type for the following in operation: " + JSON.stringify(t)
    );
  return [Pe(t[1], e, i), ...a];
}
function HS(t, e) {
  const n = Pe(t[1], e, ne);
  if (n.type !== ne)
    throw new Error(
      `The first argument of palette must be an number, got ${dt(
        n.type
      )} instead`
    );
  const i = t[2];
  if (!Array.isArray(i))
    throw new Error("The second argument of palette must be an array");
  const a = new Array(i.length);
  for (let o = 0; o < a.length; o++) {
    const r = Pe(i[o], e, Qe);
    if (!(r instanceof ni))
      throw new Error(
        `The palette color at index ${o} must be a literal value`
      );
    if (!hn(r.type, Qe))
      throw new Error(
        `The palette color at index ${o} should be of type color, got ${dt(
          r.type
        )} instead`
      );
    a[o] = r;
  }
  return [n, ...a];
}
function he(t, ...e) {
  return function(n, i, a) {
    const o = n[0];
    let r = [];
    for (let l = 0; l < e.length; l++)
      r = e[l](n, i, r, a) || r;
    let s = typeof t == "function" ? t(r) : t;
    if (a !== void 0) {
      if (!hn(s, a))
        throw new Error(
          `The following expression was expected to return ${dt(
            a
          )}, but returns ${dt(s)} instead: ${JSON.stringify(
            n
          )}`
        );
      s &= a;
    }
    if (s === Pa)
      throw new Error(
        `No matching type was found for the following expression: ${JSON.stringify(
          n
        )}`
      );
    return new kS(s, o, ...r);
  };
}
function KS(t, e, n) {
  const i = t[0], a = DS[i];
  if (!a)
    throw new Error(`Unknown operator: ${i}`);
  return a(t, e, n);
}
function pg(t) {
  if (!t)
    return "";
  const e = t.getType();
  switch (e) {
    case "Point":
    case "LineString":
    case "Polygon":
      return e;
    case "MultiPoint":
    case "MultiLineString":
    case "MultiPolygon":
      return (
        /** @type {'Point'|'LineString'|'Polygon'} */
        e.substring(5)
      );
    case "Circle":
      return "Polygon";
    case "GeometryCollection":
      return pg(
        /** @type {import("../geom/GeometryCollection.js").default} */
        t.getGeometries()[0]
      );
    default:
      return "";
  }
}
function _g() {
  return {
    variables: {},
    properties: {},
    resolution: NaN,
    featureId: null,
    geometryType: ""
  };
}
function Yn(t, e, n) {
  const i = Pe(t, n);
  if (!hn(e, i.type)) {
    const a = dt(e), o = dt(i.type);
    throw new Error(
      `Expected expression to be of type ${a}, got ${o}`
    );
  }
  return qt(i);
}
function qt(t, e) {
  if (t instanceof ni) {
    if (t.type === Qe && typeof t.value == "string") {
      const i = lc(t.value);
      return function() {
        return i;
      };
    }
    return function() {
      return t.value;
    };
  }
  const n = t.operator;
  switch (n) {
    case F.Number:
    case F.String:
    case F.Coalesce:
      return qS(t);
    case F.Get:
    case F.Var:
      return JS(t);
    case F.Id:
      return (i) => i.featureId;
    case F.GeometryType:
      return (i) => i.geometryType;
    case F.Concat: {
      const i = t.args.map((a) => qt(a));
      return (a) => "".concat(...i.map((o) => o(a).toString()));
    }
    case F.Resolution:
      return (i) => i.resolution;
    case F.Any:
    case F.All:
    case F.Between:
    case F.In:
    case F.Not:
      return e0(t);
    case F.Equal:
    case F.NotEqual:
    case F.LessThan:
    case F.LessThanOrEqualTo:
    case F.GreaterThan:
    case F.GreaterThanOrEqualTo:
      return QS(t);
    case F.Multiply:
    case F.Divide:
    case F.Add:
    case F.Subtract:
    case F.Clamp:
    case F.Mod:
    case F.Pow:
    case F.Abs:
    case F.Floor:
    case F.Ceil:
    case F.Round:
    case F.Sin:
    case F.Cos:
    case F.Atan:
    case F.Sqrt:
      return t0(t);
    case F.Case:
      return n0(t);
    case F.Match:
      return i0(t);
    case F.Interpolate:
      return a0(t);
    case F.ToString:
      return o0(t);
    default:
      throw new Error(`Unsupported operator ${n}`);
  }
}
function qS(t, e) {
  const n = t.operator, i = t.args.length, a = new Array(i);
  for (let o = 0; o < i; ++o)
    a[o] = qt(t.args[o]);
  switch (n) {
    case F.Coalesce:
      return (o) => {
        for (let r = 0; r < i; ++r) {
          const s = a[r](o);
          if (typeof s < "u" && s !== null)
            return s;
        }
        throw new Error("Expected one of the values to be non-null");
      };
    case F.Number:
    case F.String:
      return (o) => {
        for (let r = 0; r < i; ++r) {
          const s = a[r](o);
          if (typeof s === n)
            return s;
        }
        throw new Error(`Expected one of the values to be a ${n}`);
      };
    default:
      throw new Error(`Unsupported assertion operator ${n}`);
  }
}
function JS(t, e) {
  const i = (
    /** @type {string} */
    /** @type {LiteralExpression} */
    t.args[0].value
  );
  switch (t.operator) {
    case F.Get:
      return (a) => a.properties[i];
    case F.Var:
      return (a) => a.variables[i];
    default:
      throw new Error(`Unsupported accessor operator ${t.operator}`);
  }
}
function QS(t, e) {
  const n = t.operator, i = qt(t.args[0]), a = qt(t.args[1]);
  switch (n) {
    case F.Equal:
      return (o) => i(o) === a(o);
    case F.NotEqual:
      return (o) => i(o) !== a(o);
    case F.LessThan:
      return (o) => i(o) < a(o);
    case F.LessThanOrEqualTo:
      return (o) => i(o) <= a(o);
    case F.GreaterThan:
      return (o) => i(o) > a(o);
    case F.GreaterThanOrEqualTo:
      return (o) => i(o) >= a(o);
    default:
      throw new Error(`Unsupported comparison operator ${n}`);
  }
}
function e0(t, e) {
  const n = t.operator, i = t.args.length, a = new Array(i);
  for (let o = 0; o < i; ++o)
    a[o] = qt(t.args[o]);
  switch (n) {
    case F.Any:
      return (o) => {
        for (let r = 0; r < i; ++r)
          if (a[r](o))
            return !0;
        return !1;
      };
    case F.All:
      return (o) => {
        for (let r = 0; r < i; ++r)
          if (!a[r](o))
            return !1;
        return !0;
      };
    case F.Between:
      return (o) => {
        const r = a[0](o), s = a[1](o), l = a[2](o);
        return r >= s && r <= l;
      };
    case F.In:
      return (o) => {
        const r = a[0](o);
        for (let s = 1; s < i; ++s)
          if (r === a[s](o))
            return !0;
        return !1;
      };
    case F.Not:
      return (o) => !a[0](o);
    default:
      throw new Error(`Unsupported logical operator ${n}`);
  }
}
function t0(t, e) {
  const n = t.operator, i = t.args.length, a = new Array(i);
  for (let o = 0; o < i; ++o)
    a[o] = qt(t.args[o]);
  switch (n) {
    case F.Multiply:
      return (o) => {
        let r = 1;
        for (let s = 0; s < i; ++s)
          r *= a[s](o);
        return r;
      };
    case F.Divide:
      return (o) => a[0](o) / a[1](o);
    case F.Add:
      return (o) => {
        let r = 0;
        for (let s = 0; s < i; ++s)
          r += a[s](o);
        return r;
      };
    case F.Subtract:
      return (o) => a[0](o) - a[1](o);
    case F.Clamp:
      return (o) => {
        const r = a[0](o), s = a[1](o);
        if (r < s)
          return s;
        const l = a[2](o);
        return r > l ? l : r;
      };
    case F.Mod:
      return (o) => a[0](o) % a[1](o);
    case F.Pow:
      return (o) => Math.pow(a[0](o), a[1](o));
    case F.Abs:
      return (o) => Math.abs(a[0](o));
    case F.Floor:
      return (o) => Math.floor(a[0](o));
    case F.Ceil:
      return (o) => Math.ceil(a[0](o));
    case F.Round:
      return (o) => Math.round(a[0](o));
    case F.Sin:
      return (o) => Math.sin(a[0](o));
    case F.Cos:
      return (o) => Math.cos(a[0](o));
    case F.Atan:
      return i === 2 ? (o) => Math.atan2(a[0](o), a[1](o)) : (o) => Math.atan(a[0](o));
    case F.Sqrt:
      return (o) => Math.sqrt(a[0](o));
    default:
      throw new Error(`Unsupported numeric operator ${n}`);
  }
}
function n0(t, e) {
  const n = t.args.length, i = new Array(n);
  for (let a = 0; a < n; ++a)
    i[a] = qt(t.args[a]);
  return (a) => {
    for (let o = 0; o < n - 1; o += 2)
      if (i[o](a))
        return i[o + 1](a);
    return i[n - 1](a);
  };
}
function i0(t, e) {
  const n = t.args.length, i = new Array(n);
  for (let a = 0; a < n; ++a)
    i[a] = qt(t.args[a]);
  return (a) => {
    const o = i[0](a);
    for (let r = 1; r < n; r += 2)
      if (o === i[r](a))
        return i[r + 1](a);
    return i[n - 1](a);
  };
}
function a0(t, e) {
  const n = t.args.length, i = new Array(n);
  for (let a = 0; a < n; ++a)
    i[a] = qt(t.args[a]);
  return (a) => {
    const o = i[0](a), r = i[1](a);
    let s, l;
    for (let c = 2; c < n; c += 2) {
      const u = i[c](a);
      let d = i[c + 1](a);
      const h = Array.isArray(d);
      if (h && (d = dS(d)), u >= r)
        return c === 2 ? d : h ? r0(
          o,
          r,
          s,
          l,
          u,
          d
        ) : ka(
          o,
          r,
          s,
          l,
          u,
          d
        );
      s = u, l = d;
    }
    return l;
  };
}
function o0(t, e) {
  const n = t.operator, i = t.args.length, a = new Array(i);
  for (let o = 0; o < i; ++o)
    a[o] = qt(t.args[o]);
  switch (n) {
    case F.ToString:
      return (o) => {
        const r = a[0](o);
        return t.args[0].type === Qe ? cc(r) : r.toString();
      };
    default:
      throw new Error(`Unsupported convert operator ${n}`);
  }
}
function ka(t, e, n, i, a, o) {
  const r = a - n;
  if (r === 0)
    return i;
  const s = e - n, l = t === 1 ? s / r : (Math.pow(t, s) - 1) / (Math.pow(t, r) - 1);
  return i + l * (o - i);
}
function r0(t, e, n, i, a, o) {
  if (a - n === 0)
    return i;
  const s = id(i), l = id(o);
  let c = l[2] - s[2];
  c > 180 ? c -= 360 : c < -180 && (c += 360);
  const u = [
    ka(t, e, n, s[0], a, l[0]),
    ka(t, e, n, s[1], a, l[1]),
    s[2] + ka(t, e, n, 0, a, c),
    ka(t, e, n, i[3], a, o[3])
  ];
  return og(hS(u));
}
function s0(t) {
  return !0;
}
function l0(t) {
  const e = yg(), n = c0(t, e), i = _g();
  return function(a, o) {
    if (i.properties = a.getPropertiesInternal(), i.resolution = o, e.featureId) {
      const r = a.getId();
      r !== void 0 ? i.featureId = r : i.featureId = null;
    }
    return e.geometryType && (i.geometryType = pg(
      a.getGeometry()
    )), n(i);
  };
}
function dd(t) {
  const e = yg(), n = t.length, i = new Array(n);
  for (let r = 0; r < n; ++r)
    i[r] = Hs(t[r], e);
  const a = _g(), o = new Array(n);
  return function(r, s) {
    if (a.properties = r.getPropertiesInternal(), a.resolution = s, e.featureId) {
      const c = r.getId();
      c !== void 0 ? a.featureId = c : a.featureId = null;
    }
    let l = 0;
    for (let c = 0; c < n; ++c) {
      const u = i[c](a);
      u && (o[l] = u, l += 1);
    }
    return o.length = l, o;
  };
}
function c0(t, e) {
  const n = t.length, i = new Array(n);
  for (let a = 0; a < n; ++a) {
    const o = t[a], r = "filter" in o ? Yn(o.filter, De, e) : s0;
    let s;
    if (Array.isArray(o.style)) {
      const l = o.style.length;
      s = new Array(l);
      for (let c = 0; c < l; ++c)
        s[c] = Hs(o.style[c], e);
    } else
      s = [Hs(o.style, e)];
    i[a] = { filter: r, styles: s };
  }
  return function(a) {
    const o = [];
    let r = !1;
    for (let s = 0; s < n; ++s) {
      const l = i[s].filter;
      if (l(a) && !(t[s].else && r)) {
        r = !0;
        for (const c of i[s].styles) {
          const u = c(a);
          u && o.push(u);
        }
      }
    }
    return o;
  };
}
function Hs(t, e) {
  const n = ao(t, "", e), i = oo(t, "", e), a = u0(t, e), o = d0(t, e), r = xt(t, "z-index", e);
  if (!n && !i && !a && !o && !ua(t))
    throw new Error(
      "No fill, stroke, point, or text symbolizer properties in style: " + JSON.stringify(t)
    );
  const s = new Na();
  return function(l) {
    let c = !0;
    if (n) {
      const u = n(l);
      u && (c = !1), s.setFill(u);
    }
    if (i) {
      const u = i(l);
      u && (c = !1), s.setStroke(u);
    }
    if (a) {
      const u = a(l);
      u && (c = !1), s.setText(u);
    }
    if (o) {
      const u = o(l);
      u && (c = !1), s.setImage(u);
    }
    return r && s.setZIndex(r(l)), c ? null : s;
  };
}
function ao(t, e, n) {
  let i;
  if (e + "fill-pattern-src" in t ? i = m0(t, e + "fill-", n) : i = _c(
    t,
    e + "fill-color",
    n
  ), !i)
    return null;
  const a = new mc();
  return function(o) {
    const r = i(o);
    return r === "none" ? null : (a.setColor(r), a);
  };
}
function oo(t, e, n) {
  const i = xt(
    t,
    e + "stroke-width",
    n
  ), a = _c(
    t,
    e + "stroke-color",
    n
  );
  if (!i && !a)
    return null;
  const o = Bn(
    t,
    e + "stroke-line-cap",
    n
  ), r = Bn(
    t,
    e + "stroke-line-join",
    n
  ), s = Sg(
    t,
    e + "stroke-line-dash",
    n
  ), l = xt(
    t,
    e + "stroke-line-dash-offset",
    n
  ), c = xt(
    t,
    e + "stroke-miter-limit",
    n
  ), u = new vg();
  return function(d) {
    if (a) {
      const h = a(d);
      if (h === "none")
        return null;
      u.setColor(h);
    }
    if (i && u.setWidth(i(d)), o) {
      const h = o(d);
      if (h !== "butt" && h !== "round" && h !== "square")
        throw new Error("Expected butt, round, or square line cap");
      u.setLineCap(h);
    }
    if (r) {
      const h = r(d);
      if (h !== "bevel" && h !== "round" && h !== "miter")
        throw new Error("Expected bevel, round, or miter line join");
      u.setLineJoin(h);
    }
    return s && u.setLineDash(s(d)), l && u.setLineDashOffset(l(d)), c && u.setMiterLimit(c(d)), u;
  };
}
function u0(t, e) {
  const n = "text-", i = Bn(t, n + "value", e);
  if (!i)
    return null;
  const a = ao(t, n, e), o = ao(
    t,
    n + "background-",
    e
  ), r = oo(t, n, e), s = oo(
    t,
    n + "background-",
    e
  ), l = Bn(t, n + "font", e), c = xt(
    t,
    n + "max-angle",
    e
  ), u = xt(
    t,
    n + "offset-x",
    e
  ), d = xt(
    t,
    n + "offset-y",
    e
  ), h = ro(
    t,
    n + "overflow",
    e
  ), f = Bn(
    t,
    n + "placement",
    e
  ), g = xt(t, n + "repeat", e), m = Ur(t, n + "scale", e), v = ro(
    t,
    n + "rotate-with-view",
    e
  ), y = xt(
    t,
    n + "rotation",
    e
  ), p = Bn(t, n + "align", e), M = Bn(
    t,
    n + "justify",
    e
  ), S = Bn(
    t,
    n + "baseline",
    e
  ), b = Sg(
    t,
    n + "padding",
    e
  ), T = Xr(
    t,
    n + "declutter-mode"
  ), _ = new VS({ declutterMode: T });
  return function(P) {
    if (_.setText(i(P)), a && _.setFill(a(P)), o && _.setBackgroundFill(o(P)), r && _.setStroke(r(P)), s && _.setBackgroundStroke(s(P)), l && _.setFont(l(P)), c && _.setMaxAngle(c(P)), u && _.setOffsetX(u(P)), d && _.setOffsetY(d(P)), h && _.setOverflow(h(P)), f) {
      const w = f(P);
      if (w !== "point" && w !== "line")
        throw new Error("Expected point or line for text-placement");
      _.setPlacement(w);
    }
    if (g && _.setRepeat(g(P)), m && _.setScale(m(P)), v && _.setRotateWithView(v(P)), y && _.setRotation(y(P)), p) {
      const w = p(P);
      if (w !== "left" && w !== "center" && w !== "right" && w !== "end" && w !== "start")
        throw new Error(
          "Expected left, right, center, start, or end for text-align"
        );
      _.setTextAlign(w);
    }
    if (M) {
      const w = M(P);
      if (w !== "left" && w !== "right" && w !== "center")
        throw new Error("Expected left, right, or center for text-justify");
      _.setJustify(w);
    }
    if (S) {
      const w = S(P);
      if (w !== "bottom" && w !== "top" && w !== "middle" && w !== "alphabetic" && w !== "hanging")
        throw new Error(
          "Expected bottom, top, middle, alphabetic, or hanging for text-baseline"
        );
      _.setTextBaseline(w);
    }
    return b && _.setPadding(b(P)), _;
  };
}
function d0(t, e) {
  return "icon-src" in t ? h0(t, e) : "shape-points" in t ? f0(t, e) : "circle-radius" in t ? g0(t, e) : null;
}
function h0(t, e) {
  const n = "icon-", i = n + "src", a = bg(t[i], i), o = mr(
    t,
    n + "anchor",
    e
  ), r = Ur(t, n + "scale", e), s = xt(
    t,
    n + "opacity",
    e
  ), l = mr(
    t,
    n + "displacement",
    e
  ), c = xt(
    t,
    n + "rotation",
    e
  ), u = ro(
    t,
    n + "rotate-with-view",
    e
  ), d = fd(t, n + "anchor-origin"), h = gd(
    t,
    n + "anchor-x-units"
  ), f = gd(
    t,
    n + "anchor-y-units"
  ), g = p0(t, n + "color"), m = C0(t, n + "cross-origin"), v = y0(t, n + "offset"), y = fd(t, n + "offset-origin"), p = vr(t, n + "width"), M = vr(t, n + "height"), S = v0(t, n + "size"), b = Xr(
    t,
    n + "declutter-mode"
  ), T = new yc({
    src: a,
    anchorOrigin: d,
    anchorXUnits: h,
    anchorYUnits: f,
    color: g,
    crossOrigin: m,
    offset: v,
    offsetOrigin: y,
    height: M,
    width: p,
    size: S,
    declutterMode: b
  });
  return function(_) {
    return s && T.setOpacity(s(_)), l && T.setDisplacement(l(_)), c && T.setRotation(c(_)), u && T.setRotateWithView(u(_)), r && T.setScale(r(_)), o && T.setAnchor(o(_)), T;
  };
}
function f0(t, e) {
  const n = "shape-", i = n + "points", a = n + "radius", o = Ks(t[i], i), r = Ks(t[a], a), s = ao(t, n, e), l = oo(t, n, e), c = Ur(t, n + "scale", e), u = mr(
    t,
    n + "displacement",
    e
  ), d = xt(
    t,
    n + "rotation",
    e
  ), h = ro(
    t,
    n + "rotate-with-view",
    e
  ), f = vr(t, n + "radius2"), g = vr(t, n + "angle"), m = Xr(
    t,
    n + "declutter-mode"
  ), v = new gg({
    points: o,
    radius: r,
    radius2: f,
    angle: g,
    declutterMode: m
  });
  return function(y) {
    return s && v.setFill(s(y)), l && v.setStroke(l(y)), u && v.setDisplacement(u(y)), d && v.setRotation(d(y)), h && v.setRotateWithView(h(y)), c && v.setScale(c(y)), v;
  };
}
function g0(t, e) {
  const n = "circle-", i = ao(t, n, e), a = oo(t, n, e), o = xt(t, n + "radius", e), r = Ur(t, n + "scale", e), s = mr(
    t,
    n + "displacement",
    e
  ), l = xt(
    t,
    n + "rotation",
    e
  ), c = ro(
    t,
    n + "rotate-with-view",
    e
  ), u = Xr(
    t,
    n + "declutter-mode"
  ), d = new mg({
    radius: 5,
    // this is arbitrary, but required - the evaluated radius is used below
    declutterMode: u
  });
  return function(h) {
    return o && d.setRadius(o(h)), i && d.setFill(i(h)), a && d.setStroke(a(h)), s && d.setDisplacement(s(h)), l && d.setRotation(l(h)), c && d.setRotateWithView(c(h)), r && d.setScale(r(h)), d;
  };
}
function xt(t, e, n) {
  if (!(e in t))
    return;
  const i = Yn(t[e], ne, n);
  return function(a) {
    return Ks(i(a), e);
  };
}
function Bn(t, e, n) {
  if (!(e in t))
    return null;
  const i = Yn(t[e], wt, n);
  return function(a) {
    return bg(i(a), e);
  };
}
function m0(t, e, n) {
  const i = Bn(
    t,
    e + "pattern-src",
    n
  ), a = hd(
    t,
    e + "pattern-offset",
    n
  ), o = hd(
    t,
    e + "pattern-size",
    n
  ), r = _c(
    t,
    e + "color",
    n
  );
  return function(s) {
    return {
      src: i(s),
      offset: a && a(s),
      size: o && o(s),
      color: r && r(s)
    };
  };
}
function ro(t, e, n) {
  if (!(e in t))
    return null;
  const i = Yn(t[e], De, n);
  return function(a) {
    const o = i(a);
    if (typeof o != "boolean")
      throw new Error(`Expected a boolean for ${e}`);
    return o;
  };
}
function _c(t, e, n) {
  if (!(e in t))
    return null;
  const i = Yn(
    t[e],
    Qe | wt,
    n
  );
  return function(a) {
    return Mg(i(a), e);
  };
}
function Sg(t, e, n) {
  if (!(e in t))
    return null;
  const i = Yn(t[e], $n, n);
  return function(a) {
    return To(i(a), e);
  };
}
function mr(t, e, n) {
  if (!(e in t))
    return null;
  const i = Yn(t[e], $n, n);
  return function(a) {
    const o = To(i(a), e);
    if (o.length !== 2)
      throw new Error(`Expected two numbers for ${e}`);
    return o;
  };
}
function hd(t, e, n) {
  if (!(e in t))
    return null;
  const i = Yn(t[e], $n, n);
  return function(a) {
    return xg(i(a), e);
  };
}
function Ur(t, e, n) {
  if (!(e in t))
    return null;
  const i = Yn(
    t[e],
    $n | ne,
    n
  );
  return function(a) {
    return _0(i(a), e);
  };
}
function vr(t, e) {
  const n = t[e];
  if (n !== void 0) {
    if (typeof n != "number")
      throw new Error(`Expected a number for ${e}`);
    return n;
  }
}
function v0(t, e) {
  const n = t[e];
  if (n !== void 0) {
    if (typeof n == "number")
      return At(n);
    if (!Array.isArray(n))
      throw new Error(`Expected a number or size array for ${e}`);
    if (n.length !== 2 || typeof n[0] != "number" || typeof n[1] != "number")
      throw new Error(`Expected a number or size array for ${e}`);
    return n;
  }
}
function C0(t, e) {
  const n = t[e];
  if (n !== void 0) {
    if (typeof n != "string")
      throw new Error(`Expected a string for ${e}`);
    return n;
  }
}
function fd(t, e) {
  const n = t[e];
  if (n !== void 0) {
    if (n !== "bottom-left" && n !== "bottom-right" && n !== "top-left" && n !== "top-right")
      throw new Error(
        `Expected bottom-left, bottom-right, top-left, or top-right for ${e}`
      );
    return n;
  }
}
function gd(t, e) {
  const n = t[e];
  if (n !== void 0) {
    if (n !== "pixels" && n !== "fraction")
      throw new Error(`Expected pixels or fraction for ${e}`);
    return n;
  }
}
function y0(t, e) {
  const n = t[e];
  if (n !== void 0)
    return To(n, e);
}
function Xr(t, e) {
  const n = t[e];
  if (n !== void 0) {
    if (typeof n != "string")
      throw new Error(`Expected a string for ${e}`);
    if (n !== "declutter" && n !== "obstacle" && n !== "none")
      throw new Error(`Expected declutter, obstacle, or none for ${e}`);
    return n;
  }
}
function p0(t, e) {
  const n = t[e];
  if (n !== void 0)
    return Mg(n, e);
}
function To(t, e) {
  if (!Array.isArray(t))
    throw new Error(`Expected an array for ${e}`);
  const n = t.length;
  for (let i = 0; i < n; ++i)
    if (typeof t[i] != "number")
      throw new Error(`Expected an array of numbers for ${e}`);
  return t;
}
function bg(t, e) {
  if (typeof t != "string")
    throw new Error(`Expected a string for ${e}`);
  return t;
}
function Ks(t, e) {
  if (typeof t != "number")
    throw new Error(`Expected a number for ${e}`);
  return t;
}
function Mg(t, e) {
  if (typeof t == "string")
    return t;
  const n = To(t, e), i = n.length;
  if (i < 3 || i > 4)
    throw new Error(`Expected a color with 3 or 4 values for ${e}`);
  return n;
}
function xg(t, e) {
  const n = To(t, e);
  if (n.length !== 2)
    throw new Error(`Expected an array of two numbers for ${e}`);
  return n;
}
function _0(t, e) {
  return typeof t == "number" ? t : xg(t, e);
}
const md = {
  RENDER_ORDER: "renderOrder"
};
class S0 extends Dr {
  /**
   * @param {Options<VectorSourceType>} [options] Options.
   */
  constructor(e) {
    e = e || {};
    const n = Object.assign({}, e);
    delete n.style, delete n.renderBuffer, delete n.updateWhileAnimating, delete n.updateWhileInteracting, super(n), this.declutter_ = e.declutter ? String(e.declutter) : void 0, this.renderBuffer_ = e.renderBuffer !== void 0 ? e.renderBuffer : 100, this.style_ = null, this.styleFunction_ = void 0, this.setStyle(e.style), this.updateWhileAnimating_ = e.updateWhileAnimating !== void 0 ? e.updateWhileAnimating : !1, this.updateWhileInteracting_ = e.updateWhileInteracting !== void 0 ? e.updateWhileInteracting : !1;
  }
  /**
   * @return {string} Declutter group.
   */
  getDeclutter() {
    return this.declutter_;
  }
  /**
   * Get the topmost feature that intersects the given pixel on the viewport. Returns a promise
   * that resolves with an array of features. The array will either contain the topmost feature
   * when a hit was detected, or it will be empty.
   *
   * The hit detection algorithm used for this method is optimized for performance, but is less
   * accurate than the one used in [map.getFeaturesAtPixel()]{@link import("../Map.js").default#getFeaturesAtPixel}.
   * Text is not considered, and icons are only represented by their bounding box instead of the exact
   * image.
   *
   * @param {import("../pixel.js").Pixel} pixel Pixel.
   * @return {Promise<Array<import("../Feature").FeatureLike>>} Promise that resolves with an array of features.
   * @api
   */
  getFeatures(e) {
    return super.getFeatures(e);
  }
  /**
   * @return {number|undefined} Render buffer.
   */
  getRenderBuffer() {
    return this.renderBuffer_;
  }
  /**
   * @return {function(import("../Feature.js").default, import("../Feature.js").default): number|null|undefined} Render
   *     order.
   */
  getRenderOrder() {
    return (
      /** @type {import("../render.js").OrderFunction|null|undefined} */
      this.get(md.RENDER_ORDER)
    );
  }
  /**
   * Get the style for features.  This returns whatever was passed to the `style`
   * option at construction or to the `setStyle` method.
   * @return {import("../style/Style.js").StyleLike|null|undefined} Layer style.
   * @api
   */
  getStyle() {
    return this.style_;
  }
  /**
   * Get the style function.
   * @return {import("../style/Style.js").StyleFunction|undefined} Layer style function.
   * @api
   */
  getStyleFunction() {
    return this.styleFunction_;
  }
  /**
   * @return {boolean} Whether the rendered layer should be updated while
   *     animating.
   */
  getUpdateWhileAnimating() {
    return this.updateWhileAnimating_;
  }
  /**
   * @return {boolean} Whether the rendered layer should be updated while
   *     interacting.
   */
  getUpdateWhileInteracting() {
    return this.updateWhileInteracting_;
  }
  /**
   * Render declutter items for this layer
   * @param {import("../Map.js").FrameState} frameState Frame state.
   * @param {import("../layer/Layer.js").State} layerState Layer state.
   */
  renderDeclutter(e, n) {
    const i = this.getDeclutter();
    i in e.declutter || (e.declutter[i] = new ng(9)), this.getRenderer().renderDeclutter(e, n);
  }
  /**
   * @param {import("../render.js").OrderFunction|null|undefined} renderOrder
   *     Render order.
   */
  setRenderOrder(e) {
    this.set(md.RENDER_ORDER, e);
  }
  /**
   * Set the style for features.  This can be a single style object, an array
   * of styles, or a function that takes a feature and resolution and returns
   * an array of styles. If set to `null`, the layer has no style (a `null` style),
   * so only features that have their own styles will be rendered in the layer. Call
   * `setStyle()` without arguments to reset to the default style. See
   * [the ol/style/Style module]{@link module:ol/style/Style~Style} for information on the default style.
   *
   * If your layer has a static style, you can use [flat style]{@link module:ol/style/flat~FlatStyle} object
   * literals instead of using the `Style` and symbolizer constructors (`Fill`, `Stroke`, etc.):
   * ```js
   * vectorLayer.setStyle({
   *   "fill-color": "yellow",
   *   "stroke-color": "black",
   *   "stroke-width": 4
   * })
   * ```
   *
   * @param {import("../style/Style.js").StyleLike|import("../style/flat.js").FlatStyleLike|null} [style] Layer style.
   * @api
   */
  setStyle(e) {
    this.style_ = b0(e), this.styleFunction_ = e === null ? void 0 : IS(this.style_), this.changed();
  }
}
function b0(t) {
  if (t === void 0)
    return zS;
  if (!t)
    return null;
  if (typeof t == "function" || t instanceof Na)
    return t;
  if (!Array.isArray(t))
    return dd([t]);
  if (t.length === 0)
    return [];
  const e = t.length, n = t[0];
  if (n instanceof Na) {
    const a = new Array(e);
    for (let o = 0; o < e; ++o) {
      const r = t[o];
      if (!(r instanceof Na))
        throw new Error("Expected a list of style instances");
      a[o] = r;
    }
    return a;
  }
  if ("style" in n) {
    const a = new Array(e);
    for (let o = 0; o < e; ++o) {
      const r = t[o];
      if (!("style" in r))
        throw new Error("Expected a list of rules with a style property");
      a[o] = r;
    }
    return l0(a);
  }
  return dd(
    /** @type {Array<import("../style/flat.js").FlatStyle>} */
    t
  );
}
const Pg = S0;
class M0 extends Dl {
  /**
   * @param {import("../Map.js").default} map Map.
   */
  constructor(e) {
    super(), this.map_ = e;
  }
  /**
   * @abstract
   * @param {import("../render/EventType.js").default} type Event type.
   * @param {import("../Map.js").FrameState} frameState Frame state.
   */
  dispatchRenderEvent(e, n) {
    be();
  }
  /**
   * @param {import("../Map.js").FrameState} frameState FrameState.
   * @protected
   */
  calculateMatrices2D(e) {
    const n = e.viewState, i = e.coordinateToPixelTransform, a = e.pixelToCoordinateTransform;
    Cn(
      i,
      e.size[0] / 2,
      e.size[1] / 2,
      1 / n.resolution,
      -1 / n.resolution,
      -n.rotation,
      -n.center[0],
      -n.center[1]
    ), Ql(a, i);
  }
  /**
   * @param {import("../coordinate.js").Coordinate} coordinate Coordinate.
   * @param {import("../Map.js").FrameState} frameState FrameState.
   * @param {number} hitTolerance Hit tolerance in pixels.
   * @param {boolean} checkWrapped Check for wrapped geometries.
   * @param {import("./vector.js").FeatureCallback<T>} callback Feature callback.
   * @param {S} thisArg Value to use as `this` when executing `callback`.
   * @param {function(this: U, import("../layer/Layer.js").default): boolean} layerFilter Layer filter
   *     function, only layers which are visible and for which this function
   *     returns `true` will be tested for features.  By default, all visible
   *     layers will be tested.
   * @param {U} thisArg2 Value to use as `this` when executing `layerFilter`.
   * @return {T|undefined} Callback result.
   * @template S,T,U
   */
  forEachFeatureAtCoordinate(e, n, i, a, o, r, s, l) {
    let c;
    const u = n.viewState;
    function d(S, b, T, _) {
      return o.call(r, b, S ? T : null, _);
    }
    const h = u.projection, f = kf(e.slice(), h), g = [[0, 0]];
    if (h.canWrapX() && a) {
      const S = h.getExtent(), b = Re(S);
      g.push([-b, 0], [b, 0]);
    }
    const m = n.layerStatesArray, v = m.length, y = (
      /** @type {Array<HitMatch<T>>} */
      []
    ), p = [];
    for (let S = 0; S < g.length; S++)
      for (let b = v - 1; b >= 0; --b) {
        const T = m[b], _ = T.layer;
        if (_.hasRenderer() && oc(T, u) && s.call(l, _)) {
          const P = _.getRenderer(), w = _.getSource();
          if (P && w) {
            const I = w.getWrapX() ? f : e, z = d.bind(
              null,
              T.managed
            );
            p[0] = I[0] + g[S][0], p[1] = I[1] + g[S][1], c = P.forEachFeatureAtCoordinate(
              p,
              n,
              i,
              z,
              y
            );
          }
          if (c)
            return c;
        }
      }
    if (y.length === 0)
      return;
    const M = 1 / y.length;
    return y.forEach((S, b) => S.distanceSq += b * M), y.sort((S, b) => S.distanceSq - b.distanceSq), y.some((S) => c = S.callback(S.feature, S.layer, S.geometry)), c;
  }
  /**
   * @param {import("../coordinate.js").Coordinate} coordinate Coordinate.
   * @param {import("../Map.js").FrameState} frameState FrameState.
   * @param {number} hitTolerance Hit tolerance in pixels.
   * @param {boolean} checkWrapped Check for wrapped geometries.
   * @param {function(this: U, import("../layer/Layer.js").default): boolean} layerFilter Layer filter
   *     function, only layers which are visible and for which this function
   *     returns `true` will be tested for features.  By default, all visible
   *     layers will be tested.
   * @param {U} thisArg Value to use as `this` when executing `layerFilter`.
   * @return {boolean} Is there a feature at the given coordinate?
   * @template U
   */
  hasFeatureAtCoordinate(e, n, i, a, o, r) {
    return this.forEachFeatureAtCoordinate(
      e,
      n,
      i,
      a,
      Za,
      this,
      o,
      r
    ) !== void 0;
  }
  /**
   * @return {import("../Map.js").default} Map.
   */
  getMap() {
    return this.map_;
  }
  /**
   * Render.
   * @abstract
   * @param {?import("../Map.js").FrameState} frameState Frame state.
   */
  renderFrame(e) {
    be();
  }
  /**
   * @param {import("../Map.js").FrameState} frameState Frame state.
   * @protected
   */
  scheduleExpireIconCache(e) {
    un.canExpireCache() && e.postRenderFunctions.push(x0);
  }
}
function x0(t, e) {
  un.expire();
}
const P0 = M0;
class T0 extends Xn {
  /**
   * @param {import("./EventType.js").default} type Type.
   * @param {import("../transform.js").Transform} [inversePixelTransform] Transform for
   *     CSS pixels to rendered pixels.
   * @param {import("../Map.js").FrameState} [frameState] Frame state.
   * @param {?(CanvasRenderingContext2D|WebGLRenderingContext)} [context] Context.
   */
  constructor(e, n, i, a) {
    super(e), this.inversePixelTransform = n, this.frameState = i, this.context = a;
  }
}
const Tg = T0;
class w0 extends P0 {
  /**
   * @param {import("../Map.js").default} map Map.
   */
  constructor(e) {
    super(e), this.fontChangeListenerKey_ = Me(
      Vn,
      la.PROPERTYCHANGE,
      e.redrawText.bind(e)
    ), this.element_ = document.createElement("div");
    const n = this.element_.style;
    n.position = "absolute", n.width = "100%", n.height = "100%", n.zIndex = "0", this.element_.className = Nr + " ol-layers";
    const i = e.getViewport();
    i.insertBefore(this.element_, i.firstChild || null), this.children_ = [], this.renderedVisible_ = !0;
  }
  /**
   * @param {import("../render/EventType.js").default} type Event type.
   * @param {import("../Map.js").FrameState} frameState Frame state.
   */
  dispatchRenderEvent(e, n) {
    const i = this.getMap();
    if (i.hasListener(e)) {
      const a = new Tg(e, void 0, n);
      i.dispatchEvent(a);
    }
  }
  disposeInternal() {
    Ve(this.fontChangeListenerKey_), this.element_.parentNode.removeChild(this.element_), super.disposeInternal();
  }
  /**
   * Render.
   * @param {?import("../Map.js").FrameState} frameState Frame state.
   */
  renderFrame(e) {
    if (!e) {
      this.renderedVisible_ && (this.element_.style.display = "none", this.renderedVisible_ = !1);
      return;
    }
    this.calculateMatrices2D(e), this.dispatchRenderEvent(Ot.PRECOMPOSE, e);
    const n = e.layerStatesArray.sort(function(s, l) {
      return s.zIndex - l.zIndex;
    });
    n.some(
      (s) => s.layer instanceof Pg && s.layer.getDeclutter()
    ) && (e.declutter = {});
    const a = e.viewState;
    this.children_.length = 0;
    const o = [];
    let r = null;
    for (let s = 0, l = n.length; s < l; ++s) {
      const c = n[s];
      e.layerIndex = s;
      const u = c.layer, d = u.getSourceState();
      if (!oc(c, a) || d != "ready" && d != "undefined") {
        u.unrender();
        continue;
      }
      const h = u.render(e, r);
      h && (h !== r && (this.children_.push(h), r = h), o.push(c));
    }
    this.declutter(e, o), yS(this.element_, this.children_), this.dispatchRenderEvent(Ot.POSTCOMPOSE, e), this.renderedVisible_ || (this.element_.style.display = "", this.renderedVisible_ = !0), this.scheduleExpireIconCache(e);
  }
  /**
   * @param {import("../Map.js").FrameState} frameState Frame state.
   * @param {Array<import('../layer/Layer.js').State>} layerStates Layers.
   */
  declutter(e, n) {
    for (let i = n.length - 1; i >= 0; --i) {
      const a = n[i], o = a.layer;
      o.getDeclutter() && o.renderDeclutter(e, a);
    }
    n.forEach(
      (i) => i.layer.renderDeferred(e)
    );
  }
}
const E0 = w0;
class ti extends Xn {
  /**
   * @param {EventType} type The event type.
   * @param {BaseLayer} layer The layer.
   */
  constructor(e, n) {
    super(e), this.layer = n;
  }
}
const ys = {
  LAYERS: "layers"
};
class Sc extends Ef {
  /**
   * @param {Options} [options] Layer options.
   */
  constructor(e) {
    e = e || {};
    const n = (
      /** @type {Options} */
      Object.assign({}, e)
    );
    delete n.layers;
    let i = e.layers;
    super(n), this.on, this.once, this.un, this.layersListenerKeys_ = [], this.listenerKeys_ = {}, this.addChangeListener(ys.LAYERS, this.handleLayersChanged_), i ? Array.isArray(i) ? i = new cn(i.slice(), { unique: !0 }) : Se(
      typeof /** @type {?} */
      i.getArray == "function",
      "Expected `layers` to be an array or a `Collection`"
    ) : i = new cn(void 0, { unique: !0 }), this.setLayers(i);
  }
  /**
   * @private
   */
  handleLayerChange_() {
    this.changed();
  }
  /**
   * @private
   */
  handleLayersChanged_() {
    this.layersListenerKeys_.forEach(Ve), this.layersListenerKeys_.length = 0;
    const e = this.getLayers();
    this.layersListenerKeys_.push(
      Me(e, St.ADD, this.handleLayersAdd_, this),
      Me(
        e,
        St.REMOVE,
        this.handleLayersRemove_,
        this
      )
    );
    for (const i in this.listenerKeys_)
      this.listenerKeys_[i].forEach(Ve);
    xo(this.listenerKeys_);
    const n = e.getArray();
    for (let i = 0, a = n.length; i < a; i++) {
      const o = n[i];
      this.registerLayerListeners_(o), this.dispatchEvent(new ti("addlayer", o));
    }
    this.changed();
  }
  /**
   * @param {BaseLayer} layer The layer.
   */
  registerLayerListeners_(e) {
    const n = [
      Me(
        e,
        la.PROPERTYCHANGE,
        this.handleLayerChange_,
        this
      ),
      Me(e, ge.CHANGE, this.handleLayerChange_, this)
    ];
    e instanceof Sc && n.push(
      Me(e, "addlayer", this.handleLayerGroupAdd_, this),
      Me(e, "removelayer", this.handleLayerGroupRemove_, this)
    ), this.listenerKeys_[we(e)] = n;
  }
  /**
   * @param {GroupEvent} event The layer group event.
   */
  handleLayerGroupAdd_(e) {
    this.dispatchEvent(new ti("addlayer", e.layer));
  }
  /**
   * @param {GroupEvent} event The layer group event.
   */
  handleLayerGroupRemove_(e) {
    this.dispatchEvent(new ti("removelayer", e.layer));
  }
  /**
   * @param {import("../Collection.js").CollectionEvent<import("./Base.js").default>} collectionEvent CollectionEvent.
   * @private
   */
  handleLayersAdd_(e) {
    const n = e.element;
    this.registerLayerListeners_(n), this.dispatchEvent(new ti("addlayer", n)), this.changed();
  }
  /**
   * @param {import("../Collection.js").CollectionEvent<import("./Base.js").default>} collectionEvent CollectionEvent.
   * @private
   */
  handleLayersRemove_(e) {
    const n = e.element, i = we(n);
    this.listenerKeys_[i].forEach(Ve), delete this.listenerKeys_[i], this.dispatchEvent(new ti("removelayer", n)), this.changed();
  }
  /**
   * Returns the {@link module:ol/Collection~Collection collection} of {@link module:ol/layer/Layer~Layer layers}
   * in this group.
   * @return {!Collection<import("./Base.js").default>} Collection of
   *   {@link module:ol/layer/Base~BaseLayer layers} that are part of this group.
   * @observable
   * @api
   */
  getLayers() {
    return (
      /** @type {!Collection<import("./Base.js").default>} */
      this.get(ys.LAYERS)
    );
  }
  /**
   * Set the {@link module:ol/Collection~Collection collection} of {@link module:ol/layer/Layer~Layer layers}
   * in this group.
   * @param {!Collection<import("./Base.js").default>} layers Collection of
   *   {@link module:ol/layer/Base~BaseLayer layers} that are part of this group.
   * @observable
   * @api
   */
  setLayers(e) {
    const n = this.getLayers();
    if (n) {
      const i = n.getArray();
      for (let a = 0, o = i.length; a < o; ++a)
        this.dispatchEvent(new ti("removelayer", i[a]));
    }
    this.set(ys.LAYERS, e);
  }
  /**
   * @param {Array<import("./Layer.js").default>} [array] Array of layers (to be modified in place).
   * @return {Array<import("./Layer.js").default>} Array of layers.
   */
  getLayersArray(e) {
    return e = e !== void 0 ? e : [], this.getLayers().forEach(function(n) {
      n.getLayersArray(e);
    }), e;
  }
  /**
   * Get the layer states list and use this groups z-index as the default
   * for all layers in this and nested groups, if it is unset at this point.
   * If dest is not provided and this group's z-index is undefined
   * 0 is used a the default z-index.
   * @param {Array<import("./Layer.js").State>} [dest] Optional list
   * of layer states (to be modified in place).
   * @return {Array<import("./Layer.js").State>} List of layer states.
   */
  getLayerStatesArray(e) {
    const n = e !== void 0 ? e : [], i = n.length;
    this.getLayers().forEach(function(r) {
      r.getLayerStatesArray(n);
    });
    const a = this.getLayerState();
    let o = a.zIndex;
    !e && a.zIndex === void 0 && (o = 0);
    for (let r = i, s = n.length; r < s; r++) {
      const l = n[r];
      l.opacity *= a.opacity, l.visible = l.visible && a.visible, l.maxResolution = Math.min(
        l.maxResolution,
        a.maxResolution
      ), l.minResolution = Math.max(
        l.minResolution,
        a.minResolution
      ), l.minZoom = Math.max(l.minZoom, a.minZoom), l.maxZoom = Math.min(l.maxZoom, a.maxZoom), a.extent !== void 0 && (l.extent !== void 0 ? l.extent = Ga(
        l.extent,
        a.extent
      ) : l.extent = a.extent), l.zIndex === void 0 && (l.zIndex = o);
    }
    return n;
  }
  /**
   * @return {import("../source/Source.js").State} Source state.
   */
  getSourceState() {
    return "ready";
  }
}
const Yr = Sc;
class A0 extends Xn {
  /**
   * @param {string} type Event type.
   * @param {import("./Map.js").default} map Map.
   * @param {?import("./Map.js").FrameState} [frameState] Frame state.
   */
  constructor(e, n, i) {
    super(e), this.map = n, this.frameState = i !== void 0 ? i : null;
  }
}
const Hi = A0;
class R0 extends Hi {
  /**
   * @param {string} type Event type.
   * @param {import("./Map.js").default} map Map.
   * @param {EVENT} originalEvent Original event.
   * @param {boolean} [dragging] Is the map currently being dragged?
   * @param {import("./Map.js").FrameState} [frameState] Frame state.
   * @param {Array<PointerEvent>} [activePointers] Active pointers.
   */
  constructor(e, n, i, a, o, r) {
    super(e, n, o), this.originalEvent = i, this.pixel_ = null, this.coordinate_ = null, this.dragging = a !== void 0 ? a : !1, this.activePointers = r;
  }
  /**
   * The map pixel relative to the viewport corresponding to the original event.
   * @type {import("./pixel.js").Pixel}
   * @api
   */
  get pixel() {
    return this.pixel_ || (this.pixel_ = this.map.getEventPixel(this.originalEvent)), this.pixel_;
  }
  set pixel(e) {
    this.pixel_ = e;
  }
  /**
   * The coordinate corresponding to the original browser event.  This will be in the user
   * projection if one is set.  Otherwise it will be in the view projection.
   * @type {import("./coordinate.js").Coordinate}
   * @api
   */
  get coordinate() {
    return this.coordinate_ || (this.coordinate_ = this.map.getCoordinateFromPixel(this.pixel)), this.coordinate_;
  }
  set coordinate(e) {
    this.coordinate_ = e;
  }
  /**
   * Prevents the default browser action.
   * See https://developer.mozilla.org/en-US/docs/Web/API/event.preventDefault.
   * @api
   */
  preventDefault() {
    super.preventDefault(), "preventDefault" in this.originalEvent && this.originalEvent.preventDefault();
  }
  /**
   * Prevents further propagation of the current event.
   * See https://developer.mozilla.org/en-US/docs/Web/API/event.stopPropagation.
   * @api
   */
  stopPropagation() {
    super.stopPropagation(), "stopPropagation" in this.originalEvent && this.originalEvent.stopPropagation();
  }
}
const Qn = R0, Ge = {
  /**
   * A true single click with no dragging and no double click. Note that this
   * event is delayed by 250 ms to ensure that it is not a double click.
   * @event module:ol/MapBrowserEvent~MapBrowserEvent#singleclick
   * @api
   */
  SINGLECLICK: "singleclick",
  /**
   * A click with no dragging. A double click will fire two of this.
   * @event module:ol/MapBrowserEvent~MapBrowserEvent#click
   * @api
   */
  CLICK: ge.CLICK,
  /**
   * A true double click, with no dragging.
   * @event module:ol/MapBrowserEvent~MapBrowserEvent#dblclick
   * @api
   */
  DBLCLICK: ge.DBLCLICK,
  /**
   * Triggered when a pointer is dragged.
   * @event module:ol/MapBrowserEvent~MapBrowserEvent#pointerdrag
   * @api
   */
  POINTERDRAG: "pointerdrag",
  /**
   * Triggered when a pointer is moved. Note that on touch devices this is
   * triggered when the map is panned, so is not the same as mousemove.
   * @event module:ol/MapBrowserEvent~MapBrowserEvent#pointermove
   * @api
   */
  POINTERMOVE: "pointermove",
  POINTERDOWN: "pointerdown",
  POINTERUP: "pointerup",
  POINTEROVER: "pointerover",
  POINTEROUT: "pointerout",
  POINTERENTER: "pointerenter",
  POINTERLEAVE: "pointerleave",
  POINTERCANCEL: "pointercancel"
}, qs = {
  POINTERMOVE: "pointermove",
  POINTERDOWN: "pointerdown",
  POINTERUP: "pointerup",
  POINTEROVER: "pointerover",
  POINTEROUT: "pointerout",
  POINTERENTER: "pointerenter",
  POINTERLEAVE: "pointerleave",
  POINTERCANCEL: "pointercancel"
};
class I0 extends Ir {
  /**
   * @param {import("./Map.js").default} map The map with the viewport to listen to events on.
   * @param {number} [moveTolerance] The minimal distance the pointer must travel to trigger a move.
   */
  constructor(e, n) {
    super(e), this.map_ = e, this.clickTimeoutId_, this.emulateClicks_ = !1, this.dragging_ = !1, this.dragListenerKeys_ = [], this.moveTolerance_ = n === void 0 ? 1 : n, this.down_ = null;
    const i = this.map_.getViewport();
    this.activePointers_ = [], this.trackedTouches_ = {}, this.element_ = i, this.pointerdownListenerKey_ = Me(
      i,
      qs.POINTERDOWN,
      this.handlePointerDown_,
      this
    ), this.originalPointerMoveEvent_, this.relayedListenerKey_ = Me(
      i,
      qs.POINTERMOVE,
      this.relayMoveEvent_,
      this
    ), this.boundHandleTouchMove_ = this.handleTouchMove_.bind(this), this.element_.addEventListener(
      ge.TOUCHMOVE,
      this.boundHandleTouchMove_,
      ug ? { passive: !1 } : !1
    );
  }
  /**
   * @param {PointerEvent} pointerEvent Pointer
   * event.
   * @private
   */
  emulateClick_(e) {
    let n = new Qn(
      Ge.CLICK,
      this.map_,
      e
    );
    this.dispatchEvent(n), this.clickTimeoutId_ !== void 0 ? (clearTimeout(this.clickTimeoutId_), this.clickTimeoutId_ = void 0, n = new Qn(
      Ge.DBLCLICK,
      this.map_,
      e
    ), this.dispatchEvent(n)) : this.clickTimeoutId_ = setTimeout(() => {
      this.clickTimeoutId_ = void 0;
      const i = new Qn(
        Ge.SINGLECLICK,
        this.map_,
        e
      );
      this.dispatchEvent(i);
    }, 250);
  }
  /**
   * Keeps track on how many pointers are currently active.
   *
   * @param {PointerEvent} pointerEvent Pointer
   * event.
   * @private
   */
  updateActivePointers_(e) {
    const n = e, i = n.pointerId;
    if (n.type == Ge.POINTERUP || n.type == Ge.POINTERCANCEL) {
      delete this.trackedTouches_[i];
      for (const a in this.trackedTouches_)
        if (this.trackedTouches_[a].target !== n.target) {
          delete this.trackedTouches_[a];
          break;
        }
    } else
      (n.type == Ge.POINTERDOWN || n.type == Ge.POINTERMOVE) && (this.trackedTouches_[i] = n);
    this.activePointers_ = Object.values(this.trackedTouches_);
  }
  /**
   * @param {PointerEvent} pointerEvent Pointer
   * event.
   * @private
   */
  handlePointerUp_(e) {
    this.updateActivePointers_(e);
    const n = new Qn(
      Ge.POINTERUP,
      this.map_,
      e,
      void 0,
      void 0,
      this.activePointers_
    );
    this.dispatchEvent(n), this.emulateClicks_ && !n.defaultPrevented && !this.dragging_ && this.isMouseActionButton_(e) && this.emulateClick_(this.down_), this.activePointers_.length === 0 && (this.dragListenerKeys_.forEach(Ve), this.dragListenerKeys_.length = 0, this.dragging_ = !1, this.down_ = null);
  }
  /**
   * @param {PointerEvent} pointerEvent Pointer
   * event.
   * @return {boolean} If the left mouse button was pressed.
   * @private
   */
  isMouseActionButton_(e) {
    return e.button === 0;
  }
  /**
   * @param {PointerEvent} pointerEvent Pointer
   * event.
   * @private
   */
  handlePointerDown_(e) {
    this.emulateClicks_ = this.activePointers_.length === 0, this.updateActivePointers_(e);
    const n = new Qn(
      Ge.POINTERDOWN,
      this.map_,
      e,
      void 0,
      void 0,
      this.activePointers_
    );
    if (this.dispatchEvent(n), this.down_ = new PointerEvent(e.type, e), Object.defineProperty(this.down_, "target", {
      writable: !1,
      value: e.target
    }), this.dragListenerKeys_.length === 0) {
      const i = this.map_.getOwnerDocument();
      this.dragListenerKeys_.push(
        Me(
          i,
          Ge.POINTERMOVE,
          this.handlePointerMove_,
          this
        ),
        Me(i, Ge.POINTERUP, this.handlePointerUp_, this),
        /* Note that the listener for `pointercancel is set up on
         * `pointerEventHandler_` and not `documentPointerEventHandler_` like
         * the `pointerup` and `pointermove` listeners.
         *
         * The reason for this is the following: `TouchSource.vacuumTouches_()`
         * issues `pointercancel` events, when there was no `touchend` for a
         * `touchstart`. Now, let's say a first `touchstart` is registered on
         * `pointerEventHandler_`. The `documentPointerEventHandler_` is set up.
         * But `documentPointerEventHandler_` doesn't know about the first
         * `touchstart`. If there is no `touchend` for the `touchstart`, we can
         * only receive a `touchcancel` from `pointerEventHandler_`, because it is
         * only registered there.
         */
        Me(
          this.element_,
          Ge.POINTERCANCEL,
          this.handlePointerUp_,
          this
        )
      ), this.element_.getRootNode && this.element_.getRootNode() !== i && this.dragListenerKeys_.push(
        Me(
          this.element_.getRootNode(),
          Ge.POINTERUP,
          this.handlePointerUp_,
          this
        )
      );
    }
  }
  /**
   * @param {PointerEvent} pointerEvent Pointer
   * event.
   * @private
   */
  handlePointerMove_(e) {
    if (this.isMoving_(e)) {
      this.updateActivePointers_(e), this.dragging_ = !0;
      const n = new Qn(
        Ge.POINTERDRAG,
        this.map_,
        e,
        this.dragging_,
        void 0,
        this.activePointers_
      );
      this.dispatchEvent(n);
    }
  }
  /**
   * Wrap and relay a pointermove event.
   * @param {PointerEvent} pointerEvent Pointer
   * event.
   * @private
   */
  relayMoveEvent_(e) {
    this.originalPointerMoveEvent_ = e;
    const n = !!(this.down_ && this.isMoving_(e));
    this.dispatchEvent(
      new Qn(
        Ge.POINTERMOVE,
        this.map_,
        e,
        n
      )
    );
  }
  /**
   * Flexible handling of a `touch-action: none` css equivalent: because calling
   * `preventDefault()` on a `pointermove` event does not stop native page scrolling
   * and zooming, we also listen for `touchmove` and call `preventDefault()` on it
   * when an interaction (currently `DragPan` handles the event.
   * @param {TouchEvent} event Event.
   * @private
   */
  handleTouchMove_(e) {
    const n = this.originalPointerMoveEvent_;
    (!n || n.defaultPrevented) && (typeof e.cancelable != "boolean" || e.cancelable === !0) && e.preventDefault();
  }
  /**
   * @param {PointerEvent} pointerEvent Pointer
   * event.
   * @return {boolean} Is moving.
   * @private
   */
  isMoving_(e) {
    return this.dragging_ || Math.abs(e.clientX - this.down_.clientX) > this.moveTolerance_ || Math.abs(e.clientY - this.down_.clientY) > this.moveTolerance_;
  }
  /**
   * Clean up.
   */
  disposeInternal() {
    this.relayedListenerKey_ && (Ve(this.relayedListenerKey_), this.relayedListenerKey_ = null), this.element_.removeEventListener(
      ge.TOUCHMOVE,
      this.boundHandleTouchMove_
    ), this.pointerdownListenerKey_ && (Ve(this.pointerdownListenerKey_), this.pointerdownListenerKey_ = null), this.dragListenerKeys_.forEach(Ve), this.dragListenerKeys_.length = 0, this.element_ = null, super.disposeInternal();
  }
}
const z0 = I0, ei = {
  /**
   * Triggered after a map frame is rendered.
   * @event module:ol/MapEvent~MapEvent#postrender
   * @api
   */
  POSTRENDER: "postrender",
  /**
   * Triggered when the map starts moving.
   * @event module:ol/MapEvent~MapEvent#movestart
   * @api
   */
  MOVESTART: "movestart",
  /**
   * Triggered after the map is moved.
   * @event module:ol/MapEvent~MapEvent#moveend
   * @api
   */
  MOVEEND: "moveend",
  /**
   * Triggered when loading of additional map data (tiles, images, features) starts.
   * @event module:ol/MapEvent~MapEvent#loadstart
   * @api
   */
  LOADSTART: "loadstart",
  /**
   * Triggered when loading of additional map data has completed.
   * @event module:ol/MapEvent~MapEvent#loadend
   * @api
   */
  LOADEND: "loadend"
}, rt = {
  LAYERGROUP: "layergroup",
  SIZE: "size",
  TARGET: "target",
  VIEW: "view"
}, Cr = 1 / 0;
class L0 {
  /**
   * @param {function(T): number} priorityFunction Priority function.
   * @param {function(T): string} keyFunction Key function.
   */
  constructor(e, n) {
    this.priorityFunction_ = e, this.keyFunction_ = n, this.elements_ = [], this.priorities_ = [], this.queuedElements_ = {};
  }
  /**
   * FIXME empty description for jsdoc
   */
  clear() {
    this.elements_.length = 0, this.priorities_.length = 0, xo(this.queuedElements_);
  }
  /**
   * Remove and return the highest-priority element. O(log N).
   * @return {T} Element.
   */
  dequeue() {
    const e = this.elements_, n = this.priorities_, i = e[0];
    e.length == 1 ? (e.length = 0, n.length = 0) : (e[0] = /** @type {T} */
    e.pop(), n[0] = /** @type {number} */
    n.pop(), this.siftUp_(0));
    const a = this.keyFunction_(i);
    return delete this.queuedElements_[a], i;
  }
  /**
   * Enqueue an element. O(log N).
   * @param {T} element Element.
   * @return {boolean} The element was added to the queue.
   */
  enqueue(e) {
    Se(
      !(this.keyFunction_(e) in this.queuedElements_),
      "Tried to enqueue an `element` that was already added to the queue"
    );
    const n = this.priorityFunction_(e);
    return n != Cr ? (this.elements_.push(e), this.priorities_.push(n), this.queuedElements_[this.keyFunction_(e)] = !0, this.siftDown_(0, this.elements_.length - 1), !0) : !1;
  }
  /**
   * @return {number} Count.
   */
  getCount() {
    return this.elements_.length;
  }
  /**
   * Gets the index of the left child of the node at the given index.
   * @param {number} index The index of the node to get the left child for.
   * @return {number} The index of the left child.
   * @private
   */
  getLeftChildIndex_(e) {
    return e * 2 + 1;
  }
  /**
   * Gets the index of the right child of the node at the given index.
   * @param {number} index The index of the node to get the right child for.
   * @return {number} The index of the right child.
   * @private
   */
  getRightChildIndex_(e) {
    return e * 2 + 2;
  }
  /**
   * Gets the index of the parent of the node at the given index.
   * @param {number} index The index of the node to get the parent for.
   * @return {number} The index of the parent.
   * @private
   */
  getParentIndex_(e) {
    return e - 1 >> 1;
  }
  /**
   * Make this a heap. O(N).
   * @private
   */
  heapify_() {
    let e;
    for (e = (this.elements_.length >> 1) - 1; e >= 0; e--)
      this.siftUp_(e);
  }
  /**
   * @return {boolean} Is empty.
   */
  isEmpty() {
    return this.elements_.length === 0;
  }
  /**
   * @param {string} key Key.
   * @return {boolean} Is key queued.
   */
  isKeyQueued(e) {
    return e in this.queuedElements_;
  }
  /**
   * @param {T} element Element.
   * @return {boolean} Is queued.
   */
  isQueued(e) {
    return this.isKeyQueued(this.keyFunction_(e));
  }
  /**
   * @param {number} index The index of the node to move down.
   * @private
   */
  siftUp_(e) {
    const n = this.elements_, i = this.priorities_, a = n.length, o = n[e], r = i[e], s = e;
    for (; e < a >> 1; ) {
      const l = this.getLeftChildIndex_(e), c = this.getRightChildIndex_(e), u = c < a && i[c] < i[l] ? c : l;
      n[e] = n[u], i[e] = i[u], e = u;
    }
    n[e] = o, i[e] = r, this.siftDown_(s, e);
  }
  /**
   * @param {number} startIndex The index of the root.
   * @param {number} index The index of the node to move up.
   * @private
   */
  siftDown_(e, n) {
    const i = this.elements_, a = this.priorities_, o = i[n], r = a[n];
    for (; n > e; ) {
      const s = this.getParentIndex_(n);
      if (a[s] > r)
        i[n] = i[s], a[n] = a[s], n = s;
      else
        break;
    }
    i[n] = o, a[n] = r;
  }
  /**
   * FIXME empty description for jsdoc
   */
  reprioritize() {
    const e = this.priorityFunction_, n = this.elements_, i = this.priorities_;
    let a = 0;
    const o = n.length;
    let r, s, l;
    for (s = 0; s < o; ++s)
      r = n[s], l = e(r), l == Cr ? delete this.queuedElements_[this.keyFunction_(r)] : (i[a] = l, n[a++] = r);
    n.length = a, i.length = a, this.heapify_();
  }
}
const V0 = L0, re = {
  IDLE: 0,
  LOADING: 1,
  LOADED: 2,
  /**
   * Indicates that tile loading failed
   * @type {number}
   */
  ERROR: 3,
  EMPTY: 4
};
class B0 extends V0 {
  /**
   * @param {PriorityFunction} tilePriorityFunction Tile priority function.
   * @param {function(): ?} tileChangeCallback Function called on each tile change event.
   */
  constructor(e, n) {
    super(
      /**
       * @param {Array} element Element.
       * @return {number} Priority.
       */
      function(i) {
        return e.apply(null, i);
      },
      /**
       * @param {Array} element Element.
       * @return {string} Key.
       */
      function(i) {
        return (
          /** @type {import("./Tile.js").default} */
          i[0].getKey()
        );
      }
    ), this.boundHandleTileChange_ = this.handleTileChange.bind(this), this.tileChangeCallback_ = n, this.tilesLoading_ = 0, this.tilesLoadingKeys_ = {};
  }
  /**
   * @param {Array} element Element.
   * @return {boolean} The element was added to the queue.
   */
  enqueue(e) {
    const n = super.enqueue(e);
    return n && e[0].addEventListener(ge.CHANGE, this.boundHandleTileChange_), n;
  }
  /**
   * @return {number} Number of tiles loading.
   */
  getTilesLoading() {
    return this.tilesLoading_;
  }
  /**
   * @param {import("./events/Event.js").default} event Event.
   * @protected
   */
  handleTileChange(e) {
    const n = (
      /** @type {import("./Tile.js").default} */
      e.target
    ), i = n.getState();
    if (i === re.LOADED || i === re.ERROR || i === re.EMPTY) {
      i !== re.ERROR && n.removeEventListener(ge.CHANGE, this.boundHandleTileChange_);
      const a = n.getKey();
      a in this.tilesLoadingKeys_ && (delete this.tilesLoadingKeys_[a], --this.tilesLoading_), this.tileChangeCallback_();
    }
  }
  /**
   * @param {number} maxTotalLoading Maximum number tiles to load simultaneously.
   * @param {number} maxNewLoads Maximum number of new tiles to load.
   */
  loadMoreTiles(e, n) {
    let i = 0, a, o, r;
    for (; this.tilesLoading_ < e && i < n && this.getCount() > 0; )
      o = /** @type {import("./Tile.js").default} */
      this.dequeue()[0], r = o.getKey(), a = o.getState(), a === re.IDLE && !(r in this.tilesLoadingKeys_) && (this.tilesLoadingKeys_[r] = !0, ++this.tilesLoading_, ++i, o.load());
  }
}
const F0 = B0;
function k0(t, e, n, i, a) {
  if (!t || !(n in t.wantedTiles) || !t.wantedTiles[n][e.getKey()])
    return Cr;
  const o = t.viewState.center, r = i[0] - o[0], s = i[1] - o[1];
  return 65536 * Math.log(a) + Math.sqrt(r * r + s * s) / a;
}
class O0 extends xn {
  /**
   * @param {Options} options Control options.
   */
  constructor(e) {
    super();
    const n = e.element;
    n && !e.target && !n.style.pointerEvents && (n.style.pointerEvents = "auto"), this.element = n || null, this.target_ = null, this.map_ = null, this.listenerKeys = [], e.render && (this.render = e.render), e.target && this.setTarget(e.target);
  }
  /**
   * Clean up.
   */
  disposeInternal() {
    Ys(this.element), super.disposeInternal();
  }
  /**
   * Get the map associated with this control.
   * @return {import("../Map.js").default|null} Map.
   * @api
   */
  getMap() {
    return this.map_;
  }
  /**
   * Remove the control from its current map and attach it to the new map.
   * Pass `null` to just remove the control from the current map.
   * Subclasses may set up event handlers to get notified about changes to
   * the map here.
   * @param {import("../Map.js").default|null} map Map.
   * @api
   */
  setMap(e) {
    this.map_ && Ys(this.element);
    for (let n = 0, i = this.listenerKeys.length; n < i; ++n)
      Ve(this.listenerKeys[n]);
    this.listenerKeys.length = 0, this.map_ = e, e && ((this.target_ ? this.target_ : e.getOverlayContainerStopEvent()).appendChild(this.element), this.render !== ca && this.listenerKeys.push(
      Me(e, ei.POSTRENDER, this.render, this)
    ), e.render());
  }
  /**
   * Renders the control.
   * @param {import("../MapEvent.js").default} mapEvent Map event.
   * @api
   */
  render(e) {
  }
  /**
   * This function is used to set a target element for the control. It has no
   * effect if it is called after the control has been added to the map (i.e.
   * after `setMap` is called on the control). If no `target` is set in the
   * options passed to the control constructor and if `setTarget` is not called
   * then the control is added to the map's overlay container.
   * @param {HTMLElement|string} target Target.
   * @api
   */
  setTarget(e) {
    this.target_ = typeof e == "string" ? document.getElementById(e) : e;
  }
}
const bc = O0;
class D0 extends bc {
  /**
   * @param {Options} [options] Attribution options.
   */
  constructor(e) {
    e = e || {}, super({
      element: document.createElement("div"),
      render: e.render,
      target: e.target
    }), this.ulElement_ = document.createElement("ul"), this.collapsed_ = e.collapsed !== void 0 ? e.collapsed : !0, this.userCollapsed_ = this.collapsed_, this.overrideCollapsible_ = e.collapsible !== void 0, this.collapsible_ = e.collapsible !== void 0 ? e.collapsible : !0, this.collapsible_ || (this.collapsed_ = !1);
    const n = e.className !== void 0 ? e.className : "ol-attribution", i = e.tipLabel !== void 0 ? e.tipLabel : "Attributions", a = e.expandClassName !== void 0 ? e.expandClassName : n + "-expand", o = e.collapseLabel !== void 0 ? e.collapseLabel : "›", r = e.collapseClassName !== void 0 ? e.collapseClassName : n + "-collapse";
    typeof o == "string" ? (this.collapseLabel_ = document.createElement("span"), this.collapseLabel_.textContent = o, this.collapseLabel_.className = r) : this.collapseLabel_ = o;
    const s = e.label !== void 0 ? e.label : "i";
    typeof s == "string" ? (this.label_ = document.createElement("span"), this.label_.textContent = s, this.label_.className = a) : this.label_ = s;
    const l = this.collapsible_ && !this.collapsed_ ? this.collapseLabel_ : this.label_;
    this.toggleButton_ = document.createElement("button"), this.toggleButton_.setAttribute("type", "button"), this.toggleButton_.setAttribute("aria-expanded", String(!this.collapsed_)), this.toggleButton_.title = i, this.toggleButton_.appendChild(l), this.toggleButton_.addEventListener(
      ge.CLICK,
      this.handleClick_.bind(this),
      !1
    );
    const c = n + " " + Nr + " " + dc + (this.collapsed_ && this.collapsible_ ? " " + od : "") + (this.collapsible_ ? "" : " ol-uncollapsible"), u = this.element;
    u.className = c, u.appendChild(this.toggleButton_), u.appendChild(this.ulElement_), this.renderedAttributions_ = [], this.renderedVisible_ = !0;
  }
  /**
   * Collect a list of visible attributions and set the collapsible state.
   * @param {import("../Map.js").FrameState} frameState Frame state.
   * @return {Array<string>} Attributions.
   * @private
   */
  collectSourceAttributions_(e) {
    const n = Array.from(
      new Set(
        this.getMap().getAllLayers().flatMap((a) => a.getAttributions(e))
      )
    ), i = !this.getMap().getAllLayers().some(
      (a) => a.getSource() && a.getSource().getAttributionsCollapsible() === !1
    );
    return this.overrideCollapsible_ || this.setCollapsible(i), n;
  }
  /**
   * @private
   * @param {?import("../Map.js").FrameState} frameState Frame state.
   */
  async updateElement_(e) {
    if (!e) {
      this.renderedVisible_ && (this.element.style.display = "none", this.renderedVisible_ = !1);
      return;
    }
    const n = await Promise.all(
      this.collectSourceAttributions_(e).map(
        (a) => Vp(() => a)
      )
    ), i = n.length > 0;
    if (this.renderedVisible_ != i && (this.element.style.display = i ? "" : "none", this.renderedVisible_ = i), !vi(n, this.renderedAttributions_)) {
      CS(this.ulElement_);
      for (let a = 0, o = n.length; a < o; ++a) {
        const r = document.createElement("li");
        r.innerHTML = n[a], this.ulElement_.appendChild(r);
      }
      this.renderedAttributions_ = n;
    }
  }
  /**
   * @param {MouseEvent} event The event to handle
   * @private
   */
  handleClick_(e) {
    e.preventDefault(), this.handleToggle_(), this.userCollapsed_ = this.collapsed_;
  }
  /**
   * @private
   */
  handleToggle_() {
    this.element.classList.toggle(od), this.collapsed_ ? ad(this.collapseLabel_, this.label_) : ad(this.label_, this.collapseLabel_), this.collapsed_ = !this.collapsed_, this.toggleButton_.setAttribute("aria-expanded", String(!this.collapsed_));
  }
  /**
   * Return `true` if the attribution is collapsible, `false` otherwise.
   * @return {boolean} True if the widget is collapsible.
   * @api
   */
  getCollapsible() {
    return this.collapsible_;
  }
  /**
   * Set whether the attribution should be collapsible.
   * @param {boolean} collapsible True if the widget is collapsible.
   * @api
   */
  setCollapsible(e) {
    this.collapsible_ !== e && (this.collapsible_ = e, this.element.classList.toggle("ol-uncollapsible"), this.userCollapsed_ && this.handleToggle_());
  }
  /**
   * Collapse or expand the attribution according to the passed parameter. Will
   * not do anything if the attribution isn't collapsible or if the current
   * collapsed state is already the one requested.
   * @param {boolean} collapsed True if the widget is collapsed.
   * @api
   */
  setCollapsed(e) {
    this.userCollapsed_ = e, !(!this.collapsible_ || this.collapsed_ === e) && this.handleToggle_();
  }
  /**
   * Return `true` when the attribution is currently collapsed or `false`
   * otherwise.
   * @return {boolean} True if the widget is collapsed.
   * @api
   */
  getCollapsed() {
    return this.collapsed_;
  }
  /**
   * Update the attribution element.
   * @param {import("../MapEvent.js").default} mapEvent Map event.
   * @override
   */
  render(e) {
    this.updateElement_(e.frameState);
  }
}
const G0 = D0;
class N0 extends bc {
  /**
   * @param {Options} [options] Rotate options.
   */
  constructor(e) {
    e = e || {}, super({
      element: document.createElement("div"),
      render: e.render,
      target: e.target
    });
    const n = e.className !== void 0 ? e.className : "ol-rotate", i = e.label !== void 0 ? e.label : "⇧", a = e.compassClassName !== void 0 ? e.compassClassName : "ol-compass";
    this.label_ = null, typeof i == "string" ? (this.label_ = document.createElement("span"), this.label_.className = a, this.label_.textContent = i) : (this.label_ = i, this.label_.classList.add(a));
    const o = e.tipLabel ? e.tipLabel : "Reset rotation", r = document.createElement("button");
    r.className = n + "-reset", r.setAttribute("type", "button"), r.title = o, r.appendChild(this.label_), r.addEventListener(
      ge.CLICK,
      this.handleClick_.bind(this),
      !1
    );
    const s = n + " " + Nr + " " + dc, l = this.element;
    l.className = s, l.appendChild(r), this.callResetNorth_ = e.resetNorth ? e.resetNorth : void 0, this.duration_ = e.duration !== void 0 ? e.duration : 250, this.autoHide_ = e.autoHide !== void 0 ? e.autoHide : !0, this.rotation_ = void 0, this.autoHide_ && this.element.classList.add($o);
  }
  /**
   * @param {MouseEvent} event The event to handle
   * @private
   */
  handleClick_(e) {
    e.preventDefault(), this.callResetNorth_ !== void 0 ? this.callResetNorth_() : this.resetNorth_();
  }
  /**
   * @private
   */
  resetNorth_() {
    const n = this.getMap().getView();
    if (!n)
      return;
    const i = n.getRotation();
    i !== void 0 && (this.duration_ > 0 && i % (2 * Math.PI) !== 0 ? n.animate({
      rotation: 0,
      duration: this.duration_,
      easing: Ma
    }) : n.setRotation(0));
  }
  /**
   * Update the rotate control element.
   * @param {import("../MapEvent.js").default} mapEvent Map event.
   * @override
   */
  render(e) {
    const n = e.frameState;
    if (!n)
      return;
    const i = n.viewState.rotation;
    if (i != this.rotation_) {
      const a = "rotate(" + i + "rad)";
      if (this.autoHide_) {
        const o = this.element.classList.contains($o);
        !o && i === 0 ? this.element.classList.add($o) : o && i !== 0 && this.element.classList.remove($o);
      }
      this.label_.style.transform = a;
    }
    this.rotation_ = i;
  }
}
const $0 = N0;
class W0 extends bc {
  /**
   * @param {Options} [options] Zoom options.
   */
  constructor(e) {
    e = e || {}, super({
      element: document.createElement("div"),
      target: e.target
    });
    const n = e.className !== void 0 ? e.className : "ol-zoom", i = e.delta !== void 0 ? e.delta : 1, a = e.zoomInClassName !== void 0 ? e.zoomInClassName : n + "-in", o = e.zoomOutClassName !== void 0 ? e.zoomOutClassName : n + "-out", r = e.zoomInLabel !== void 0 ? e.zoomInLabel : "+", s = e.zoomOutLabel !== void 0 ? e.zoomOutLabel : "–", l = e.zoomInTipLabel !== void 0 ? e.zoomInTipLabel : "Zoom in", c = e.zoomOutTipLabel !== void 0 ? e.zoomOutTipLabel : "Zoom out", u = document.createElement("button");
    u.className = a, u.setAttribute("type", "button"), u.title = l, u.appendChild(
      typeof r == "string" ? document.createTextNode(r) : r
    ), u.addEventListener(
      ge.CLICK,
      this.handleClick_.bind(this, i),
      !1
    );
    const d = document.createElement("button");
    d.className = o, d.setAttribute("type", "button"), d.title = c, d.appendChild(
      typeof s == "string" ? document.createTextNode(s) : s
    ), d.addEventListener(
      ge.CLICK,
      this.handleClick_.bind(this, -i),
      !1
    );
    const h = n + " " + Nr + " " + dc, f = this.element;
    f.className = h, f.appendChild(u), f.appendChild(d), this.duration_ = e.duration !== void 0 ? e.duration : 250;
  }
  /**
   * @param {number} delta Zoom delta.
   * @param {MouseEvent} event The event to handle
   * @private
   */
  handleClick_(e, n) {
    n.preventDefault(), this.zoomByDelta_(e);
  }
  /**
   * @param {number} delta Zoom delta.
   * @private
   */
  zoomByDelta_(e) {
    const i = this.getMap().getView();
    if (!i)
      return;
    const a = i.getZoom();
    if (a !== void 0) {
      const o = i.getConstrainedZoom(a + e);
      this.duration_ > 0 ? (i.getAnimating() && i.cancelAnimations(), i.animate({
        zoom: o,
        duration: this.duration_,
        easing: Ma
      })) : i.setZoom(o);
    }
  }
}
const U0 = W0;
function X0(t) {
  t = t || {};
  const e = new cn();
  return (t.zoom !== void 0 ? t.zoom : !0) && e.push(new U0(t.zoomOptions)), (t.rotate !== void 0 ? t.rotate : !0) && e.push(new $0(t.rotateOptions)), (t.attribution !== void 0 ? t.attribution : !0) && e.push(new G0(t.attributionOptions)), e;
}
const vd = {
  ACTIVE: "active"
};
class Y0 extends xn {
  /**
   * @param {InteractionOptions} [options] Options.
   */
  constructor(e) {
    super(), this.on, this.once, this.un, e && e.handleEvent && (this.handleEvent = e.handleEvent), this.map_ = null, this.setActive(!0);
  }
  /**
   * Return whether the interaction is currently active.
   * @return {boolean} `true` if the interaction is active, `false` otherwise.
   * @observable
   * @api
   */
  getActive() {
    return (
      /** @type {boolean} */
      this.get(vd.ACTIVE)
    );
  }
  /**
   * Get the map associated with this interaction.
   * @return {import("../Map.js").default|null} Map.
   * @api
   */
  getMap() {
    return this.map_;
  }
  /**
   * Handles the {@link module:ol/MapBrowserEvent~MapBrowserEvent map browser event}.
   * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Map browser event.
   * @return {boolean} `false` to stop event propagation.
   * @api
   */
  handleEvent(e) {
    return !0;
  }
  /**
   * Activate or deactivate the interaction.
   * @param {boolean} active Active.
   * @observable
   * @api
   */
  setActive(e) {
    this.set(vd.ACTIVE, e);
  }
  /**
   * Remove the interaction from its current map and attach it to the new map.
   * Subclasses may set up event handlers to get notified about changes to
   * the map here.
   * @param {import("../Map.js").default|null} map Map.
   */
  setMap(e) {
    this.map_ = e;
  }
}
function j0(t, e, n) {
  const i = t.getCenterInternal();
  if (i) {
    const a = [i[0] + e[0], i[1] + e[1]];
    t.animateInternal({
      duration: n !== void 0 ? n : 250,
      easing: M_,
      center: t.getConstrainedCenter(a)
    });
  }
}
function Mc(t, e, n, i) {
  const a = t.getZoom();
  if (a === void 0)
    return;
  const o = t.getConstrainedZoom(a + e), r = t.getResolutionForZoom(o);
  t.getAnimating() && t.cancelAnimations(), t.animate({
    resolution: r,
    anchor: n,
    duration: i !== void 0 ? i : 250,
    easing: Ma
  });
}
const wo = Y0;
class Z0 extends wo {
  /**
   * @param {Options} [options] Options.
   */
  constructor(e) {
    super(), e = e || {}, this.delta_ = e.delta ? e.delta : 1, this.duration_ = e.duration !== void 0 ? e.duration : 250;
  }
  /**
   * Handles the {@link module:ol/MapBrowserEvent~MapBrowserEvent map browser event} (if it was a
   * doubleclick) and eventually zooms the map.
   * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Map browser event.
   * @return {boolean} `false` to stop event propagation.
   */
  handleEvent(e) {
    let n = !1;
    if (e.type == Ge.DBLCLICK) {
      const i = (
        /** @type {MouseEvent} */
        e.originalEvent
      ), a = e.map, o = e.coordinate, r = i.shiftKey ? -this.delta_ : this.delta_, s = a.getView();
      Mc(s, r, o, this.duration_), i.preventDefault(), n = !0;
    }
    return !n;
  }
}
const H0 = Z0;
class K0 extends wo {
  /**
   * @param {Options} [options] Options.
   */
  constructor(e) {
    e = e || {}, super(
      /** @type {import("./Interaction.js").InteractionOptions} */
      e
    ), e.handleDownEvent && (this.handleDownEvent = e.handleDownEvent), e.handleDragEvent && (this.handleDragEvent = e.handleDragEvent), e.handleMoveEvent && (this.handleMoveEvent = e.handleMoveEvent), e.handleUpEvent && (this.handleUpEvent = e.handleUpEvent), e.stopDown && (this.stopDown = e.stopDown), this.handlingDownUpSequence = !1, this.targetPointers = [];
  }
  /**
   * Returns the current number of pointers involved in the interaction,
   * e.g. `2` when two fingers are used.
   * @return {number} The number of pointers.
   * @api
   */
  getPointerCount() {
    return this.targetPointers.length;
  }
  /**
   * Handle pointer down events.
   * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Event.
   * @return {boolean} If the event was consumed.
   * @protected
   */
  handleDownEvent(e) {
    return !1;
  }
  /**
   * Handle pointer drag events.
   * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Event.
   * @protected
   */
  handleDragEvent(e) {
  }
  /**
   * Handles the {@link module:ol/MapBrowserEvent~MapBrowserEvent map browser event} and may call into
   * other functions, if event sequences like e.g. 'drag' or 'down-up' etc. are
   * detected.
   * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Map browser event.
   * @return {boolean} `false` to stop event propagation.
   * @api
   */
  handleEvent(e) {
    if (!e.originalEvent)
      return !0;
    let n = !1;
    if (this.updateTrackedPointers_(e), this.handlingDownUpSequence) {
      if (e.type == Ge.POINTERDRAG)
        this.handleDragEvent(e), e.originalEvent.preventDefault();
      else if (e.type == Ge.POINTERUP) {
        const i = this.handleUpEvent(e);
        this.handlingDownUpSequence = i && this.targetPointers.length > 0;
      }
    } else if (e.type == Ge.POINTERDOWN) {
      const i = this.handleDownEvent(e);
      this.handlingDownUpSequence = i, n = this.stopDown(i);
    } else
      e.type == Ge.POINTERMOVE && this.handleMoveEvent(e);
    return !n;
  }
  /**
   * Handle pointer move events.
   * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Event.
   * @protected
   */
  handleMoveEvent(e) {
  }
  /**
   * Handle pointer up events.
   * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Event.
   * @return {boolean} If the event was consumed.
   * @protected
   */
  handleUpEvent(e) {
    return !1;
  }
  /**
   * This function is used to determine if "down" events should be propagated
   * to other interactions or should be stopped.
   * @param {boolean} handled Was the event handled by the interaction?
   * @return {boolean} Should the `down` event be stopped?
   */
  stopDown(e) {
    return e;
  }
  /**
   * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Event.
   * @private
   */
  updateTrackedPointers_(e) {
    e.activePointers && (this.targetPointers = e.activePointers);
  }
}
function xc(t) {
  const e = t.length;
  let n = 0, i = 0;
  for (let a = 0; a < e; a++)
    n += t[a].clientX, i += t[a].clientY;
  return { clientX: n / e, clientY: i / e };
}
const Eo = K0;
function Js(t) {
  const e = arguments;
  return function(n) {
    let i = !0;
    for (let a = 0, o = e.length; a < o && (i = i && e[a](n), !!i); ++a)
      ;
    return i;
  };
}
const q0 = function(t) {
  const e = (
    /** @type {KeyboardEvent|MouseEvent|TouchEvent} */
    t.originalEvent
  );
  return e.altKey && !(e.metaKey || e.ctrlKey) && e.shiftKey;
}, J0 = function(t) {
  const e = t.map.getTargetElement(), n = t.map.getOwnerDocument().activeElement;
  return e.contains(n);
}, wg = function(t) {
  return t.map.getTargetElement().hasAttribute("tabindex") ? J0(t) : !0;
}, Q0 = Za, Eg = function(t) {
  const e = (
    /** @type {MouseEvent} */
    t.originalEvent
  );
  return e.button == 0 && !(vS && rg && e.ctrlKey);
}, Ag = function(t) {
  const e = (
    /** @type {KeyboardEvent|MouseEvent|TouchEvent} */
    t.originalEvent
  );
  return !e.altKey && !(e.metaKey || e.ctrlKey) && !e.shiftKey;
}, eb = function(t) {
  const e = (
    /** @type {KeyboardEvent|MouseEvent|TouchEvent} */
    t.originalEvent
  );
  return rg ? e.metaKey : e.ctrlKey;
}, tb = function(t) {
  const e = (
    /** @type {KeyboardEvent|MouseEvent|TouchEvent} */
    t.originalEvent
  );
  return !e.altKey && !(e.metaKey || e.ctrlKey) && e.shiftKey;
}, Rg = function(t) {
  const e = (
    /** @type {KeyboardEvent|MouseEvent|TouchEvent} */
    t.originalEvent
  ), n = (
    /** @type {Element} */
    e.target.tagName
  );
  return n !== "INPUT" && n !== "SELECT" && n !== "TEXTAREA" && // `isContentEditable` is only available on `HTMLElement`, but it may also be a
  // different type like `SVGElement`.
  // @ts-ignore
  !e.target.isContentEditable;
}, ps = function(t) {
  const e = (
    /** @type {import("../MapBrowserEvent").default} */
    t.originalEvent
  );
  return Se(
    e !== void 0,
    "mapBrowserEvent must originate from a pointer event"
  ), e.pointerType == "mouse";
}, nb = function(t) {
  const e = (
    /** @type {import("../MapBrowserEvent").default} */
    t.originalEvent
  );
  return Se(
    e !== void 0,
    "mapBrowserEvent must originate from a pointer event"
  ), e.isPrimary && e.button === 0;
};
class ib extends Eo {
  /**
   * @param {Options} [options] Options.
   */
  constructor(e) {
    super({
      stopDown: Rr
    }), e = e || {}, this.kinetic_ = e.kinetic, this.lastCentroid = null, this.lastPointersCount_, this.panning_ = !1;
    const n = e.condition ? e.condition : Js(Ag, nb);
    this.condition_ = e.onFocusOnly ? Js(wg, n) : n, this.noKinetic_ = !1;
  }
  /**
   * Handle pointer drag events.
   * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Event.
   */
  handleDragEvent(e) {
    const n = e.map;
    this.panning_ || (this.panning_ = !0, n.getView().beginInteraction());
    const i = this.targetPointers, a = n.getEventPixel(xc(i));
    if (i.length == this.lastPointersCount_) {
      if (this.kinetic_ && this.kinetic_.update(a[0], a[1]), this.lastCentroid) {
        const o = [
          this.lastCentroid[0] - a[0],
          a[1] - this.lastCentroid[1]
        ], s = e.map.getView();
        s_(o, s.getResolution()), Yl(o, s.getRotation()), s.adjustCenterInternal(o);
      }
    } else
      this.kinetic_ && this.kinetic_.begin();
    this.lastCentroid = a, this.lastPointersCount_ = i.length, e.originalEvent.preventDefault();
  }
  /**
   * Handle pointer up events.
   * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Event.
   * @return {boolean} If the event was consumed.
   */
  handleUpEvent(e) {
    const n = e.map, i = n.getView();
    if (this.targetPointers.length === 0) {
      if (!this.noKinetic_ && this.kinetic_ && this.kinetic_.end()) {
        const a = this.kinetic_.getDistance(), o = this.kinetic_.getAngle(), r = i.getCenterInternal(), s = n.getPixelFromCoordinateInternal(r), l = n.getCoordinateFromPixelInternal([
          s[0] - a * Math.cos(o),
          s[1] - a * Math.sin(o)
        ]);
        i.animateInternal({
          center: i.getConstrainedCenter(l),
          duration: 500,
          easing: Ma
        });
      }
      return this.panning_ && (this.panning_ = !1, i.endInteraction()), !1;
    }
    return this.kinetic_ && this.kinetic_.begin(), this.lastCentroid = null, !0;
  }
  /**
   * Handle pointer down events.
   * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Event.
   * @return {boolean} If the event was consumed.
   */
  handleDownEvent(e) {
    if (this.targetPointers.length > 0 && this.condition_(e)) {
      const i = e.map.getView();
      return this.lastCentroid = null, i.getAnimating() && i.cancelAnimations(), this.kinetic_ && this.kinetic_.begin(), this.noKinetic_ = this.targetPointers.length > 1, !0;
    }
    return !1;
  }
}
const ab = ib;
class ob extends Eo {
  /**
   * @param {Options} [options] Options.
   */
  constructor(e) {
    e = e || {}, super({
      stopDown: Rr
    }), this.condition_ = e.condition ? e.condition : q0, this.lastAngle_ = void 0, this.duration_ = e.duration !== void 0 ? e.duration : 250;
  }
  /**
   * Handle pointer drag events.
   * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Event.
   */
  handleDragEvent(e) {
    if (!ps(e))
      return;
    const n = e.map, i = n.getView();
    if (i.getConstraints().rotation === Jl)
      return;
    const a = n.getSize(), o = e.pixel, r = Math.atan2(a[1] / 2 - o[1], o[0] - a[0] / 2);
    if (this.lastAngle_ !== void 0) {
      const s = r - this.lastAngle_;
      i.adjustRotationInternal(-s);
    }
    this.lastAngle_ = r;
  }
  /**
   * Handle pointer up events.
   * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Event.
   * @return {boolean} If the event was consumed.
   */
  handleUpEvent(e) {
    return ps(e) ? (e.map.getView().endInteraction(this.duration_), !1) : !0;
  }
  /**
   * Handle pointer down events.
   * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Event.
   * @return {boolean} If the event was consumed.
   */
  handleDownEvent(e) {
    return ps(e) && Eg(e) && this.condition_(e) ? (e.map.getView().beginInteraction(), this.lastAngle_ = void 0, !0) : !1;
  }
}
const rb = ob;
class sb extends Dl {
  /**
   * @param {string} className CSS class name.
   */
  constructor(e) {
    super(), this.geometry_ = null, this.element_ = document.createElement("div"), this.element_.style.position = "absolute", this.element_.style.pointerEvents = "auto", this.element_.className = "ol-box " + e, this.map_ = null, this.startPixel_ = null, this.endPixel_ = null;
  }
  /**
   * Clean up.
   */
  disposeInternal() {
    this.setMap(null);
  }
  /**
   * @private
   */
  render_() {
    const e = this.startPixel_, n = this.endPixel_, i = "px", a = this.element_.style;
    a.left = Math.min(e[0], n[0]) + i, a.top = Math.min(e[1], n[1]) + i, a.width = Math.abs(n[0] - e[0]) + i, a.height = Math.abs(n[1] - e[1]) + i;
  }
  /**
   * @param {import("../Map.js").default|null} map Map.
   */
  setMap(e) {
    if (this.map_) {
      this.map_.getOverlayContainer().removeChild(this.element_);
      const n = this.element_.style;
      n.left = "inherit", n.top = "inherit", n.width = "inherit", n.height = "inherit";
    }
    this.map_ = e, this.map_ && this.map_.getOverlayContainer().appendChild(this.element_);
  }
  /**
   * @param {import("../pixel.js").Pixel} startPixel Start pixel.
   * @param {import("../pixel.js").Pixel} endPixel End pixel.
   */
  setPixels(e, n) {
    this.startPixel_ = e, this.endPixel_ = n, this.createOrUpdateGeometry(), this.render_();
  }
  /**
   * Creates or updates the cached geometry.
   */
  createOrUpdateGeometry() {
    const e = this.startPixel_, n = this.endPixel_, a = [
      e,
      [e[0], n[1]],
      n,
      [n[0], e[1]]
    ].map(
      this.map_.getCoordinateFromPixelInternal,
      this.map_
    );
    a[4] = a[0].slice(), this.geometry_ ? this.geometry_.setCoordinates([a]) : this.geometry_ = new qa([a]);
  }
  /**
   * @return {import("../geom/Polygon.js").default} Geometry.
   */
  getGeometry() {
    return this.geometry_;
  }
}
const lb = sb, Wo = {
  /**
   * Triggered upon drag box start.
   * @event DragBoxEvent#boxstart
   * @api
   */
  BOXSTART: "boxstart",
  /**
   * Triggered on drag when box is active.
   * @event DragBoxEvent#boxdrag
   * @api
   */
  BOXDRAG: "boxdrag",
  /**
   * Triggered upon drag box end.
   * @event DragBoxEvent#boxend
   * @api
   */
  BOXEND: "boxend",
  /**
   * Triggered upon drag box canceled.
   * @event DragBoxEvent#boxcancel
   * @api
   */
  BOXCANCEL: "boxcancel"
};
class _s extends Xn {
  /**
   * @param {string} type The event type.
   * @param {import("../coordinate.js").Coordinate} coordinate The event coordinate.
   * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Originating event.
   */
  constructor(e, n, i) {
    super(e), this.coordinate = n, this.mapBrowserEvent = i;
  }
}
class cb extends Eo {
  /**
   * @param {Options} [options] Options.
   */
  constructor(e) {
    super(), this.on, this.once, this.un, e = e || {}, this.box_ = new lb(e.className || "ol-dragbox"), this.minArea_ = e.minArea !== void 0 ? e.minArea : 64, e.onBoxEnd && (this.onBoxEnd = e.onBoxEnd), this.startPixel_ = null, this.condition_ = e.condition ? e.condition : Eg, this.boxEndCondition_ = e.boxEndCondition ? e.boxEndCondition : this.defaultBoxEndCondition;
  }
  /**
   * The default condition for determining whether the boxend event
   * should fire.
   * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent The originating MapBrowserEvent
   *     leading to the box end.
   * @param {import("../pixel.js").Pixel} startPixel The starting pixel of the box.
   * @param {import("../pixel.js").Pixel} endPixel The end pixel of the box.
   * @return {boolean} Whether or not the boxend condition should be fired.
   */
  defaultBoxEndCondition(e, n, i) {
    const a = i[0] - n[0], o = i[1] - n[1];
    return a * a + o * o >= this.minArea_;
  }
  /**
   * Returns geometry of last drawn box.
   * @return {import("../geom/Polygon.js").default} Geometry.
   * @api
   */
  getGeometry() {
    return this.box_.getGeometry();
  }
  /**
   * Handle pointer drag events.
   * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Event.
   */
  handleDragEvent(e) {
    this.box_.setPixels(this.startPixel_, e.pixel), this.dispatchEvent(
      new _s(
        Wo.BOXDRAG,
        e.coordinate,
        e
      )
    );
  }
  /**
   * Handle pointer up events.
   * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Event.
   * @return {boolean} If the event was consumed.
   */
  handleUpEvent(e) {
    this.box_.setMap(null);
    const n = this.boxEndCondition_(
      e,
      this.startPixel_,
      e.pixel
    );
    return n && this.onBoxEnd(e), this.dispatchEvent(
      new _s(
        n ? Wo.BOXEND : Wo.BOXCANCEL,
        e.coordinate,
        e
      )
    ), !1;
  }
  /**
   * Handle pointer down events.
   * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Event.
   * @return {boolean} If the event was consumed.
   */
  handleDownEvent(e) {
    return this.condition_(e) ? (this.startPixel_ = e.pixel, this.box_.setMap(e.map), this.box_.setPixels(this.startPixel_, this.startPixel_), this.dispatchEvent(
      new _s(
        Wo.BOXSTART,
        e.coordinate,
        e
      )
    ), !0) : !1;
  }
  /**
   * Function to execute just before `onboxend` is fired
   * @param {import("../MapBrowserEvent.js").default} event Event.
   */
  onBoxEnd(e) {
  }
}
const ub = cb;
class db extends ub {
  /**
   * @param {Options} [options] Options.
   */
  constructor(e) {
    e = e || {};
    const n = e.condition ? e.condition : tb;
    super({
      condition: n,
      className: e.className || "ol-dragzoom",
      minArea: e.minArea
    }), this.duration_ = e.duration !== void 0 ? e.duration : 200, this.out_ = e.out !== void 0 ? e.out : !1;
  }
  /**
   * Function to execute just before `onboxend` is fired
   * @param {import("../MapBrowserEvent.js").default} event Event.
   */
  onBoxEnd(e) {
    const i = (
      /** @type {!import("../View.js").default} */
      this.getMap().getView()
    );
    let a = this.getGeometry();
    if (this.out_) {
      const o = i.rotatedExtentForGeometry(a), r = i.getResolutionForExtentInternal(o), s = i.getResolution() / r;
      a = a.clone(), a.scale(s * s);
    }
    i.fitInternal(a, {
      duration: this.duration_,
      easing: Ma
    });
  }
}
const hb = db, Si = {
  LEFT: "ArrowLeft",
  UP: "ArrowUp",
  RIGHT: "ArrowRight",
  DOWN: "ArrowDown"
};
class fb extends wo {
  /**
   * @param {Options} [options] Options.
   */
  constructor(e) {
    super(), e = e || {}, this.defaultCondition_ = function(n) {
      return Ag(n) && Rg(n);
    }, this.condition_ = e.condition !== void 0 ? e.condition : this.defaultCondition_, this.duration_ = e.duration !== void 0 ? e.duration : 100, this.pixelDelta_ = e.pixelDelta !== void 0 ? e.pixelDelta : 128;
  }
  /**
   * Handles the {@link module:ol/MapBrowserEvent~MapBrowserEvent map browser event} if it was a
   * `KeyEvent`, and decides the direction to pan to (if an arrow key was
   * pressed).
   * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Map browser event.
   * @return {boolean} `false` to stop event propagation.
   */
  handleEvent(e) {
    let n = !1;
    if (e.type == ge.KEYDOWN) {
      const i = (
        /** @type {KeyboardEvent} */
        e.originalEvent
      ), a = i.key;
      if (this.condition_(e) && (a == Si.DOWN || a == Si.LEFT || a == Si.RIGHT || a == Si.UP)) {
        const r = e.map.getView(), s = r.getResolution() * this.pixelDelta_;
        let l = 0, c = 0;
        a == Si.DOWN ? c = -s : a == Si.LEFT ? l = -s : a == Si.RIGHT ? l = s : c = s;
        const u = [l, c];
        Yl(u, r.getRotation()), j0(r, u, this.duration_), i.preventDefault(), n = !0;
      }
    }
    return !n;
  }
}
const gb = fb;
class mb extends wo {
  /**
   * @param {Options} [options] Options.
   */
  constructor(e) {
    super(), e = e || {}, this.condition_ = e.condition ? e.condition : function(n) {
      return !eb(n) && Rg(n);
    }, this.delta_ = e.delta ? e.delta : 1, this.duration_ = e.duration !== void 0 ? e.duration : 100;
  }
  /**
   * Handles the {@link module:ol/MapBrowserEvent~MapBrowserEvent map browser event} if it was a
   * `KeyEvent`, and decides whether to zoom in or out (depending on whether the
   * key pressed was '+' or '-').
   * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Map browser event.
   * @return {boolean} `false` to stop event propagation.
   */
  handleEvent(e) {
    let n = !1;
    if (e.type == ge.KEYDOWN || e.type == ge.KEYPRESS) {
      const i = (
        /** @type {KeyboardEvent} */
        e.originalEvent
      ), a = i.key;
      if (this.condition_(e) && (a === "+" || a === "-")) {
        const o = e.map, r = a === "+" ? this.delta_ : -this.delta_, s = o.getView();
        Mc(s, r, void 0, this.duration_), i.preventDefault(), n = !0;
      }
    }
    return !n;
  }
}
const vb = mb;
class Cb {
  /**
   * @param {number} decay Rate of decay (must be negative).
   * @param {number} minVelocity Minimum velocity (pixels/millisecond).
   * @param {number} delay Delay to consider to calculate the kinetic
   *     initial values (milliseconds).
   */
  constructor(e, n, i) {
    this.decay_ = e, this.minVelocity_ = n, this.delay_ = i, this.points_ = [], this.angle_ = 0, this.initialVelocity_ = 0;
  }
  /**
   * FIXME empty description for jsdoc
   */
  begin() {
    this.points_.length = 0, this.angle_ = 0, this.initialVelocity_ = 0;
  }
  /**
   * @param {number} x X.
   * @param {number} y Y.
   */
  update(e, n) {
    this.points_.push(e, n, Date.now());
  }
  /**
   * @return {boolean} Whether we should do kinetic animation.
   */
  end() {
    if (this.points_.length < 6)
      return !1;
    const e = Date.now() - this.delay_, n = this.points_.length - 3;
    if (this.points_[n + 2] < e)
      return !1;
    let i = n - 3;
    for (; i > 0 && this.points_[i + 2] > e; )
      i -= 3;
    const a = this.points_[n + 2] - this.points_[i + 2];
    if (a < 1e3 / 60)
      return !1;
    const o = this.points_[n] - this.points_[i], r = this.points_[n + 1] - this.points_[i + 1];
    return this.angle_ = Math.atan2(r, o), this.initialVelocity_ = Math.sqrt(o * o + r * r) / a, this.initialVelocity_ > this.minVelocity_;
  }
  /**
   * @return {number} Total distance travelled (pixels).
   */
  getDistance() {
    return (this.minVelocity_ - this.initialVelocity_) / this.decay_;
  }
  /**
   * @return {number} Angle of the kinetic panning animation (radians).
   */
  getAngle() {
    return this.angle_;
  }
}
const yb = Cb;
class pb extends wo {
  /**
   * @param {Options} [options] Options.
   */
  constructor(e) {
    e = e || {}, super(
      /** @type {import("./Interaction.js").InteractionOptions} */
      e
    ), this.totalDelta_ = 0, this.lastDelta_ = 0, this.maxDelta_ = e.maxDelta !== void 0 ? e.maxDelta : 1, this.duration_ = e.duration !== void 0 ? e.duration : 250, this.timeout_ = e.timeout !== void 0 ? e.timeout : 80, this.useAnchor_ = e.useAnchor !== void 0 ? e.useAnchor : !0, this.constrainResolution_ = e.constrainResolution !== void 0 ? e.constrainResolution : !1;
    const n = e.condition ? e.condition : Q0;
    this.condition_ = e.onFocusOnly ? Js(wg, n) : n, this.lastAnchor_ = null, this.startTime_ = void 0, this.timeoutId_, this.mode_ = void 0, this.trackpadEventGap_ = 400, this.trackpadTimeoutId_, this.deltaPerZoom_ = 300;
  }
  /**
   * @private
   */
  endInteraction_() {
    this.trackpadTimeoutId_ = void 0;
    const e = this.getMap();
    if (!e)
      return;
    e.getView().endInteraction(
      void 0,
      this.lastDelta_ ? this.lastDelta_ > 0 ? 1 : -1 : 0,
      this.lastAnchor_
    );
  }
  /**
   * Handles the {@link module:ol/MapBrowserEvent~MapBrowserEvent map browser event} (if it was a mousewheel-event) and eventually
   * zooms the map.
   * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Map browser event.
   * @return {boolean} `false` to stop event propagation.
   */
  handleEvent(e) {
    if (!this.condition_(e) || e.type !== ge.WHEEL)
      return !0;
    const i = e.map, a = (
      /** @type {WheelEvent} */
      e.originalEvent
    );
    a.preventDefault(), this.useAnchor_ && (this.lastAnchor_ = e.coordinate);
    let o;
    if (e.type == ge.WHEEL && (o = a.deltaY, gS && a.deltaMode === WheelEvent.DOM_DELTA_PIXEL && (o /= sg), a.deltaMode === WheelEvent.DOM_DELTA_LINE && (o *= 40)), o === 0)
      return !1;
    this.lastDelta_ = o;
    const r = Date.now();
    this.startTime_ === void 0 && (this.startTime_ = r), (!this.mode_ || r - this.startTime_ > this.trackpadEventGap_) && (this.mode_ = Math.abs(o) < 4 ? "trackpad" : "wheel");
    const s = i.getView();
    if (this.mode_ === "trackpad" && !(s.getConstrainResolution() || this.constrainResolution_))
      return this.trackpadTimeoutId_ ? clearTimeout(this.trackpadTimeoutId_) : (s.getAnimating() && s.cancelAnimations(), s.beginInteraction()), this.trackpadTimeoutId_ = setTimeout(
        this.endInteraction_.bind(this),
        this.timeout_
      ), s.adjustZoom(-o / this.deltaPerZoom_, this.lastAnchor_), this.startTime_ = r, !1;
    this.totalDelta_ += o;
    const l = Math.max(this.timeout_ - (r - this.startTime_), 0);
    return clearTimeout(this.timeoutId_), this.timeoutId_ = setTimeout(
      this.handleWheelZoom_.bind(this, i),
      l
    ), !1;
  }
  /**
   * @private
   * @param {import("../Map.js").default} map Map.
   */
  handleWheelZoom_(e) {
    const n = e.getView();
    n.getAnimating() && n.cancelAnimations();
    let i = -Ye(
      this.totalDelta_,
      -this.maxDelta_ * this.deltaPerZoom_,
      this.maxDelta_ * this.deltaPerZoom_
    ) / this.deltaPerZoom_;
    (n.getConstrainResolution() || this.constrainResolution_) && (i = i ? i > 0 ? 1 : -1 : 0), Mc(n, i, this.lastAnchor_, this.duration_), this.mode_ = void 0, this.totalDelta_ = 0, this.lastAnchor_ = null, this.startTime_ = void 0, this.timeoutId_ = void 0;
  }
  /**
   * Enable or disable using the mouse's location as an anchor when zooming
   * @param {boolean} useAnchor true to zoom to the mouse's location, false
   * to zoom to the center of the map
   * @api
   */
  setMouseAnchor(e) {
    this.useAnchor_ = e, e || (this.lastAnchor_ = null);
  }
}
const _b = pb;
class Sb extends Eo {
  /**
   * @param {Options} [options] Options.
   */
  constructor(e) {
    e = e || {};
    const n = (
      /** @type {import("./Pointer.js").Options} */
      e
    );
    n.stopDown || (n.stopDown = Rr), super(n), this.anchor_ = null, this.lastAngle_ = void 0, this.rotating_ = !1, this.rotationDelta_ = 0, this.threshold_ = e.threshold !== void 0 ? e.threshold : 0.3, this.duration_ = e.duration !== void 0 ? e.duration : 250;
  }
  /**
   * Handle pointer drag events.
   * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Event.
   */
  handleDragEvent(e) {
    let n = 0;
    const i = this.targetPointers[0], a = this.targetPointers[1], o = Math.atan2(
      a.clientY - i.clientY,
      a.clientX - i.clientX
    );
    if (this.lastAngle_ !== void 0) {
      const l = o - this.lastAngle_;
      this.rotationDelta_ += l, !this.rotating_ && Math.abs(this.rotationDelta_) > this.threshold_ && (this.rotating_ = !0), n = l;
    }
    this.lastAngle_ = o;
    const r = e.map, s = r.getView();
    s.getConstraints().rotation !== Jl && (this.anchor_ = r.getCoordinateFromPixelInternal(
      r.getEventPixel(xc(this.targetPointers))
    ), this.rotating_ && (r.render(), s.adjustRotationInternal(n, this.anchor_)));
  }
  /**
   * Handle pointer up events.
   * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Event.
   * @return {boolean} If the event was consumed.
   */
  handleUpEvent(e) {
    return this.targetPointers.length < 2 ? (e.map.getView().endInteraction(this.duration_), !1) : !0;
  }
  /**
   * Handle pointer down events.
   * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Event.
   * @return {boolean} If the event was consumed.
   */
  handleDownEvent(e) {
    if (this.targetPointers.length >= 2) {
      const n = e.map;
      return this.anchor_ = null, this.lastAngle_ = void 0, this.rotating_ = !1, this.rotationDelta_ = 0, this.handlingDownUpSequence || n.getView().beginInteraction(), !0;
    }
    return !1;
  }
}
const bb = Sb;
class Mb extends Eo {
  /**
   * @param {Options} [options] Options.
   */
  constructor(e) {
    e = e || {};
    const n = (
      /** @type {import("./Pointer.js").Options} */
      e
    );
    n.stopDown || (n.stopDown = Rr), super(n), this.anchor_ = null, this.duration_ = e.duration !== void 0 ? e.duration : 400, this.lastDistance_ = void 0, this.lastScaleDelta_ = 1;
  }
  /**
   * Handle pointer drag events.
   * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Event.
   */
  handleDragEvent(e) {
    let n = 1;
    const i = this.targetPointers[0], a = this.targetPointers[1], o = i.clientX - a.clientX, r = i.clientY - a.clientY, s = Math.sqrt(o * o + r * r);
    this.lastDistance_ !== void 0 && (n = this.lastDistance_ / s), this.lastDistance_ = s;
    const l = e.map, c = l.getView();
    n != 1 && (this.lastScaleDelta_ = n), this.anchor_ = l.getCoordinateFromPixelInternal(
      l.getEventPixel(xc(this.targetPointers))
    ), l.render(), c.adjustResolutionInternal(n, this.anchor_);
  }
  /**
   * Handle pointer up events.
   * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Event.
   * @return {boolean} If the event was consumed.
   */
  handleUpEvent(e) {
    if (this.targetPointers.length < 2) {
      const i = e.map.getView(), a = this.lastScaleDelta_ > 1 ? 1 : -1;
      return i.endInteraction(this.duration_, a), !1;
    }
    return !0;
  }
  /**
   * Handle pointer down events.
   * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Event.
   * @return {boolean} If the event was consumed.
   */
  handleDownEvent(e) {
    if (this.targetPointers.length >= 2) {
      const n = e.map;
      return this.anchor_ = null, this.lastDistance_ = void 0, this.lastScaleDelta_ = 1, this.handlingDownUpSequence || n.getView().beginInteraction(), !0;
    }
    return !1;
  }
}
const xb = Mb;
function Pb(t) {
  t = t || {};
  const e = new cn(), n = new yb(-5e-3, 0.05, 100);
  return (t.altShiftDragRotate !== void 0 ? t.altShiftDragRotate : !0) && e.push(new rb()), (t.doubleClickZoom !== void 0 ? t.doubleClickZoom : !0) && e.push(
    new H0({
      delta: t.zoomDelta,
      duration: t.zoomDuration
    })
  ), (t.dragPan !== void 0 ? t.dragPan : !0) && e.push(
    new ab({
      onFocusOnly: t.onFocusOnly,
      kinetic: n
    })
  ), (t.pinchRotate !== void 0 ? t.pinchRotate : !0) && e.push(new bb()), (t.pinchZoom !== void 0 ? t.pinchZoom : !0) && e.push(
    new xb({
      duration: t.zoomDuration
    })
  ), (t.keyboard !== void 0 ? t.keyboard : !0) && (e.push(new gb()), e.push(
    new vb({
      delta: t.zoomDelta,
      duration: t.zoomDuration
    })
  )), (t.mouseWheelZoom !== void 0 ? t.mouseWheelZoom : !0) && e.push(
    new _b({
      onFocusOnly: t.onFocusOnly,
      duration: t.zoomDuration
    })
  ), (t.shiftDragZoom !== void 0 ? t.shiftDragZoom : !0) && e.push(
    new hb({
      duration: t.zoomDuration
    })
  ), e;
}
function Ig(t) {
  if (t instanceof Dr) {
    t.setMapInternal(null);
    return;
  }
  t instanceof Yr && t.getLayers().forEach(Ig);
}
function zg(t, e) {
  if (t instanceof Dr) {
    t.setMapInternal(e);
    return;
  }
  if (t instanceof Yr) {
    const n = t.getLayers().getArray();
    for (let i = 0, a = n.length; i < a; ++i)
      zg(n[i], e);
  }
}
let Tb = class extends xn {
  /**
   * @param {MapOptions} [options] Map options.
   */
  constructor(e) {
    super(), e = e || {}, this.on, this.once, this.un;
    const n = wb(e);
    this.renderComplete_, this.loaded_ = !0, this.boundHandleBrowserEvent_ = this.handleBrowserEvent.bind(this), this.maxTilesLoading_ = e.maxTilesLoading !== void 0 ? e.maxTilesLoading : 16, this.pixelRatio_ = e.pixelRatio !== void 0 ? e.pixelRatio : sg, this.postRenderTimeoutHandle_, this.animationDelayKey_, this.animationDelay_ = this.animationDelay_.bind(this), this.coordinateToPixelTransform_ = Zt(), this.pixelToCoordinateTransform_ = Zt(), this.frameIndex_ = 0, this.frameState_ = null, this.previousExtent_ = null, this.viewPropertyListenerKey_ = null, this.viewChangeListenerKey_ = null, this.layerGroupPropertyListenerKeys_ = null, this.viewport_ = document.createElement("div"), this.viewport_.className = "ol-viewport" + ("ontouchstart" in window ? " ol-touch" : ""), this.viewport_.style.position = "relative", this.viewport_.style.overflow = "hidden", this.viewport_.style.width = "100%", this.viewport_.style.height = "100%", this.overlayContainer_ = document.createElement("div"), this.overlayContainer_.style.position = "absolute", this.overlayContainer_.style.zIndex = "0", this.overlayContainer_.style.width = "100%", this.overlayContainer_.style.height = "100%", this.overlayContainer_.style.pointerEvents = "none", this.overlayContainer_.className = "ol-overlaycontainer", this.viewport_.appendChild(this.overlayContainer_), this.overlayContainerStopEvent_ = document.createElement("div"), this.overlayContainerStopEvent_.style.position = "absolute", this.overlayContainerStopEvent_.style.zIndex = "0", this.overlayContainerStopEvent_.style.width = "100%", this.overlayContainerStopEvent_.style.height = "100%", this.overlayContainerStopEvent_.style.pointerEvents = "none", this.overlayContainerStopEvent_.className = "ol-overlaycontainer-stopevent", this.viewport_.appendChild(this.overlayContainerStopEvent_), this.mapBrowserEventHandler_ = null, this.moveTolerance_ = e.moveTolerance, this.keyboardEventTarget_ = n.keyboardEventTarget, this.targetChangeHandlerKeys_ = null, this.targetElement_ = null, this.resizeObserver_ = new ResizeObserver(() => this.updateSize()), this.controls = n.controls || X0(), this.interactions = n.interactions || Pb({
      onFocusOnly: !0
    }), this.overlays_ = n.overlays, this.overlayIdIndex_ = {}, this.renderer_ = null, this.postRenderFunctions_ = [], this.tileQueue_ = new F0(
      this.getTilePriority.bind(this),
      this.handleTileChange_.bind(this)
    ), this.addChangeListener(
      rt.LAYERGROUP,
      this.handleLayerGroupChanged_
    ), this.addChangeListener(rt.VIEW, this.handleViewChanged_), this.addChangeListener(rt.SIZE, this.handleSizeChanged_), this.addChangeListener(rt.TARGET, this.handleTargetChanged_), this.setProperties(n.values);
    const i = this;
    e.view && !(e.view instanceof sn) && e.view.then(function(a) {
      i.setView(new sn(a));
    }), this.controls.addEventListener(
      St.ADD,
      /**
       * @param {import("./Collection.js").CollectionEvent<import("./control/Control.js").default>} event CollectionEvent
       */
      (a) => {
        a.element.setMap(this);
      }
    ), this.controls.addEventListener(
      St.REMOVE,
      /**
       * @param {import("./Collection.js").CollectionEvent<import("./control/Control.js").default>} event CollectionEvent.
       */
      (a) => {
        a.element.setMap(null);
      }
    ), this.interactions.addEventListener(
      St.ADD,
      /**
       * @param {import("./Collection.js").CollectionEvent<import("./interaction/Interaction.js").default>} event CollectionEvent.
       */
      (a) => {
        a.element.setMap(this);
      }
    ), this.interactions.addEventListener(
      St.REMOVE,
      /**
       * @param {import("./Collection.js").CollectionEvent<import("./interaction/Interaction.js").default>} event CollectionEvent.
       */
      (a) => {
        a.element.setMap(null);
      }
    ), this.overlays_.addEventListener(
      St.ADD,
      /**
       * @param {import("./Collection.js").CollectionEvent<import("./Overlay.js").default>} event CollectionEvent.
       */
      (a) => {
        this.addOverlayInternal_(a.element);
      }
    ), this.overlays_.addEventListener(
      St.REMOVE,
      /**
       * @param {import("./Collection.js").CollectionEvent<import("./Overlay.js").default>} event CollectionEvent.
       */
      (a) => {
        const o = a.element.getId();
        o !== void 0 && delete this.overlayIdIndex_[o.toString()], a.element.setMap(null);
      }
    ), this.controls.forEach(
      /**
       * @param {import("./control/Control.js").default} control Control.
       */
      (a) => {
        a.setMap(this);
      }
    ), this.interactions.forEach(
      /**
       * @param {import("./interaction/Interaction.js").default} interaction Interaction.
       */
      (a) => {
        a.setMap(this);
      }
    ), this.overlays_.forEach(this.addOverlayInternal_.bind(this));
  }
  /**
   * Add the given control to the map.
   * @param {import("./control/Control.js").default} control Control.
   * @api
   */
  addControl(e) {
    this.getControls().push(e);
  }
  /**
   * Add the given interaction to the map. If you want to add an interaction
   * at another point of the collection use `getInteractions()` and the methods
   * available on {@link module:ol/Collection~Collection}. This can be used to
   * stop the event propagation from the handleEvent function. The interactions
   * get to handle the events in the reverse order of this collection.
   * @param {import("./interaction/Interaction.js").default} interaction Interaction to add.
   * @api
   */
  addInteraction(e) {
    this.getInteractions().push(e);
  }
  /**
   * Adds the given layer to the top of this map. If you want to add a layer
   * elsewhere in the stack, use `getLayers()` and the methods available on
   * {@link module:ol/Collection~Collection}.
   * @param {import("./layer/Base.js").default} layer Layer.
   * @api
   */
  addLayer(e) {
    this.getLayerGroup().getLayers().push(e);
  }
  /**
   * @param {import("./layer/Group.js").GroupEvent} event The layer add event.
   * @private
   */
  handleLayerAdd_(e) {
    zg(e.layer, this);
  }
  /**
   * Add the given overlay to the map.
   * @param {import("./Overlay.js").default} overlay Overlay.
   * @api
   */
  addOverlay(e) {
    this.getOverlays().push(e);
  }
  /**
   * This deals with map's overlay collection changes.
   * @param {import("./Overlay.js").default} overlay Overlay.
   * @private
   */
  addOverlayInternal_(e) {
    const n = e.getId();
    n !== void 0 && (this.overlayIdIndex_[n.toString()] = e), e.setMap(this);
  }
  /**
   *
   * Clean up.
   */
  disposeInternal() {
    this.controls.clear(), this.interactions.clear(), this.overlays_.clear(), this.resizeObserver_.disconnect(), this.setTarget(null), super.disposeInternal();
  }
  /**
   * Detect features that intersect a pixel on the viewport, and execute a
   * callback with each intersecting feature. Layers included in the detection can
   * be configured through the `layerFilter` option in `options`.
   * @param {import("./pixel.js").Pixel} pixel Pixel.
   * @param {function(import("./Feature.js").FeatureLike, import("./layer/Layer.js").default<import("./source/Source").default>, import("./geom/SimpleGeometry.js").default): T} callback Feature callback. The callback will be
   *     called with two arguments. The first argument is one
   *     {@link module:ol/Feature~Feature feature} or
   *     {@link module:ol/render/Feature~RenderFeature render feature} at the pixel, the second is
   *     the {@link module:ol/layer/Layer~Layer layer} of the feature and will be null for
   *     unmanaged layers. To stop detection, callback functions can return a
   *     truthy value.
   * @param {AtPixelOptions} [options] Optional options.
   * @return {T|undefined} Callback result, i.e. the return value of last
   * callback execution, or the first truthy callback return value.
   * @template T
   * @api
   */
  forEachFeatureAtPixel(e, n, i) {
    if (!this.frameState_ || !this.renderer_)
      return;
    const a = this.getCoordinateFromPixelInternal(e);
    i = i !== void 0 ? i : {};
    const o = i.hitTolerance !== void 0 ? i.hitTolerance : 0, r = i.layerFilter !== void 0 ? i.layerFilter : Za, s = i.checkWrapped !== !1;
    return this.renderer_.forEachFeatureAtCoordinate(
      a,
      this.frameState_,
      o,
      s,
      n,
      null,
      r,
      null
    );
  }
  /**
   * Get all features that intersect a pixel on the viewport.
   * @param {import("./pixel.js").Pixel} pixel Pixel.
   * @param {AtPixelOptions} [options] Optional options.
   * @return {Array<import("./Feature.js").FeatureLike>} The detected features or
   * an empty array if none were found.
   * @api
   */
  getFeaturesAtPixel(e, n) {
    const i = [];
    return this.forEachFeatureAtPixel(
      e,
      function(a) {
        i.push(a);
      },
      n
    ), i;
  }
  /**
   * Get all layers from all layer groups.
   * @return {Array<import("./layer/Layer.js").default>} Layers.
   * @api
   */
  getAllLayers() {
    const e = [];
    function n(i) {
      i.forEach(function(a) {
        a instanceof Yr ? n(a.getLayers()) : e.push(a);
      });
    }
    return n(this.getLayers()), e;
  }
  /**
   * Detect if features intersect a pixel on the viewport. Layers included in the
   * detection can be configured through the `layerFilter` option.
   * @param {import("./pixel.js").Pixel} pixel Pixel.
   * @param {AtPixelOptions} [options] Optional options.
   * @return {boolean} Is there a feature at the given pixel?
   * @api
   */
  hasFeatureAtPixel(e, n) {
    if (!this.frameState_ || !this.renderer_)
      return !1;
    const i = this.getCoordinateFromPixelInternal(e);
    n = n !== void 0 ? n : {};
    const a = n.layerFilter !== void 0 ? n.layerFilter : Za, o = n.hitTolerance !== void 0 ? n.hitTolerance : 0, r = n.checkWrapped !== !1;
    return this.renderer_.hasFeatureAtCoordinate(
      i,
      this.frameState_,
      o,
      r,
      a,
      null
    );
  }
  /**
   * Returns the coordinate in user projection for a browser event.
   * @param {MouseEvent} event Event.
   * @return {import("./coordinate.js").Coordinate} Coordinate.
   * @api
   */
  getEventCoordinate(e) {
    return this.getCoordinateFromPixel(this.getEventPixel(e));
  }
  /**
   * Returns the coordinate in view projection for a browser event.
   * @param {MouseEvent} event Event.
   * @return {import("./coordinate.js").Coordinate} Coordinate.
   */
  getEventCoordinateInternal(e) {
    return this.getCoordinateFromPixelInternal(this.getEventPixel(e));
  }
  /**
   * Returns the map pixel position for a browser event relative to the viewport.
   * @param {UIEvent|{clientX: number, clientY: number}} event Event.
   * @return {import("./pixel.js").Pixel} Pixel.
   * @api
   */
  getEventPixel(e) {
    const i = this.viewport_.getBoundingClientRect(), a = this.getSize(), o = i.width / a[0], r = i.height / a[1], s = (
      //FIXME Are we really calling this with a TouchEvent anywhere?
      "changedTouches" in e ? (
        /** @type {TouchEvent} */
        e.changedTouches[0]
      ) : (
        /** @type {MouseEvent} */
        e
      )
    );
    return [
      (s.clientX - i.left) / o,
      (s.clientY - i.top) / r
    ];
  }
  /**
   * Get the target in which this map is rendered.
   * Note that this returns what is entered as an option or in setTarget:
   * if that was an element, it returns an element; if a string, it returns that.
   * @return {HTMLElement|string|undefined} The Element or id of the Element that the
   *     map is rendered in.
   * @observable
   * @api
   */
  getTarget() {
    return (
      /** @type {HTMLElement|string|undefined} */
      this.get(rt.TARGET)
    );
  }
  /**
   * Get the DOM element into which this map is rendered. In contrast to
   * `getTarget` this method always return an `Element`, or `null` if the
   * map has no target.
   * @return {HTMLElement} The element that the map is rendered in.
   * @api
   */
  getTargetElement() {
    return this.targetElement_;
  }
  /**
   * Get the coordinate for a given pixel.  This returns a coordinate in the
   * user projection.
   * @param {import("./pixel.js").Pixel} pixel Pixel position in the map viewport.
   * @return {import("./coordinate.js").Coordinate} The coordinate for the pixel position.
   * @api
   */
  getCoordinateFromPixel(e) {
    return Us(
      this.getCoordinateFromPixelInternal(e),
      this.getView().getProjection()
    );
  }
  /**
   * Get the coordinate for a given pixel.  This returns a coordinate in the
   * map view projection.
   * @param {import("./pixel.js").Pixel} pixel Pixel position in the map viewport.
   * @return {import("./coordinate.js").Coordinate} The coordinate for the pixel position.
   */
  getCoordinateFromPixelInternal(e) {
    const n = this.frameState_;
    return n ? Je(n.pixelToCoordinateTransform, e.slice()) : null;
  }
  /**
   * Get the map controls. Modifying this collection changes the controls
   * associated with the map.
   * @return {Collection<import("./control/Control.js").default>} Controls.
   * @api
   */
  getControls() {
    return this.controls;
  }
  /**
   * Get the map overlays. Modifying this collection changes the overlays
   * associated with the map.
   * @return {Collection<import("./Overlay.js").default>} Overlays.
   * @api
   */
  getOverlays() {
    return this.overlays_;
  }
  /**
   * Get an overlay by its identifier (the value returned by overlay.getId()).
   * Note that the index treats string and numeric identifiers as the same. So
   * `map.getOverlayById(2)` will return an overlay with id `'2'` or `2`.
   * @param {string|number} id Overlay identifier.
   * @return {import("./Overlay.js").default|null} Overlay.
   * @api
   */
  getOverlayById(e) {
    const n = this.overlayIdIndex_[e.toString()];
    return n !== void 0 ? n : null;
  }
  /**
   * Get the map interactions. Modifying this collection changes the interactions
   * associated with the map.
   *
   * Interactions are used for e.g. pan, zoom and rotate.
   * @return {Collection<import("./interaction/Interaction.js").default>} Interactions.
   * @api
   */
  getInteractions() {
    return this.interactions;
  }
  /**
   * Get the layergroup associated with this map.
   * @return {LayerGroup} A layer group containing the layers in this map.
   * @observable
   * @api
   */
  getLayerGroup() {
    return (
      /** @type {LayerGroup} */
      this.get(rt.LAYERGROUP)
    );
  }
  /**
   * Clear any existing layers and add layers to the map.
   * @param {Array<import("./layer/Base.js").default>|Collection<import("./layer/Base.js").default>} layers The layers to be added to the map.
   * @api
   */
  setLayers(e) {
    const n = this.getLayerGroup();
    if (e instanceof cn) {
      n.setLayers(e);
      return;
    }
    const i = n.getLayers();
    i.clear(), i.extend(e);
  }
  /**
   * Get the collection of layers associated with this map.
   * @return {!Collection<import("./layer/Base.js").default>} Layers.
   * @api
   */
  getLayers() {
    return this.getLayerGroup().getLayers();
  }
  /**
   * @return {boolean} Layers have sources that are still loading.
   */
  getLoadingOrNotReady() {
    const e = this.getLayerGroup().getLayerStatesArray();
    for (let n = 0, i = e.length; n < i; ++n) {
      const a = e[n];
      if (!a.visible)
        continue;
      const o = a.layer.getRenderer();
      if (o && !o.ready)
        return !0;
      const r = a.layer.getSource();
      if (r && r.loading)
        return !0;
    }
    return !1;
  }
  /**
   * Get the pixel for a coordinate.  This takes a coordinate in the user
   * projection and returns the corresponding pixel.
   * @param {import("./coordinate.js").Coordinate} coordinate A map coordinate.
   * @return {import("./pixel.js").Pixel} A pixel position in the map viewport.
   * @api
   */
  getPixelFromCoordinate(e) {
    const n = Ln(
      e,
      this.getView().getProjection()
    );
    return this.getPixelFromCoordinateInternal(n);
  }
  /**
   * Get the pixel for a coordinate.  This takes a coordinate in the map view
   * projection and returns the corresponding pixel.
   * @param {import("./coordinate.js").Coordinate} coordinate A map coordinate.
   * @return {import("./pixel.js").Pixel} A pixel position in the map viewport.
   */
  getPixelFromCoordinateInternal(e) {
    const n = this.frameState_;
    return n ? Je(
      n.coordinateToPixelTransform,
      e.slice(0, 2)
    ) : null;
  }
  /**
   * Get the map renderer.
   * @return {import("./renderer/Map.js").default|null} Renderer
   */
  getRenderer() {
    return this.renderer_;
  }
  /**
   * Get the size of this map.
   * @return {import("./size.js").Size|undefined} The size in pixels of the map in the DOM.
   * @observable
   * @api
   */
  getSize() {
    return (
      /** @type {import("./size.js").Size|undefined} */
      this.get(rt.SIZE)
    );
  }
  /**
   * Get the view associated with this map. A view manages properties such as
   * center and resolution.
   * @return {View} The view that controls this map.
   * @observable
   * @api
   */
  getView() {
    return (
      /** @type {View} */
      this.get(rt.VIEW)
    );
  }
  /**
   * Get the element that serves as the map viewport.
   * @return {HTMLElement} Viewport.
   * @api
   */
  getViewport() {
    return this.viewport_;
  }
  /**
   * Get the element that serves as the container for overlays.  Elements added to
   * this container will let mousedown and touchstart events through to the map,
   * so clicks and gestures on an overlay will trigger {@link module:ol/MapBrowserEvent~MapBrowserEvent}
   * events.
   * @return {!HTMLElement} The map's overlay container.
   */
  getOverlayContainer() {
    return this.overlayContainer_;
  }
  /**
   * Get the element that serves as a container for overlays that don't allow
   * event propagation. Elements added to this container won't let mousedown and
   * touchstart events through to the map, so clicks and gestures on an overlay
   * don't trigger any {@link module:ol/MapBrowserEvent~MapBrowserEvent}.
   * @return {!HTMLElement} The map's overlay container that stops events.
   */
  getOverlayContainerStopEvent() {
    return this.overlayContainerStopEvent_;
  }
  /**
   * @return {!Document} The document where the map is displayed.
   */
  getOwnerDocument() {
    const e = this.getTargetElement();
    return e ? e.ownerDocument : document;
  }
  /**
   * @param {import("./Tile.js").default} tile Tile.
   * @param {string} tileSourceKey Tile source key.
   * @param {import("./coordinate.js").Coordinate} tileCenter Tile center.
   * @param {number} tileResolution Tile resolution.
   * @return {number} Tile priority.
   */
  getTilePriority(e, n, i, a) {
    return k0(
      this.frameState_,
      e,
      n,
      i,
      a
    );
  }
  /**
   * @param {UIEvent} browserEvent Browser event.
   * @param {string} [type] Type.
   */
  handleBrowserEvent(e, n) {
    n = n || e.type;
    const i = new Qn(n, this, e);
    this.handleMapBrowserEvent(i);
  }
  /**
   * @param {MapBrowserEvent} mapBrowserEvent The event to handle.
   */
  handleMapBrowserEvent(e) {
    if (!this.frameState_)
      return;
    const n = (
      /** @type {PointerEvent} */
      e.originalEvent
    ), i = n.type;
    if (i === qs.POINTERDOWN || i === ge.WHEEL || i === ge.KEYDOWN) {
      const a = this.getOwnerDocument(), o = this.viewport_.getRootNode ? this.viewport_.getRootNode() : a, r = (
        /** @type {Node} */
        n.target
      );
      if (
        // Abort if the target is a child of the container for elements whose events are not meant
        // to be handled by map interactions.
        this.overlayContainerStopEvent_.contains(r) || // Abort if the event target is a child of the container that is no longer in the page.
        // It's possible for the target to no longer be in the page if it has been removed in an
        // event listener, this might happen in a Control that recreates it's content based on
        // user interaction either manually or via a render in something like https://reactjs.org/
        !(o === a ? a.documentElement : o).contains(r)
      )
        return;
    }
    if (e.frameState = this.frameState_, this.dispatchEvent(e) !== !1) {
      const a = this.getInteractions().getArray().slice();
      for (let o = a.length - 1; o >= 0; o--) {
        const r = a[o];
        if (r.getMap() !== this || !r.getActive() || !this.getTargetElement())
          continue;
        if (!r.handleEvent(e) || e.propagationStopped)
          break;
      }
    }
  }
  /**
   * @protected
   */
  handlePostRender() {
    const e = this.frameState_, n = this.tileQueue_;
    if (!n.isEmpty()) {
      let a = this.maxTilesLoading_, o = a;
      if (e) {
        const r = e.viewHints;
        if (r[lt.ANIMATING] || r[lt.INTERACTING]) {
          const s = Date.now() - e.time > 8;
          a = s ? 0 : 8, o = s ? 0 : 2;
        }
      }
      n.getTilesLoading() < a && (n.reprioritize(), n.loadMoreTiles(a, o));
    }
    e && this.renderer_ && !e.animate && (this.renderComplete_ === !0 ? (this.hasListener(Ot.RENDERCOMPLETE) && this.renderer_.dispatchRenderEvent(
      Ot.RENDERCOMPLETE,
      e
    ), this.loaded_ === !1 && (this.loaded_ = !0, this.dispatchEvent(
      new Hi(ei.LOADEND, this, e)
    ))) : this.loaded_ === !0 && (this.loaded_ = !1, this.dispatchEvent(
      new Hi(ei.LOADSTART, this, e)
    )));
    const i = this.postRenderFunctions_;
    for (let a = 0, o = i.length; a < o; ++a)
      i[a](this, e);
    i.length = 0;
  }
  /**
   * @private
   */
  handleSizeChanged_() {
    this.getView() && !this.getView().getAnimating() && this.getView().resolveConstraints(0), this.render();
  }
  /**
   * @private
   */
  handleTargetChanged_() {
    if (this.mapBrowserEventHandler_) {
      for (let i = 0, a = this.targetChangeHandlerKeys_.length; i < a; ++i)
        Ve(this.targetChangeHandlerKeys_[i]);
      this.targetChangeHandlerKeys_ = null, this.viewport_.removeEventListener(
        ge.CONTEXTMENU,
        this.boundHandleBrowserEvent_
      ), this.viewport_.removeEventListener(
        ge.WHEEL,
        this.boundHandleBrowserEvent_
      ), this.mapBrowserEventHandler_.dispose(), this.mapBrowserEventHandler_ = null, Ys(this.viewport_);
    }
    if (this.targetElement_) {
      this.resizeObserver_.unobserve(this.targetElement_);
      const i = this.targetElement_.getRootNode();
      i instanceof ShadowRoot && this.resizeObserver_.unobserve(i.host), this.setSize(void 0);
    }
    const e = this.getTarget(), n = typeof e == "string" ? document.getElementById(e) : e;
    if (this.targetElement_ = n, !n)
      this.renderer_ && (clearTimeout(this.postRenderTimeoutHandle_), this.postRenderTimeoutHandle_ = void 0, this.postRenderFunctions_.length = 0, this.renderer_.dispose(), this.renderer_ = null), this.animationDelayKey_ && (cancelAnimationFrame(this.animationDelayKey_), this.animationDelayKey_ = void 0);
    else {
      n.appendChild(this.viewport_), this.renderer_ || (this.renderer_ = new E0(this)), this.mapBrowserEventHandler_ = new z0(
        this,
        this.moveTolerance_
      );
      for (const o in Ge)
        this.mapBrowserEventHandler_.addEventListener(
          Ge[o],
          this.handleMapBrowserEvent.bind(this)
        );
      this.viewport_.addEventListener(
        ge.CONTEXTMENU,
        this.boundHandleBrowserEvent_,
        !1
      ), this.viewport_.addEventListener(
        ge.WHEEL,
        this.boundHandleBrowserEvent_,
        ug ? { passive: !1 } : !1
      );
      const i = this.keyboardEventTarget_ ? this.keyboardEventTarget_ : n;
      this.targetChangeHandlerKeys_ = [
        Me(
          i,
          ge.KEYDOWN,
          this.handleBrowserEvent,
          this
        ),
        Me(
          i,
          ge.KEYPRESS,
          this.handleBrowserEvent,
          this
        )
      ];
      const a = n.getRootNode();
      a instanceof ShadowRoot && this.resizeObserver_.observe(a.host), this.resizeObserver_.observe(n);
    }
    this.updateSize();
  }
  /**
   * @private
   */
  handleTileChange_() {
    this.render();
  }
  /**
   * @private
   */
  handleViewPropertyChanged_() {
    this.render();
  }
  /**
   * @private
   */
  handleViewChanged_() {
    this.viewPropertyListenerKey_ && (Ve(this.viewPropertyListenerKey_), this.viewPropertyListenerKey_ = null), this.viewChangeListenerKey_ && (Ve(this.viewChangeListenerKey_), this.viewChangeListenerKey_ = null);
    const e = this.getView();
    e && (this.updateViewportSize_(this.getSize()), this.viewPropertyListenerKey_ = Me(
      e,
      la.PROPERTYCHANGE,
      this.handleViewPropertyChanged_,
      this
    ), this.viewChangeListenerKey_ = Me(
      e,
      ge.CHANGE,
      this.handleViewPropertyChanged_,
      this
    ), e.resolveConstraints(0)), this.render();
  }
  /**
   * @private
   */
  handleLayerGroupChanged_() {
    this.layerGroupPropertyListenerKeys_ && (this.layerGroupPropertyListenerKeys_.forEach(Ve), this.layerGroupPropertyListenerKeys_ = null);
    const e = this.getLayerGroup();
    e && (this.handleLayerAdd_(new ti("addlayer", e)), this.layerGroupPropertyListenerKeys_ = [
      Me(e, la.PROPERTYCHANGE, this.render, this),
      Me(e, ge.CHANGE, this.render, this),
      Me(e, "addlayer", this.handleLayerAdd_, this),
      Me(e, "removelayer", this.handleLayerRemove_, this)
    ]), this.render();
  }
  /**
   * @return {boolean} Is rendered.
   */
  isRendered() {
    return !!this.frameState_;
  }
  /**
   * @private
   */
  animationDelay_() {
    this.animationDelayKey_ = void 0, this.renderFrame_(Date.now());
  }
  /**
   * Requests an immediate render in a synchronous manner.
   * @api
   */
  renderSync() {
    this.animationDelayKey_ && cancelAnimationFrame(this.animationDelayKey_), this.animationDelay_();
  }
  /**
   * Redraws all text after new fonts have loaded
   */
  redrawText() {
    const e = this.getLayerGroup().getLayerStatesArray();
    for (let n = 0, i = e.length; n < i; ++n) {
      const a = e[n].layer;
      a.hasRenderer() && a.getRenderer().handleFontsChanged();
    }
  }
  /**
   * Request a map rendering (at the next animation frame).
   * @api
   */
  render() {
    this.renderer_ && this.animationDelayKey_ === void 0 && (this.animationDelayKey_ = requestAnimationFrame(this.animationDelay_));
  }
  /**
   * Remove the given control from the map.
   * @param {import("./control/Control.js").default} control Control.
   * @return {import("./control/Control.js").default|undefined} The removed control (or undefined
   *     if the control was not found).
   * @api
   */
  removeControl(e) {
    return this.getControls().remove(e);
  }
  /**
   * Remove the given interaction from the map.
   * @param {import("./interaction/Interaction.js").default} interaction Interaction to remove.
   * @return {import("./interaction/Interaction.js").default|undefined} The removed interaction (or
   *     undefined if the interaction was not found).
   * @api
   */
  removeInteraction(e) {
    return this.getInteractions().remove(e);
  }
  /**
   * Removes the given layer from the map.
   * @param {import("./layer/Base.js").default} layer Layer.
   * @return {import("./layer/Base.js").default|undefined} The removed layer (or undefined if the
   *     layer was not found).
   * @api
   */
  removeLayer(e) {
    return this.getLayerGroup().getLayers().remove(e);
  }
  /**
   * @param {import("./layer/Group.js").GroupEvent} event The layer remove event.
   * @private
   */
  handleLayerRemove_(e) {
    Ig(e.layer);
  }
  /**
   * Remove the given overlay from the map.
   * @param {import("./Overlay.js").default} overlay Overlay.
   * @return {import("./Overlay.js").default|undefined} The removed overlay (or undefined
   *     if the overlay was not found).
   * @api
   */
  removeOverlay(e) {
    return this.getOverlays().remove(e);
  }
  /**
   * @param {number} time Time.
   * @private
   */
  renderFrame_(e) {
    const n = this.getSize(), i = this.getView(), a = this.frameState_;
    let o = null;
    if (n !== void 0 && ed(n) && i && i.isDef()) {
      const r = i.getHints(
        this.frameState_ ? this.frameState_.viewHints : void 0
      ), s = i.getState();
      if (o = {
        animate: !1,
        coordinateToPixelTransform: this.coordinateToPixelTransform_,
        declutter: null,
        extent: Ns(
          s.center,
          s.resolution,
          s.rotation,
          n
        ),
        index: this.frameIndex_++,
        layerIndex: 0,
        layerStatesArray: this.getLayerGroup().getLayerStatesArray(),
        pixelRatio: this.pixelRatio_,
        pixelToCoordinateTransform: this.pixelToCoordinateTransform_,
        postRenderFunctions: [],
        size: n,
        tileQueue: this.tileQueue_,
        time: e,
        usedTiles: {},
        viewState: s,
        viewHints: r,
        wantedTiles: {},
        mapId: we(this),
        renderTargets: {}
      }, s.nextCenter && s.nextResolution) {
        const l = isNaN(s.nextRotation) ? s.rotation : s.nextRotation;
        o.nextExtent = Ns(
          s.nextCenter,
          s.nextResolution,
          l,
          n
        );
      }
    }
    this.frameState_ = o, this.renderer_.renderFrame(o), o && (o.animate && this.render(), Array.prototype.push.apply(
      this.postRenderFunctions_,
      o.postRenderFunctions
    ), a && (!this.previousExtent_ || !kr(this.previousExtent_) && !Ka(o.extent, this.previousExtent_)) && (this.dispatchEvent(
      new Hi(ei.MOVESTART, this, a)
    ), this.previousExtent_ = Lr(this.previousExtent_)), this.previousExtent_ && !o.viewHints[lt.ANIMATING] && !o.viewHints[lt.INTERACTING] && !Ka(o.extent, this.previousExtent_) && (this.dispatchEvent(
      new Hi(ei.MOVEEND, this, o)
    ), Rf(o.extent, this.previousExtent_))), this.dispatchEvent(new Hi(ei.POSTRENDER, this, o)), this.renderComplete_ = this.hasListener(ei.LOADSTART) || this.hasListener(ei.LOADEND) || this.hasListener(Ot.RENDERCOMPLETE) ? !this.tileQueue_.getTilesLoading() && !this.tileQueue_.getCount() && !this.getLoadingOrNotReady() : void 0, this.postRenderTimeoutHandle_ || (this.postRenderTimeoutHandle_ = setTimeout(() => {
      this.postRenderTimeoutHandle_ = void 0, this.handlePostRender();
    }, 0));
  }
  /**
   * Sets the layergroup of this map.
   * @param {LayerGroup} layerGroup A layer group containing the layers in this map.
   * @observable
   * @api
   */
  setLayerGroup(e) {
    const n = this.getLayerGroup();
    n && this.handleLayerRemove_(new ti("removelayer", n)), this.set(rt.LAYERGROUP, e);
  }
  /**
   * Set the size of this map.
   * @param {import("./size.js").Size|undefined} size The size in pixels of the map in the DOM.
   * @observable
   * @api
   */
  setSize(e) {
    this.set(rt.SIZE, e);
  }
  /**
   * Set the target element to render this map into.
   * @param {HTMLElement|string} [target] The Element or id of the Element
   *     that the map is rendered in.
   * @observable
   * @api
   */
  setTarget(e) {
    this.set(rt.TARGET, e);
  }
  /**
   * Set the view for this map.
   * @param {View|Promise<import("./View.js").ViewOptions>} view The view that controls this map.
   * It is also possible to pass a promise that resolves to options for constructing a view.  This
   * alternative allows view properties to be resolved by sources or other components that load
   * view-related metadata.
   * @observable
   * @api
   */
  setView(e) {
    if (!e || e instanceof sn) {
      this.set(rt.VIEW, e);
      return;
    }
    this.set(rt.VIEW, new sn());
    const n = this;
    e.then(function(i) {
      n.setView(new sn(i));
    });
  }
  /**
   * Force a recalculation of the map viewport size.  This should be called when
   * third-party code changes the size of the map viewport.
   * @api
   */
  updateSize() {
    const e = this.getTargetElement();
    let n;
    if (e) {
      const a = getComputedStyle(e), o = e.offsetWidth - parseFloat(a.borderLeftWidth) - parseFloat(a.paddingLeft) - parseFloat(a.paddingRight) - parseFloat(a.borderRightWidth), r = e.offsetHeight - parseFloat(a.borderTopWidth) - parseFloat(a.paddingTop) - parseFloat(a.paddingBottom) - parseFloat(a.borderBottomWidth);
      !isNaN(o) && !isNaN(r) && (n = [o, r], !ed(n) && (e.offsetWidth || e.offsetHeight || e.getClientRects().length) && Df(
        "No map visible because the map container's width or height are 0."
      ));
    }
    const i = this.getSize();
    n && (!i || !vi(n, i)) && (this.setSize(n), this.updateViewportSize_(n));
  }
  /**
   * Recomputes the viewport size and save it on the view object (if any)
   * @param {import("./size.js").Size|undefined} size The size.
   * @private
   */
  updateViewportSize_(e) {
    const n = this.getView();
    n && n.setViewportSize(e);
  }
};
function wb(t) {
  let e = null;
  t.keyboardEventTarget !== void 0 && (e = typeof t.keyboardEventTarget == "string" ? document.getElementById(t.keyboardEventTarget) : t.keyboardEventTarget);
  const n = {}, i = t.layers && typeof /** @type {?} */
  t.layers.getLayers == "function" ? (
    /** @type {LayerGroup} */
    t.layers
  ) : new Yr({
    layers: (
      /** @type {Collection<import("./layer/Base.js").default>|Array<import("./layer/Base.js").default>} */
      t.layers
    )
  });
  n[rt.LAYERGROUP] = i, n[rt.TARGET] = t.target, n[rt.VIEW] = t.view instanceof sn ? t.view : new sn();
  let a;
  t.controls !== void 0 && (Array.isArray(t.controls) ? a = new cn(t.controls.slice()) : (Se(
    typeof /** @type {?} */
    t.controls.getArray == "function",
    "Expected `controls` to be an array or an `ol/Collection.js`"
  ), a = t.controls));
  let o;
  t.interactions !== void 0 && (Array.isArray(t.interactions) ? o = new cn(t.interactions.slice()) : (Se(
    typeof /** @type {?} */
    t.interactions.getArray == "function",
    "Expected `interactions` to be an array or an `ol/Collection.js`"
  ), o = t.interactions));
  let r;
  return t.overlays !== void 0 ? Array.isArray(t.overlays) ? r = new cn(t.overlays.slice()) : (Se(
    typeof /** @type {?} */
    t.overlays.getArray == "function",
    "Expected `overlays` to be an array or an `ol/Collection.js`"
  ), r = t.overlays) : r = new cn(), {
    controls: a,
    interactions: o,
    keyboardEventTarget: e,
    overlays: r,
    values: n
  };
}
const Eb = Tb;
class Ab extends Ir {
  /**
   * @param {import("./tilecoord.js").TileCoord} tileCoord Tile coordinate.
   * @param {import("./TileState.js").default} state State.
   * @param {Options} [options] Tile options.
   */
  constructor(e, n, i) {
    super(), i = i || {}, this.tileCoord = e, this.state = n, this.interimTile = null, this.key = "", this.transition_ = i.transition === void 0 ? 250 : i.transition, this.transitionStarts_ = {}, this.interpolate = !!i.interpolate;
  }
  /**
   * @protected
   */
  changed() {
    this.dispatchEvent(ge.CHANGE);
  }
  /**
   * Called by the tile cache when the tile is removed from the cache due to expiry
   */
  release() {
    this.state === re.ERROR && this.setState(re.EMPTY);
  }
  /**
   * @return {string} Key.
   */
  getKey() {
    return this.key + "/" + this.tileCoord;
  }
  /**
   * Get the interim tile most suitable for rendering using the chain of interim
   * tiles. This corresponds to the  most recent tile that has been loaded, if no
   * such tile exists, the original tile is returned.
   * @return {!Tile} Best tile for rendering.
   */
  getInterimTile() {
    let e = this.interimTile;
    if (!e)
      return this;
    do {
      if (e.getState() == re.LOADED)
        return this.transition_ = 0, e;
      e = e.interimTile;
    } while (e);
    return this;
  }
  /**
   * Goes through the chain of interim tiles and discards sections of the chain
   * that are no longer relevant.
   */
  refreshInterimChain() {
    let e = this.interimTile;
    if (!e)
      return;
    let n = this;
    do {
      if (e.getState() == re.LOADED) {
        e.interimTile = null;
        break;
      }
      e.getState() == re.LOADING ? n = e : e.getState() == re.IDLE ? n.interimTile = e.interimTile : n = e, e = n.interimTile;
    } while (e);
  }
  /**
   * Get the tile coordinate for this tile.
   * @return {import("./tilecoord.js").TileCoord} The tile coordinate.
   * @api
   */
  getTileCoord() {
    return this.tileCoord;
  }
  /**
   * @return {import("./TileState.js").default} State.
   */
  getState() {
    return this.state;
  }
  /**
   * Sets the state of this tile. If you write your own {@link module:ol/Tile~LoadFunction tileLoadFunction} ,
   * it is important to set the state correctly to {@link module:ol/TileState~ERROR}
   * when the tile cannot be loaded. Otherwise the tile cannot be removed from
   * the tile queue and will block other requests.
   * @param {import("./TileState.js").default} state State.
   * @api
   */
  setState(e) {
    if (this.state !== re.ERROR && this.state > e)
      throw new Error("Tile load sequence violation");
    this.state = e, this.changed();
  }
  /**
   * Load the image or retry if loading previously failed.
   * Loading is taken care of by the tile queue, and calling this method is
   * only needed for preloading or for reloading in case of an error.
   * @abstract
   * @api
   */
  load() {
    be();
  }
  /**
   * Get the alpha value for rendering.
   * @param {string} id An id for the renderer.
   * @param {number} time The render frame time.
   * @return {number} A number between 0 and 1.
   */
  getAlpha(e, n) {
    if (!this.transition_)
      return 1;
    let i = this.transitionStarts_[e];
    if (!i)
      i = n, this.transitionStarts_[e] = i;
    else if (i === -1)
      return 1;
    const a = n - i + 1e3 / 60;
    return a >= this.transition_ ? 1 : Wf(a / this.transition_);
  }
  /**
   * Determine if a tile is in an alpha transition.  A tile is considered in
   * transition if tile.getAlpha() has not yet been called or has been called
   * and returned 1.
   * @param {string} id An id for the renderer.
   * @return {boolean} The tile is in transition.
   */
  inTransition(e) {
    return this.transition_ ? this.transitionStarts_[e] !== -1 : !1;
  }
  /**
   * Mark a transition as complete.
   * @param {string} id An id for the renderer.
   */
  endTransition(e) {
    this.transition_ && (this.transitionStarts_[e] = -1);
  }
}
const Lg = Ab;
class Rb extends Lg {
  /**
   * @param {import("./tilecoord.js").TileCoord} tileCoord Tile coordinate.
   * @param {import("./TileState.js").default} state State.
   * @param {string} src Image source URI.
   * @param {?string} crossOrigin Cross origin.
   * @param {import("./Tile.js").LoadFunction} tileLoadFunction Tile load function.
   * @param {import("./Tile.js").Options} [options] Tile options.
   */
  constructor(e, n, i, a, o, r) {
    super(e, n, r), this.crossOrigin_ = a, this.src_ = i, this.key = i, this.image_ = new Image(), a !== null && (this.image_.crossOrigin = a), this.unlisten_ = null, this.tileLoadFunction_ = o;
  }
  /**
   * Get the HTML image element for this tile (may be a Canvas, Image, or Video).
   * @return {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} Image.
   * @api
   */
  getImage() {
    return this.image_;
  }
  /**
   * Sets an HTML image element for this tile (may be a Canvas or preloaded Image).
   * @param {HTMLCanvasElement|HTMLImageElement} element Element.
   */
  setImage(e) {
    this.image_ = e, this.state = re.LOADED, this.unlistenImage_(), this.changed();
  }
  /**
   * Tracks loading or read errors.
   *
   * @private
   */
  handleImageError_() {
    this.state = re.ERROR, this.unlistenImage_(), this.image_ = Ib(), this.changed();
  }
  /**
   * Tracks successful image load.
   *
   * @private
   */
  handleImageLoad_() {
    const e = (
      /** @type {HTMLImageElement} */
      this.image_
    );
    e.naturalWidth && e.naturalHeight ? this.state = re.LOADED : this.state = re.EMPTY, this.unlistenImage_(), this.changed();
  }
  /**
   * Load the image or retry if loading previously failed.
   * Loading is taken care of by the tile queue, and calling this method is
   * only needed for preloading or for reloading in case of an error.
   *
   * To retry loading tiles on failed requests, use a custom `tileLoadFunction`
   * that checks for error status codes and reloads only when the status code is
   * 408, 429, 500, 502, 503 and 504, and only when not too many retries have been
   * made already:
   *
   * ```js
   * const retryCodes = [408, 429, 500, 502, 503, 504];
   * const retries = {};
   * source.setTileLoadFunction((tile, src) => {
   *   const image = tile.getImage();
   *   fetch(src)
   *     .then((response) => {
   *       if (retryCodes.includes(response.status)) {
   *         retries[src] = (retries[src] || 0) + 1;
   *         if (retries[src] <= 3) {
   *           setTimeout(() => tile.load(), retries[src] * 1000);
   *         }
   *         return Promise.reject();
   *       }
   *       return response.blob();
   *     })
   *     .then((blob) => {
   *       const imageUrl = URL.createObjectURL(blob);
   *       image.src = imageUrl;
   *       setTimeout(() => URL.revokeObjectURL(imageUrl), 5000);
   *     })
   *     .catch(() => tile.setState(3)); // error
   * });
   * ```
   *
   * @api
   */
  load() {
    this.state == re.ERROR && (this.state = re.IDLE, this.image_ = new Image(), this.crossOrigin_ !== null && (this.image_.crossOrigin = this.crossOrigin_)), this.state == re.IDLE && (this.state = re.LOADING, this.changed(), this.tileLoadFunction_(this, this.src_), this.unlisten_ = pS(
      this.image_,
      this.handleImageLoad_.bind(this),
      this.handleImageError_.bind(this)
    ));
  }
  /**
   * Discards event handlers which listen for load completion or errors.
   *
   * @private
   */
  unlistenImage_() {
    this.unlisten_ && (this.unlisten_(), this.unlisten_ = null);
  }
}
function Ib() {
  const t = tt(1, 1);
  return t.fillStyle = "rgba(0,0,0,0)", t.fillRect(0, 0, 1, 1), t.canvas;
}
const Vg = Rb, zb = 0.5, Lb = 10, Cd = 0.25;
class Vb {
  /**
   * @param {import("../proj/Projection.js").default} sourceProj Source projection.
   * @param {import("../proj/Projection.js").default} targetProj Target projection.
   * @param {import("../extent.js").Extent} targetExtent Target extent to triangulate.
   * @param {import("../extent.js").Extent} maxSourceExtent Maximal source extent that can be used.
   * @param {number} errorThreshold Acceptable error (in source units).
   * @param {?number} destinationResolution The (optional) resolution of the destination.
   */
  constructor(e, n, i, a, o, r) {
    this.sourceProj_ = e, this.targetProj_ = n;
    let s = {};
    const l = ur(this.targetProj_, this.sourceProj_);
    this.transformInv_ = function(p) {
      const M = p[0] + "/" + p[1];
      return s[M] || (s[M] = l(p)), s[M];
    }, this.maxSourceExtent_ = a, this.errorThresholdSquared_ = o * o, this.triangles_ = [], this.wrapsXInSource_ = !1, this.canWrapXInSource_ = this.sourceProj_.canWrapX() && !!a && !!this.sourceProj_.getExtent() && Re(a) >= Re(this.sourceProj_.getExtent()), this.sourceWorldWidth_ = this.sourceProj_.getExtent() ? Re(this.sourceProj_.getExtent()) : null, this.targetWorldWidth_ = this.targetProj_.getExtent() ? Re(this.targetProj_.getExtent()) : null;
    const c = Vi(i), u = Fr(i), d = Br(i), h = Vr(i), f = this.transformInv_(c), g = this.transformInv_(u), m = this.transformInv_(d), v = this.transformInv_(h), y = Lb + (r ? Math.max(
      0,
      Math.ceil(
        Math.log2(
          Gs(i) / (r * r * 256 * 256)
        )
      )
    ) : 0);
    if (this.addQuad_(
      c,
      u,
      d,
      h,
      f,
      g,
      m,
      v,
      y
    ), this.wrapsXInSource_) {
      let p = 1 / 0;
      this.triangles_.forEach(function(M, S, b) {
        p = Math.min(
          p,
          M.source[0][0],
          M.source[1][0],
          M.source[2][0]
        );
      }), this.triangles_.forEach((M) => {
        if (Math.max(
          M.source[0][0],
          M.source[1][0],
          M.source[2][0]
        ) - p > this.sourceWorldWidth_ / 2) {
          const S = [
            [M.source[0][0], M.source[0][1]],
            [M.source[1][0], M.source[1][1]],
            [M.source[2][0], M.source[2][1]]
          ];
          S[0][0] - p > this.sourceWorldWidth_ / 2 && (S[0][0] -= this.sourceWorldWidth_), S[1][0] - p > this.sourceWorldWidth_ / 2 && (S[1][0] -= this.sourceWorldWidth_), S[2][0] - p > this.sourceWorldWidth_ / 2 && (S[2][0] -= this.sourceWorldWidth_);
          const b = Math.min(
            S[0][0],
            S[1][0],
            S[2][0]
          );
          Math.max(
            S[0][0],
            S[1][0],
            S[2][0]
          ) - b < this.sourceWorldWidth_ / 2 && (M.source = S);
        }
      });
    }
    s = {};
  }
  /**
   * Adds triangle to the triangulation.
   * @param {import("../coordinate.js").Coordinate} a The target a coordinate.
   * @param {import("../coordinate.js").Coordinate} b The target b coordinate.
   * @param {import("../coordinate.js").Coordinate} c The target c coordinate.
   * @param {import("../coordinate.js").Coordinate} aSrc The source a coordinate.
   * @param {import("../coordinate.js").Coordinate} bSrc The source b coordinate.
   * @param {import("../coordinate.js").Coordinate} cSrc The source c coordinate.
   * @private
   */
  addTriangle_(e, n, i, a, o, r) {
    this.triangles_.push({
      source: [a, o, r],
      target: [e, n, i]
    });
  }
  /**
   * Adds quad (points in clock-wise order) to the triangulation
   * (and reprojects the vertices) if valid.
   * Performs quad subdivision if needed to increase precision.
   *
   * @param {import("../coordinate.js").Coordinate} a The target a coordinate.
   * @param {import("../coordinate.js").Coordinate} b The target b coordinate.
   * @param {import("../coordinate.js").Coordinate} c The target c coordinate.
   * @param {import("../coordinate.js").Coordinate} d The target d coordinate.
   * @param {import("../coordinate.js").Coordinate} aSrc The source a coordinate.
   * @param {import("../coordinate.js").Coordinate} bSrc The source b coordinate.
   * @param {import("../coordinate.js").Coordinate} cSrc The source c coordinate.
   * @param {import("../coordinate.js").Coordinate} dSrc The source d coordinate.
   * @param {number} maxSubdivision Maximal allowed subdivision of the quad.
   * @private
   */
  addQuad_(e, n, i, a, o, r, s, l, c) {
    const u = ku([o, r, s, l]), d = this.sourceWorldWidth_ ? Re(u) / this.sourceWorldWidth_ : null, h = (
      /** @type {number} */
      this.sourceWorldWidth_
    ), f = this.sourceProj_.canWrapX() && d > 0.5 && d < 1;
    let g = !1;
    if (c > 0) {
      if (this.targetProj_.isGlobal() && this.targetWorldWidth_) {
        const v = ku([e, n, i, a]);
        g = Re(v) / this.targetWorldWidth_ > Cd || g;
      }
      !f && this.sourceProj_.isGlobal() && d && (g = d > Cd || g);
    }
    if (!g && this.maxSourceExtent_ && isFinite(u[0]) && isFinite(u[1]) && isFinite(u[2]) && isFinite(u[3]) && !Mt(u, this.maxSourceExtent_))
      return;
    let m = 0;
    if (!g && (!isFinite(o[0]) || !isFinite(o[1]) || !isFinite(r[0]) || !isFinite(r[1]) || !isFinite(s[0]) || !isFinite(s[1]) || !isFinite(l[0]) || !isFinite(l[1]))) {
      if (c > 0)
        g = !0;
      else if (m = (!isFinite(o[0]) || !isFinite(o[1]) ? 8 : 0) + (!isFinite(r[0]) || !isFinite(r[1]) ? 4 : 0) + (!isFinite(s[0]) || !isFinite(s[1]) ? 2 : 0) + (!isFinite(l[0]) || !isFinite(l[1]) ? 1 : 0), m != 1 && m != 2 && m != 4 && m != 8)
        return;
    }
    if (c > 0) {
      if (!g) {
        const v = [(e[0] + i[0]) / 2, (e[1] + i[1]) / 2], y = this.transformInv_(v);
        let p;
        f ? p = (ia(o[0], h) + ia(s[0], h)) / 2 - ia(y[0], h) : p = (o[0] + s[0]) / 2 - y[0];
        const M = (o[1] + s[1]) / 2 - y[1];
        g = p * p + M * M > this.errorThresholdSquared_;
      }
      if (g) {
        if (Math.abs(e[0] - i[0]) <= Math.abs(e[1] - i[1])) {
          const v = [(n[0] + i[0]) / 2, (n[1] + i[1]) / 2], y = this.transformInv_(v), p = [(a[0] + e[0]) / 2, (a[1] + e[1]) / 2], M = this.transformInv_(p);
          this.addQuad_(
            e,
            n,
            v,
            p,
            o,
            r,
            y,
            M,
            c - 1
          ), this.addQuad_(
            p,
            v,
            i,
            a,
            M,
            y,
            s,
            l,
            c - 1
          );
        } else {
          const v = [(e[0] + n[0]) / 2, (e[1] + n[1]) / 2], y = this.transformInv_(v), p = [(i[0] + a[0]) / 2, (i[1] + a[1]) / 2], M = this.transformInv_(p);
          this.addQuad_(
            e,
            v,
            p,
            a,
            o,
            y,
            M,
            l,
            c - 1
          ), this.addQuad_(
            v,
            n,
            i,
            p,
            y,
            r,
            s,
            M,
            c - 1
          );
        }
        return;
      }
    }
    if (f) {
      if (!this.canWrapXInSource_)
        return;
      this.wrapsXInSource_ = !0;
    }
    m & 11 || this.addTriangle_(e, i, a, o, s, l), m & 14 || this.addTriangle_(e, i, n, o, s, r), m && (m & 13 || this.addTriangle_(n, a, e, r, l, o), m & 7 || this.addTriangle_(n, a, i, r, l, s));
  }
  /**
   * Calculates extent of the `source` coordinates from all the triangles.
   *
   * @return {import("../extent.js").Extent} Calculated extent.
   */
  calculateSourceExtent() {
    const e = Gt();
    return this.triangles_.forEach(function(n, i, a) {
      const o = n.source;
      Da(e, o[0]), Da(e, o[1]), Da(e, o[2]);
    }), e;
  }
  /**
   * @return {Array<Triangle>} Array of the calculated triangles.
   */
  getTriangles() {
    return this.triangles_;
  }
}
const Bb = Vb;
let Ss;
const oa = [];
function yd(t, e, n, i, a) {
  t.beginPath(), t.moveTo(0, 0), t.lineTo(e, n), t.lineTo(i, a), t.closePath(), t.save(), t.clip(), t.fillRect(0, 0, Math.max(e, i) + 1, Math.max(n, a)), t.restore();
}
function bs(t, e) {
  return Math.abs(t[e * 4] - 210) > 2 || Math.abs(t[e * 4 + 3] - 0.75 * 255) > 2;
}
function Fb() {
  if (Ss === void 0) {
    const t = tt(6, 6, oa);
    t.globalCompositeOperation = "lighter", t.fillStyle = "rgba(210, 0, 0, 0.75)", yd(t, 4, 5, 4, 0), yd(t, 4, 5, 0, 5);
    const e = t.getImageData(0, 0, 3, 3).data;
    Ss = bs(e, 0) || bs(e, 4) || bs(e, 8), Gr(t), oa.push(t.canvas);
  }
  return Ss;
}
function pd(t, e, n, i) {
  const a = $f(n, e, t);
  let o = Du(
    e,
    i,
    n
  );
  const r = e.getMetersPerUnit();
  r !== void 0 && (o *= r);
  const s = t.getMetersPerUnit();
  s !== void 0 && (o /= s);
  const l = t.getExtent();
  if (!l || da(l, a)) {
    const c = Du(t, o, a) / o;
    isFinite(c) && c > 0 && (o /= c);
  }
  return o;
}
function kb(t, e, n, i) {
  const a = zi(n);
  let o = pd(
    t,
    e,
    a,
    i
  );
  return (!isFinite(o) || o <= 0) && Bf(n, function(r) {
    return o = pd(
      t,
      e,
      r,
      i
    ), isFinite(o) && o > 0;
  }), o;
}
function Ob(t, e, n, i, a, o, r, s, l, c, u, d, h, f) {
  const g = tt(
    Math.round(n * t),
    Math.round(n * e),
    oa
  );
  if (d || (g.imageSmoothingEnabled = !1), l.length === 0)
    return g.canvas;
  g.scale(n, n);
  function m(b) {
    return Math.round(b * n) / n;
  }
  g.globalCompositeOperation = "lighter";
  const v = Gt();
  l.forEach(function(b, T, _) {
    e_(v, b.extent);
  });
  let y;
  const p = n / i, M = (d ? 1 : 1 + Math.pow(2, -24)) / p;
  if (!h || l.length !== 1 || c !== 0) {
    if (y = tt(
      Math.round(Re(v) * p),
      Math.round(ut(v) * p),
      oa
    ), d || (y.imageSmoothingEnabled = !1), a && f) {
      const b = (a[0] - v[0]) * p, T = -(a[3] - v[3]) * p, _ = Re(a) * p, P = ut(a) * p;
      y.rect(b, T, _, P), y.clip();
    }
    l.forEach(function(b, T, _) {
      const P = (b.extent[0] - v[0]) * p, w = -(b.extent[3] - v[3]) * p, I = Re(b.extent) * p, z = ut(b.extent) * p;
      b.image.width > 0 && b.image.height > 0 && y.drawImage(
        b.image,
        c,
        c,
        b.image.width - 2 * c,
        b.image.height - 2 * c,
        d ? P : Math.round(P),
        d ? w : Math.round(w),
        d ? I : Math.round(P + I) - Math.round(P),
        d ? z : Math.round(w + z) - Math.round(w)
      );
    });
  }
  const S = Vi(r);
  return s.getTriangles().forEach(function(b, T, _) {
    const P = b.source, w = b.target;
    let I = P[0][0], z = P[0][1], A = P[1][0], R = P[1][1], V = P[2][0], N = P[2][1];
    const G = m((w[0][0] - S[0]) / o), X = m(
      -(w[0][1] - S[1]) / o
    ), E = m((w[1][0] - S[0]) / o), B = m(
      -(w[1][1] - S[1]) / o
    ), D = m((w[2][0] - S[0]) / o), k = m(
      -(w[2][1] - S[1]) / o
    ), W = I, U = z;
    I = 0, z = 0, A -= W, R -= U, V -= W, N -= U;
    const L = [
      [A, R, 0, 0, E - G],
      [V, N, 0, 0, D - G],
      [0, 0, A, R, B - X],
      [0, 0, V, N, k - X]
    ], ee = Np(L);
    if (!ee)
      return;
    if (g.save(), g.beginPath(), Fb() || !d) {
      g.moveTo(E, B);
      const ae = 4, j = G - E, le = X - B;
      for (let pe = 0; pe < ae; pe++)
        g.lineTo(
          E + m((pe + 1) * j / ae),
          B + m(pe * le / (ae - 1))
        ), pe != ae - 1 && g.lineTo(
          E + m((pe + 1) * j / ae),
          B + m((pe + 1) * le / (ae - 1))
        );
      g.lineTo(D, k);
    } else
      g.moveTo(E, B), g.lineTo(G, X), g.lineTo(D, k);
    g.clip(), g.transform(
      ee[0],
      ee[2],
      ee[1],
      ee[3],
      G,
      X
    ), g.translate(
      v[0] - W,
      v[3] - U
    );
    let J;
    if (y)
      J = y.canvas, g.scale(M, -M);
    else {
      const ae = l[0], j = ae.extent;
      J = ae.image, g.scale(
        Re(j) / J.width,
        -ut(j) / J.height
      );
    }
    g.drawImage(J, 0, 0), g.restore();
  }), y && (Gr(y), oa.push(y.canvas)), u && (g.save(), g.globalCompositeOperation = "source-over", g.strokeStyle = "black", g.lineWidth = 1, s.getTriangles().forEach(function(b, T, _) {
    const P = b.target, w = (P[0][0] - S[0]) / o, I = -(P[0][1] - S[1]) / o, z = (P[1][0] - S[0]) / o, A = -(P[1][1] - S[1]) / o, R = (P[2][0] - S[0]) / o, V = -(P[2][1] - S[1]) / o;
    g.beginPath(), g.moveTo(z, A), g.lineTo(w, I), g.lineTo(R, V), g.closePath(), g.stroke();
  }), g.restore()), g.canvas;
}
class Db extends Lg {
  /**
   * @param {import("../proj/Projection.js").default} sourceProj Source projection.
   * @param {import("../tilegrid/TileGrid.js").default} sourceTileGrid Source tile grid.
   * @param {import("../proj/Projection.js").default} targetProj Target projection.
   * @param {import("../tilegrid/TileGrid.js").default} targetTileGrid Target tile grid.
   * @param {import("../tilecoord.js").TileCoord} tileCoord Coordinate of the tile.
   * @param {import("../tilecoord.js").TileCoord} wrappedTileCoord Coordinate of the tile wrapped in X.
   * @param {number} pixelRatio Pixel ratio.
   * @param {number} gutter Gutter of the source tiles.
   * @param {FunctionType} getTileFunction
   *     Function returning source tiles (z, x, y, pixelRatio).
   * @param {number} [errorThreshold] Acceptable reprojection error (in px).
   * @param {boolean} [renderEdges] Render reprojection edges.
   * @param {import("../Tile.js").Options} [options] Tile options.
   */
  constructor(e, n, i, a, o, r, s, l, c, u, d, h) {
    super(o, re.IDLE, h), this.renderEdges_ = d !== void 0 ? d : !1, this.pixelRatio_ = s, this.gutter_ = l, this.canvas_ = null, this.sourceTileGrid_ = n, this.targetTileGrid_ = a, this.wrappedTileCoord_ = r || o, this.sourceTiles_ = [], this.sourcesListenerKeys_ = null, this.sourceZ_ = 0;
    const f = a.getTileCoordExtent(
      this.wrappedTileCoord_
    ), g = this.targetTileGrid_.getExtent();
    let m = this.sourceTileGrid_.getExtent();
    const v = g ? Ga(f, g) : f;
    if (Gs(v) === 0) {
      this.state = re.EMPTY;
      return;
    }
    const y = e.getExtent();
    y && (m ? m = Ga(m, y) : m = y);
    const p = a.getResolution(
      this.wrappedTileCoord_[0]
    ), M = kb(
      e,
      i,
      v,
      p
    );
    if (!isFinite(M) || M <= 0) {
      this.state = re.EMPTY;
      return;
    }
    const S = u !== void 0 ? u : zb;
    if (this.triangulation_ = new Bb(
      e,
      i,
      v,
      m,
      M * S,
      p
    ), this.triangulation_.getTriangles().length === 0) {
      this.state = re.EMPTY;
      return;
    }
    this.sourceZ_ = n.getZForResolution(M);
    let b = this.triangulation_.calculateSourceExtent();
    if (m && (e.canWrapX() ? (b[1] = Ye(
      b[1],
      m[1],
      m[3]
    ), b[3] = Ye(
      b[3],
      m[1],
      m[3]
    )) : b = Ga(b, m)), !Gs(b))
      this.state = re.EMPTY;
    else {
      const T = n.getTileRangeForExtentAndZ(
        b,
        this.sourceZ_
      );
      for (let _ = T.minX; _ <= T.maxX; _++)
        for (let P = T.minY; P <= T.maxY; P++) {
          const w = c(this.sourceZ_, _, P, s);
          w && this.sourceTiles_.push(w);
        }
      this.sourceTiles_.length === 0 && (this.state = re.EMPTY);
    }
  }
  /**
   * Get the HTML Canvas element for this tile.
   * @return {HTMLCanvasElement} Canvas.
   */
  getImage() {
    return this.canvas_;
  }
  /**
   * @private
   */
  reproject_() {
    const e = [];
    if (this.sourceTiles_.forEach((n) => {
      n && n.getState() == re.LOADED && e.push({
        extent: this.sourceTileGrid_.getTileCoordExtent(n.tileCoord),
        image: n.getImage()
      });
    }), this.sourceTiles_.length = 0, e.length === 0)
      this.state = re.ERROR;
    else {
      const n = this.wrappedTileCoord_[0], i = this.targetTileGrid_.getTileSize(n), a = typeof i == "number" ? i : i[0], o = typeof i == "number" ? i : i[1], r = this.targetTileGrid_.getResolution(n), s = this.sourceTileGrid_.getResolution(
        this.sourceZ_
      ), l = this.targetTileGrid_.getTileCoordExtent(
        this.wrappedTileCoord_
      );
      this.canvas_ = Ob(
        a,
        o,
        this.pixelRatio_,
        s,
        this.sourceTileGrid_.getExtent(),
        r,
        l,
        this.triangulation_,
        e,
        this.gutter_,
        this.renderEdges_,
        this.interpolate
      ), this.state = re.LOADED;
    }
    this.changed();
  }
  /**
   * Load not yet loaded URI.
   */
  load() {
    if (this.state == re.IDLE) {
      this.state = re.LOADING, this.changed();
      let e = 0;
      this.sourcesListenerKeys_ = [], this.sourceTiles_.forEach((n) => {
        const i = n.getState();
        if (i == re.IDLE || i == re.LOADING) {
          e++;
          const a = Me(
            n,
            ge.CHANGE,
            function(o) {
              const r = n.getState();
              (r == re.LOADED || r == re.ERROR || r == re.EMPTY) && (Ve(a), e--, e === 0 && (this.unlistenSources_(), this.reproject_()));
            },
            this
          );
          this.sourcesListenerKeys_.push(a);
        }
      }), e === 0 ? setTimeout(this.reproject_.bind(this), 0) : this.sourceTiles_.forEach(function(n, i, a) {
        n.getState() == re.IDLE && n.load();
      });
    }
  }
  /**
   * @private
   */
  unlistenSources_() {
    this.sourcesListenerKeys_.forEach(Ve), this.sourcesListenerKeys_ = null;
  }
  /**
   * Remove from the cache due to expiry
   */
  release() {
    this.canvas_ && (Gr(this.canvas_.getContext("2d")), oa.push(this.canvas_), this.canvas_ = null), super.release();
  }
}
const Qs = Db;
class Gb {
  /**
   * @param {number} [highWaterMark] High water mark.
   */
  constructor(e) {
    this.highWaterMark = e !== void 0 ? e : 2048, this.count_ = 0, this.entries_ = {}, this.oldest_ = null, this.newest_ = null;
  }
  /**
   * @return {boolean} Can expire cache.
   */
  canExpireCache() {
    return this.highWaterMark > 0 && this.getCount() > this.highWaterMark;
  }
  /**
   * Expire the cache.
   * @param {!Object<string, boolean>} [keep] Keys to keep. To be implemented by subclasses.
   */
  expireCache(e) {
    for (; this.canExpireCache(); )
      this.pop();
  }
  /**
   * FIXME empty description for jsdoc
   */
  clear() {
    this.count_ = 0, this.entries_ = {}, this.oldest_ = null, this.newest_ = null;
  }
  /**
   * @param {string} key Key.
   * @return {boolean} Contains key.
   */
  containsKey(e) {
    return this.entries_.hasOwnProperty(e);
  }
  /**
   * @param {function(T, string, LRUCache<T>): ?} f The function
   *     to call for every entry from the oldest to the newer. This function takes
   *     3 arguments (the entry value, the entry key and the LRUCache object).
   *     The return value is ignored.
   */
  forEach(e) {
    let n = this.oldest_;
    for (; n; )
      e(n.value_, n.key_, this), n = n.newer;
  }
  /**
   * @param {string} key Key.
   * @param {*} [options] Options (reserved for subclasses).
   * @return {T} Value.
   */
  get(e, n) {
    const i = this.entries_[e];
    return Se(
      i !== void 0,
      "Tried to get a value for a key that does not exist in the cache"
    ), i === this.newest_ || (i === this.oldest_ ? (this.oldest_ = /** @type {Entry} */
    this.oldest_.newer, this.oldest_.older = null) : (i.newer.older = i.older, i.older.newer = i.newer), i.newer = null, i.older = this.newest_, this.newest_.newer = i, this.newest_ = i), i.value_;
  }
  /**
   * Remove an entry from the cache.
   * @param {string} key The entry key.
   * @return {T} The removed entry.
   */
  remove(e) {
    const n = this.entries_[e];
    return Se(
      n !== void 0,
      "Tried to get a value for a key that does not exist in the cache"
    ), n === this.newest_ ? (this.newest_ = /** @type {Entry} */
    n.older, this.newest_ && (this.newest_.newer = null)) : n === this.oldest_ ? (this.oldest_ = /** @type {Entry} */
    n.newer, this.oldest_ && (this.oldest_.older = null)) : (n.newer.older = n.older, n.older.newer = n.newer), delete this.entries_[e], --this.count_, n.value_;
  }
  /**
   * @return {number} Count.
   */
  getCount() {
    return this.count_;
  }
  /**
   * @return {Array<string>} Keys.
   */
  getKeys() {
    const e = new Array(this.count_);
    let n = 0, i;
    for (i = this.newest_; i; i = i.older)
      e[n++] = i.key_;
    return e;
  }
  /**
   * @return {Array<T>} Values.
   */
  getValues() {
    const e = new Array(this.count_);
    let n = 0, i;
    for (i = this.newest_; i; i = i.older)
      e[n++] = i.value_;
    return e;
  }
  /**
   * @return {T} Last value.
   */
  peekLast() {
    return this.oldest_.value_;
  }
  /**
   * @return {string} Last key.
   */
  peekLastKey() {
    return this.oldest_.key_;
  }
  /**
   * Get the key of the newest item in the cache.  Throws if the cache is empty.
   * @return {string} The newest key.
   */
  peekFirstKey() {
    return this.newest_.key_;
  }
  /**
   * Return an entry without updating least recently used time.
   * @param {string} key Key.
   * @return {T|undefined} Value.
   */
  peek(e) {
    var n;
    return (n = this.entries_[e]) == null ? void 0 : n.value_;
  }
  /**
   * @return {T} value Value.
   */
  pop() {
    const e = this.oldest_;
    return delete this.entries_[e.key_], e.newer && (e.newer.older = null), this.oldest_ = /** @type {Entry} */
    e.newer, this.oldest_ || (this.newest_ = null), --this.count_, e.value_;
  }
  /**
   * @param {string} key Key.
   * @param {T} value Value.
   */
  replace(e, n) {
    this.get(e), this.entries_[e].value_ = n;
  }
  /**
   * @param {string} key Key.
   * @param {T} value Value.
   */
  set(e, n) {
    Se(
      !(e in this.entries_),
      "Tried to set a value for a key that is used already"
    );
    const i = {
      key_: e,
      newer: null,
      older: this.newest_,
      value_: n
    };
    this.newest_ ? this.newest_.newer = i : this.oldest_ = i, this.newest_ = i, this.entries_[e] = i, ++this.count_;
  }
  /**
   * Set a maximum number of entries for the cache.
   * @param {number} size Cache size.
   * @api
   */
  setSize(e) {
    this.highWaterMark = e;
  }
}
const Nb = Gb;
function _d(t, e, n, i) {
  return i !== void 0 ? (i[0] = t, i[1] = e, i[2] = n, i) : [t, e, n];
}
function jr(t, e, n) {
  return t + "/" + e + "/" + n;
}
function Bg(t) {
  return jr(t[0], t[1], t[2]);
}
function $b(t) {
  return t.split("/").map(Number);
}
function Wb(t) {
  return (t[1] << t[0]) + t[2];
}
function Ub(t, e) {
  const n = t[0], i = t[1], a = t[2];
  if (e.getMinZoom() > n || n > e.getMaxZoom())
    return !1;
  const o = e.getFullTileRange(n);
  return o ? o.containsXY(i, a) : !0;
}
class Xb extends Nb {
  clear() {
    for (; this.getCount() > 0; )
      this.pop().release();
    super.clear();
  }
  /**
   * @param {!Object<string, boolean>} usedTiles Used tiles.
   */
  expireCache(e) {
    for (; this.canExpireCache() && !(this.peekLast().getKey() in e); )
      this.pop().release();
  }
  /**
   * Prune all tiles from the cache that don't have the same z as the newest tile.
   */
  pruneExceptNewestZ() {
    if (this.getCount() === 0)
      return;
    const e = this.peekFirstKey(), i = $b(e)[0];
    this.forEach((a) => {
      a.tileCoord[0] !== i && (this.remove(Bg(a.tileCoord)), a.release());
    });
  }
}
const Fg = Xb, Ms = {
  /**
   * Triggered when a tile starts loading.
   * @event module:ol/source/Tile.TileSourceEvent#tileloadstart
   * @api
   */
  TILELOADSTART: "tileloadstart",
  /**
   * Triggered when a tile finishes loading, either when its data is loaded,
   * or when loading was aborted because the tile is no longer needed.
   * @event module:ol/source/Tile.TileSourceEvent#tileloadend
   * @api
   */
  TILELOADEND: "tileloadend",
  /**
   * Triggered if tile loading results in an error. Note that this is not the
   * right place to re-fetch tiles. See {@link module:ol/ImageTile~ImageTile#load}
   * for details.
   * @event module:ol/source/Tile.TileSourceEvent#tileloaderror
   * @api
   */
  TILELOADERROR: "tileloaderror"
};
class Yb extends xn {
  /**
   * @param {Options} options Source options.
   */
  constructor(e) {
    super(), this.projection = Nt(e.projection), this.attributions_ = Sd(e.attributions), this.attributionsCollapsible_ = e.attributionsCollapsible !== void 0 ? e.attributionsCollapsible : !0, this.loading = !1, this.state_ = e.state !== void 0 ? e.state : "ready", this.wrapX_ = e.wrapX !== void 0 ? e.wrapX : !1, this.interpolate_ = !!e.interpolate, this.viewResolver = null, this.viewRejector = null;
    const n = this;
    this.viewPromise_ = new Promise(function(i, a) {
      n.viewResolver = i, n.viewRejector = a;
    });
  }
  /**
   * Get the attribution function for the source.
   * @return {?Attribution} Attribution function.
   * @api
   */
  getAttributions() {
    return this.attributions_;
  }
  /**
   * @return {boolean} Attributions are collapsible.
   * @api
   */
  getAttributionsCollapsible() {
    return this.attributionsCollapsible_;
  }
  /**
   * Get the projection of the source.
   * @return {import("../proj/Projection.js").default|null} Projection.
   * @api
   */
  getProjection() {
    return this.projection;
  }
  /**
   * @param {import("../proj/Projection").default} [projection] Projection.
   * @return {Array<number>|null} Resolutions.
   */
  getResolutions(e) {
    return null;
  }
  /**
   * @return {Promise<import("../View.js").ViewOptions>} A promise for view-related properties.
   */
  getView() {
    return this.viewPromise_;
  }
  /**
   * Get the state of the source, see {@link import("./Source.js").State} for possible states.
   * @return {import("./Source.js").State} State.
   * @api
   */
  getState() {
    return this.state_;
  }
  /**
   * @return {boolean|undefined} Wrap X.
   */
  getWrapX() {
    return this.wrapX_;
  }
  /**
   * @return {boolean} Use linear interpolation when resampling.
   */
  getInterpolate() {
    return this.interpolate_;
  }
  /**
   * Refreshes the source. The source will be cleared, and data from the server will be reloaded.
   * @api
   */
  refresh() {
    this.changed();
  }
  /**
   * Set the attributions of the source.
   * @param {AttributionLike|undefined} attributions Attributions.
   *     Can be passed as `string`, `Array<string>`, {@link module:ol/source/Source~Attribution},
   *     or `undefined`.
   * @api
   */
  setAttributions(e) {
    this.attributions_ = Sd(e), this.changed();
  }
  /**
   * Set the state of the source.
   * @param {import("./Source.js").State} state State.
   */
  setState(e) {
    this.state_ = e, this.changed();
  }
}
function Sd(t) {
  return t ? Array.isArray(t) ? function(e) {
    return t;
  } : typeof t == "function" ? t : function(e) {
    return [t];
  } : null;
}
const kg = Yb;
class Og {
  /**
   * @param {number} minX Minimum X.
   * @param {number} maxX Maximum X.
   * @param {number} minY Minimum Y.
   * @param {number} maxY Maximum Y.
   */
  constructor(e, n, i, a) {
    this.minX = e, this.maxX = n, this.minY = i, this.maxY = a;
  }
  /**
   * @param {import("./tilecoord.js").TileCoord} tileCoord Tile coordinate.
   * @return {boolean} Contains tile coordinate.
   */
  contains(e) {
    return this.containsXY(e[1], e[2]);
  }
  /**
   * @param {TileRange} tileRange Tile range.
   * @return {boolean} Contains.
   */
  containsTileRange(e) {
    return this.minX <= e.minX && e.maxX <= this.maxX && this.minY <= e.minY && e.maxY <= this.maxY;
  }
  /**
   * @param {number} x Tile coordinate x.
   * @param {number} y Tile coordinate y.
   * @return {boolean} Contains coordinate.
   */
  containsXY(e, n) {
    return this.minX <= e && e <= this.maxX && this.minY <= n && n <= this.maxY;
  }
  /**
   * @param {TileRange} tileRange Tile range.
   * @return {boolean} Equals.
   */
  equals(e) {
    return this.minX == e.minX && this.minY == e.minY && this.maxX == e.maxX && this.maxY == e.maxY;
  }
  /**
   * @param {TileRange} tileRange Tile range.
   */
  extend(e) {
    e.minX < this.minX && (this.minX = e.minX), e.maxX > this.maxX && (this.maxX = e.maxX), e.minY < this.minY && (this.minY = e.minY), e.maxY > this.maxY && (this.maxY = e.maxY);
  }
  /**
   * @return {number} Height.
   */
  getHeight() {
    return this.maxY - this.minY + 1;
  }
  /**
   * @return {import("./size.js").Size} Size.
   */
  getSize() {
    return [this.getWidth(), this.getHeight()];
  }
  /**
   * @return {number} Width.
   */
  getWidth() {
    return this.maxX - this.minX + 1;
  }
  /**
   * @param {TileRange} tileRange Tile range.
   * @return {boolean} Intersects.
   */
  intersects(e) {
    return this.minX <= e.maxX && this.maxX >= e.minX && this.minY <= e.maxY && this.maxY >= e.minY;
  }
}
function Wi(t, e, n, i, a) {
  return a !== void 0 ? (a.minX = t, a.maxX = e, a.minY = n, a.maxY = i, a) : new Og(t, e, n, i);
}
const Dg = Og, Ui = [0, 0, 0], Hn = 5;
class jb {
  /**
   * @param {Options} options Tile grid options.
   */
  constructor(e) {
    this.minZoom = e.minZoom !== void 0 ? e.minZoom : 0, this.resolutions_ = e.resolutions, Se(
      Lp(
        this.resolutions_,
        /**
         * @param {number} a First resolution
         * @param {number} b Second resolution
         * @return {number} Comparison result
         */
        (a, o) => o - a,
        !0
      ),
      "`resolutions` must be sorted in descending order"
    );
    let n;
    if (!e.origins) {
      for (let a = 0, o = this.resolutions_.length - 1; a < o; ++a)
        if (!n)
          n = this.resolutions_[a] / this.resolutions_[a + 1];
        else if (this.resolutions_[a] / this.resolutions_[a + 1] !== n) {
          n = void 0;
          break;
        }
    }
    this.zoomFactor_ = n, this.maxZoom = this.resolutions_.length - 1, this.origin_ = e.origin !== void 0 ? e.origin : null, this.origins_ = null, e.origins !== void 0 && (this.origins_ = e.origins, Se(
      this.origins_.length == this.resolutions_.length,
      "Number of `origins` and `resolutions` must be equal"
    ));
    const i = e.extent;
    i !== void 0 && !this.origin_ && !this.origins_ && (this.origin_ = Vi(i)), Se(
      !this.origin_ && this.origins_ || this.origin_ && !this.origins_,
      "Either `origin` or `origins` must be configured, never both"
    ), this.tileSizes_ = null, e.tileSizes !== void 0 && (this.tileSizes_ = e.tileSizes, Se(
      this.tileSizes_.length == this.resolutions_.length,
      "Number of `tileSizes` and `resolutions` must be equal"
    )), this.tileSize_ = e.tileSize !== void 0 ? e.tileSize : this.tileSizes_ ? null : Wl, Se(
      !this.tileSize_ && this.tileSizes_ || this.tileSize_ && !this.tileSizes_,
      "Either `tileSize` or `tileSizes` must be configured, never both"
    ), this.extent_ = i !== void 0 ? i : null, this.fullTileRanges_ = null, this.tmpSize_ = [0, 0], this.tmpExtent_ = [0, 0, 0, 0], e.sizes !== void 0 ? this.fullTileRanges_ = e.sizes.map((a, o) => {
      const r = new Dg(
        Math.min(0, a[0]),
        Math.max(a[0] - 1, -1),
        Math.min(0, a[1]),
        Math.max(a[1] - 1, -1)
      );
      if (i) {
        const s = this.getTileRangeForExtentAndZ(i, o);
        r.minX = Math.max(s.minX, r.minX), r.maxX = Math.min(s.maxX, r.maxX), r.minY = Math.max(s.minY, r.minY), r.maxY = Math.min(s.maxY, r.maxY);
      }
      return r;
    }) : i && this.calculateTileRanges_(i);
  }
  /**
   * Call a function with each tile coordinate for a given extent and zoom level.
   *
   * @param {import("../extent.js").Extent} extent Extent.
   * @param {number} zoom Integer zoom level.
   * @param {function(import("../tilecoord.js").TileCoord): void} callback Function called with each tile coordinate.
   * @api
   */
  forEachTileCoord(e, n, i) {
    const a = this.getTileRangeForExtentAndZ(e, n);
    for (let o = a.minX, r = a.maxX; o <= r; ++o)
      for (let s = a.minY, l = a.maxY; s <= l; ++s)
        i([n, o, s]);
  }
  /**
   * @param {import("../tilecoord.js").TileCoord} tileCoord Tile coordinate.
   * @param {function(number, import("../TileRange.js").default): boolean} callback Callback.
   * @param {import("../TileRange.js").default} [tempTileRange] Temporary import("../TileRange.js").default object.
   * @param {import("../extent.js").Extent} [tempExtent] Temporary import("../extent.js").Extent object.
   * @return {boolean} Callback succeeded.
   */
  forEachTileCoordParentTileRange(e, n, i, a) {
    let o, r, s, l = null, c = e[0] - 1;
    for (this.zoomFactor_ === 2 ? (r = e[1], s = e[2]) : l = this.getTileCoordExtent(e, a); c >= this.minZoom; ) {
      if (r !== void 0 && s !== void 0 ? (r = Math.floor(r / 2), s = Math.floor(s / 2), o = Wi(r, r, s, s, i)) : o = this.getTileRangeForExtentAndZ(
        l,
        c,
        i
      ), n(c, o))
        return !0;
      --c;
    }
    return !1;
  }
  /**
   * Get the extent for this tile grid, if it was configured.
   * @return {import("../extent.js").Extent} Extent.
   * @api
   */
  getExtent() {
    return this.extent_;
  }
  /**
   * Get the maximum zoom level for the grid.
   * @return {number} Max zoom.
   * @api
   */
  getMaxZoom() {
    return this.maxZoom;
  }
  /**
   * Get the minimum zoom level for the grid.
   * @return {number} Min zoom.
   * @api
   */
  getMinZoom() {
    return this.minZoom;
  }
  /**
   * Get the origin for the grid at the given zoom level.
   * @param {number} z Integer zoom level.
   * @return {import("../coordinate.js").Coordinate} Origin.
   * @api
   */
  getOrigin(e) {
    return this.origin_ ? this.origin_ : this.origins_[e];
  }
  /**
   * Get the resolution for the given zoom level.
   * @param {number} z Integer zoom level.
   * @return {number} Resolution.
   * @api
   */
  getResolution(e) {
    return this.resolutions_[e];
  }
  /**
   * Get the list of resolutions for the tile grid.
   * @return {Array<number>} Resolutions.
   * @api
   */
  getResolutions() {
    return this.resolutions_;
  }
  /**
   * @param {import("../tilecoord.js").TileCoord} tileCoord Tile coordinate.
   * @param {import("../TileRange.js").default} [tempTileRange] Temporary import("../TileRange.js").default object.
   * @param {import("../extent.js").Extent} [tempExtent] Temporary import("../extent.js").Extent object.
   * @return {import("../TileRange.js").default|null} Tile range.
   */
  getTileCoordChildTileRange(e, n, i) {
    if (e[0] < this.maxZoom) {
      if (this.zoomFactor_ === 2) {
        const o = e[1] * 2, r = e[2] * 2;
        return Wi(
          o,
          o + 1,
          r,
          r + 1,
          n
        );
      }
      const a = this.getTileCoordExtent(
        e,
        i || this.tmpExtent_
      );
      return this.getTileRangeForExtentAndZ(
        a,
        e[0] + 1,
        n
      );
    }
    return null;
  }
  /**
   * @param {import("../tilecoord.js").TileCoord} tileCoord Tile coordinate.
   * @param {number} z Integer zoom level.
   * @param {import("../TileRange.js").default} [tempTileRange] Temporary import("../TileRange.js").default object.
   * @return {import("../TileRange.js").default|null} Tile range.
   */
  getTileRangeForTileCoordAndZ(e, n, i) {
    if (n > this.maxZoom || n < this.minZoom)
      return null;
    const a = e[0], o = e[1], r = e[2];
    if (n === a)
      return Wi(
        o,
        r,
        o,
        r,
        i
      );
    if (this.zoomFactor_) {
      const l = Math.pow(this.zoomFactor_, n - a), c = Math.floor(o * l), u = Math.floor(r * l);
      if (n < a)
        return Wi(c, c, u, u, i);
      const d = Math.floor(l * (o + 1)) - 1, h = Math.floor(l * (r + 1)) - 1;
      return Wi(c, d, u, h, i);
    }
    const s = this.getTileCoordExtent(e, this.tmpExtent_);
    return this.getTileRangeForExtentAndZ(s, n, i);
  }
  /**
   * Get a tile range for the given extent and integer zoom level.
   * @param {import("../extent.js").Extent} extent Extent.
   * @param {number} z Integer zoom level.
   * @param {import("../TileRange.js").default} [tempTileRange] Temporary tile range object.
   * @return {import("../TileRange.js").default} Tile range.
   */
  getTileRangeForExtentAndZ(e, n, i) {
    this.getTileCoordForXYAndZ_(e[0], e[3], n, !1, Ui);
    const a = Ui[1], o = Ui[2];
    this.getTileCoordForXYAndZ_(e[2], e[1], n, !0, Ui);
    const r = Ui[1], s = Ui[2];
    return Wi(a, r, o, s, i);
  }
  /**
   * @param {import("../tilecoord.js").TileCoord} tileCoord Tile coordinate.
   * @return {import("../coordinate.js").Coordinate} Tile center.
   */
  getTileCoordCenter(e) {
    const n = this.getOrigin(e[0]), i = this.getResolution(e[0]), a = At(this.getTileSize(e[0]), this.tmpSize_);
    return [
      n[0] + (e[1] + 0.5) * a[0] * i,
      n[1] - (e[2] + 0.5) * a[1] * i
    ];
  }
  /**
   * Get the extent of a tile coordinate.
   *
   * @param {import("../tilecoord.js").TileCoord} tileCoord Tile coordinate.
   * @param {import("../extent.js").Extent} [tempExtent] Temporary extent object.
   * @return {import("../extent.js").Extent} Extent.
   * @api
   */
  getTileCoordExtent(e, n) {
    const i = this.getOrigin(e[0]), a = this.getResolution(e[0]), o = At(this.getTileSize(e[0]), this.tmpSize_), r = i[0] + e[1] * o[0] * a, s = i[1] - (e[2] + 1) * o[1] * a, l = r + o[0] * a, c = s + o[1] * a;
    return li(r, s, l, c, n);
  }
  /**
   * Get the tile coordinate for the given map coordinate and resolution.  This
   * method considers that coordinates that intersect tile boundaries should be
   * assigned the higher tile coordinate.
   *
   * @param {import("../coordinate.js").Coordinate} coordinate Coordinate.
   * @param {number} resolution Resolution.
   * @param {import("../tilecoord.js").TileCoord} [opt_tileCoord] Destination import("../tilecoord.js").TileCoord object.
   * @return {import("../tilecoord.js").TileCoord} Tile coordinate.
   * @api
   */
  getTileCoordForCoordAndResolution(e, n, i) {
    return this.getTileCoordForXYAndResolution_(
      e[0],
      e[1],
      n,
      !1,
      i
    );
  }
  /**
   * Note that this method should not be called for resolutions that correspond
   * to an integer zoom level.  Instead call the `getTileCoordForXYAndZ_` method.
   * @param {number} x X.
   * @param {number} y Y.
   * @param {number} resolution Resolution (for a non-integer zoom level).
   * @param {boolean} reverseIntersectionPolicy Instead of letting edge
   *     intersections go to the higher tile coordinate, let edge intersections
   *     go to the lower tile coordinate.
   * @param {import("../tilecoord.js").TileCoord} [opt_tileCoord] Temporary import("../tilecoord.js").TileCoord object.
   * @return {import("../tilecoord.js").TileCoord} Tile coordinate.
   * @private
   */
  getTileCoordForXYAndResolution_(e, n, i, a, o) {
    const r = this.getZForResolution(i), s = i / this.getResolution(r), l = this.getOrigin(r), c = At(this.getTileSize(r), this.tmpSize_);
    let u = s * (e - l[0]) / i / c[0], d = s * (l[1] - n) / i / c[1];
    return a ? (u = ko(u, Hn) - 1, d = ko(d, Hn) - 1) : (u = Fo(u, Hn), d = Fo(d, Hn)), _d(r, u, d, o);
  }
  /**
   * Although there is repetition between this method and `getTileCoordForXYAndResolution_`,
   * they should have separate implementations.  This method is for integer zoom
   * levels.  The other method should only be called for resolutions corresponding
   * to non-integer zoom levels.
   * @param {number} x Map x coordinate.
   * @param {number} y Map y coordinate.
   * @param {number} z Integer zoom level.
   * @param {boolean} reverseIntersectionPolicy Instead of letting edge
   *     intersections go to the higher tile coordinate, let edge intersections
   *     go to the lower tile coordinate.
   * @param {import("../tilecoord.js").TileCoord} [opt_tileCoord] Temporary import("../tilecoord.js").TileCoord object.
   * @return {import("../tilecoord.js").TileCoord} Tile coordinate.
   * @private
   */
  getTileCoordForXYAndZ_(e, n, i, a, o) {
    const r = this.getOrigin(i), s = this.getResolution(i), l = At(this.getTileSize(i), this.tmpSize_);
    let c = (e - r[0]) / s / l[0], u = (r[1] - n) / s / l[1];
    return a ? (c = ko(c, Hn) - 1, u = ko(u, Hn) - 1) : (c = Fo(c, Hn), u = Fo(u, Hn)), _d(i, c, u, o);
  }
  /**
   * Get a tile coordinate given a map coordinate and zoom level.
   * @param {import("../coordinate.js").Coordinate} coordinate Coordinate.
   * @param {number} z Integer zoom level, e.g. the result of a `getZForResolution()` method call
   * @param {import("../tilecoord.js").TileCoord} [opt_tileCoord] Destination import("../tilecoord.js").TileCoord object.
   * @return {import("../tilecoord.js").TileCoord} Tile coordinate.
   * @api
   */
  getTileCoordForCoordAndZ(e, n, i) {
    return this.getTileCoordForXYAndZ_(
      e[0],
      e[1],
      n,
      !1,
      i
    );
  }
  /**
   * @param {import("../tilecoord.js").TileCoord} tileCoord Tile coordinate.
   * @return {number} Tile resolution.
   */
  getTileCoordResolution(e) {
    return this.resolutions_[e[0]];
  }
  /**
   * Get the tile size for a zoom level. The type of the return value matches the
   * `tileSize` or `tileSizes` that the tile grid was configured with. To always
   * get an {@link import("../size.js").Size}, run the result through {@link module:ol/size.toSize}.
   * @param {number} z Z.
   * @return {number|import("../size.js").Size} Tile size.
   * @api
   */
  getTileSize(e) {
    return this.tileSize_ ? this.tileSize_ : this.tileSizes_[e];
  }
  /**
   * @param {number} z Zoom level.
   * @return {import("../TileRange.js").default|null} Extent tile range for the specified zoom level.
   */
  getFullTileRange(e) {
    return this.fullTileRanges_ ? this.fullTileRanges_[e] : this.extent_ ? this.getTileRangeForExtentAndZ(this.extent_, e) : null;
  }
  /**
   * @param {number} resolution Resolution.
   * @param {number|import("../array.js").NearestDirectionFunction} [opt_direction]
   *     If 0, the nearest resolution will be used.
   *     If 1, the nearest higher resolution (lower Z) will be used. If -1, the
   *     nearest lower resolution (higher Z) will be used. Default is 0.
   *     Use a {@link module:ol/array~NearestDirectionFunction} for more precise control.
   *
   * For example to change tile Z at the midpoint of zoom levels
   * ```js
   * function(value, high, low) {
   *   return value - low * Math.sqrt(high / low);
   * }
   * ```
   * @return {number} Z.
   * @api
   */
  getZForResolution(e, n) {
    const i = Gl(
      this.resolutions_,
      e,
      n || 0
    );
    return Ye(i, this.minZoom, this.maxZoom);
  }
  /**
   * The tile with the provided tile coordinate intersects the given viewport.
   * @param {import('../tilecoord.js').TileCoord} tileCoord Tile coordinate.
   * @param {Array<number>} viewport Viewport as returned from {@link module:ol/extent.getRotatedViewport}.
   * @return {boolean} The tile with the provided tile coordinate intersects the given viewport.
   */
  tileCoordIntersectsViewport(e, n) {
    return eg(
      n,
      0,
      n.length,
      2,
      this.getTileCoordExtent(e)
    );
  }
  /**
   * @param {!import("../extent.js").Extent} extent Extent for this tile grid.
   * @private
   */
  calculateTileRanges_(e) {
    const n = this.resolutions_.length, i = new Array(n);
    for (let a = this.minZoom; a < n; ++a)
      i[a] = this.getTileRangeForExtentAndZ(e, a);
    this.fullTileRanges_ = i;
  }
}
const Gg = jb;
function Ng(t) {
  let e = t.getDefaultTileGrid();
  return e || (e = qb(t), t.setDefaultTileGrid(e)), e;
}
function Zb(t, e, n) {
  const i = e[0], a = t.getTileCoordCenter(e), o = Pc(n);
  if (!da(o, a)) {
    const r = Re(o), s = Math.ceil(
      (o[0] - a[0]) / r
    );
    return a[0] += r * s, t.getTileCoordForCoordAndZ(a, i);
  }
  return e;
}
function Hb(t, e, n, i) {
  i = i !== void 0 ? i : "top-left";
  const a = $g(t, e, n);
  return new Gg({
    extent: t,
    origin: n_(t, i),
    resolutions: a,
    tileSize: n
  });
}
function Kb(t) {
  const e = t || {}, n = e.extent || Nt("EPSG:3857").getExtent(), i = {
    extent: n,
    minZoom: e.minZoom,
    tileSize: e.tileSize,
    resolutions: $g(
      n,
      e.maxZoom,
      e.tileSize,
      e.maxResolution
    )
  };
  return new Gg(i);
}
function $g(t, e, n, i) {
  e = e !== void 0 ? e : Wp, n = At(n !== void 0 ? n : Wl);
  const a = ut(t), o = Re(t);
  i = i > 0 ? i : Math.max(o / n[0], a / n[1]);
  const r = e + 1, s = new Array(r);
  for (let l = 0; l < r; ++l)
    s[l] = i / Math.pow(2, l);
  return s;
}
function qb(t, e, n, i) {
  const a = Pc(t);
  return Hb(a, e, n, i);
}
function Pc(t) {
  t = Nt(t);
  let e = t.getExtent();
  if (!e) {
    const n = 180 * Ha.degrees / t.getMetersPerUnit();
    e = li(-n, -n, n, n);
  }
  return e;
}
class Jb extends kg {
  /**
   * @param {Options} options SourceTile source options.
   */
  constructor(e) {
    super({
      attributions: e.attributions,
      attributionsCollapsible: e.attributionsCollapsible,
      projection: e.projection,
      state: e.state,
      wrapX: e.wrapX,
      interpolate: e.interpolate
    }), this.on, this.once, this.un, this.opaque_ = e.opaque !== void 0 ? e.opaque : !1, this.tilePixelRatio_ = e.tilePixelRatio !== void 0 ? e.tilePixelRatio : 1, this.tileGrid = e.tileGrid !== void 0 ? e.tileGrid : null;
    const n = [256, 256];
    this.tileGrid && At(this.tileGrid.getTileSize(this.tileGrid.getMinZoom()), n), this.tileCache = new Fg(e.cacheSize || 0), this.tmpSize = [0, 0], this.key_ = e.key || "", this.tileOptions = {
      transition: e.transition,
      interpolate: e.interpolate
    }, this.zDirection = e.zDirection ? e.zDirection : 0;
  }
  /**
   * @return {boolean} Can expire cache.
   */
  canExpireCache() {
    return this.tileCache.canExpireCache();
  }
  /**
   * @param {import("../proj/Projection.js").default} projection Projection.
   * @param {!Object<string, boolean>} usedTiles Used tiles.
   */
  expireCache(e, n) {
    const i = this.getTileCacheForProjection(e);
    i && i.expireCache(n);
  }
  /**
   * @param {import("../proj/Projection.js").default} projection Projection.
   * @param {number} z Zoom level.
   * @param {import("../TileRange.js").default} tileRange Tile range.
   * @param {function(import("../Tile.js").default):(boolean|void)} callback Called with each
   *     loaded tile.  If the callback returns `false`, the tile will not be
   *     considered loaded.
   * @return {boolean} The tile range is fully covered with loaded tiles.
   */
  forEachLoadedTile(e, n, i, a) {
    const o = this.getTileCacheForProjection(e);
    if (!o)
      return !1;
    let r = !0, s, l, c;
    for (let u = i.minX; u <= i.maxX; ++u)
      for (let d = i.minY; d <= i.maxY; ++d)
        l = jr(n, u, d), c = !1, o.containsKey(l) && (s = /** @type {!import("../Tile.js").default} */
        o.get(l), c = s.getState() === re.LOADED, c && (c = a(s) !== !1)), c || (r = !1);
    return r;
  }
  /**
   * @param {import("../proj/Projection.js").default} projection Projection.
   * @return {number} Gutter.
   */
  getGutterForProjection(e) {
    return 0;
  }
  /**
   * Return the key to be used for all tiles in the source.
   * @return {string} The key for all tiles.
   */
  getKey() {
    return this.key_;
  }
  /**
   * Set the value to be used as the key for all tiles in the source.
   * @param {string} key The key for tiles.
   * @protected
   */
  setKey(e) {
    this.key_ !== e && (this.key_ = e, this.changed());
  }
  /**
   * @param {import("../proj/Projection.js").default} projection Projection.
   * @return {boolean} Opaque.
   */
  getOpaque(e) {
    return this.opaque_;
  }
  /**
   * @param {import("../proj/Projection").default} [projection] Projection.
   * @return {Array<number>|null} Resolutions.
   */
  getResolutions(e) {
    const n = e ? this.getTileGridForProjection(e) : this.tileGrid;
    return n ? n.getResolutions() : null;
  }
  /**
   * @abstract
   * @param {number} z Tile coordinate z.
   * @param {number} x Tile coordinate x.
   * @param {number} y Tile coordinate y.
   * @param {number} pixelRatio Pixel ratio.
   * @param {import("../proj/Projection.js").default} projection Projection.
   * @return {!import("../Tile.js").default} Tile.
   */
  getTile(e, n, i, a, o) {
    return be();
  }
  /**
   * Return the tile grid of the tile source.
   * @return {import("../tilegrid/TileGrid.js").default|null} Tile grid.
   * @api
   */
  getTileGrid() {
    return this.tileGrid;
  }
  /**
   * @param {import("../proj/Projection.js").default} projection Projection.
   * @return {!import("../tilegrid/TileGrid.js").default} Tile grid.
   */
  getTileGridForProjection(e) {
    return this.tileGrid ? this.tileGrid : Ng(e);
  }
  /**
   * @param {import("../proj/Projection.js").default} projection Projection.
   * @return {import("../TileCache.js").default} Tile cache.
   * @protected
   */
  getTileCacheForProjection(e) {
    const n = this.getProjection();
    return Se(
      n === null || Yi(n, e),
      "A VectorTile source can only be rendered if it has a projection compatible with the view projection."
    ), this.tileCache;
  }
  /**
   * Get the tile pixel ratio for this source. Subclasses may override this
   * method, which is meant to return a supported pixel ratio that matches the
   * provided `pixelRatio` as close as possible.
   * @param {number} pixelRatio Pixel ratio.
   * @return {number} Tile pixel ratio.
   */
  getTilePixelRatio(e) {
    return this.tilePixelRatio_;
  }
  /**
   * @param {number} z Z.
   * @param {number} pixelRatio Pixel ratio.
   * @param {import("../proj/Projection.js").default} projection Projection.
   * @return {import("../size.js").Size} Tile size.
   */
  getTilePixelSize(e, n, i) {
    const a = this.getTileGridForProjection(i), o = this.getTilePixelRatio(n), r = At(a.getTileSize(e), this.tmpSize);
    return o == 1 ? r : rS(r, o, this.tmpSize);
  }
  /**
   * Returns a tile coordinate wrapped around the x-axis. When the tile coordinate
   * is outside the resolution and extent range of the tile grid, `null` will be
   * returned.
   * @param {import("../tilecoord.js").TileCoord} tileCoord Tile coordinate.
   * @param {import("../proj/Projection.js").default} [projection] Projection.
   * @return {import("../tilecoord.js").TileCoord} Tile coordinate to be passed to the tileUrlFunction or
   *     null if no tile URL should be created for the passed `tileCoord`.
   */
  getTileCoordForTileUrlFunction(e, n) {
    n = n !== void 0 ? n : this.getProjection();
    const i = this.getTileGridForProjection(n);
    return this.getWrapX() && n.isGlobal() && (e = Zb(i, e, n)), Ub(e, i) ? e : null;
  }
  /**
   * Remove all cached tiles from the source. The next render cycle will fetch new tiles.
   * @api
   */
  clear() {
    this.tileCache.clear();
  }
  refresh() {
    this.clear(), super.refresh();
  }
  /**
   * Increases the cache size if needed
   * @param {number} tileCount Minimum number of tiles needed.
   * @param {import("../proj/Projection.js").default} projection Projection.
   */
  updateCacheSize(e, n) {
    const i = this.getTileCacheForProjection(n);
    e > i.highWaterMark && (i.highWaterMark = e);
  }
  /**
   * Marks a tile coord as being used, without triggering a load.
   * @abstract
   * @param {number} z Tile coordinate z.
   * @param {number} x Tile coordinate x.
   * @param {number} y Tile coordinate y.
   * @param {import("../proj/Projection.js").default} projection Projection.
   */
  useTile(e, n, i, a) {
  }
}
class Qb extends Xn {
  /**
   * @param {string} type Type.
   * @param {import("../Tile.js").default} tile The tile.
   */
  constructor(e, n) {
    super(e), this.tile = n;
  }
}
const eM = Jb;
function tM(t, e) {
  const n = /\{z\}/g, i = /\{x\}/g, a = /\{y\}/g, o = /\{-y\}/g;
  return (
    /**
     * @param {import("./tilecoord.js").TileCoord} tileCoord Tile Coordinate.
     * @param {number} pixelRatio Pixel ratio.
     * @param {import("./proj/Projection.js").default} projection Projection.
     * @return {string|undefined} Tile URL.
     */
    function(r, s, l) {
      if (r)
        return t.replace(n, r[0].toString()).replace(i, r[1].toString()).replace(a, r[2].toString()).replace(o, function() {
          const c = r[0], u = e.getFullTileRange(c);
          if (!u)
            throw new Error(
              "The {-y} placeholder requires a tile grid with extent"
            );
          return (u.getHeight() - r[2] - 1).toString();
        });
    }
  );
}
function nM(t, e) {
  const n = t.length, i = new Array(n);
  for (let a = 0; a < n; ++a)
    i[a] = tM(t[a], e);
  return iM(i);
}
function iM(t) {
  return t.length === 1 ? t[0] : (
    /**
     * @param {import("./tilecoord.js").TileCoord} tileCoord Tile Coordinate.
     * @param {number} pixelRatio Pixel ratio.
     * @param {import("./proj/Projection.js").default} projection Projection.
     * @return {string|undefined} Tile URL.
     */
    function(e, n, i) {
      if (!e)
        return;
      const a = Wb(e), o = ia(a, t.length);
      return t[o](e, n, i);
    }
  );
}
function aM(t) {
  const e = [];
  let n = /\{([a-z])-([a-z])\}/.exec(t);
  if (n) {
    const i = n[1].charCodeAt(0), a = n[2].charCodeAt(0);
    let o;
    for (o = i; o <= a; ++o)
      e.push(t.replace(n[0], String.fromCharCode(o)));
    return e;
  }
  if (n = /\{(\d+)-(\d+)\}/.exec(t), n) {
    const i = parseInt(n[2], 10);
    for (let a = parseInt(n[1], 10); a <= i; a++)
      e.push(t.replace(n[0], a.toString()));
    return e;
  }
  return e.push(t), e;
}
class Tc extends eM {
  /**
   * @param {Options} options Image tile options.
   */
  constructor(e) {
    super({
      attributions: e.attributions,
      cacheSize: e.cacheSize,
      opaque: e.opaque,
      projection: e.projection,
      state: e.state,
      tileGrid: e.tileGrid,
      tilePixelRatio: e.tilePixelRatio,
      wrapX: e.wrapX,
      transition: e.transition,
      interpolate: e.interpolate,
      key: e.key,
      attributionsCollapsible: e.attributionsCollapsible,
      zDirection: e.zDirection
    }), this.generateTileUrlFunction_ = this.tileUrlFunction === Tc.prototype.tileUrlFunction, this.tileLoadFunction = e.tileLoadFunction, e.tileUrlFunction && (this.tileUrlFunction = e.tileUrlFunction), this.urls = null, e.urls ? this.setUrls(e.urls) : e.url && this.setUrl(e.url), this.tileLoadingKeys_ = {};
  }
  /**
   * Return the tile load function of the source.
   * @return {import("../Tile.js").LoadFunction} TileLoadFunction
   * @api
   */
  getTileLoadFunction() {
    return this.tileLoadFunction;
  }
  /**
   * Return the tile URL function of the source.
   * @return {import("../Tile.js").UrlFunction} TileUrlFunction
   * @api
   */
  getTileUrlFunction() {
    return Object.getPrototypeOf(this).tileUrlFunction === this.tileUrlFunction ? this.tileUrlFunction.bind(this) : this.tileUrlFunction;
  }
  /**
   * Return the URLs used for this source.
   * When a tileUrlFunction is used instead of url or urls,
   * null will be returned.
   * @return {!Array<string>|null} URLs.
   * @api
   */
  getUrls() {
    return this.urls;
  }
  /**
   * Handle tile change events.
   * @param {import("../events/Event.js").default} event Event.
   * @protected
   */
  handleTileChange(e) {
    const n = (
      /** @type {import("../Tile.js").default} */
      e.target
    ), i = we(n), a = n.getState();
    let o;
    a == re.LOADING ? (this.tileLoadingKeys_[i] = !0, o = Ms.TILELOADSTART) : i in this.tileLoadingKeys_ && (delete this.tileLoadingKeys_[i], o = a == re.ERROR ? Ms.TILELOADERROR : a == re.LOADED ? Ms.TILELOADEND : void 0), o != null && this.dispatchEvent(new Qb(o, n));
  }
  /**
   * Set the tile load function of the source.
   * @param {import("../Tile.js").LoadFunction} tileLoadFunction Tile load function.
   * @api
   */
  setTileLoadFunction(e) {
    this.tileCache.clear(), this.tileLoadFunction = e, this.changed();
  }
  /**
   * Set the tile URL function of the source.
   * @param {import("../Tile.js").UrlFunction} tileUrlFunction Tile URL function.
   * @param {string} [key] Optional new tile key for the source.
   * @api
   */
  setTileUrlFunction(e, n) {
    this.tileUrlFunction = e, this.tileCache.pruneExceptNewestZ(), typeof n < "u" ? this.setKey(n) : this.changed();
  }
  /**
   * Set the URL to use for requests.
   * @param {string} url URL.
   * @api
   */
  setUrl(e) {
    const n = aM(e);
    this.urls = n, this.setUrls(n);
  }
  /**
   * Set the URLs to use for requests.
   * @param {Array<string>} urls URLs.
   * @api
   */
  setUrls(e) {
    this.urls = e;
    const n = e.join(`
`);
    this.generateTileUrlFunction_ ? this.setTileUrlFunction(nM(e, this.tileGrid), n) : this.setKey(n);
  }
  /**
   * @param {import("../tilecoord.js").TileCoord} tileCoord Tile coordinate.
   * @param {number} pixelRatio Pixel ratio.
   * @param {import("../proj/Projection.js").default} projection Projection.
   * @return {string|undefined} Tile URL.
   */
  tileUrlFunction(e, n, i) {
  }
  /**
   * Marks a tile coord as being used, without triggering a load.
   * @param {number} z Tile coordinate z.
   * @param {number} x Tile coordinate x.
   * @param {number} y Tile coordinate y.
   */
  useTile(e, n, i) {
    const a = jr(e, n, i);
    this.tileCache.containsKey(a) && this.tileCache.get(a);
  }
}
const oM = Tc;
class rM extends oM {
  /**
   * @param {!Options} options Image tile options.
   */
  constructor(e) {
    super({
      attributions: e.attributions,
      cacheSize: e.cacheSize,
      opaque: e.opaque,
      projection: e.projection,
      state: e.state,
      tileGrid: e.tileGrid,
      tileLoadFunction: e.tileLoadFunction ? e.tileLoadFunction : sM,
      tilePixelRatio: e.tilePixelRatio,
      tileUrlFunction: e.tileUrlFunction,
      url: e.url,
      urls: e.urls,
      wrapX: e.wrapX,
      transition: e.transition,
      interpolate: e.interpolate !== void 0 ? e.interpolate : !0,
      key: e.key,
      attributionsCollapsible: e.attributionsCollapsible,
      zDirection: e.zDirection
    }), this.crossOrigin = e.crossOrigin !== void 0 ? e.crossOrigin : null, this.tileClass = e.tileClass !== void 0 ? e.tileClass : Vg, this.tileCacheForProjection = {}, this.tileGridForProjection = {}, this.reprojectionErrorThreshold_ = e.reprojectionErrorThreshold, this.renderReprojectionEdges_ = !1;
  }
  /**
   * @return {boolean} Can expire cache.
   */
  canExpireCache() {
    if (this.tileCache.canExpireCache())
      return !0;
    for (const e in this.tileCacheForProjection)
      if (this.tileCacheForProjection[e].canExpireCache())
        return !0;
    return !1;
  }
  /**
   * @param {import("../proj/Projection.js").default} projection Projection.
   * @param {!Object<string, boolean>} usedTiles Used tiles.
   */
  expireCache(e, n) {
    const i = this.getTileCacheForProjection(e);
    this.tileCache.expireCache(
      this.tileCache == i ? n : {}
    );
    for (const a in this.tileCacheForProjection) {
      const o = this.tileCacheForProjection[a];
      o.expireCache(o == i ? n : {});
    }
  }
  /**
   * @param {import("../proj/Projection.js").default} projection Projection.
   * @return {number} Gutter.
   */
  getGutterForProjection(e) {
    return this.getProjection() && e && !Yi(this.getProjection(), e) ? 0 : this.getGutter();
  }
  /**
   * @return {number} Gutter.
   */
  getGutter() {
    return 0;
  }
  /**
   * Return the key to be used for all tiles in the source.
   * @return {string} The key for all tiles.
   */
  getKey() {
    let e = super.getKey();
    return this.getInterpolate() || (e += ":disable-interpolation"), e;
  }
  /**
   * @param {import("../proj/Projection.js").default} projection Projection.
   * @return {boolean} Opaque.
   */
  getOpaque(e) {
    return this.getProjection() && e && !Yi(this.getProjection(), e) ? !1 : super.getOpaque(e);
  }
  /**
   * @param {import("../proj/Projection.js").default} projection Projection.
   * @return {!import("../tilegrid/TileGrid.js").default} Tile grid.
   */
  getTileGridForProjection(e) {
    const n = this.getProjection();
    if (this.tileGrid && (!n || Yi(n, e)))
      return this.tileGrid;
    const i = we(e);
    return i in this.tileGridForProjection || (this.tileGridForProjection[i] = Ng(e)), this.tileGridForProjection[i];
  }
  /**
   * @param {import("../proj/Projection.js").default} projection Projection.
   * @return {import("../TileCache.js").default} Tile cache.
   */
  getTileCacheForProjection(e) {
    const n = this.getProjection();
    if (!n || Yi(n, e))
      return this.tileCache;
    const i = we(e);
    return i in this.tileCacheForProjection || (this.tileCacheForProjection[i] = new Fg(
      this.tileCache.highWaterMark
    )), this.tileCacheForProjection[i];
  }
  /**
   * @param {number} z Tile coordinate z.
   * @param {number} x Tile coordinate x.
   * @param {number} y Tile coordinate y.
   * @param {number} pixelRatio Pixel ratio.
   * @param {import("../proj/Projection.js").default} projection Projection.
   * @param {string} key The key set on the tile.
   * @return {!ImageTile} Tile.
   * @private
   */
  createTile_(e, n, i, a, o, r) {
    const s = [e, n, i], l = this.getTileCoordForTileUrlFunction(
      s,
      o
    ), c = l ? this.tileUrlFunction(l, a, o) : void 0, u = new this.tileClass(
      s,
      c !== void 0 ? re.IDLE : re.EMPTY,
      c !== void 0 ? c : "",
      this.crossOrigin,
      this.tileLoadFunction,
      this.tileOptions
    );
    return u.key = r, u.addEventListener(ge.CHANGE, this.handleTileChange.bind(this)), u;
  }
  /**
   * @param {number} z Tile coordinate z.
   * @param {number} x Tile coordinate x.
   * @param {number} y Tile coordinate y.
   * @param {number} pixelRatio Pixel ratio.
   * @param {import("../proj/Projection.js").default} projection Projection.
   * @return {!(ImageTile|ReprojTile)} Tile.
   */
  getTile(e, n, i, a, o) {
    const r = this.getProjection();
    if (!r || !o || Yi(r, o))
      return this.getTileInternal(
        e,
        n,
        i,
        a,
        r || o
      );
    const s = this.getTileCacheForProjection(o), l = [e, n, i];
    let c;
    const u = Bg(l);
    s.containsKey(u) && (c = s.get(u));
    const d = this.getKey();
    if (c && c.key == d)
      return c;
    const h = this.getTileGridForProjection(r), f = this.getTileGridForProjection(o), g = this.getTileCoordForTileUrlFunction(
      l,
      o
    ), m = new Qs(
      r,
      h,
      o,
      f,
      l,
      g,
      this.getTilePixelRatio(a),
      this.getGutter(),
      (v, y, p, M) => this.getTileInternal(v, y, p, M, r),
      this.reprojectionErrorThreshold_,
      this.renderReprojectionEdges_,
      this.tileOptions
    );
    return m.key = d, c ? (m.interimTile = c, m.refreshInterimChain(), s.replace(u, m)) : s.set(u, m), m;
  }
  /**
   * @param {number} z Tile coordinate z.
   * @param {number} x Tile coordinate x.
   * @param {number} y Tile coordinate y.
   * @param {number} pixelRatio Pixel ratio.
   * @param {!import("../proj/Projection.js").default} projection Projection.
   * @return {!ImageTile} Tile.
   * @protected
   */
  getTileInternal(e, n, i, a, o) {
    let r = null;
    const s = jr(e, n, i), l = this.getKey();
    if (!this.tileCache.containsKey(s))
      r = this.createTile_(e, n, i, a, o, l), this.tileCache.set(s, r);
    else if (r = this.tileCache.get(s), r.key != l) {
      const c = r;
      r = this.createTile_(e, n, i, a, o, l), c.getState() == re.IDLE ? r.interimTile = c.interimTile : r.interimTile = c, r.refreshInterimChain(), this.tileCache.replace(s, r);
    }
    return r;
  }
  /**
   * Sets whether to render reprojection edges or not (usually for debugging).
   * @param {boolean} render Render the edges.
   * @api
   */
  setRenderReprojectionEdges(e) {
    if (this.renderReprojectionEdges_ != e) {
      this.renderReprojectionEdges_ = e;
      for (const n in this.tileCacheForProjection)
        this.tileCacheForProjection[n].clear();
      this.changed();
    }
  }
  /**
   * Sets the tile grid to use when reprojecting the tiles to the given
   * projection instead of the default tile grid for the projection.
   *
   * This can be useful when the default tile grid cannot be created
   * (e.g. projection has no extent defined) or
   * for optimization reasons (custom tile size, resolutions, ...).
   *
   * @param {import("../proj.js").ProjectionLike} projection Projection.
   * @param {import("../tilegrid/TileGrid.js").default} tilegrid Tile grid to use for the projection.
   * @api
   */
  setTileGridForProjection(e, n) {
    const i = Nt(e);
    if (i) {
      const a = we(i);
      a in this.tileGridForProjection || (this.tileGridForProjection[a] = n);
    }
  }
  clear() {
    super.clear();
    for (const e in this.tileCacheForProjection)
      this.tileCacheForProjection[e].clear();
  }
}
function sM(t, e) {
  t.getImage().src = e;
}
const lM = rM;
class cM extends lM {
  /**
   * @param {Options} [options] XYZ options.
   */
  constructor(e) {
    e = e || {};
    const n = e.projection !== void 0 ? e.projection : "EPSG:3857", i = e.tileGrid !== void 0 ? e.tileGrid : Kb({
      extent: Pc(n),
      maxResolution: e.maxResolution,
      maxZoom: e.maxZoom,
      minZoom: e.minZoom,
      tileSize: e.tileSize
    });
    super({
      attributions: e.attributions,
      cacheSize: e.cacheSize,
      crossOrigin: e.crossOrigin,
      interpolate: e.interpolate,
      opaque: e.opaque,
      projection: n,
      reprojectionErrorThreshold: e.reprojectionErrorThreshold,
      tileGrid: i,
      tileLoadFunction: e.tileLoadFunction,
      tilePixelRatio: e.tilePixelRatio,
      tileUrlFunction: e.tileUrlFunction,
      url: e.url,
      urls: e.urls,
      wrapX: e.wrapX !== void 0 ? e.wrapX : !0,
      transition: e.transition,
      attributionsCollapsible: e.attributionsCollapsible,
      zDirection: e.zDirection
    }), this.gutter_ = e.gutter !== void 0 ? e.gutter : 0;
  }
  /**
   * @return {number} Gutter.
   */
  getGutter() {
    return this.gutter_;
  }
}
const uM = cM, dM = '&#169; <a href="https://www.openstreetmap.org/copyright" target="_blank">OpenStreetMap</a> contributors.';
class hM extends uM {
  /**
   * @param {Options} [options] Open Street Map options.
   */
  constructor(e) {
    e = e || {};
    let n;
    e.attributions !== void 0 ? n = e.attributions : n = [dM];
    const i = e.crossOrigin !== void 0 ? e.crossOrigin : "anonymous", a = e.url !== void 0 ? e.url : "https://tile.openstreetmap.org/{z}/{x}/{y}.png";
    super({
      attributions: n,
      attributionsCollapsible: !1,
      cacheSize: e.cacheSize,
      crossOrigin: i,
      interpolate: e.interpolate,
      maxZoom: e.maxZoom !== void 0 ? e.maxZoom : 19,
      opaque: e.opaque !== void 0 ? e.opaque : !0,
      reprojectionErrorThreshold: e.reprojectionErrorThreshold,
      tileLoadFunction: e.tileLoadFunction,
      transition: e.transition,
      url: a,
      wrapX: e.wrapX,
      zDirection: e.zDirection
    });
  }
}
const fM = hM;
class wc extends xn {
  /**
   * @param {Geometry|ObjectWithGeometry<Geometry>} [geometryOrProperties]
   *     You may pass a Geometry object directly, or an object literal containing
   *     properties. If you pass an object literal, you may include a Geometry
   *     associated with a `geometry` key.
   */
  constructor(e) {
    if (super(), this.on, this.once, this.un, this.id_ = void 0, this.geometryName_ = "geometry", this.style_ = null, this.styleFunction_ = void 0, this.geometryChangeKey_ = null, this.addChangeListener(this.geometryName_, this.handleGeometryChanged_), e)
      if (typeof /** @type {?} */
      e.getSimplifiedGeometry == "function") {
        const n = (
          /** @type {Geometry} */
          e
        );
        this.setGeometry(n);
      } else {
        const n = e;
        this.setProperties(n);
      }
  }
  /**
   * Clone this feature. If the original feature has a geometry it
   * is also cloned. The feature id is not set in the clone.
   * @return {Feature<Geometry>} The clone.
   * @api
   */
  clone() {
    const e = (
      /** @type {Feature<Geometry>} */
      new wc(this.hasProperties() ? this.getProperties() : null)
    );
    e.setGeometryName(this.getGeometryName());
    const n = this.getGeometry();
    n && e.setGeometry(
      /** @type {Geometry} */
      n.clone()
    );
    const i = this.getStyle();
    return i && e.setStyle(i), e;
  }
  /**
   * Get the feature's default geometry.  A feature may have any number of named
   * geometries.  The "default" geometry (the one that is rendered by default) is
   * set when calling {@link module:ol/Feature~Feature#setGeometry}.
   * @return {Geometry|undefined} The default geometry for the feature.
   * @api
   * @observable
   */
  getGeometry() {
    return (
      /** @type {Geometry|undefined} */
      this.get(this.geometryName_)
    );
  }
  /**
   * Get the feature identifier.  This is a stable identifier for the feature and
   * is either set when reading data from a remote source or set explicitly by
   * calling {@link module:ol/Feature~Feature#setId}.
   * @return {number|string|undefined} Id.
   * @api
   */
  getId() {
    return this.id_;
  }
  /**
   * Get the name of the feature's default geometry.  By default, the default
   * geometry is named `geometry`.
   * @return {string} Get the property name associated with the default geometry
   *     for this feature.
   * @api
   */
  getGeometryName() {
    return this.geometryName_;
  }
  /**
   * Get the feature's style. Will return what was provided to the
   * {@link module:ol/Feature~Feature#setStyle} method.
   * @return {import("./style/Style.js").StyleLike|undefined} The feature style.
   * @api
   */
  getStyle() {
    return this.style_;
  }
  /**
   * Get the feature's style function.
   * @return {import("./style/Style.js").StyleFunction|undefined} Return a function
   * representing the current style of this feature.
   * @api
   */
  getStyleFunction() {
    return this.styleFunction_;
  }
  /**
   * @private
   */
  handleGeometryChange_() {
    this.changed();
  }
  /**
   * @private
   */
  handleGeometryChanged_() {
    this.geometryChangeKey_ && (Ve(this.geometryChangeKey_), this.geometryChangeKey_ = null);
    const e = this.getGeometry();
    e && (this.geometryChangeKey_ = Me(
      e,
      ge.CHANGE,
      this.handleGeometryChange_,
      this
    )), this.changed();
  }
  /**
   * Set the default geometry for the feature.  This will update the property
   * with the name returned by {@link module:ol/Feature~Feature#getGeometryName}.
   * @param {Geometry|undefined} geometry The new geometry.
   * @api
   * @observable
   */
  setGeometry(e) {
    this.set(this.geometryName_, e);
  }
  /**
   * Set the style for the feature to override the layer style.  This can be a
   * single style object, an array of styles, or a function that takes a
   * resolution and returns an array of styles. To unset the feature style, call
   * `setStyle()` without arguments or a falsey value.
   * @param {import("./style/Style.js").StyleLike} [style] Style for this feature.
   * @api
   * @fires module:ol/events/Event~BaseEvent#event:change
   */
  setStyle(e) {
    this.style_ = e, this.styleFunction_ = e ? gM(e) : void 0, this.changed();
  }
  /**
   * Set the feature id.  The feature id is considered stable and may be used when
   * requesting features or comparing identifiers returned from a remote source.
   * The feature id can be used with the
   * {@link module:ol/source/Vector~VectorSource#getFeatureById} method.
   * @param {number|string|undefined} id The feature id.
   * @api
   * @fires module:ol/events/Event~BaseEvent#event:change
   */
  setId(e) {
    this.id_ = e, this.changed();
  }
  /**
   * Set the property name to be used when getting the feature's default geometry.
   * When calling {@link module:ol/Feature~Feature#getGeometry}, the value of the property with
   * this name will be returned.
   * @param {string} name The property name of the default geometry.
   * @api
   */
  setGeometryName(e) {
    this.removeChangeListener(this.geometryName_, this.handleGeometryChanged_), this.geometryName_ = e, this.addChangeListener(this.geometryName_, this.handleGeometryChanged_), this.handleGeometryChanged_();
  }
}
function gM(t) {
  if (typeof t == "function")
    return t;
  let e;
  return Array.isArray(t) ? e = t : (Se(
    typeof /** @type {?} */
    t.getZIndex == "function",
    "Expected an `ol/style/Style` or an array of `ol/style/Style.js`"
  ), e = [
    /** @type {import("./style/Style.js").default} */
    t
  ]), function() {
    return e;
  };
}
const mM = wc, Uo = {
  PRELOAD: "preload",
  USE_INTERIM_TILES_ON_ERROR: "useInterimTilesOnError"
};
class vM extends Dr {
  /**
   * @param {Options<TileSourceType>} [options] Tile layer options.
   */
  constructor(e) {
    e = e || {};
    const n = Object.assign({}, e);
    delete n.preload, delete n.useInterimTilesOnError, super(n), this.on, this.once, this.un, this.setPreload(e.preload !== void 0 ? e.preload : 0), this.setUseInterimTilesOnError(
      e.useInterimTilesOnError !== void 0 ? e.useInterimTilesOnError : !0
    );
  }
  /**
   * Return the level as number to which we will preload tiles up to.
   * @return {number} The level to preload tiles up to.
   * @observable
   * @api
   */
  getPreload() {
    return (
      /** @type {number} */
      this.get(Uo.PRELOAD)
    );
  }
  /**
   * Set the level as number to which we will preload tiles up to.
   * @param {number} preload The level to preload tiles up to.
   * @observable
   * @api
   */
  setPreload(e) {
    this.set(Uo.PRELOAD, e);
  }
  /**
   * Whether we use interim tiles on error.
   * @return {boolean} Use interim tiles on error.
   * @observable
   * @api
   */
  getUseInterimTilesOnError() {
    return (
      /** @type {boolean} */
      this.get(Uo.USE_INTERIM_TILES_ON_ERROR)
    );
  }
  /**
   * Set whether we use interim tiles on error.
   * @param {boolean} useInterimTilesOnError Use interim tiles on error.
   * @observable
   * @api
   */
  setUseInterimTilesOnError(e) {
    this.set(Uo.USE_INTERIM_TILES_ON_ERROR, e);
  }
  /**
   * Get data for a pixel location.  The return type depends on the source data.  For image tiles,
   * a four element RGBA array will be returned.  For data tiles, the array length will match the
   * number of bands in the dataset.  For requests outside the layer extent, `null` will be returned.
   * Data for a image tiles can only be retrieved if the source's `crossOrigin` property is set.
   *
   * ```js
   * // display layer data on every pointer move
   * map.on('pointermove', (event) => {
   *   console.log(layer.getData(event.pixel));
   * });
   * ```
   * @param {import("../pixel").Pixel} pixel Pixel.
   * @return {Uint8ClampedArray|Uint8Array|Float32Array|DataView|null} Pixel data.
   * @api
   */
  getData(e) {
    return super.getData(e);
  }
}
const CM = vM;
class yM extends wf {
  /**
   * @param {LayerType} layer Layer.
   */
  constructor(e) {
    super(), this.ready = !0, this.boundHandleImageChange_ = this.handleImageChange_.bind(this), this.layer_ = e, this.declutterExecutorGroup = null;
  }
  /**
   * Asynchronous layer level hit detection.
   * @param {import("../pixel.js").Pixel} pixel Pixel.
   * @return {Promise<Array<import("../Feature").FeatureLike>>} Promise that resolves with
   * an array of features.
   */
  getFeatures(e) {
    return be();
  }
  /**
   * @param {import("../pixel.js").Pixel} pixel Pixel.
   * @return {Uint8ClampedArray|Uint8Array|Float32Array|DataView|null} Pixel data.
   */
  getData(e) {
    return null;
  }
  /**
   * Determine whether render should be called.
   * @abstract
   * @param {import("../Map.js").FrameState} frameState Frame state.
   * @return {boolean} Layer is ready to be rendered.
   */
  prepareFrame(e) {
    return be();
  }
  /**
   * Render the layer.
   * @abstract
   * @param {import("../Map.js").FrameState} frameState Frame state.
   * @param {HTMLElement|null} target Target that may be used to render content to.
   * @return {HTMLElement|null} The rendered element.
   */
  renderFrame(e, n) {
    return be();
  }
  /**
   * @param {Object<number, Object<string, import("../Tile.js").default>>} tiles Lookup of loaded tiles by zoom level.
   * @param {number} zoom Zoom level.
   * @param {import("../Tile.js").default} tile Tile.
   * @return {boolean|void} If `false`, the tile will not be considered loaded.
   */
  loadedTileCallback(e, n, i) {
    e[n] || (e[n] = {}), e[n][i.tileCoord.toString()] = i;
  }
  /**
   * Create a function that adds loaded tiles to the tile lookup.
   * @param {import("../source/Tile.js").default} source Tile source.
   * @param {import("../proj/Projection.js").default} projection Projection of the tiles.
   * @param {Object<number, Object<string, import("../Tile.js").default>>} tiles Lookup of loaded tiles by zoom level.
   * @return {function(number, import("../TileRange.js").default):boolean} A function that can be
   *     called with a zoom level and a tile range to add loaded tiles to the lookup.
   * @protected
   */
  createLoadedTileFinder(e, n, i) {
    return (
      /**
       * @param {number} zoom Zoom level.
       * @param {import("../TileRange.js").default} tileRange Tile range.
       * @return {boolean} The tile range is fully loaded.
       */
      (a, o) => {
        const r = this.loadedTileCallback.bind(this, i, a);
        return e.forEachLoadedTile(n, a, o, r);
      }
    );
  }
  /**
   * @abstract
   * @param {import("../coordinate.js").Coordinate} coordinate Coordinate.
   * @param {import("../Map.js").FrameState} frameState Frame state.
   * @param {number} hitTolerance Hit tolerance in pixels.
   * @param {import("./vector.js").FeatureCallback<T>} callback Feature callback.
   * @param {Array<import("./Map.js").HitMatch<T>>} matches The hit detected matches with tolerance.
   * @return {T|undefined} Callback result.
   * @template T
   */
  forEachFeatureAtCoordinate(e, n, i, a, o) {
  }
  /**
   * @return {LayerType} Layer.
   */
  getLayer() {
    return this.layer_;
  }
  /**
   * Perform action necessary to get the layer rendered after new fonts have loaded
   * @abstract
   */
  handleFontsChanged() {
  }
  /**
   * Handle changes in image state.
   * @param {import("../events/Event.js").default} event Image change event.
   * @private
   */
  handleImageChange_(e) {
    const n = (
      /** @type {import("../Image.js").default} */
      e.target
    );
    (n.getState() === Ce.LOADED || n.getState() === Ce.ERROR) && this.renderIfReadyAndVisible();
  }
  /**
   * Load the image if not already loaded, and register the image change
   * listener if needed.
   * @param {import("../Image.js").default} image Image.
   * @return {boolean} `true` if the image is already loaded, `false` otherwise.
   * @protected
   */
  loadImage(e) {
    let n = e.getState();
    return n != Ce.LOADED && n != Ce.ERROR && e.addEventListener(ge.CHANGE, this.boundHandleImageChange_), n == Ce.IDLE && (e.load(), n = e.getState()), n == Ce.LOADED;
  }
  /**
   * @protected
   */
  renderIfReadyAndVisible() {
    const e = this.getLayer();
    e && e.getVisible() && e.getSourceState() === "ready" && e.changed();
  }
  /**
   * @param {import("../Map.js").FrameState} frameState Frame state.
   */
  renderDeferred(e) {
  }
  /**
   * Clean up.
   */
  disposeInternal() {
    delete this.layer_, super.disposeInternal();
  }
}
const pM = yM;
class _M {
  constructor() {
    /**
     * @private
     * @param {...*} args Args.
     * @return {ZIndexContext} This.
     */
    Vc(this, "pushMethodArgs_", (...e) => (this.instructions_[this.zIndex + this.offset_].push(e), this));
    this.instructions_ = [], this.zIndex = 0, this.offset_ = 0, this.context_ = /** @type {ZIndexContextProxy} */
    new Proxy(CanvasRenderingContext2D.prototype, {
      get: (e, n) => {
        if (typeof /** @type {*} */
        Xs()[n] == "function")
          return this.instructions_[this.zIndex + this.offset_] || (this.instructions_[this.zIndex + this.offset_] = []), this.instructions_[this.zIndex + this.offset_].push(n), this.pushMethodArgs_;
      },
      set: (e, n, i) => (this.instructions_[this.zIndex + this.offset_] || (this.instructions_[this.zIndex + this.offset_] = []), this.instructions_[this.zIndex + this.offset_].push(n, i), !0)
    });
  }
  /**
   * Get a proxy for CanvasRenderingContext2D which does not support getting state
   * (e.g. `context.globalAlpha`, which will return `undefined`). To set state, if it relies on a
   * previous state (e.g. `context.globalAlpha = context.globalAlpha / 2`), set a function,
   * e.g. `context.globalAlpha = (context) => context.globalAlpha / 2`.
   * @return {ZIndexContextProxy} Context.
   */
  getContext() {
    return this.context_;
  }
  /**
   * @param {CanvasRenderingContext2D} context Context.
   */
  draw(e) {
    this.instructions_.forEach((n) => {
      for (let i = 0, a = n.length; i < a; i += 2) {
        const o = n[i], r = n[i + 1];
        if (typeof /** @type {*} */
        e[o] == "function")
          e[o](...r);
        else {
          if (typeof r == "function") {
            e[o] = r(e);
            continue;
          }
          e[o] = r;
        }
      }
    });
  }
  clear() {
    this.instructions_.length = 0, this.zIndex = 0, this.offset_ = 0;
  }
  /**
   * Offsets the zIndex by the highest current zIndex. Useful for rendering multiple worlds or tiles, to
   * avoid conflicting context.clip() or context.save()/restore() calls.
   */
  offset() {
    this.offset_ = this.instructions_.length, this.zIndex = 0;
  }
}
const Wg = _M, bd = [];
let Ki = null;
function SM() {
  Ki = tt(1, 1, void 0, {
    willReadFrequently: !0
  });
}
class bM extends pM {
  /**
   * @param {LayerType} layer Layer.
   */
  constructor(e) {
    super(e), this.container = null, this.renderedResolution, this.tempTransform = Zt(), this.pixelTransform = Zt(), this.inversePixelTransform = Zt(), this.context = null, this.deferredContext_ = null, this.containerReused = !1, this.pixelContext_ = null, this.frameState = null;
  }
  /**
   * @param {import('../../DataTile.js').ImageLike} image Image.
   * @param {number} col The column index.
   * @param {number} row The row index.
   * @return {Uint8ClampedArray|null} The image data.
   */
  getImageData(e, n, i) {
    Ki || SM(), Ki.clearRect(0, 0, 1, 1);
    let a;
    try {
      Ki.drawImage(e, n, i, 1, 1, 0, 0, 1, 1), a = Ki.getImageData(0, 0, 1, 1).data;
    } catch {
      return Ki = null, null;
    }
    return a;
  }
  /**
   * @param {import('../../Map.js').FrameState} frameState Frame state.
   * @return {string} Background color.
   */
  getBackground(e) {
    let i = this.getLayer().getBackground();
    return typeof i == "function" && (i = i(e.viewState.resolution)), i || void 0;
  }
  /**
   * Get a rendering container from an existing target, if compatible.
   * @param {HTMLElement} target Potential render target.
   * @param {string} transform CSS Transform.
   * @param {string} [backgroundColor] Background color.
   */
  useContainer(e, n, i) {
    const a = this.getLayer().getClassName();
    let o, r;
    if (e && e.className === a && (!i || e && e.style.backgroundColor && vi(
      Qa(e.style.backgroundColor),
      Qa(i)
    ))) {
      const s = e.firstElementChild;
      s instanceof HTMLCanvasElement && (r = s.getContext("2d"));
    }
    if (r && r.canvas.style.transform === n ? (this.container = e, this.context = r, this.containerReused = !0) : this.containerReused ? (this.container = null, this.context = null, this.containerReused = !1) : this.container && (this.container.style.backgroundColor = null), !this.container) {
      o = document.createElement("div"), o.className = a;
      let s = o.style;
      s.position = "absolute", s.width = "100%", s.height = "100%", r = tt();
      const l = r.canvas;
      o.appendChild(l), s = l.style, s.position = "absolute", s.left = "0", s.transformOrigin = "top left", this.container = o, this.context = r;
    }
    !this.containerReused && i && !this.container.style.backgroundColor && (this.container.style.backgroundColor = i);
  }
  /**
   * @param {CanvasRenderingContext2D} context Context.
   * @param {import("../../Map.js").FrameState} frameState Frame state.
   * @param {import("../../extent.js").Extent} extent Clip extent.
   * @protected
   */
  clipUnrotated(e, n, i) {
    const a = Vi(i), o = Fr(i), r = Br(i), s = Vr(i);
    Je(n.coordinateToPixelTransform, a), Je(n.coordinateToPixelTransform, o), Je(n.coordinateToPixelTransform, r), Je(n.coordinateToPixelTransform, s);
    const l = this.inversePixelTransform;
    Je(l, a), Je(l, o), Je(l, r), Je(l, s), e.save(), e.beginPath(), e.moveTo(Math.round(a[0]), Math.round(a[1])), e.lineTo(Math.round(o[0]), Math.round(o[1])), e.lineTo(Math.round(r[0]), Math.round(r[1])), e.lineTo(Math.round(s[0]), Math.round(s[1])), e.clip();
  }
  /**
   * @param {import("../../render/EventType.js").default} type Event type.
   * @param {CanvasRenderingContext2D} context Context.
   * @param {import("../../Map.js").FrameState} frameState Frame state.
   * @private
   */
  dispatchRenderEvent_(e, n, i) {
    const a = this.getLayer();
    if (a.hasListener(e)) {
      const o = new Tg(
        e,
        this.inversePixelTransform,
        i,
        n
      );
      a.dispatchEvent(o);
    }
  }
  /**
   * @param {CanvasRenderingContext2D} context Context.
   * @param {import("../../Map.js").FrameState} frameState Frame state.
   * @protected
   */
  preRender(e, n) {
    this.frameState = n, !n.declutter && this.dispatchRenderEvent_(Ot.PRERENDER, e, n);
  }
  /**
   * @param {CanvasRenderingContext2D} context Context.
   * @param {import("../../Map.js").FrameState} frameState Frame state.
   * @protected
   */
  postRender(e, n) {
    n.declutter || this.dispatchRenderEvent_(Ot.POSTRENDER, e, n);
  }
  /**
   * @param {import("../../Map.js").FrameState} frameState Frame state.
   */
  renderDeferredInternal(e) {
  }
  /**
   * @param {import("../../Map.js").FrameState} frameState Frame state.
   * @return {import('../../render/canvas/ZIndexContext.js').ZIndexContextProxy} Context.
   */
  getRenderContext(e) {
    return e.declutter && !this.deferredContext_ && (this.deferredContext_ = new Wg()), e.declutter ? this.deferredContext_.getContext() : this.context;
  }
  /**
   * @param {import("../../Map.js").FrameState} frameState Frame state.
   * @override
   */
  renderDeferred(e) {
    e.declutter && (this.dispatchRenderEvent_(
      Ot.PRERENDER,
      this.context,
      e
    ), e.declutter && this.deferredContext_ && (this.deferredContext_.draw(this.context), this.deferredContext_.clear()), this.renderDeferredInternal(e), this.dispatchRenderEvent_(
      Ot.POSTRENDER,
      this.context,
      e
    ));
  }
  /**
   * Creates a transform for rendering to an element that will be rotated after rendering.
   * @param {import("../../coordinate.js").Coordinate} center Center.
   * @param {number} resolution Resolution.
   * @param {number} rotation Rotation.
   * @param {number} pixelRatio Pixel ratio.
   * @param {number} width Width of the rendered element (in pixels).
   * @param {number} height Height of the rendered element (in pixels).
   * @param {number} offsetX Offset on the x-axis in view coordinates.
   * @protected
   * @return {!import("../../transform.js").Transform} Transform.
   */
  getRenderTransform(e, n, i, a, o, r, s) {
    const l = o / 2, c = r / 2, u = a / n, d = -u, h = -e[0] + s, f = -e[1];
    return Cn(
      this.tempTransform,
      l,
      c,
      u,
      d,
      -i,
      h,
      f
    );
  }
  /**
   * Clean up.
   */
  disposeInternal() {
    delete this.frameState, super.disposeInternal();
  }
}
const Ug = bM;
class MM extends Ug {
  /**
   * @param {LayerType} tileLayer Tile layer.
   */
  constructor(e) {
    super(e), this.extentChanged = !0, this.renderedExtent_ = null, this.renderedPixelRatio, this.renderedProjection = null, this.renderedRevision, this.renderedTiles = [], this.newTiles_ = !1, this.tmpExtent = Gt(), this.tmpTileRange_ = new Dg(0, 0, 0, 0);
  }
  /**
   * @protected
   * @param {import("../../Tile.js").default} tile Tile.
   * @return {boolean} Tile is drawable.
   */
  isDrawableTile(e) {
    const n = this.getLayer(), i = e.getState(), a = n.getUseInterimTilesOnError();
    return i == re.LOADED || i == re.EMPTY || i == re.ERROR && !a;
  }
  /**
   * @param {number} z Tile coordinate z.
   * @param {number} x Tile coordinate x.
   * @param {number} y Tile coordinate y.
   * @param {import("../../Map.js").FrameState} frameState Frame state.
   * @return {!import("../../Tile.js").default} Tile.
   */
  getTile(e, n, i, a) {
    const o = a.pixelRatio, r = a.viewState.projection, s = this.getLayer();
    let c = s.getSource().getTile(e, n, i, o, r);
    return c.getState() == re.ERROR && s.getUseInterimTilesOnError() && s.getPreload() > 0 && (this.newTiles_ = !0), this.isDrawableTile(c) || (c = c.getInterimTile()), c;
  }
  /**
   * @param {import("../../pixel.js").Pixel} pixel Pixel.
   * @return {Uint8ClampedArray} Data at the pixel location.
   */
  getData(e) {
    const n = this.frameState;
    if (!n)
      return null;
    const i = this.getLayer(), a = Je(
      n.pixelToCoordinateTransform,
      e.slice()
    ), o = i.getExtent();
    if (o && !da(o, a))
      return null;
    const r = n.pixelRatio, s = n.viewState.projection, l = n.viewState, c = i.getRenderSource(), u = c.getTileGridForProjection(l.projection), d = c.getTilePixelRatio(n.pixelRatio);
    for (let h = u.getZForResolution(l.resolution); h >= u.getMinZoom(); --h) {
      const f = u.getTileCoordForCoordAndZ(a, h), g = c.getTile(
        h,
        f[1],
        f[2],
        r,
        s
      );
      if (!(g instanceof Vg || g instanceof Qs) || g instanceof Qs && g.getState() === re.EMPTY)
        return null;
      if (g.getState() !== re.LOADED)
        continue;
      const m = u.getOrigin(h), v = At(u.getTileSize(h)), y = u.getResolution(h), p = Math.floor(
        d * ((a[0] - m[0]) / y - f[1] * v[0])
      ), M = Math.floor(
        d * ((m[1] - a[1]) / y - f[2] * v[1])
      ), S = Math.round(
        d * c.getGutterForProjection(l.projection)
      );
      return this.getImageData(g.getImage(), p + S, M + S);
    }
    return null;
  }
  /**
   * @param {Object<number, Object<string, import("../../Tile.js").default>>} tiles Lookup of loaded tiles by zoom level.
   * @param {number} zoom Zoom level.
   * @param {import("../../Tile.js").default} tile Tile.
   * @return {boolean|void} If `false`, the tile will not be considered loaded.
   */
  loadedTileCallback(e, n, i) {
    return this.isDrawableTile(i) ? super.loadedTileCallback(e, n, i) : !1;
  }
  /**
   * Determine whether render should be called.
   * @param {import("../../Map.js").FrameState} frameState Frame state.
   * @return {boolean} Layer is ready to be rendered.
   */
  prepareFrame(e) {
    return !!this.getLayer().getSource();
  }
  /**
   * Render the layer.
   * @param {import("../../Map.js").FrameState} frameState Frame state.
   * @param {HTMLElement} target Target that may be used to render content to.
   * @return {HTMLElement} The rendered element.
   */
  renderFrame(e, n) {
    const i = e.layerStatesArray[e.layerIndex], a = e.viewState, o = a.projection, r = a.resolution, s = a.center, l = a.rotation, c = e.pixelRatio, u = this.getLayer(), d = u.getSource(), h = d.getRevision(), f = d.getTileGridForProjection(o), g = f.getZForResolution(r, d.zDirection), m = f.getResolution(g);
    let v = e.extent;
    const y = e.viewState.resolution, p = d.getTilePixelRatio(c), M = Math.round(Re(v) / y * c), S = Math.round(ut(v) / y * c), b = i.extent && xi(i.extent);
    b && (v = Ga(
      v,
      xi(i.extent)
    ));
    const T = m * M / 2 / p, _ = m * S / 2 / p, P = [
      s[0] - T,
      s[1] - _,
      s[0] + T,
      s[1] + _
    ], w = f.getTileRangeForExtentAndZ(v, g), I = {};
    I[g] = {};
    const z = this.createLoadedTileFinder(
      d,
      o,
      I
    ), A = this.tmpExtent, R = this.tmpTileRange_;
    this.newTiles_ = !1;
    const V = l ? $s(
      a.center,
      y,
      l,
      e.size
    ) : void 0;
    for (let U = w.minX; U <= w.maxX; ++U)
      for (let L = w.minY; L <= w.maxY; ++L) {
        if (l && !f.tileCoordIntersectsViewport([g, U, L], V))
          continue;
        const ee = this.getTile(g, U, L, e);
        if (this.isDrawableTile(ee)) {
          const j = we(this);
          if (ee.getState() == re.LOADED) {
            I[g][ee.tileCoord.toString()] = ee;
            let le = ee.inTransition(j);
            le && i.opacity !== 1 && (ee.endTransition(j), le = !1), !this.newTiles_ && (le || !this.renderedTiles.includes(ee)) && (this.newTiles_ = !0);
          }
          if (ee.getAlpha(j, e.time) === 1)
            continue;
        }
        const J = f.getTileCoordChildTileRange(
          ee.tileCoord,
          R,
          A
        );
        let ae = !1;
        J && (ae = z(g + 1, J)), ae || f.forEachTileCoordParentTileRange(
          ee.tileCoord,
          z,
          R,
          A
        );
      }
    const N = m / r * c / p;
    Cn(
      this.pixelTransform,
      e.size[0] / 2,
      e.size[1] / 2,
      1 / c,
      1 / c,
      l,
      -M / 2,
      -S / 2
    );
    const G = Uf(this.pixelTransform);
    this.useContainer(n, G, this.getBackground(e));
    const X = this.getRenderContext(e), E = this.context.canvas;
    Ql(this.inversePixelTransform, this.pixelTransform), Cn(
      this.tempTransform,
      M / 2,
      S / 2,
      N,
      N,
      0,
      -M / 2,
      -S / 2
    ), E.width != M || E.height != S ? (E.width = M, E.height = S) : this.containerReused || X.clearRect(0, 0, M, S), b && this.clipUnrotated(X, e, b), d.getInterpolate() || (X.imageSmoothingEnabled = !1), this.preRender(X, e), this.renderedTiles.length = 0;
    let B = Object.keys(I).map(Number);
    B.sort(Dn);
    let D, k, W;
    i.opacity === 1 && (!this.containerReused || d.getOpaque(e.viewState.projection)) ? B = B.reverse() : (D = [], k = []);
    for (let U = B.length - 1; U >= 0; --U) {
      const L = B[U], ee = d.getTilePixelSize(
        L,
        c,
        o
      ), ae = f.getResolution(L) / m, j = ee[0] * ae * N, le = ee[1] * ae * N, pe = f.getTileCoordForCoordAndZ(
        Vi(P),
        L
      ), We = f.getTileCoordExtent(pe), ye = Je(this.tempTransform, [
        p * (We[0] - P[0]) / m,
        p * (P[3] - We[3]) / m
      ]), Ue = p * d.getGutterForProjection(o), Fe = I[L];
      for (const at in Fe) {
        const ze = (
          /** @type {import("../../ImageTile.js").default} */
          Fe[at]
        ), pt = ze.tileCoord, zt = pe[1] - pt[1], Bi = Math.round(ye[0] - (zt - 1) * j), Ci = pe[2] - pt[2], Pn = Math.round(ye[1] - (Ci - 1) * le), Ke = Math.round(ye[0] - zt * j), $t = Math.round(ye[1] - Ci * le), nn = Bi - Ke, Wt = Pn - $t, Fi = g === L, ki = Fi && ze.getAlpha(we(this), e.time) !== 1;
        let jn = !1;
        if (!ki)
          if (D) {
            W = [Ke, $t, Ke + nn, $t, Ke + nn, $t + Wt, Ke, $t + Wt];
            for (let Tn = 0, Hr = D.length; Tn < Hr; ++Tn)
              if (g !== L && L < k[Tn]) {
                const ft = D[Tn];
                Mt(
                  [Ke, $t, Ke + nn, $t + Wt],
                  [ft[0], ft[3], ft[4], ft[7]]
                ) && (jn || (X.save(), jn = !0), X.beginPath(), X.moveTo(W[0], W[1]), X.lineTo(W[2], W[3]), X.lineTo(W[4], W[5]), X.lineTo(W[6], W[7]), X.moveTo(ft[6], ft[7]), X.lineTo(ft[4], ft[5]), X.lineTo(ft[2], ft[3]), X.lineTo(ft[0], ft[1]), X.clip());
              }
            D.push(W), k.push(L);
          } else
            X.clearRect(Ke, $t, nn, Wt);
        this.drawTileImage(
          ze,
          e,
          Ke,
          $t,
          nn,
          Wt,
          Ue,
          Fi
        ), D && !ki ? (jn && X.restore(), this.renderedTiles.unshift(ze)) : this.renderedTiles.push(ze), this.updateUsedTiles(e.usedTiles, d, ze);
      }
    }
    return this.renderedRevision = h, this.renderedResolution = m, this.extentChanged = !this.renderedExtent_ || !Ka(this.renderedExtent_, P), this.renderedExtent_ = P, this.renderedPixelRatio = c, this.renderedProjection = o, this.manageTilePyramid(
      e,
      d,
      f,
      c,
      o,
      v,
      g,
      u.getPreload()
    ), this.scheduleExpireCache(e, d), this.postRender(this.context, e), i.extent && X.restore(), X.imageSmoothingEnabled = !0, G !== E.style.transform && (E.style.transform = G), this.container;
  }
  /**
   * @param {import("../../ImageTile.js").default} tile Tile.
   * @param {import("../../Map.js").FrameState} frameState Frame state.
   * @param {number} x Left of the tile.
   * @param {number} y Top of the tile.
   * @param {number} w Width of the tile.
   * @param {number} h Height of the tile.
   * @param {number} gutter Tile gutter.
   * @param {boolean} transition Apply an alpha transition.
   */
  drawTileImage(e, n, i, a, o, r, s, l) {
    const c = this.getTileImage(e);
    if (!c)
      return;
    const u = this.getRenderContext(n), d = we(this), h = n.layerStatesArray[n.layerIndex], f = h.opacity * (l ? e.getAlpha(d, n.time) : 1), g = f !== u.globalAlpha;
    g && (u.save(), u.globalAlpha = f), u.drawImage(
      c,
      s,
      s,
      c.width - 2 * s,
      c.height - 2 * s,
      i,
      a,
      o,
      r
    ), g && u.restore(), f !== h.opacity ? n.animate = !0 : l && e.endTransition(d);
  }
  /**
   * @return {HTMLCanvasElement} Image
   */
  getImage() {
    const e = this.context;
    return e ? e.canvas : null;
  }
  /**
   * Get the image from a tile.
   * @param {import("../../ImageTile.js").default} tile Tile.
   * @return {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} Image.
   * @protected
   */
  getTileImage(e) {
    return e.getImage();
  }
  /**
   * @param {import("../../Map.js").FrameState} frameState Frame state.
   * @param {import("../../source/Tile.js").default} tileSource Tile source.
   * @protected
   */
  scheduleExpireCache(e, n) {
    if (n.canExpireCache()) {
      const i = (function(a, o, r) {
        const s = we(a);
        s in r.usedTiles && a.expireCache(
          r.viewState.projection,
          r.usedTiles[s]
        );
      }).bind(null, n);
      e.postRenderFunctions.push(
        /** @type {import("../../Map.js").PostRenderFunction} */
        i
      );
    }
  }
  /**
   * @param {!Object<string, !Object<string, boolean>>} usedTiles Used tiles.
   * @param {import("../../source/Tile.js").default} tileSource Tile source.
   * @param {import('../../Tile.js').default} tile Tile.
   * @protected
   */
  updateUsedTiles(e, n, i) {
    const a = we(n);
    a in e || (e[a] = {}), e[a][i.getKey()] = !0;
  }
  /**
   * Manage tile pyramid.
   * This function performs a number of functions related to the tiles at the
   * current zoom and lower zoom levels:
   * - registers idle tiles in frameState.wantedTiles so that they are not
   *   discarded by the tile queue
   * - enqueues missing tiles
   * @param {import("../../Map.js").FrameState} frameState Frame state.
   * @param {import("../../source/Tile.js").default} tileSource Tile source.
   * @param {import("../../tilegrid/TileGrid.js").default} tileGrid Tile grid.
   * @param {number} pixelRatio Pixel ratio.
   * @param {import("../../proj/Projection.js").default} projection Projection.
   * @param {import("../../extent.js").Extent} extent Extent.
   * @param {number} currentZ Current Z.
   * @param {number} preload Load low resolution tiles up to `preload` levels.
   * @param {function(import("../../Tile.js").default):void} [tileCallback] Tile callback.
   * @protected
   */
  manageTilePyramid(e, n, i, a, o, r, s, l, c) {
    const u = we(n);
    u in e.wantedTiles || (e.wantedTiles[u] = {});
    const d = e.wantedTiles[u], h = e.tileQueue, f = i.getMinZoom(), g = e.viewState.rotation, m = g ? $s(
      e.viewState.center,
      e.viewState.resolution,
      g,
      e.size
    ) : void 0;
    let v = 0, y, p, M, S, b, T;
    for (T = f; T <= s; ++T)
      for (p = i.getTileRangeForExtentAndZ(r, T, p), M = i.getResolution(T), S = p.minX; S <= p.maxX; ++S)
        for (b = p.minY; b <= p.maxY; ++b)
          g && !i.tileCoordIntersectsViewport([T, S, b], m) || (s - T <= l ? (++v, y = n.getTile(T, S, b, a, o), y.getState() == re.IDLE && (d[y.getKey()] = !0, h.isKeyQueued(y.getKey()) || h.enqueue([
            y,
            u,
            i.getTileCoordCenter(y.tileCoord),
            M
          ])), c !== void 0 && c(y)) : n.useTile(T, S, b, o));
    n.updateCacheSize(v, o);
  }
}
const xM = MM;
class PM extends CM {
  /**
   * @param {import("./BaseTile.js").Options<TileSourceType>} [options] Tile layer options.
   */
  constructor(e) {
    super(e);
  }
  createRenderer() {
    return new xM(this);
  }
}
const TM = PM, Ao = {
  BEGIN_GEOMETRY: 0,
  BEGIN_PATH: 1,
  CIRCLE: 2,
  CLOSE_PATH: 3,
  CUSTOM: 4,
  DRAW_CHARS: 5,
  DRAW_IMAGE: 6,
  END_GEOMETRY: 7,
  FILL: 8,
  MOVE_TO_LINE_TO: 9,
  SET_FILL_STYLE: 10,
  SET_STROKE_STYLE: 11,
  STROKE: 12
}, Xo = [Ao.FILL], ii = [Ao.STROKE], wi = [Ao.BEGIN_PATH], Md = [Ao.CLOSE_PATH], ce = Ao;
class wM {
  /**
   * Render a geometry with a custom renderer.
   *
   * @param {import("../geom/SimpleGeometry.js").default} geometry Geometry.
   * @param {import("../Feature.js").FeatureLike} feature Feature.
   * @param {Function} renderer Renderer.
   * @param {Function} hitDetectionRenderer Renderer.
   * @param {number} [index] Render order index.
   */
  drawCustom(e, n, i, a, o) {
  }
  /**
   * Render a geometry.
   *
   * @param {import("../geom/Geometry.js").default} geometry The geometry to render.
   */
  drawGeometry(e) {
  }
  /**
   * Set the rendering style.
   *
   * @param {import("../style/Style.js").default} style The rendering style.
   */
  setStyle(e) {
  }
  /**
   * @param {import("../geom/Circle.js").default} circleGeometry Circle geometry.
   * @param {import("../Feature.js").default} feature Feature.
   * @param {number} [index] Render order index.
   */
  drawCircle(e, n, i) {
  }
  /**
   * @param {import("../Feature.js").default} feature Feature.
   * @param {import("../style/Style.js").default} style Style.
   * @param {number} [index] Render order index.
   */
  drawFeature(e, n, i) {
  }
  /**
   * @param {import("../geom/GeometryCollection.js").default} geometryCollectionGeometry Geometry collection.
   * @param {import("../Feature.js").default} feature Feature.
   * @param {number} [index] Render order index.
   */
  drawGeometryCollection(e, n, i) {
  }
  /**
   * @param {import("../geom/LineString.js").default|import("./Feature.js").default} lineStringGeometry Line string geometry.
   * @param {import("../Feature.js").FeatureLike} feature Feature.
   * @param {number} [index] Render order index.
   */
  drawLineString(e, n, i) {
  }
  /**
   * @param {import("../geom/MultiLineString.js").default|import("./Feature.js").default} multiLineStringGeometry MultiLineString geometry.
   * @param {import("../Feature.js").FeatureLike} feature Feature.
   * @param {number} [index] Render order index.
   */
  drawMultiLineString(e, n, i) {
  }
  /**
   * @param {import("../geom/MultiPoint.js").default|import("./Feature.js").default} multiPointGeometry MultiPoint geometry.
   * @param {import("../Feature.js").FeatureLike} feature Feature.
   * @param {number} [index] Render order index.
   */
  drawMultiPoint(e, n, i) {
  }
  /**
   * @param {import("../geom/MultiPolygon.js").default} multiPolygonGeometry MultiPolygon geometry.
   * @param {import("../Feature.js").FeatureLike} feature Feature.
   * @param {number} [index] Render order index.
   */
  drawMultiPolygon(e, n, i) {
  }
  /**
   * @param {import("../geom/Point.js").default|import("./Feature.js").default} pointGeometry Point geometry.
   * @param {import("../Feature.js").FeatureLike} feature Feature.
   * @param {number} [index] Render order index.
   */
  drawPoint(e, n, i) {
  }
  /**
   * @param {import("../geom/Polygon.js").default|import("./Feature.js").default} polygonGeometry Polygon geometry.
   * @param {import("../Feature.js").FeatureLike} feature Feature.
   * @param {number} [index] Render order index.
   */
  drawPolygon(e, n, i) {
  }
  /**
   * @param {import("../geom/SimpleGeometry.js").default|import("./Feature.js").default} geometry Geometry.
   * @param {import("../Feature.js").FeatureLike} feature Feature.
   * @param {number} [index] Render order index.
   */
  drawText(e, n, i) {
  }
  /**
   * @param {import("../style/Fill.js").default} fillStyle Fill style.
   * @param {import("../style/Stroke.js").default} strokeStyle Stroke style.
   */
  setFillStrokeStyle(e, n) {
  }
  /**
   * @param {import("../style/Image.js").default} imageStyle Image style.
   * @param {import("../render/canvas.js").DeclutterImageWithText} [declutterImageWithText] Shared data for combined decluttering with a text style.
   */
  setImageStyle(e, n) {
  }
  /**
   * @param {import("../style/Text.js").default} textStyle Text style.
   * @param {import("../render/canvas.js").DeclutterImageWithText} [declutterImageWithText] Shared data for combined decluttering with an image style.
   */
  setTextStyle(e, n) {
  }
}
const Xg = wM;
class EM extends Xg {
  /**
   * @param {number} tolerance Tolerance.
   * @param {import("../../extent.js").Extent} maxExtent Maximum extent.
   * @param {number} resolution Resolution.
   * @param {number} pixelRatio Pixel ratio.
   */
  constructor(e, n, i, a) {
    super(), this.tolerance = e, this.maxExtent = n, this.pixelRatio = a, this.maxLineWidth = 0, this.resolution = i, this.beginGeometryInstruction1_ = null, this.beginGeometryInstruction2_ = null, this.bufferedMaxExtent_ = null, this.instructions = [], this.coordinates = [], this.tmpCoordinate_ = [], this.hitDetectionInstructions = [], this.state = /** @type {import("../canvas.js").FillStrokeState} */
    {};
  }
  /**
   * @protected
   * @param {Array<number>} dashArray Dash array.
   * @return {Array<number>} Dash array with pixel ratio applied
   */
  applyPixelRatio(e) {
    const n = this.pixelRatio;
    return n == 1 ? e : e.map(function(i) {
      return i * n;
    });
  }
  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} stride Stride.
   * @protected
   * @return {number} My end
   */
  appendFlatPointCoordinates(e, n) {
    const i = this.getBufferedMaxExtent(), a = this.tmpCoordinate_, o = this.coordinates;
    let r = o.length;
    for (let s = 0, l = e.length; s < l; s += n)
      a[0] = e[s], a[1] = e[s + 1], da(i, a) && (o[r++] = a[0], o[r++] = a[1]);
    return r;
  }
  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {number} end End.
   * @param {number} stride Stride.
   * @param {boolean} closed Last input coordinate equals first.
   * @param {boolean} skipFirst Skip first coordinate.
   * @protected
   * @return {number} My end.
   */
  appendFlatLineCoordinates(e, n, i, a, o, r) {
    const s = this.coordinates;
    let l = s.length;
    const c = this.getBufferedMaxExtent();
    r && (n += a);
    let u = e[n], d = e[n + 1];
    const h = this.tmpCoordinate_;
    let f = !0, g, m, v;
    for (g = n + a; g < i; g += a)
      h[0] = e[g], h[1] = e[g + 1], v = Ds(c, h), v !== m ? (f && (s[l++] = u, s[l++] = d, f = !1), s[l++] = h[0], s[l++] = h[1]) : v === qe.INTERSECTING ? (s[l++] = h[0], s[l++] = h[1], f = !1) : f = !0, u = h[0], d = h[1], m = v;
    return (o && f || g === n + a) && (s[l++] = u, s[l++] = d), l;
  }
  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {Array<number>} ends Ends.
   * @param {number} stride Stride.
   * @param {Array<number>} builderEnds Builder ends.
   * @return {number} Offset.
   */
  drawCustomCoordinates_(e, n, i, a, o) {
    for (let r = 0, s = i.length; r < s; ++r) {
      const l = i[r], c = this.appendFlatLineCoordinates(
        e,
        n,
        l,
        a,
        !1,
        !1
      );
      o.push(c), n = l;
    }
    return n;
  }
  /**
   * @param {import("../../geom/SimpleGeometry.js").default} geometry Geometry.
   * @param {import("../../Feature.js").FeatureLike} feature Feature.
   * @param {Function} renderer Renderer.
   * @param {Function} hitDetectionRenderer Renderer.
   * @param {number} [index] Render order index.
   */
  drawCustom(e, n, i, a, o) {
    this.beginGeometry(e, n, o);
    const r = e.getType(), s = e.getStride(), l = this.coordinates.length;
    let c, u, d, h, f;
    switch (r) {
      case "MultiPolygon":
        c = /** @type {import("../../geom/MultiPolygon.js").default} */
        e.getOrientedFlatCoordinates(), h = [];
        const g = (
          /** @type {import("../../geom/MultiPolygon.js").default} */
          e.getEndss()
        );
        f = 0;
        for (let m = 0, v = g.length; m < v; ++m) {
          const y = [];
          f = this.drawCustomCoordinates_(
            c,
            f,
            g[m],
            s,
            y
          ), h.push(y);
        }
        this.instructions.push([
          ce.CUSTOM,
          l,
          h,
          e,
          i,
          Hu,
          o
        ]), this.hitDetectionInstructions.push([
          ce.CUSTOM,
          l,
          h,
          e,
          a || i,
          Hu,
          o
        ]);
        break;
      case "Polygon":
      case "MultiLineString":
        d = [], c = r == "Polygon" ? (
          /** @type {import("../../geom/Polygon.js").default} */
          e.getOrientedFlatCoordinates()
        ) : e.getFlatCoordinates(), f = this.drawCustomCoordinates_(
          c,
          0,
          /** @type {import("../../geom/Polygon.js").default|import("../../geom/MultiLineString.js").default} */
          e.getEnds(),
          s,
          d
        ), this.instructions.push([
          ce.CUSTOM,
          l,
          d,
          e,
          i,
          dr,
          o
        ]), this.hitDetectionInstructions.push([
          ce.CUSTOM,
          l,
          d,
          e,
          a || i,
          dr,
          o
        ]);
        break;
      case "LineString":
      case "Circle":
        c = e.getFlatCoordinates(), u = this.appendFlatLineCoordinates(
          c,
          0,
          c.length,
          s,
          !1,
          !1
        ), this.instructions.push([
          ce.CUSTOM,
          l,
          u,
          e,
          i,
          ta,
          o
        ]), this.hitDetectionInstructions.push([
          ce.CUSTOM,
          l,
          u,
          e,
          a || i,
          ta,
          o
        ]);
        break;
      case "MultiPoint":
        c = e.getFlatCoordinates(), u = this.appendFlatPointCoordinates(c, s), u > l && (this.instructions.push([
          ce.CUSTOM,
          l,
          u,
          e,
          i,
          ta,
          o
        ]), this.hitDetectionInstructions.push([
          ce.CUSTOM,
          l,
          u,
          e,
          a || i,
          ta,
          o
        ]));
        break;
      case "Point":
        c = e.getFlatCoordinates(), this.coordinates.push(c[0], c[1]), u = this.coordinates.length, this.instructions.push([
          ce.CUSTOM,
          l,
          u,
          e,
          i,
          void 0,
          o
        ]), this.hitDetectionInstructions.push([
          ce.CUSTOM,
          l,
          u,
          e,
          a || i,
          void 0,
          o
        ]);
        break;
    }
    this.endGeometry(n);
  }
  /**
   * @protected
   * @param {import("../../geom/Geometry").default|import("../Feature.js").default} geometry The geometry.
   * @param {import("../../Feature.js").FeatureLike} feature Feature.
   * @param {number} index Render order index
   */
  beginGeometry(e, n, i) {
    this.beginGeometryInstruction1_ = [
      ce.BEGIN_GEOMETRY,
      n,
      0,
      e,
      i
    ], this.instructions.push(this.beginGeometryInstruction1_), this.beginGeometryInstruction2_ = [
      ce.BEGIN_GEOMETRY,
      n,
      0,
      e,
      i
    ], this.hitDetectionInstructions.push(this.beginGeometryInstruction2_);
  }
  /**
   * @return {import("../canvas.js").SerializableInstructions} the serializable instructions.
   */
  finish() {
    return {
      instructions: this.instructions,
      hitDetectionInstructions: this.hitDetectionInstructions,
      coordinates: this.coordinates
    };
  }
  /**
   * Reverse the hit detection instructions.
   */
  reverseHitDetectionInstructions() {
    const e = this.hitDetectionInstructions;
    e.reverse();
    let n;
    const i = e.length;
    let a, o, r = -1;
    for (n = 0; n < i; ++n)
      a = e[n], o = /** @type {import("./Instruction.js").default} */
      a[0], o == ce.END_GEOMETRY ? r = n : o == ce.BEGIN_GEOMETRY && (a[2] = n, zp(this.hitDetectionInstructions, r, n), r = -1);
  }
  /**
   * @param {import("../../style/Fill.js").default} fillStyle Fill style.
   * @param {import("../../style/Stroke.js").default} strokeStyle Stroke style.
   */
  setFillStrokeStyle(e, n) {
    const i = this.state;
    if (e) {
      const a = e.getColor();
      i.fillPatternScale = a && typeof a == "object" && "src" in a ? this.pixelRatio : 1, i.fillStyle = dn(
        a || bt
      );
    } else
      i.fillStyle = void 0;
    if (n) {
      const a = n.getColor();
      i.strokeStyle = dn(
        a || to
      );
      const o = n.getLineCap();
      i.lineCap = o !== void 0 ? o : ha;
      const r = n.getLineDash();
      i.lineDash = r ? r.slice() : Gn;
      const s = n.getLineDashOffset();
      i.lineDashOffset = s || Nn;
      const l = n.getLineJoin();
      i.lineJoin = l !== void 0 ? l : fa;
      const c = n.getWidth();
      i.lineWidth = c !== void 0 ? c : io;
      const u = n.getMiterLimit();
      i.miterLimit = u !== void 0 ? u : eo, i.lineWidth > this.maxLineWidth && (this.maxLineWidth = i.lineWidth, this.bufferedMaxExtent_ = null);
    } else
      i.strokeStyle = void 0, i.lineCap = void 0, i.lineDash = null, i.lineDashOffset = void 0, i.lineJoin = void 0, i.lineWidth = void 0, i.miterLimit = void 0;
  }
  /**
   * @param {import("../canvas.js").FillStrokeState} state State.
   * @return {Array<*>} Fill instruction.
   */
  createFill(e) {
    const n = e.fillStyle, i = [ce.SET_FILL_STYLE, n];
    return typeof n != "string" && i.push(e.fillPatternScale), i;
  }
  /**
   * @param {import("../canvas.js").FillStrokeState} state State.
   */
  applyStroke(e) {
    this.instructions.push(this.createStroke(e));
  }
  /**
   * @param {import("../canvas.js").FillStrokeState} state State.
   * @return {Array<*>} Stroke instruction.
   */
  createStroke(e) {
    return [
      ce.SET_STROKE_STYLE,
      e.strokeStyle,
      e.lineWidth * this.pixelRatio,
      e.lineCap,
      e.lineJoin,
      e.miterLimit,
      this.applyPixelRatio(e.lineDash),
      e.lineDashOffset * this.pixelRatio
    ];
  }
  /**
   * @param {import("../canvas.js").FillStrokeState} state State.
   * @param {function(this:CanvasBuilder, import("../canvas.js").FillStrokeState):Array<*>} createFill Create fill.
   */
  updateFillStyle(e, n) {
    const i = e.fillStyle;
    (typeof i != "string" || e.currentFillStyle != i) && (i !== void 0 && this.instructions.push(n.call(this, e)), e.currentFillStyle = i);
  }
  /**
   * @param {import("../canvas.js").FillStrokeState} state State.
   * @param {function(this:CanvasBuilder, import("../canvas.js").FillStrokeState): void} applyStroke Apply stroke.
   */
  updateStrokeStyle(e, n) {
    const i = e.strokeStyle, a = e.lineCap, o = e.lineDash, r = e.lineDashOffset, s = e.lineJoin, l = e.lineWidth, c = e.miterLimit;
    (e.currentStrokeStyle != i || e.currentLineCap != a || o != e.currentLineDash && !vi(e.currentLineDash, o) || e.currentLineDashOffset != r || e.currentLineJoin != s || e.currentLineWidth != l || e.currentMiterLimit != c) && (i !== void 0 && n.call(this, e), e.currentStrokeStyle = i, e.currentLineCap = a, e.currentLineDash = o, e.currentLineDashOffset = r, e.currentLineJoin = s, e.currentLineWidth = l, e.currentMiterLimit = c);
  }
  /**
   * @param {import("../../Feature.js").FeatureLike} feature Feature.
   */
  endGeometry(e) {
    this.beginGeometryInstruction1_[2] = this.instructions.length, this.beginGeometryInstruction1_ = null, this.beginGeometryInstruction2_[2] = this.hitDetectionInstructions.length, this.beginGeometryInstruction2_ = null;
    const n = [ce.END_GEOMETRY, e];
    this.instructions.push(n), this.hitDetectionInstructions.push(n);
  }
  /**
   * Get the buffered rendering extent.  Rendering will be clipped to the extent
   * provided to the constructor.  To account for symbolizers that may intersect
   * this extent, we calculate a buffered extent (e.g. based on stroke width).
   * @return {import("../../extent.js").Extent} The buffered rendering extent.
   * @protected
   */
  getBufferedMaxExtent() {
    if (!this.bufferedMaxExtent_ && (this.bufferedMaxExtent_ = Rf(this.maxExtent), this.maxLineWidth > 0)) {
      const e = this.resolution * (this.maxLineWidth + 1) / 2;
      Ul(this.bufferedMaxExtent_, e, this.bufferedMaxExtent_);
    }
    return this.bufferedMaxExtent_;
  }
}
const Ro = EM;
class AM extends Ro {
  /**
   * @param {number} tolerance Tolerance.
   * @param {import("../../extent.js").Extent} maxExtent Maximum extent.
   * @param {number} resolution Resolution.
   * @param {number} pixelRatio Pixel ratio.
   */
  constructor(e, n, i, a) {
    super(e, n, i, a), this.hitDetectionImage_ = null, this.image_ = null, this.imagePixelRatio_ = void 0, this.anchorX_ = void 0, this.anchorY_ = void 0, this.height_ = void 0, this.opacity_ = void 0, this.originX_ = void 0, this.originY_ = void 0, this.rotateWithView_ = void 0, this.rotation_ = void 0, this.scale_ = void 0, this.width_ = void 0, this.declutterMode_ = void 0, this.declutterImageWithText_ = void 0;
  }
  /**
   * @param {import("../../geom/Point.js").default|import("../Feature.js").default} pointGeometry Point geometry.
   * @param {import("../../Feature.js").FeatureLike} feature Feature.
   * @param {number} [index] Render order index.
   */
  drawPoint(e, n, i) {
    if (!this.image_ || this.maxExtent && !da(this.maxExtent, e.getFlatCoordinates()))
      return;
    this.beginGeometry(e, n, i);
    const a = e.getFlatCoordinates(), o = e.getStride(), r = this.coordinates.length, s = this.appendFlatPointCoordinates(a, o);
    this.instructions.push([
      ce.DRAW_IMAGE,
      r,
      s,
      this.image_,
      // Remaining arguments to DRAW_IMAGE are in alphabetical order
      this.anchorX_ * this.imagePixelRatio_,
      this.anchorY_ * this.imagePixelRatio_,
      Math.ceil(this.height_ * this.imagePixelRatio_),
      this.opacity_,
      this.originX_ * this.imagePixelRatio_,
      this.originY_ * this.imagePixelRatio_,
      this.rotateWithView_,
      this.rotation_,
      [
        this.scale_[0] * this.pixelRatio / this.imagePixelRatio_,
        this.scale_[1] * this.pixelRatio / this.imagePixelRatio_
      ],
      Math.ceil(this.width_ * this.imagePixelRatio_),
      this.declutterMode_,
      this.declutterImageWithText_
    ]), this.hitDetectionInstructions.push([
      ce.DRAW_IMAGE,
      r,
      s,
      this.hitDetectionImage_,
      // Remaining arguments to DRAW_IMAGE are in alphabetical order
      this.anchorX_,
      this.anchorY_,
      this.height_,
      1,
      this.originX_,
      this.originY_,
      this.rotateWithView_,
      this.rotation_,
      this.scale_,
      this.width_,
      this.declutterMode_,
      this.declutterImageWithText_
    ]), this.endGeometry(n);
  }
  /**
   * @param {import("../../geom/MultiPoint.js").default|import("../Feature.js").default} multiPointGeometry MultiPoint geometry.
   * @param {import("../../Feature.js").FeatureLike} feature Feature.
   * @param {number} [index] Render order index.
   */
  drawMultiPoint(e, n, i) {
    if (!this.image_)
      return;
    this.beginGeometry(e, n, i);
    const a = e.getFlatCoordinates(), o = [];
    for (let l = 0, c = a.length; l < c; l += e.getStride())
      (!this.maxExtent || da(this.maxExtent, a.slice(l, l + 2))) && o.push(
        a[l],
        a[l + 1]
      );
    const r = this.coordinates.length, s = this.appendFlatPointCoordinates(o, 2);
    this.instructions.push([
      ce.DRAW_IMAGE,
      r,
      s,
      this.image_,
      // Remaining arguments to DRAW_IMAGE are in alphabetical order
      this.anchorX_ * this.imagePixelRatio_,
      this.anchorY_ * this.imagePixelRatio_,
      Math.ceil(this.height_ * this.imagePixelRatio_),
      this.opacity_,
      this.originX_ * this.imagePixelRatio_,
      this.originY_ * this.imagePixelRatio_,
      this.rotateWithView_,
      this.rotation_,
      [
        this.scale_[0] * this.pixelRatio / this.imagePixelRatio_,
        this.scale_[1] * this.pixelRatio / this.imagePixelRatio_
      ],
      Math.ceil(this.width_ * this.imagePixelRatio_),
      this.declutterMode_,
      this.declutterImageWithText_
    ]), this.hitDetectionInstructions.push([
      ce.DRAW_IMAGE,
      r,
      s,
      this.hitDetectionImage_,
      // Remaining arguments to DRAW_IMAGE are in alphabetical order
      this.anchorX_,
      this.anchorY_,
      this.height_,
      1,
      this.originX_,
      this.originY_,
      this.rotateWithView_,
      this.rotation_,
      this.scale_,
      this.width_,
      this.declutterMode_,
      this.declutterImageWithText_
    ]), this.endGeometry(n);
  }
  /**
   * @return {import("../canvas.js").SerializableInstructions} the serializable instructions.
   */
  finish() {
    return this.reverseHitDetectionInstructions(), this.anchorX_ = void 0, this.anchorY_ = void 0, this.hitDetectionImage_ = null, this.image_ = null, this.imagePixelRatio_ = void 0, this.height_ = void 0, this.scale_ = void 0, this.opacity_ = void 0, this.originX_ = void 0, this.originY_ = void 0, this.rotateWithView_ = void 0, this.rotation_ = void 0, this.width_ = void 0, super.finish();
  }
  /**
   * @param {import("../../style/Image.js").default} imageStyle Image style.
   * @param {Object} [sharedData] Shared data.
   */
  setImageStyle(e, n) {
    const i = e.getAnchor(), a = e.getSize(), o = e.getOrigin();
    this.imagePixelRatio_ = e.getPixelRatio(this.pixelRatio), this.anchorX_ = i[0], this.anchorY_ = i[1], this.hitDetectionImage_ = e.getHitDetectionImage(), this.image_ = e.getImage(this.pixelRatio), this.height_ = a[1], this.opacity_ = e.getOpacity(), this.originX_ = o[0], this.originY_ = o[1], this.rotateWithView_ = e.getRotateWithView(), this.rotation_ = e.getRotation(), this.scale_ = e.getScaleArray(), this.width_ = a[0], this.declutterMode_ = e.getDeclutterMode(), this.declutterImageWithText_ = n;
  }
}
const RM = AM;
class IM extends Ro {
  /**
   * @param {number} tolerance Tolerance.
   * @param {import("../../extent.js").Extent} maxExtent Maximum extent.
   * @param {number} resolution Resolution.
   * @param {number} pixelRatio Pixel ratio.
   */
  constructor(e, n, i, a) {
    super(e, n, i, a);
  }
  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {number} end End.
   * @param {number} stride Stride.
   * @private
   * @return {number} end.
   */
  drawFlatCoordinates_(e, n, i, a) {
    const o = this.coordinates.length, r = this.appendFlatLineCoordinates(
      e,
      n,
      i,
      a,
      !1,
      !1
    ), s = [
      ce.MOVE_TO_LINE_TO,
      o,
      r
    ];
    return this.instructions.push(s), this.hitDetectionInstructions.push(s), i;
  }
  /**
   * @param {import("../../geom/LineString.js").default|import("../Feature.js").default} lineStringGeometry Line string geometry.
   * @param {import("../../Feature.js").FeatureLike} feature Feature.
   * @param {number} [index] Render order index.
   */
  drawLineString(e, n, i) {
    const a = this.state, o = a.strokeStyle, r = a.lineWidth;
    if (o === void 0 || r === void 0)
      return;
    this.updateStrokeStyle(a, this.applyStroke), this.beginGeometry(e, n, i), this.hitDetectionInstructions.push(
      [
        ce.SET_STROKE_STYLE,
        a.strokeStyle,
        a.lineWidth,
        a.lineCap,
        a.lineJoin,
        a.miterLimit,
        Gn,
        Nn
      ],
      wi
    );
    const s = e.getFlatCoordinates(), l = e.getStride();
    this.drawFlatCoordinates_(
      s,
      0,
      s.length,
      l
    ), this.hitDetectionInstructions.push(ii), this.endGeometry(n);
  }
  /**
   * @param {import("../../geom/MultiLineString.js").default|import("../Feature.js").default} multiLineStringGeometry MultiLineString geometry.
   * @param {import("../../Feature.js").FeatureLike} feature Feature.
   * @param {number} [index] Render order index.
   */
  drawMultiLineString(e, n, i) {
    const a = this.state, o = a.strokeStyle, r = a.lineWidth;
    if (o === void 0 || r === void 0)
      return;
    this.updateStrokeStyle(a, this.applyStroke), this.beginGeometry(e, n, i), this.hitDetectionInstructions.push(
      [
        ce.SET_STROKE_STYLE,
        a.strokeStyle,
        a.lineWidth,
        a.lineCap,
        a.lineJoin,
        a.miterLimit,
        Gn,
        Nn
      ],
      wi
    );
    const s = e.getEnds(), l = e.getFlatCoordinates(), c = e.getStride();
    let u = 0;
    for (let d = 0, h = s.length; d < h; ++d)
      u = this.drawFlatCoordinates_(
        l,
        u,
        /** @type {number} */
        s[d],
        c
      );
    this.hitDetectionInstructions.push(ii), this.endGeometry(n);
  }
  /**
   * @return {import("../canvas.js").SerializableInstructions} the serializable instructions.
   */
  finish() {
    const e = this.state;
    return e.lastStroke != null && e.lastStroke != this.coordinates.length && this.instructions.push(ii), this.reverseHitDetectionInstructions(), this.state = null, super.finish();
  }
  /**
   * @param {import("../canvas.js").FillStrokeState} state State.
   */
  applyStroke(e) {
    e.lastStroke != null && e.lastStroke != this.coordinates.length && (this.instructions.push(ii), e.lastStroke = this.coordinates.length), e.lastStroke = 0, super.applyStroke(e), this.instructions.push(wi);
  }
}
const zM = IM;
class LM extends Ro {
  /**
   * @param {number} tolerance Tolerance.
   * @param {import("../../extent.js").Extent} maxExtent Maximum extent.
   * @param {number} resolution Resolution.
   * @param {number} pixelRatio Pixel ratio.
   */
  constructor(e, n, i, a) {
    super(e, n, i, a);
  }
  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {Array<number>} ends Ends.
   * @param {number} stride Stride.
   * @private
   * @return {number} End.
   */
  drawFlatCoordinatess_(e, n, i, a) {
    const o = this.state, r = o.fillStyle !== void 0, s = o.strokeStyle !== void 0, l = i.length;
    this.instructions.push(wi), this.hitDetectionInstructions.push(wi);
    for (let c = 0; c < l; ++c) {
      const u = i[c], d = this.coordinates.length, h = this.appendFlatLineCoordinates(
        e,
        n,
        u,
        a,
        !0,
        !s
      ), f = [
        ce.MOVE_TO_LINE_TO,
        d,
        h
      ];
      this.instructions.push(f), this.hitDetectionInstructions.push(f), s && (this.instructions.push(Md), this.hitDetectionInstructions.push(Md)), n = u;
    }
    return r && (this.instructions.push(Xo), this.hitDetectionInstructions.push(Xo)), s && (this.instructions.push(ii), this.hitDetectionInstructions.push(ii)), n;
  }
  /**
   * @param {import("../../geom/Circle.js").default} circleGeometry Circle geometry.
   * @param {import("../../Feature.js").default} feature Feature.
   * @param {number} [index] Render order index.
   */
  drawCircle(e, n, i) {
    const a = this.state, o = a.fillStyle, r = a.strokeStyle;
    if (o === void 0 && r === void 0)
      return;
    this.setFillStrokeStyles_(), this.beginGeometry(e, n, i), a.fillStyle !== void 0 && this.hitDetectionInstructions.push([
      ce.SET_FILL_STYLE,
      bt
    ]), a.strokeStyle !== void 0 && this.hitDetectionInstructions.push([
      ce.SET_STROKE_STYLE,
      a.strokeStyle,
      a.lineWidth,
      a.lineCap,
      a.lineJoin,
      a.miterLimit,
      Gn,
      Nn
    ]);
    const s = e.getFlatCoordinates(), l = e.getStride(), c = this.coordinates.length;
    this.appendFlatLineCoordinates(
      s,
      0,
      s.length,
      l,
      !1,
      !1
    );
    const u = [ce.CIRCLE, c];
    this.instructions.push(wi, u), this.hitDetectionInstructions.push(wi, u), a.fillStyle !== void 0 && (this.instructions.push(Xo), this.hitDetectionInstructions.push(Xo)), a.strokeStyle !== void 0 && (this.instructions.push(ii), this.hitDetectionInstructions.push(ii)), this.endGeometry(n);
  }
  /**
   * @param {import("../../geom/Polygon.js").default|import("../Feature.js").default} polygonGeometry Polygon geometry.
   * @param {import("../../Feature.js").FeatureLike} feature Feature.
   * @param {number} [index] Render order index.
   */
  drawPolygon(e, n, i) {
    const a = this.state, o = a.fillStyle, r = a.strokeStyle;
    if (o === void 0 && r === void 0)
      return;
    this.setFillStrokeStyles_(), this.beginGeometry(e, n, i), a.fillStyle !== void 0 && this.hitDetectionInstructions.push([
      ce.SET_FILL_STYLE,
      bt
    ]), a.strokeStyle !== void 0 && this.hitDetectionInstructions.push([
      ce.SET_STROKE_STYLE,
      a.strokeStyle,
      a.lineWidth,
      a.lineCap,
      a.lineJoin,
      a.miterLimit,
      Gn,
      Nn
    ]);
    const s = e.getEnds(), l = e.getOrientedFlatCoordinates(), c = e.getStride();
    this.drawFlatCoordinatess_(
      l,
      0,
      /** @type {Array<number>} */
      s,
      c
    ), this.endGeometry(n);
  }
  /**
   * @param {import("../../geom/MultiPolygon.js").default} multiPolygonGeometry MultiPolygon geometry.
   * @param {import("../../Feature.js").FeatureLike} feature Feature.
   * @param {number} [index] Render order index.
   */
  drawMultiPolygon(e, n, i) {
    const a = this.state, o = a.fillStyle, r = a.strokeStyle;
    if (o === void 0 && r === void 0)
      return;
    this.setFillStrokeStyles_(), this.beginGeometry(e, n, i), a.fillStyle !== void 0 && this.hitDetectionInstructions.push([
      ce.SET_FILL_STYLE,
      bt
    ]), a.strokeStyle !== void 0 && this.hitDetectionInstructions.push([
      ce.SET_STROKE_STYLE,
      a.strokeStyle,
      a.lineWidth,
      a.lineCap,
      a.lineJoin,
      a.miterLimit,
      Gn,
      Nn
    ]);
    const s = e.getEndss(), l = e.getOrientedFlatCoordinates(), c = e.getStride();
    let u = 0;
    for (let d = 0, h = s.length; d < h; ++d)
      u = this.drawFlatCoordinatess_(
        l,
        u,
        s[d],
        c
      );
    this.endGeometry(n);
  }
  /**
   * @return {import("../canvas.js").SerializableInstructions} the serializable instructions.
   */
  finish() {
    this.reverseHitDetectionInstructions(), this.state = null;
    const e = this.tolerance;
    if (e !== 0) {
      const n = this.coordinates;
      for (let i = 0, a = n.length; i < a; ++i)
        n[i] = Mi(n[i], e);
    }
    return super.finish();
  }
  /**
   * @private
   */
  setFillStrokeStyles_() {
    const e = this.state;
    e.fillStyle !== void 0 && this.updateFillStyle(e, this.createFill), e.strokeStyle !== void 0 && this.updateStrokeStyle(e, this.applyStroke);
  }
}
const xd = LM;
function VM(t, e, n, i, a) {
  const o = [];
  let r = n, s = 0, l = e.slice(n, 2);
  for (; s < t && r + a < i; ) {
    const [c, u] = l.slice(-2), d = e[r + a], h = e[r + a + 1], f = Math.sqrt(
      (d - c) * (d - c) + (h - u) * (h - u)
    );
    if (s += f, s >= t) {
      const g = (t - s + f) / f, m = kt(c, d, g), v = kt(u, h, g);
      l.push(m, v), o.push(l), l = [m, v], s == t && (r += a), s = 0;
    } else if (s < t)
      l.push(
        e[r + a],
        e[r + a + 1]
      ), r += a;
    else {
      const g = f - s, m = kt(c, d, g / f), v = kt(u, h, g / f);
      l.push(m, v), o.push(l), l = [m, v], s = 0, r += a;
    }
  }
  return s > 0 && o.push(l), o;
}
function BM(t, e, n, i, a) {
  let o = n, r = n, s = 0, l = 0, c = n, u, d, h, f, g, m, v, y, p, M;
  for (d = n; d < i; d += a) {
    const S = e[d], b = e[d + 1];
    g !== void 0 && (p = S - g, M = b - m, f = Math.sqrt(p * p + M * M), v !== void 0 && (l += h, u = Math.acos((v * p + y * M) / (h * f)), u > t && (l > s && (s = l, o = c, r = d), l = 0, c = d - a)), h = f, v = p, y = M), g = S, m = b;
  }
  return l += f, l > s ? [c, d] : [o, r];
}
const yr = {
  left: 0,
  center: 0.5,
  right: 1,
  top: 0,
  middle: 0.5,
  hanging: 0.2,
  alphabetic: 0.8,
  ideographic: 0.8,
  bottom: 1
};
class FM extends Ro {
  /**
   * @param {number} tolerance Tolerance.
   * @param {import("../../extent.js").Extent} maxExtent Maximum extent.
   * @param {number} resolution Resolution.
   * @param {number} pixelRatio Pixel ratio.
   */
  constructor(e, n, i, a) {
    super(e, n, i, a), this.labels_ = null, this.text_ = "", this.textOffsetX_ = 0, this.textOffsetY_ = 0, this.textRotateWithView_ = void 0, this.textRotation_ = 0, this.textFillState_ = null, this.fillStates = {}, this.fillStates[bt] = { fillStyle: bt }, this.textStrokeState_ = null, this.strokeStates = {}, this.textState_ = /** @type {import("../canvas.js").TextState} */
    {}, this.textStates = {}, this.textKey_ = "", this.fillKey_ = "", this.strokeKey_ = "", this.declutterMode_ = void 0, this.declutterImageWithText_ = void 0;
  }
  /**
   * @return {import("../canvas.js").SerializableInstructions} the serializable instructions.
   */
  finish() {
    const e = super.finish();
    return e.textStates = this.textStates, e.fillStates = this.fillStates, e.strokeStates = this.strokeStates, e;
  }
  /**
   * @param {import("../../geom/SimpleGeometry.js").default|import("../Feature.js").default} geometry Geometry.
   * @param {import("../../Feature.js").FeatureLike} feature Feature.
   * @param {number} [index] Render order index.
   */
  drawText(e, n, i) {
    const a = this.textFillState_, o = this.textStrokeState_, r = this.textState_;
    if (this.text_ === "" || !r || !a && !o)
      return;
    const s = this.coordinates;
    let l = s.length;
    const c = e.getType();
    let u = null, d = e.getStride();
    if (r.placement === "line" && (c == "LineString" || c == "MultiLineString" || c == "Polygon" || c == "MultiPolygon")) {
      if (!Mt(this.maxExtent, e.getExtent()))
        return;
      let h;
      if (u = e.getFlatCoordinates(), c == "LineString")
        h = [u.length];
      else if (c == "MultiLineString")
        h = /** @type {import("../../geom/MultiLineString.js").default} */
        e.getEnds();
      else if (c == "Polygon")
        h = /** @type {import("../../geom/Polygon.js").default} */
        e.getEnds().slice(0, 1);
      else if (c == "MultiPolygon") {
        const v = (
          /** @type {import("../../geom/MultiPolygon.js").default} */
          e.getEndss()
        );
        h = [];
        for (let y = 0, p = v.length; y < p; ++y)
          h.push(v[y][0]);
      }
      this.beginGeometry(e, n, i);
      const f = r.repeat, g = f ? void 0 : r.textAlign;
      let m = 0;
      for (let v = 0, y = h.length; v < y; ++v) {
        let p;
        f ? p = VM(
          f * this.resolution,
          u,
          m,
          h[v],
          d
        ) : p = [u.slice(m, h[v])];
        for (let M = 0, S = p.length; M < S; ++M) {
          const b = p[M];
          let T = 0, _ = b.length;
          if (g == null) {
            const w = BM(
              r.maxAngle,
              b,
              0,
              b.length,
              2
            );
            T = w[0], _ = w[1];
          }
          for (let w = T; w < _; w += d)
            s.push(b[w], b[w + 1]);
          const P = s.length;
          m = h[v], this.drawChars_(l, P), l = P;
        }
      }
      this.endGeometry(n);
    } else {
      let h = r.overflow ? null : [];
      switch (c) {
        case "Point":
        case "MultiPoint":
          u = /** @type {import("../../geom/MultiPoint.js").default} */
          e.getFlatCoordinates();
          break;
        case "LineString":
          u = /** @type {import("../../geom/LineString.js").default} */
          e.getFlatMidpoint();
          break;
        case "Circle":
          u = /** @type {import("../../geom/Circle.js").default} */
          e.getCenter();
          break;
        case "MultiLineString":
          u = /** @type {import("../../geom/MultiLineString.js").default} */
          e.getFlatMidpoints(), d = 2;
          break;
        case "Polygon":
          u = /** @type {import("../../geom/Polygon.js").default} */
          e.getFlatInteriorPoint(), r.overflow || h.push(u[2] / this.resolution), d = 3;
          break;
        case "MultiPolygon":
          const p = (
            /** @type {import("../../geom/MultiPolygon.js").default} */
            e.getFlatInteriorPoints()
          );
          u = [];
          for (let M = 0, S = p.length; M < S; M += 3)
            r.overflow || h.push(p[M + 2] / this.resolution), u.push(p[M], p[M + 1]);
          if (u.length === 0)
            return;
          d = 2;
          break;
      }
      const f = this.appendFlatPointCoordinates(u, d);
      if (f === l)
        return;
      if (h && (f - l) / 2 !== u.length / d) {
        let p = l / 2;
        h = h.filter((M, S) => {
          const b = s[(p + S) * 2] === u[S * d] && s[(p + S) * 2 + 1] === u[S * d + 1];
          return b || --p, b;
        });
      }
      this.saveTextStates_(), (r.backgroundFill || r.backgroundStroke) && (this.setFillStrokeStyle(
        r.backgroundFill,
        r.backgroundStroke
      ), r.backgroundFill && this.updateFillStyle(this.state, this.createFill), r.backgroundStroke && (this.updateStrokeStyle(this.state, this.applyStroke), this.hitDetectionInstructions.push(this.createStroke(this.state)))), this.beginGeometry(e, n, i);
      let g = r.padding;
      if (g != Ti && (r.scale[0] < 0 || r.scale[1] < 0)) {
        let p = r.padding[0], M = r.padding[1], S = r.padding[2], b = r.padding[3];
        r.scale[0] < 0 && (M = -M, b = -b), r.scale[1] < 0 && (p = -p, S = -S), g = [p, M, S, b];
      }
      const m = this.pixelRatio;
      this.instructions.push([
        ce.DRAW_IMAGE,
        l,
        f,
        null,
        NaN,
        NaN,
        NaN,
        1,
        0,
        0,
        this.textRotateWithView_,
        this.textRotation_,
        [1, 1],
        NaN,
        this.declutterMode_,
        this.declutterImageWithText_,
        g == Ti ? Ti : g.map(function(p) {
          return p * m;
        }),
        !!r.backgroundFill,
        !!r.backgroundStroke,
        this.text_,
        this.textKey_,
        this.strokeKey_,
        this.fillKey_,
        this.textOffsetX_,
        this.textOffsetY_,
        h
      ]);
      const v = 1 / m, y = this.state.fillStyle;
      r.backgroundFill && (this.state.fillStyle = bt, this.hitDetectionInstructions.push(this.createFill(this.state))), this.hitDetectionInstructions.push([
        ce.DRAW_IMAGE,
        l,
        f,
        null,
        NaN,
        NaN,
        NaN,
        1,
        0,
        0,
        this.textRotateWithView_,
        this.textRotation_,
        [v, v],
        NaN,
        this.declutterMode_,
        this.declutterImageWithText_,
        g,
        !!r.backgroundFill,
        !!r.backgroundStroke,
        this.text_,
        this.textKey_,
        this.strokeKey_,
        this.fillKey_ ? bt : this.fillKey_,
        this.textOffsetX_,
        this.textOffsetY_,
        h
      ]), r.backgroundFill && (this.state.fillStyle = y, this.hitDetectionInstructions.push(this.createFill(this.state))), this.endGeometry(n);
    }
  }
  /**
   * @private
   */
  saveTextStates_() {
    const e = this.textStrokeState_, n = this.textState_, i = this.textFillState_, a = this.strokeKey_;
    e && (a in this.strokeStates || (this.strokeStates[a] = {
      strokeStyle: e.strokeStyle,
      lineCap: e.lineCap,
      lineDashOffset: e.lineDashOffset,
      lineWidth: e.lineWidth,
      lineJoin: e.lineJoin,
      miterLimit: e.miterLimit,
      lineDash: e.lineDash
    }));
    const o = this.textKey_;
    o in this.textStates || (this.textStates[o] = {
      font: n.font,
      textAlign: n.textAlign || no,
      justify: n.justify,
      textBaseline: n.textBaseline || fr,
      scale: n.scale
    });
    const r = this.fillKey_;
    i && (r in this.fillStates || (this.fillStates[r] = {
      fillStyle: i.fillStyle
    }));
  }
  /**
   * @private
   * @param {number} begin Begin.
   * @param {number} end End.
   */
  drawChars_(e, n) {
    const i = this.textStrokeState_, a = this.textState_, o = this.strokeKey_, r = this.textKey_, s = this.fillKey_;
    this.saveTextStates_();
    const l = this.pixelRatio, c = yr[a.textBaseline], u = this.textOffsetY_ * l, d = this.text_, h = i ? i.lineWidth * Math.abs(a.scale[0]) / 2 : 0;
    this.instructions.push([
      ce.DRAW_CHARS,
      e,
      n,
      c,
      a.overflow,
      s,
      a.maxAngle,
      l,
      u,
      o,
      h * l,
      d,
      r,
      1,
      this.declutterMode_
    ]), this.hitDetectionInstructions.push([
      ce.DRAW_CHARS,
      e,
      n,
      c,
      a.overflow,
      s && bt,
      a.maxAngle,
      l,
      u,
      o,
      h * l,
      d,
      r,
      1 / l,
      this.declutterMode_
    ]);
  }
  /**
   * @param {import("../../style/Text.js").default} textStyle Text style.
   * @param {Object} [sharedData] Shared data.
   */
  setTextStyle(e, n) {
    let i, a, o;
    if (!e)
      this.text_ = "";
    else {
      const r = e.getFill();
      r ? (a = this.textFillState_, a || (a = /** @type {import("../canvas.js").FillState} */
      {}, this.textFillState_ = a), a.fillStyle = dn(
        r.getColor() || bt
      )) : (a = null, this.textFillState_ = a);
      const s = e.getStroke();
      if (!s)
        o = null, this.textStrokeState_ = o;
      else {
        o = this.textStrokeState_, o || (o = /** @type {import("../canvas.js").StrokeState} */
        {}, this.textStrokeState_ = o);
        const g = s.getLineDash(), m = s.getLineDashOffset(), v = s.getWidth(), y = s.getMiterLimit();
        o.lineCap = s.getLineCap() || ha, o.lineDash = g ? g.slice() : Gn, o.lineDashOffset = m === void 0 ? Nn : m, o.lineJoin = s.getLineJoin() || fa, o.lineWidth = v === void 0 ? io : v, o.miterLimit = y === void 0 ? eo : y, o.strokeStyle = dn(
          s.getColor() || to
        );
      }
      i = this.textState_;
      const l = e.getFont() || hg;
      TS(l);
      const c = e.getScaleArray();
      i.overflow = e.getOverflow(), i.font = l, i.maxAngle = e.getMaxAngle(), i.placement = e.getPlacement(), i.textAlign = e.getTextAlign(), i.repeat = e.getRepeat(), i.justify = e.getJustify(), i.textBaseline = e.getTextBaseline() || fr, i.backgroundFill = e.getBackgroundFill(), i.backgroundStroke = e.getBackgroundStroke(), i.padding = e.getPadding() || Ti, i.scale = c === void 0 ? [1, 1] : c;
      const u = e.getOffsetX(), d = e.getOffsetY(), h = e.getRotateWithView(), f = e.getRotation();
      this.text_ = e.getText() || "", this.textOffsetX_ = u === void 0 ? 0 : u, this.textOffsetY_ = d === void 0 ? 0 : d, this.textRotateWithView_ = h === void 0 ? !1 : h, this.textRotation_ = f === void 0 ? 0 : f, this.strokeKey_ = o ? (typeof o.strokeStyle == "string" ? o.strokeStyle : we(o.strokeStyle)) + o.lineCap + o.lineDashOffset + "|" + o.lineWidth + o.lineJoin + o.miterLimit + "[" + o.lineDash.join() + "]" : "", this.textKey_ = i.font + i.scale + (i.textAlign || "?") + (i.repeat || "?") + (i.justify || "?") + (i.textBaseline || "?"), this.fillKey_ = a && a.fillStyle ? typeof a.fillStyle == "string" ? a.fillStyle : "|" + we(a.fillStyle) : "";
    }
    this.declutterMode_ = e.getDeclutterMode(), this.declutterImageWithText_ = n;
  }
}
const kM = {
  Circle: xd,
  Default: Ro,
  Image: RM,
  LineString: zM,
  Polygon: xd,
  Text: FM
};
class OM {
  /**
   * @param {number} tolerance Tolerance.
   * @param {import("../../extent.js").Extent} maxExtent Max extent.
   * @param {number} resolution Resolution.
   * @param {number} pixelRatio Pixel ratio.
   */
  constructor(e, n, i, a) {
    this.tolerance_ = e, this.maxExtent_ = n, this.pixelRatio_ = a, this.resolution_ = i, this.buildersByZIndex_ = {};
  }
  /**
   * @return {!Object<string, !Object<import("../canvas.js").BuilderType, import("./Builder.js").SerializableInstructions>>} The serializable instructions
   */
  finish() {
    const e = {};
    for (const n in this.buildersByZIndex_) {
      e[n] = e[n] || {};
      const i = this.buildersByZIndex_[n];
      for (const a in i) {
        const o = i[a].finish();
        e[n][a] = o;
      }
    }
    return e;
  }
  /**
   * @param {number|undefined} zIndex Z index.
   * @param {import("../canvas.js").BuilderType} builderType Replay type.
   * @return {import("../VectorContext.js").default} Replay.
   */
  getBuilder(e, n) {
    const i = e !== void 0 ? e.toString() : "0";
    let a = this.buildersByZIndex_[i];
    a === void 0 && (a = {}, this.buildersByZIndex_[i] = a);
    let o = a[n];
    if (o === void 0) {
      const r = kM[n];
      o = new r(
        this.tolerance_,
        this.maxExtent_,
        this.resolution_,
        this.pixelRatio_
      ), a[n] = o;
    }
    return o;
  }
}
const DM = OM;
function GM(t, e, n, i, a, o, r, s, l, c, u, d) {
  let h = t[e], f = t[e + 1], g = 0, m = 0, v = 0, y = 0;
  function p() {
    g = h, m = f, e += i, h = t[e], f = t[e + 1], y += v, v = Math.sqrt((h - g) * (h - g) + (f - m) * (f - m));
  }
  do
    p();
  while (e < n - i && y + v < o);
  let M = v === 0 ? 0 : (o - y) / v;
  const S = kt(g, h, M), b = kt(m, f, M), T = e - i, _ = y, P = o + s * l(c, a, u);
  for (; e < n - i && y + v < P; )
    p();
  M = v === 0 ? 0 : (P - y) / v;
  const w = kt(g, h, M), I = kt(m, f, M);
  let z;
  if (d) {
    const G = [S, b, w, I];
    Xf(G, 0, 4, 2, d, G, G), z = G[0] > G[2];
  } else
    z = S > w;
  const A = Math.PI, R = [], V = T + i === e;
  e = T, v = 0, y = _, h = t[e], f = t[e + 1];
  let N;
  if (V) {
    p(), N = Math.atan2(f - m, h - g), z && (N += N > 0 ? -A : A);
    const G = (w + S) / 2, X = (I + b) / 2;
    return R[0] = [G, X, (P - o) / 2, N, a], R;
  }
  a = a.replace(/\n/g, " ");
  for (let G = 0, X = a.length; G < X; ) {
    p();
    let E = Math.atan2(f - m, h - g);
    if (z && (E += E > 0 ? -A : A), N !== void 0) {
      let L = E - N;
      if (L += L > A ? -2 * A : L < -A ? 2 * A : 0, Math.abs(L) > r)
        return null;
    }
    N = E;
    const B = G;
    let D = 0;
    for (; G < X; ++G) {
      const L = z ? X - G - 1 : G, ee = s * l(c, a[L], u);
      if (e + i < n && y + v < o + D + ee / 2)
        break;
      D += ee;
    }
    if (G === B)
      continue;
    const k = z ? a.substring(X - B, X - G) : a.substring(B, G);
    M = v === 0 ? 0 : (o + D / 2 - y) / v;
    const W = kt(g, h, M), U = kt(m, f, M);
    R.push([W, U, D / 2, E, k]), o += D;
  }
  return R;
}
function NM(t, e, n, i) {
  let a = t[e], o = t[e + 1], r = 0;
  for (let s = e + i; s < n; s += i) {
    const l = t[s], c = t[s + 1];
    r += Math.sqrt((l - a) * (l - a) + (c - o) * (c - o)), a = l, o = c;
  }
  return r;
}
const Xi = Gt(), Kn = [], Rn = [], In = [], qn = [];
function Pd(t) {
  return t[3].declutterBox;
}
const Td = new RegExp(
  /* eslint-disable prettier/prettier */
  "[" + String.fromCharCode(1425) + "-" + String.fromCharCode(2303) + String.fromCharCode(64285) + "-" + String.fromCharCode(65023) + String.fromCharCode(65136) + "-" + String.fromCharCode(65276) + String.fromCharCode(67584) + "-" + String.fromCharCode(69631) + String.fromCharCode(124928) + "-" + String.fromCharCode(126975) + "]"
  /* eslint-enable prettier/prettier */
);
function xs(t, e) {
  return e === "start" ? e = Td.test(t) ? "right" : "left" : e === "end" && (e = Td.test(t) ? "left" : "right"), yr[e];
}
function $M(t, e, n) {
  return n > 0 && t.push(`
`, ""), t.push(e, ""), t;
}
class WM {
  /**
   * @param {number} resolution Resolution.
   * @param {number} pixelRatio Pixel ratio.
   * @param {boolean} overlaps The replay can have overlapping geometries.
   * @param {import("../canvas.js").SerializableInstructions} instructions The serializable instructions.
   * @param {boolean} [deferredRendering] Enable deferred rendering.
   */
  constructor(e, n, i, a, o) {
    this.overlaps = i, this.pixelRatio = n, this.resolution = e, this.alignAndScaleFill_, this.instructions = a.instructions, this.coordinates = a.coordinates, this.coordinateCache_ = {}, this.renderedTransform_ = Zt(), this.hitDetectionInstructions = a.hitDetectionInstructions, this.pixelCoordinates_ = null, this.viewRotation_ = 0, this.fillStates = a.fillStates || {}, this.strokeStates = a.strokeStates || {}, this.textStates = a.textStates || {}, this.widths_ = {}, this.labels_ = {}, this.zIndexContext_ = o ? new Wg() : null;
  }
  /**
   * @return {ZIndexContext} ZIndex context.
   */
  getZIndexContext() {
    return this.zIndexContext_;
  }
  /**
   * @param {string|Array<string>} text Text.
   * @param {string} textKey Text style key.
   * @param {string} fillKey Fill style key.
   * @param {string} strokeKey Stroke style key.
   * @return {import("../canvas.js").Label} Label.
   */
  createLabel(e, n, i, a) {
    const o = e + n + i + a;
    if (this.labels_[o])
      return this.labels_[o];
    const r = a ? this.strokeStates[a] : null, s = i ? this.fillStates[i] : null, l = this.textStates[n], c = this.pixelRatio, u = [
      l.scale[0] * c,
      l.scale[1] * c
    ], d = Array.isArray(e), h = l.justify ? yr[l.justify] : xs(
      Array.isArray(e) ? e[0] : e,
      l.textAlign || no
    ), f = a && r.lineWidth ? r.lineWidth : 0, g = d ? e : e.split(`
`).reduce($M, []), { width: m, height: v, widths: y, heights: p, lineWidths: M } = ES(
      l,
      g
    ), S = m + f, b = [], T = (S + 2) * u[0], _ = (v + f) * u[1], P = {
      width: T < 0 ? Math.floor(T) : Math.ceil(T),
      height: _ < 0 ? Math.floor(_) : Math.ceil(_),
      contextInstructions: b
    };
    (u[0] != 1 || u[1] != 1) && b.push("scale", u), a && (b.push("strokeStyle", r.strokeStyle), b.push("lineWidth", f), b.push("lineCap", r.lineCap), b.push("lineJoin", r.lineJoin), b.push("miterLimit", r.miterLimit), b.push("setLineDash", [r.lineDash]), b.push("lineDashOffset", r.lineDashOffset)), i && b.push("fillStyle", s.fillStyle), b.push("textBaseline", "middle"), b.push("textAlign", "center");
    const w = 0.5 - h;
    let I = h * S + w * f;
    const z = [], A = [];
    let R = 0, V = 0, N = 0, G = 0, X;
    for (let E = 0, B = g.length; E < B; E += 2) {
      const D = g[E];
      if (D === `
`) {
        V += R, R = 0, I = h * S + w * f, ++G;
        continue;
      }
      const k = g[E + 1] || l.font;
      k !== X && (a && z.push("font", k), i && A.push("font", k), X = k), R = Math.max(R, p[N]);
      const W = [
        D,
        I + w * y[N] + h * (y[N] - M[G]),
        0.5 * (f + R) + V
      ];
      I += y[N], a && z.push("strokeText", W), i && A.push("fillText", W), ++N;
    }
    return Array.prototype.push.apply(b, z), Array.prototype.push.apply(b, A), this.labels_[o] = P, P;
  }
  /**
   * @param {CanvasRenderingContext2D} context Context.
   * @param {import("../../coordinate.js").Coordinate} p1 1st point of the background box.
   * @param {import("../../coordinate.js").Coordinate} p2 2nd point of the background box.
   * @param {import("../../coordinate.js").Coordinate} p3 3rd point of the background box.
   * @param {import("../../coordinate.js").Coordinate} p4 4th point of the background box.
   * @param {Array<*>} fillInstruction Fill instruction.
   * @param {Array<*>} strokeInstruction Stroke instruction.
   */
  replayTextBackground_(e, n, i, a, o, r, s) {
    e.beginPath(), e.moveTo.apply(e, n), e.lineTo.apply(e, i), e.lineTo.apply(e, a), e.lineTo.apply(e, o), e.lineTo.apply(e, n), r && (this.alignAndScaleFill_ = /** @type {number} */
    r[2], this.fill_(e)), s && (this.setStrokeStyle_(
      e,
      /** @type {Array<*>} */
      s
    ), e.stroke());
  }
  /**
   * @private
   * @param {number} sheetWidth Width of the sprite sheet.
   * @param {number} sheetHeight Height of the sprite sheet.
   * @param {number} centerX X.
   * @param {number} centerY Y.
   * @param {number} width Width.
   * @param {number} height Height.
   * @param {number} anchorX Anchor X.
   * @param {number} anchorY Anchor Y.
   * @param {number} originX Origin X.
   * @param {number} originY Origin Y.
   * @param {number} rotation Rotation.
   * @param {import("../../size.js").Size} scale Scale.
   * @param {boolean} snapToPixel Snap to pixel.
   * @param {Array<number>} padding Padding.
   * @param {boolean} fillStroke Background fill or stroke.
   * @param {import("../../Feature.js").FeatureLike} feature Feature.
   * @return {ImageOrLabelDimensions} Dimensions for positioning and decluttering the image or label.
   */
  calculateImageOrLabelDimensions_(e, n, i, a, o, r, s, l, c, u, d, h, f, g, m, v) {
    s *= h[0], l *= h[1];
    let y = i - s, p = a - l;
    const M = o + c > e ? e - c : o, S = r + u > n ? n - u : r, b = g[3] + M * h[0] + g[1], T = g[0] + S * h[1] + g[2], _ = y - g[3], P = p - g[0];
    (m || d !== 0) && (Kn[0] = _, qn[0] = _, Kn[1] = P, Rn[1] = P, Rn[0] = _ + b, In[0] = Rn[0], In[1] = P + T, qn[1] = In[1]);
    let w;
    return d !== 0 ? (w = Cn(
      Zt(),
      i,
      a,
      1,
      1,
      d,
      -i,
      -a
    ), Je(w, Kn), Je(w, Rn), Je(w, In), Je(w, qn), li(
      Math.min(Kn[0], Rn[0], In[0], qn[0]),
      Math.min(Kn[1], Rn[1], In[1], qn[1]),
      Math.max(Kn[0], Rn[0], In[0], qn[0]),
      Math.max(Kn[1], Rn[1], In[1], qn[1]),
      Xi
    )) : li(
      Math.min(_, _ + b),
      Math.min(P, P + T),
      Math.max(_, _ + b),
      Math.max(P, P + T),
      Xi
    ), f && (y = Math.round(y), p = Math.round(p)), {
      drawImageX: y,
      drawImageY: p,
      drawImageW: M,
      drawImageH: S,
      originX: c,
      originY: u,
      declutterBox: {
        minX: Xi[0],
        minY: Xi[1],
        maxX: Xi[2],
        maxY: Xi[3],
        value: v
      },
      canvasTransform: w,
      scale: h
    };
  }
  /**
   * @private
   * @param {CanvasRenderingContext2D} context Context.
   * @param {import('../../size.js').Size} scaledCanvasSize Scaled canvas size.
   * @param {import("../canvas.js").Label|HTMLImageElement|HTMLCanvasElement|HTMLVideoElement} imageOrLabel Image.
   * @param {ImageOrLabelDimensions} dimensions Dimensions.
   * @param {number} opacity Opacity.
   * @param {Array<*>} fillInstruction Fill instruction.
   * @param {Array<*>} strokeInstruction Stroke instruction.
   * @return {boolean} The image or label was rendered.
   */
  replayImageOrLabel_(e, n, i, a, o, r, s) {
    const l = !!(r || s), c = a.declutterBox, u = s ? s[2] * a.scale[0] / 2 : 0;
    return c.minX - u <= n[0] && c.maxX + u >= 0 && c.minY - u <= n[1] && c.maxY + u >= 0 && (l && this.replayTextBackground_(
      e,
      Kn,
      Rn,
      In,
      qn,
      /** @type {Array<*>} */
      r,
      /** @type {Array<*>} */
      s
    ), AS(
      e,
      a.canvasTransform,
      o,
      i,
      a.originX,
      a.originY,
      a.drawImageW,
      a.drawImageH,
      a.drawImageX,
      a.drawImageY,
      a.scale
    )), !0;
  }
  /**
   * @private
   * @param {CanvasRenderingContext2D} context Context.
   */
  fill_(e) {
    const n = this.alignAndScaleFill_;
    if (n) {
      const i = Je(this.renderedTransform_, [0, 0]), a = 512 * this.pixelRatio;
      e.save(), e.translate(i[0] % a, i[1] % a), n !== 1 && e.scale(n, n), e.rotate(this.viewRotation_);
    }
    e.fill(), n && e.restore();
  }
  /**
   * @private
   * @param {CanvasRenderingContext2D} context Context.
   * @param {Array<*>} instruction Instruction.
   */
  setStrokeStyle_(e, n) {
    e.strokeStyle = /** @type {import("../../colorlike.js").ColorLike} */
    n[1], e.lineWidth = /** @type {number} */
    n[2], e.lineCap = /** @type {CanvasLineCap} */
    n[3], e.lineJoin = /** @type {CanvasLineJoin} */
    n[4], e.miterLimit = /** @type {number} */
    n[5], e.lineDashOffset = /** @type {number} */
    n[7], e.setLineDash(
      /** @type {Array<number>} */
      n[6]
    );
  }
  /**
   * @private
   * @param {string|Array<string>} text The text to draw.
   * @param {string} textKey The key of the text state.
   * @param {string} strokeKey The key for the stroke state.
   * @param {string} fillKey The key for the fill state.
   * @return {{label: import("../canvas.js").Label, anchorX: number, anchorY: number}} The text image and its anchor.
   */
  drawLabelWithPointPlacement_(e, n, i, a) {
    const o = this.textStates[n], r = this.createLabel(e, n, a, i), s = this.strokeStates[i], l = this.pixelRatio, c = xs(
      Array.isArray(e) ? e[0] : e,
      o.textAlign || no
    ), u = yr[o.textBaseline || fr], d = s && s.lineWidth ? s.lineWidth : 0, h = r.width / l - 2 * o.scale[0], f = c * h + 2 * (0.5 - c) * d, g = u * r.height / l + 2 * (0.5 - u) * d;
    return {
      label: r,
      anchorX: f,
      anchorY: g
    };
  }
  /**
   * @private
   * @param {CanvasRenderingContext2D} context Context.
   * @param {import('../../size.js').Size} scaledCanvasSize Scaled canvas size
   * @param {import("../../transform.js").Transform} transform Transform.
   * @param {Array<*>} instructions Instructions array.
   * @param {boolean} snapToPixel Snap point symbols and text to integer pixels.
   * @param {FeatureCallback<T>} [featureCallback] Feature callback.
   * @param {import("../../extent.js").Extent} [hitExtent] Only check
   *     features that intersect this extent.
   * @param {import("rbush").default} [declutterTree] Declutter tree.
   * @return {T|undefined} Callback result.
   * @template T
   */
  execute_(e, n, i, a, o, r, s, l) {
    const c = this.zIndexContext_;
    let u;
    this.pixelCoordinates_ && vi(i, this.renderedTransform_) ? u = this.pixelCoordinates_ : (this.pixelCoordinates_ || (this.pixelCoordinates_ = []), u = oi(
      this.coordinates,
      0,
      this.coordinates.length,
      2,
      i,
      this.pixelCoordinates_
    ), x_(this.renderedTransform_, i));
    let d = 0;
    const h = a.length;
    let f = 0, g, m, v, y, p, M, S, b, T, _, P, w, I, z = 0, A = 0, R = null, V = null;
    const N = this.coordinateCache_, G = this.viewRotation_, X = Math.round(Math.atan2(-i[1], i[0]) * 1e12) / 1e12, E = (
      /** @type {import("../../render.js").State} */
      {
        context: e,
        pixelRatio: this.pixelRatio,
        resolution: this.resolution,
        rotation: G
      }
    ), B = this.instructions != a || this.overlaps ? 0 : 200;
    let D, k, W, U;
    for (; d < h; ) {
      const L = a[d];
      switch (
        /** @type {import("./Instruction.js").default} */
        L[0]
      ) {
        case ce.BEGIN_GEOMETRY:
          D = /** @type {import("../../Feature.js").FeatureLike} */
          L[1], U = L[3], D.getGeometry() ? s !== void 0 && !Mt(s, U.getExtent()) ? d = /** @type {number} */
          L[2] + 1 : ++d : d = /** @type {number} */
          L[2], c && (c.zIndex = L[4]);
          break;
        case ce.BEGIN_PATH:
          z > B && (this.fill_(e), z = 0), A > B && (e.stroke(), A = 0), !z && !A && (e.beginPath(), p = NaN, M = NaN), ++d;
          break;
        case ce.CIRCLE:
          f = /** @type {number} */
          L[1];
          const J = u[f], ae = u[f + 1], j = u[f + 2], le = u[f + 3], pe = j - J, We = le - ae, ye = Math.sqrt(pe * pe + We * We);
          e.moveTo(J + ye, ae), e.arc(J, ae, ye, 0, 2 * Math.PI, !0), ++d;
          break;
        case ce.CLOSE_PATH:
          e.closePath(), ++d;
          break;
        case ce.CUSTOM:
          f = /** @type {number} */
          L[1], g = L[2];
          const Ue = (
            /** @type {import("../../geom/SimpleGeometry.js").default} */
            L[3]
          ), Fe = L[4], at = L[5];
          E.geometry = Ue, E.feature = D, d in N || (N[d] = []);
          const ze = N[d];
          at ? at(u, f, g, 2, ze) : (ze[0] = u[f], ze[1] = u[f + 1], ze.length = 2), c && (c.zIndex = L[6]), Fe(ze, E), ++d;
          break;
        case ce.DRAW_IMAGE:
          f = /** @type {number} */
          L[1], g = /** @type {number} */
          L[2], T = /** @type {HTMLCanvasElement|HTMLVideoElement|HTMLImageElement} */
          L[3], m = /** @type {number} */
          L[4], v = /** @type {number} */
          L[5];
          let pt = (
            /** @type {number} */
            L[6]
          );
          const zt = (
            /** @type {number} */
            L[7]
          ), Bi = (
            /** @type {number} */
            L[8]
          ), Ci = (
            /** @type {number} */
            L[9]
          ), Pn = (
            /** @type {boolean} */
            L[10]
          );
          let Ke = (
            /** @type {number} */
            L[11]
          );
          const $t = (
            /** @type {import("../../size.js").Size} */
            L[12]
          );
          let nn = (
            /** @type {number} */
            L[13]
          );
          y = L[14] || "declutter";
          const Wt = (
            /** @type {{args: import("../canvas.js").DeclutterImageWithText, declutterMode: import('../../style/Style.js').DeclutterMode}} */
            L[15]
          );
          if (!T && L.length >= 20) {
            _ = /** @type {string} */
            L[19], P = /** @type {string} */
            L[20], w = /** @type {string} */
            L[21], I = /** @type {string} */
            L[22];
            const Lt = this.drawLabelWithPointPlacement_(
              _,
              P,
              w,
              I
            );
            T = Lt.label, L[3] = T;
            const yi = (
              /** @type {number} */
              L[23]
            );
            m = (Lt.anchorX - yi) * this.pixelRatio, L[4] = m;
            const Vt = (
              /** @type {number} */
              L[24]
            );
            v = (Lt.anchorY - Vt) * this.pixelRatio, L[5] = v, pt = T.height, L[6] = pt, nn = T.width, L[13] = nn;
          }
          let Fi;
          L.length > 25 && (Fi = /** @type {number} */
          L[25]);
          let ki, jn, Tn;
          L.length > 17 ? (ki = /** @type {Array<number>} */
          L[16], jn = /** @type {boolean} */
          L[17], Tn = /** @type {boolean} */
          L[18]) : (ki = Ti, jn = !1, Tn = !1), Pn && X ? Ke += G : !Pn && !X && (Ke -= G);
          let Hr = 0;
          for (; f < g; f += 2) {
            if (Fi && Fi[Hr++] < nn / this.pixelRatio)
              continue;
            const Lt = this.calculateImageOrLabelDimensions_(
              T.width,
              T.height,
              u[f],
              u[f + 1],
              nn,
              pt,
              m,
              v,
              Bi,
              Ci,
              Ke,
              $t,
              o,
              ki,
              jn || Tn,
              D
            ), yi = [
              e,
              n,
              T,
              Lt,
              zt,
              jn ? (
                /** @type {Array<*>} */
                R
              ) : null,
              Tn ? (
                /** @type {Array<*>} */
                V
              ) : null
            ];
            if (l) {
              let Vt, an, Bt;
              if (Wt) {
                const Oe = g - f;
                if (!Wt[Oe]) {
                  Wt[Oe] = { args: yi, declutterMode: y };
                  continue;
                }
                const gt = Wt[Oe];
                Vt = gt.args, an = gt.declutterMode, delete Wt[Oe], Bt = Pd(Vt);
              }
              let wn, En;
              if (Vt && (an !== "declutter" || !l.collides(Bt)) && (wn = !0), (y !== "declutter" || !l.collides(Lt.declutterBox)) && (En = !0), an === "declutter" && y === "declutter") {
                const Oe = wn && En;
                wn = Oe, En = Oe;
              }
              wn && (an !== "none" && l.insert(Bt), this.replayImageOrLabel_.apply(this, Vt)), En && (y !== "none" && l.insert(Lt.declutterBox), this.replayImageOrLabel_.apply(this, yi));
            } else
              this.replayImageOrLabel_.apply(this, yi);
          }
          ++d;
          break;
        case ce.DRAW_CHARS:
          const ft = (
            /** @type {number} */
            L[1]
          ), Ec = (
            /** @type {number} */
            L[2]
          ), Kr = (
            /** @type {number} */
            L[3]
          ), am = (
            /** @type {number} */
            L[4]
          );
          I = /** @type {string} */
          L[5];
          const om = (
            /** @type {number} */
            L[6]
          ), Ac = (
            /** @type {number} */
            L[7]
          ), Rc = (
            /** @type {number} */
            L[8]
          );
          w = /** @type {string} */
          L[9];
          const qr = (
            /** @type {number} */
            L[10]
          );
          _ = /** @type {string} */
          L[11], P = /** @type {string} */
          L[12];
          const Ic = [
            /** @type {number} */
            L[13],
            /** @type {number} */
            L[13]
          ];
          y = L[14] || "declutter";
          const Jr = this.textStates[P], Ta = Jr.font, wa = [
            Jr.scale[0] * Ac,
            Jr.scale[1] * Ac
          ];
          let Ea;
          Ta in this.widths_ ? Ea = this.widths_[Ta] : (Ea = {}, this.widths_[Ta] = Ea);
          const zc = NM(u, ft, Ec, 2), Lc = Math.abs(wa[0]) * sd(Ta, _, Ea);
          if (am || Lc <= zc) {
            const Lt = this.textStates[P].textAlign, yi = (zc - Lc) * xs(_, Lt), Vt = GM(
              u,
              ft,
              Ec,
              2,
              _,
              yi,
              om,
              Math.abs(wa[0]),
              sd,
              Ta,
              Ea,
              X ? 0 : this.viewRotation_
            );
            e:
              if (Vt) {
                const an = [];
                let Bt, wn, En, Oe, gt;
                if (w)
                  for (Bt = 0, wn = Vt.length; Bt < wn; ++Bt) {
                    gt = Vt[Bt], En = /** @type {string} */
                    gt[4], Oe = this.createLabel(En, P, "", w), m = /** @type {number} */
                    gt[2] + (wa[0] < 0 ? -qr : qr), v = Kr * Oe.height + (0.5 - Kr) * 2 * qr * wa[1] / wa[0] - Rc;
                    const An = this.calculateImageOrLabelDimensions_(
                      Oe.width,
                      Oe.height,
                      gt[0],
                      gt[1],
                      Oe.width,
                      Oe.height,
                      m,
                      v,
                      0,
                      0,
                      gt[3],
                      Ic,
                      !1,
                      Ti,
                      !1,
                      D
                    );
                    if (l && y === "declutter" && l.collides(An.declutterBox))
                      break e;
                    an.push([
                      e,
                      n,
                      Oe,
                      An,
                      1,
                      null,
                      null
                    ]);
                  }
                if (I)
                  for (Bt = 0, wn = Vt.length; Bt < wn; ++Bt) {
                    gt = Vt[Bt], En = /** @type {string} */
                    gt[4], Oe = this.createLabel(En, P, I, ""), m = /** @type {number} */
                    gt[2], v = Kr * Oe.height - Rc;
                    const An = this.calculateImageOrLabelDimensions_(
                      Oe.width,
                      Oe.height,
                      gt[0],
                      gt[1],
                      Oe.width,
                      Oe.height,
                      m,
                      v,
                      0,
                      0,
                      gt[3],
                      Ic,
                      !1,
                      Ti,
                      !1,
                      D
                    );
                    if (l && y === "declutter" && l.collides(An.declutterBox))
                      break e;
                    an.push([
                      e,
                      n,
                      Oe,
                      An,
                      1,
                      null,
                      null
                    ]);
                  }
                l && y !== "none" && l.load(an.map(Pd));
                for (let An = 0, rm = an.length; An < rm; ++An)
                  this.replayImageOrLabel_.apply(this, an[An]);
              }
          }
          ++d;
          break;
        case ce.END_GEOMETRY:
          if (r !== void 0) {
            D = /** @type {import("../../Feature.js").FeatureLike} */
            L[1];
            const Lt = r(D, U);
            if (Lt)
              return Lt;
          }
          ++d;
          break;
        case ce.FILL:
          B ? z++ : this.fill_(e), ++d;
          break;
        case ce.MOVE_TO_LINE_TO:
          for (f = /** @type {number} */
          L[1], g = /** @type {number} */
          L[2], k = u[f], W = u[f + 1], S = k + 0.5 | 0, b = W + 0.5 | 0, (S !== p || b !== M) && (e.moveTo(k, W), p = S, M = b), f += 2; f < g; f += 2)
            k = u[f], W = u[f + 1], S = k + 0.5 | 0, b = W + 0.5 | 0, (f == g - 2 || S !== p || b !== M) && (e.lineTo(k, W), p = S, M = b);
          ++d;
          break;
        case ce.SET_FILL_STYLE:
          R = L, this.alignAndScaleFill_ = L[2], z && (this.fill_(e), z = 0, A && (e.stroke(), A = 0)), e.fillStyle = L[1], ++d;
          break;
        case ce.SET_STROKE_STYLE:
          V = L, A && (e.stroke(), A = 0), this.setStrokeStyle_(
            e,
            /** @type {Array<*>} */
            L
          ), ++d;
          break;
        case ce.STROKE:
          B ? A++ : e.stroke(), ++d;
          break;
        default:
          ++d;
          break;
      }
    }
    z && this.fill_(e), A && e.stroke();
  }
  /**
   * @param {CanvasRenderingContext2D} context Context.
   * @param {import('../../size.js').Size} scaledCanvasSize Scaled canvas size.
   * @param {import("../../transform.js").Transform} transform Transform.
   * @param {number} viewRotation View rotation.
   * @param {boolean} snapToPixel Snap point symbols and text to integer pixels.
   * @param {import("rbush").default} [declutterTree] Declutter tree.
   */
  execute(e, n, i, a, o, r) {
    this.viewRotation_ = a, this.execute_(
      e,
      n,
      i,
      this.instructions,
      o,
      void 0,
      void 0,
      r
    );
  }
  /**
   * @param {CanvasRenderingContext2D} context Context.
   * @param {import("../../transform.js").Transform} transform Transform.
   * @param {number} viewRotation View rotation.
   * @param {FeatureCallback<T>} [featureCallback] Feature callback.
   * @param {import("../../extent.js").Extent} [hitExtent] Only check
   *     features that intersect this extent.
   * @return {T|undefined} Callback result.
   * @template T
   */
  executeHitDetection(e, n, i, a, o) {
    return this.viewRotation_ = i, this.execute_(
      e,
      [e.canvas.width, e.canvas.height],
      n,
      this.hitDetectionInstructions,
      !0,
      a,
      o
    );
  }
}
const UM = WM, $a = [
  "Polygon",
  "Circle",
  "LineString",
  "Image",
  "Text",
  "Default"
], Yg = ["Image", "Text"], XM = $a.filter(
  (t) => !Yg.includes(t)
);
class YM {
  /**
   * @param {import("../../extent.js").Extent} maxExtent Max extent for clipping. When a
   * `maxExtent` was set on the Builder for this executor group, the same `maxExtent`
   * should be set here, unless the target context does not exceed that extent (which
   * can be the case when rendering to tiles).
   * @param {number} resolution Resolution.
   * @param {number} pixelRatio Pixel ratio.
   * @param {boolean} overlaps The executor group can have overlapping geometries.
   * @param {!Object<string, !Object<import("../canvas.js").BuilderType, import("../canvas.js").SerializableInstructions>>} allInstructions
   * The serializable instructions.
   * @param {number} [renderBuffer] Optional rendering buffer.
   * @param {boolean} [deferredRendering] Enable deferred rendering with renderDeferred().
   */
  constructor(e, n, i, a, o, r, s) {
    this.maxExtent_ = e, this.overlaps_ = a, this.pixelRatio_ = i, this.resolution_ = n, this.renderBuffer_ = r, this.executorsByZIndex_ = {}, this.hitDetectionContext_ = null, this.hitDetectionTransform_ = Zt(), this.renderedContext_ = null, this.deferredZIndexContexts_ = {}, this.createExecutors_(o, s);
  }
  /**
   * @param {CanvasRenderingContext2D} context Context.
   * @param {import("../../transform.js").Transform} transform Transform.
   */
  clip(e, n) {
    const i = this.getClipCoords(n);
    e.beginPath(), e.moveTo(i[0], i[1]), e.lineTo(i[2], i[3]), e.lineTo(i[4], i[5]), e.lineTo(i[6], i[7]), e.clip();
  }
  /**
   * Create executors and populate them using the provided instructions.
   * @private
   * @param {!Object<string, !Object<string, import("../canvas.js").SerializableInstructions>>} allInstructions The serializable instructions
   * @param {boolean} deferredRendering Enable deferred rendering.
   */
  createExecutors_(e, n) {
    for (const i in e) {
      let a = this.executorsByZIndex_[i];
      a === void 0 && (a = {}, this.executorsByZIndex_[i] = a);
      const o = e[i];
      for (const r in o) {
        const s = o[r];
        a[r] = new UM(
          this.resolution_,
          this.pixelRatio_,
          this.overlaps_,
          s,
          n
        );
      }
    }
  }
  /**
   * @param {Array<import("../canvas.js").BuilderType>} executors Executors.
   * @return {boolean} Has executors of the provided types.
   */
  hasExecutors(e) {
    for (const n in this.executorsByZIndex_) {
      const i = this.executorsByZIndex_[n];
      for (let a = 0, o = e.length; a < o; ++a)
        if (e[a] in i)
          return !0;
    }
    return !1;
  }
  /**
   * @param {import("../../coordinate.js").Coordinate} coordinate Coordinate.
   * @param {number} resolution Resolution.
   * @param {number} rotation Rotation.
   * @param {number} hitTolerance Hit tolerance in pixels.
   * @param {function(import("../../Feature.js").FeatureLike, import("../../geom/SimpleGeometry.js").default, number): T} callback Feature callback.
   * @param {Array<import("../../Feature.js").FeatureLike>} declutteredFeatures Decluttered features.
   * @return {T|undefined} Callback result.
   * @template T
   */
  forEachFeatureAtCoordinate(e, n, i, a, o, r) {
    a = Math.round(a);
    const s = a * 2 + 1, l = Cn(
      this.hitDetectionTransform_,
      a + 0.5,
      a + 0.5,
      1 / n,
      -1 / n,
      -i,
      -e[0],
      -e[1]
    ), c = !this.hitDetectionContext_;
    c && (this.hitDetectionContext_ = tt(
      s,
      s,
      void 0,
      { willReadFrequently: !0 }
    ));
    const u = this.hitDetectionContext_;
    u.canvas.width !== s || u.canvas.height !== s ? (u.canvas.width = s, u.canvas.height = s) : c || u.clearRect(0, 0, s, s);
    let d;
    this.renderBuffer_ !== void 0 && (d = Gt(), Da(d, e), Ul(
      d,
      n * (this.renderBuffer_ + a),
      d
    ));
    const h = jM(a);
    let f;
    function g(b, T) {
      const _ = u.getImageData(
        0,
        0,
        s,
        s
      ).data;
      for (let P = 0, w = h.length; P < w; P++)
        if (_[h[P]] > 0) {
          if (!r || f !== "Image" && f !== "Text" || r.includes(b)) {
            const I = (h[P] - 3) / 4, z = a - I % s, A = a - (I / s | 0), R = o(b, T, z * z + A * A);
            if (R)
              return R;
          }
          u.clearRect(0, 0, s, s);
          break;
        }
    }
    const m = Object.keys(this.executorsByZIndex_).map(Number);
    m.sort(Dn);
    let v, y, p, M, S;
    for (v = m.length - 1; v >= 0; --v) {
      const b = m[v].toString();
      for (p = this.executorsByZIndex_[b], y = $a.length - 1; y >= 0; --y)
        if (f = $a[y], M = p[f], M !== void 0 && (S = M.executeHitDetection(
          u,
          l,
          i,
          g,
          d
        ), S))
          return S;
    }
  }
  /**
   * @param {import("../../transform.js").Transform} transform Transform.
   * @return {Array<number>|null} Clip coordinates.
   */
  getClipCoords(e) {
    const n = this.maxExtent_;
    if (!n)
      return null;
    const i = n[0], a = n[1], o = n[2], r = n[3], s = [i, a, i, r, o, r, o, a];
    return oi(s, 0, 8, 2, e, s), s;
  }
  /**
   * @return {boolean} Is empty.
   */
  isEmpty() {
    return ua(this.executorsByZIndex_);
  }
  /**
   * @param {CanvasRenderingContext2D} targetContext Context.
   * @param {import('../../size.js').Size} scaledCanvasSize Scale of the context.
   * @param {import("../../transform.js").Transform} transform Transform.
   * @param {number} viewRotation View rotation.
   * @param {boolean} snapToPixel Snap point symbols and test to integer pixel.
   * @param {Array<import("../canvas.js").BuilderType>} [builderTypes] Ordered replay types to replay.
   *     Default is {@link module:ol/render/replay~ALL}
   * @param {import("rbush").default|null} [declutterTree] Declutter tree.
   *     When set to null, no decluttering is done, even when the executor group has a `ZIndexContext`.
   */
  execute(e, n, i, a, o, r, s) {
    const l = Object.keys(this.executorsByZIndex_).map(Number);
    l.sort(Dn), r = r || $a;
    let c, u, d, h, f, g;
    for (s && l.reverse(), c = 0, u = l.length; c < u; ++c) {
      const m = l[c].toString();
      for (f = this.executorsByZIndex_[m], d = 0, h = r.length; d < h; ++d) {
        const v = r[d];
        if (g = f[v], g !== void 0) {
          const y = s === null ? void 0 : g.getZIndexContext(), p = y ? y.getContext() : e, M = this.maxExtent_ && v !== "Image" && v !== "Text";
          if (M && (p.save(), this.clip(p, i)), g.execute(
            p,
            n,
            i,
            a,
            o,
            s
          ), M && p.restore(), y) {
            y.offset();
            const S = l[c];
            this.deferredZIndexContexts_[S] || (this.deferredZIndexContexts_[S] = []), this.deferredZIndexContexts_[S].push(y);
          }
        }
      }
    }
    this.renderedContext_ = e;
  }
  getDeferredZIndexContexts() {
    return this.deferredZIndexContexts_;
  }
  getRenderedContext() {
    return this.renderedContext_;
  }
  renderDeferred() {
    const e = this.deferredZIndexContexts_, n = Object.keys(e).map(Number).sort(Dn);
    for (let i = 0, a = n.length; i < a; ++i)
      e[n[i]].forEach((o) => {
        o.draw(this.renderedContext_), o.clear();
      });
  }
}
const Ps = {};
function jM(t) {
  if (Ps[t] !== void 0)
    return Ps[t];
  const e = t * 2 + 1, n = t * t, i = new Array(n + 1);
  for (let o = 0; o <= t; ++o)
    for (let r = 0; r <= t; ++r) {
      const s = o * o + r * r;
      if (s > n)
        break;
      let l = i[s];
      l || (l = [], i[s] = l), l.push(((t + o) * e + (t + r)) * 4 + 3), o > 0 && l.push(((t - o) * e + (t + r)) * 4 + 3), r > 0 && (l.push(((t + o) * e + (t - r)) * 4 + 3), o > 0 && l.push(((t - o) * e + (t - r)) * 4 + 3));
    }
  const a = [];
  for (let o = 0, r = i.length; o < r; ++o)
    i[o] && a.push(...i[o]);
  return Ps[t] = a, a;
}
const ZM = YM;
class HM extends Xg {
  /**
   * @param {CanvasRenderingContext2D} context Context.
   * @param {number} pixelRatio Pixel ratio.
   * @param {import("../../extent.js").Extent} extent Extent.
   * @param {import("../../transform.js").Transform} transform Transform.
   * @param {number} viewRotation View rotation.
   * @param {number} [squaredTolerance] Optional squared tolerance for simplification.
   * @param {import("../../proj.js").TransformFunction} [userTransform] Transform from user to view projection.
   */
  constructor(e, n, i, a, o, r, s) {
    super(), this.context_ = e, this.pixelRatio_ = n, this.extent_ = i, this.transform_ = a, this.transformRotation_ = a ? $l(Math.atan2(a[1], a[0]), 10) : 0, this.viewRotation_ = o, this.squaredTolerance_ = r, this.userTransform_ = s, this.contextFillState_ = null, this.contextStrokeState_ = null, this.contextTextState_ = null, this.fillState_ = null, this.strokeState_ = null, this.image_ = null, this.imageAnchorX_ = 0, this.imageAnchorY_ = 0, this.imageHeight_ = 0, this.imageOpacity_ = 0, this.imageOriginX_ = 0, this.imageOriginY_ = 0, this.imageRotateWithView_ = !1, this.imageRotation_ = 0, this.imageScale_ = [0, 0], this.imageWidth_ = 0, this.text_ = "", this.textOffsetX_ = 0, this.textOffsetY_ = 0, this.textRotateWithView_ = !1, this.textRotation_ = 0, this.textScale_ = [0, 0], this.textFillState_ = null, this.textStrokeState_ = null, this.textState_ = null, this.pixelCoordinates_ = [], this.tmpLocalTransform_ = Zt();
  }
  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {number} end End.
   * @param {number} stride Stride.
   * @private
   */
  drawImages_(e, n, i, a) {
    if (!this.image_)
      return;
    const o = oi(
      e,
      n,
      i,
      a,
      this.transform_,
      this.pixelCoordinates_
    ), r = this.context_, s = this.tmpLocalTransform_, l = r.globalAlpha;
    this.imageOpacity_ != 1 && (r.globalAlpha = l * this.imageOpacity_);
    let c = this.imageRotation_;
    this.transformRotation_ === 0 && (c -= this.viewRotation_), this.imageRotateWithView_ && (c += this.viewRotation_);
    for (let u = 0, d = o.length; u < d; u += 2) {
      const h = o[u] - this.imageAnchorX_, f = o[u + 1] - this.imageAnchorY_;
      if (c !== 0 || this.imageScale_[0] != 1 || this.imageScale_[1] != 1) {
        const g = h + this.imageAnchorX_, m = f + this.imageAnchorY_;
        Cn(
          s,
          g,
          m,
          1,
          1,
          c,
          -g,
          -m
        ), r.save(), r.transform.apply(r, s), r.translate(g, m), r.scale(this.imageScale_[0], this.imageScale_[1]), r.drawImage(
          this.image_,
          this.imageOriginX_,
          this.imageOriginY_,
          this.imageWidth_,
          this.imageHeight_,
          -this.imageAnchorX_,
          -this.imageAnchorY_,
          this.imageWidth_,
          this.imageHeight_
        ), r.restore();
      } else
        r.drawImage(
          this.image_,
          this.imageOriginX_,
          this.imageOriginY_,
          this.imageWidth_,
          this.imageHeight_,
          h,
          f,
          this.imageWidth_,
          this.imageHeight_
        );
    }
    this.imageOpacity_ != 1 && (r.globalAlpha = l);
  }
  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {number} end End.
   * @param {number} stride Stride.
   * @private
   */
  drawText_(e, n, i, a) {
    if (!this.textState_ || this.text_ === "")
      return;
    this.textFillState_ && this.setContextFillState_(this.textFillState_), this.textStrokeState_ && this.setContextStrokeState_(this.textStrokeState_), this.setContextTextState_(this.textState_);
    const o = oi(
      e,
      n,
      i,
      a,
      this.transform_,
      this.pixelCoordinates_
    ), r = this.context_;
    let s = this.textRotation_;
    for (this.transformRotation_ === 0 && (s -= this.viewRotation_), this.textRotateWithView_ && (s += this.viewRotation_); n < i; n += a) {
      const l = o[n] + this.textOffsetX_, c = o[n + 1] + this.textOffsetY_;
      s !== 0 || this.textScale_[0] != 1 || this.textScale_[1] != 1 ? (r.save(), r.translate(l - this.textOffsetX_, c - this.textOffsetY_), r.rotate(s), r.translate(this.textOffsetX_, this.textOffsetY_), r.scale(this.textScale_[0], this.textScale_[1]), this.textStrokeState_ && r.strokeText(this.text_, 0, 0), this.textFillState_ && r.fillText(this.text_, 0, 0), r.restore()) : (this.textStrokeState_ && r.strokeText(this.text_, l, c), this.textFillState_ && r.fillText(this.text_, l, c));
    }
  }
  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {number} end End.
   * @param {number} stride Stride.
   * @param {boolean} close Close.
   * @private
   * @return {number} end End.
   */
  moveToLineTo_(e, n, i, a, o) {
    const r = this.context_, s = oi(
      e,
      n,
      i,
      a,
      this.transform_,
      this.pixelCoordinates_
    );
    r.moveTo(s[0], s[1]);
    let l = s.length;
    o && (l -= 2);
    for (let c = 2; c < l; c += 2)
      r.lineTo(s[c], s[c + 1]);
    return o && r.closePath(), i;
  }
  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {Array<number>} ends Ends.
   * @param {number} stride Stride.
   * @private
   * @return {number} End.
   */
  drawRings_(e, n, i, a) {
    for (let o = 0, r = i.length; o < r; ++o)
      n = this.moveToLineTo_(
        e,
        n,
        i[o],
        a,
        !0
      );
    return n;
  }
  /**
   * Render a circle geometry into the canvas.  Rendering is immediate and uses
   * the current fill and stroke styles.
   *
   * @param {import("../../geom/Circle.js").default} geometry Circle geometry.
   * @api
   */
  drawCircle(e) {
    if (this.squaredTolerance_ && (e = /** @type {import("../../geom/Circle.js").default} */
    e.simplifyTransformed(
      this.squaredTolerance_,
      this.userTransform_
    )), !!Mt(this.extent_, e.getExtent())) {
      if (this.fillState_ || this.strokeState_) {
        this.fillState_ && this.setContextFillState_(this.fillState_), this.strokeState_ && this.setContextStrokeState_(this.strokeState_);
        const n = z_(
          e,
          this.transform_,
          this.pixelCoordinates_
        ), i = n[2] - n[0], a = n[3] - n[1], o = Math.sqrt(i * i + a * a), r = this.context_;
        r.beginPath(), r.arc(
          n[0],
          n[1],
          o,
          0,
          2 * Math.PI
        ), this.fillState_ && r.fill(), this.strokeState_ && r.stroke();
      }
      this.text_ !== "" && this.drawText_(e.getCenter(), 0, 2, 2);
    }
  }
  /**
   * Set the rendering style.  Note that since this is an immediate rendering API,
   * any `zIndex` on the provided style will be ignored.
   *
   * @param {import("../../style/Style.js").default} style The rendering style.
   * @api
   */
  setStyle(e) {
    this.setFillStrokeStyle(e.getFill(), e.getStroke()), this.setImageStyle(e.getImage()), this.setTextStyle(e.getText());
  }
  /**
   * @param {import("../../transform.js").Transform} transform Transform.
   */
  setTransform(e) {
    this.transform_ = e;
  }
  /**
   * Render a geometry into the canvas.  Call
   * {@link module:ol/render/canvas/Immediate~CanvasImmediateRenderer#setStyle renderer.setStyle()} first to set the rendering style.
   *
   * @param {import("../../geom/Geometry.js").default|import("../Feature.js").default} geometry The geometry to render.
   * @api
   */
  drawGeometry(e) {
    switch (e.getType()) {
      case "Point":
        this.drawPoint(
          /** @type {import("../../geom/Point.js").default} */
          e
        );
        break;
      case "LineString":
        this.drawLineString(
          /** @type {import("../../geom/LineString.js").default} */
          e
        );
        break;
      case "Polygon":
        this.drawPolygon(
          /** @type {import("../../geom/Polygon.js").default} */
          e
        );
        break;
      case "MultiPoint":
        this.drawMultiPoint(
          /** @type {import("../../geom/MultiPoint.js").default} */
          e
        );
        break;
      case "MultiLineString":
        this.drawMultiLineString(
          /** @type {import("../../geom/MultiLineString.js").default} */
          e
        );
        break;
      case "MultiPolygon":
        this.drawMultiPolygon(
          /** @type {import("../../geom/MultiPolygon.js").default} */
          e
        );
        break;
      case "GeometryCollection":
        this.drawGeometryCollection(
          /** @type {import("../../geom/GeometryCollection.js").default} */
          e
        );
        break;
      case "Circle":
        this.drawCircle(
          /** @type {import("../../geom/Circle.js").default} */
          e
        );
        break;
    }
  }
  /**
   * Render a feature into the canvas.  Note that any `zIndex` on the provided
   * style will be ignored - features are rendered immediately in the order that
   * this method is called.  If you need `zIndex` support, you should be using an
   * {@link module:ol/layer/Vector~VectorLayer} instead.
   *
   * @param {import("../../Feature.js").default} feature Feature.
   * @param {import("../../style/Style.js").default} style Style.
   * @api
   */
  drawFeature(e, n) {
    const i = n.getGeometryFunction()(e);
    i && (this.setStyle(n), this.drawGeometry(i));
  }
  /**
   * Render a GeometryCollection to the canvas.  Rendering is immediate and
   * uses the current styles appropriate for each geometry in the collection.
   *
   * @param {import("../../geom/GeometryCollection.js").default} geometry Geometry collection.
   */
  drawGeometryCollection(e) {
    const n = e.getGeometriesArray();
    for (let i = 0, a = n.length; i < a; ++i)
      this.drawGeometry(n[i]);
  }
  /**
   * Render a Point geometry into the canvas.  Rendering is immediate and uses
   * the current style.
   *
   * @param {import("../../geom/Point.js").default|import("../Feature.js").default} geometry Point geometry.
   */
  drawPoint(e) {
    this.squaredTolerance_ && (e = /** @type {import("../../geom/Point.js").default} */
    e.simplifyTransformed(
      this.squaredTolerance_,
      this.userTransform_
    ));
    const n = e.getFlatCoordinates(), i = e.getStride();
    this.image_ && this.drawImages_(n, 0, n.length, i), this.text_ !== "" && this.drawText_(n, 0, n.length, i);
  }
  /**
   * Render a MultiPoint geometry  into the canvas.  Rendering is immediate and
   * uses the current style.
   *
   * @param {import("../../geom/MultiPoint.js").default|import("../Feature.js").default} geometry MultiPoint geometry.
   */
  drawMultiPoint(e) {
    this.squaredTolerance_ && (e = /** @type {import("../../geom/MultiPoint.js").default} */
    e.simplifyTransformed(
      this.squaredTolerance_,
      this.userTransform_
    ));
    const n = e.getFlatCoordinates(), i = e.getStride();
    this.image_ && this.drawImages_(n, 0, n.length, i), this.text_ !== "" && this.drawText_(n, 0, n.length, i);
  }
  /**
   * Render a LineString into the canvas.  Rendering is immediate and uses
   * the current style.
   *
   * @param {import("../../geom/LineString.js").default|import("../Feature.js").default} geometry LineString geometry.
   */
  drawLineString(e) {
    if (this.squaredTolerance_ && (e = /** @type {import("../../geom/LineString.js").default} */
    e.simplifyTransformed(
      this.squaredTolerance_,
      this.userTransform_
    )), !!Mt(this.extent_, e.getExtent())) {
      if (this.strokeState_) {
        this.setContextStrokeState_(this.strokeState_);
        const n = this.context_, i = e.getFlatCoordinates();
        n.beginPath(), this.moveToLineTo_(
          i,
          0,
          i.length,
          e.getStride(),
          !1
        ), n.stroke();
      }
      if (this.text_ !== "") {
        const n = e.getFlatMidpoint();
        this.drawText_(n, 0, 2, 2);
      }
    }
  }
  /**
   * Render a MultiLineString geometry into the canvas.  Rendering is immediate
   * and uses the current style.
   *
   * @param {import("../../geom/MultiLineString.js").default|import("../Feature.js").default} geometry MultiLineString geometry.
   */
  drawMultiLineString(e) {
    this.squaredTolerance_ && (e = /** @type {import("../../geom/MultiLineString.js").default} */
    e.simplifyTransformed(
      this.squaredTolerance_,
      this.userTransform_
    ));
    const n = e.getExtent();
    if (Mt(this.extent_, n)) {
      if (this.strokeState_) {
        this.setContextStrokeState_(this.strokeState_);
        const i = this.context_, a = e.getFlatCoordinates();
        let o = 0;
        const r = (
          /** @type {Array<number>} */
          e.getEnds()
        ), s = e.getStride();
        i.beginPath();
        for (let l = 0, c = r.length; l < c; ++l)
          o = this.moveToLineTo_(
            a,
            o,
            r[l],
            s,
            !1
          );
        i.stroke();
      }
      if (this.text_ !== "") {
        const i = e.getFlatMidpoints();
        this.drawText_(i, 0, i.length, 2);
      }
    }
  }
  /**
   * Render a Polygon geometry into the canvas.  Rendering is immediate and uses
   * the current style.
   *
   * @param {import("../../geom/Polygon.js").default|import("../Feature.js").default} geometry Polygon geometry.
   */
  drawPolygon(e) {
    if (this.squaredTolerance_ && (e = /** @type {import("../../geom/Polygon.js").default} */
    e.simplifyTransformed(
      this.squaredTolerance_,
      this.userTransform_
    )), !!Mt(this.extent_, e.getExtent())) {
      if (this.strokeState_ || this.fillState_) {
        this.fillState_ && this.setContextFillState_(this.fillState_), this.strokeState_ && this.setContextStrokeState_(this.strokeState_);
        const n = this.context_;
        n.beginPath(), this.drawRings_(
          e.getOrientedFlatCoordinates(),
          0,
          /** @type {Array<number>} */
          e.getEnds(),
          e.getStride()
        ), this.fillState_ && n.fill(), this.strokeState_ && n.stroke();
      }
      if (this.text_ !== "") {
        const n = e.getFlatInteriorPoint();
        this.drawText_(n, 0, 2, 2);
      }
    }
  }
  /**
   * Render MultiPolygon geometry into the canvas.  Rendering is immediate and
   * uses the current style.
   * @param {import("../../geom/MultiPolygon.js").default} geometry MultiPolygon geometry.
   */
  drawMultiPolygon(e) {
    if (this.squaredTolerance_ && (e = /** @type {import("../../geom/MultiPolygon.js").default} */
    e.simplifyTransformed(
      this.squaredTolerance_,
      this.userTransform_
    )), !!Mt(this.extent_, e.getExtent())) {
      if (this.strokeState_ || this.fillState_) {
        this.fillState_ && this.setContextFillState_(this.fillState_), this.strokeState_ && this.setContextStrokeState_(this.strokeState_);
        const n = this.context_, i = e.getOrientedFlatCoordinates();
        let a = 0;
        const o = e.getEndss(), r = e.getStride();
        n.beginPath();
        for (let s = 0, l = o.length; s < l; ++s) {
          const c = o[s];
          a = this.drawRings_(i, a, c, r);
        }
        this.fillState_ && n.fill(), this.strokeState_ && n.stroke();
      }
      if (this.text_ !== "") {
        const n = e.getFlatInteriorPoints();
        this.drawText_(n, 0, n.length, 2);
      }
    }
  }
  /**
   * @param {import("../canvas.js").FillState} fillState Fill state.
   * @private
   */
  setContextFillState_(e) {
    const n = this.context_, i = this.contextFillState_;
    i ? i.fillStyle != e.fillStyle && (i.fillStyle = e.fillStyle, n.fillStyle = e.fillStyle) : (n.fillStyle = e.fillStyle, this.contextFillState_ = {
      fillStyle: e.fillStyle
    });
  }
  /**
   * @param {import("../canvas.js").StrokeState} strokeState Stroke state.
   * @private
   */
  setContextStrokeState_(e) {
    const n = this.context_, i = this.contextStrokeState_;
    i ? (i.lineCap != e.lineCap && (i.lineCap = e.lineCap, n.lineCap = e.lineCap), vi(i.lineDash, e.lineDash) || n.setLineDash(
      i.lineDash = e.lineDash
    ), i.lineDashOffset != e.lineDashOffset && (i.lineDashOffset = e.lineDashOffset, n.lineDashOffset = e.lineDashOffset), i.lineJoin != e.lineJoin && (i.lineJoin = e.lineJoin, n.lineJoin = e.lineJoin), i.lineWidth != e.lineWidth && (i.lineWidth = e.lineWidth, n.lineWidth = e.lineWidth), i.miterLimit != e.miterLimit && (i.miterLimit = e.miterLimit, n.miterLimit = e.miterLimit), i.strokeStyle != e.strokeStyle && (i.strokeStyle = e.strokeStyle, n.strokeStyle = e.strokeStyle)) : (n.lineCap = e.lineCap, n.setLineDash(e.lineDash), n.lineDashOffset = e.lineDashOffset, n.lineJoin = e.lineJoin, n.lineWidth = e.lineWidth, n.miterLimit = e.miterLimit, n.strokeStyle = e.strokeStyle, this.contextStrokeState_ = {
      lineCap: e.lineCap,
      lineDash: e.lineDash,
      lineDashOffset: e.lineDashOffset,
      lineJoin: e.lineJoin,
      lineWidth: e.lineWidth,
      miterLimit: e.miterLimit,
      strokeStyle: e.strokeStyle
    });
  }
  /**
   * @param {import("../canvas.js").TextState} textState Text state.
   * @private
   */
  setContextTextState_(e) {
    const n = this.context_, i = this.contextTextState_, a = e.textAlign ? e.textAlign : no;
    i ? (i.font != e.font && (i.font = e.font, n.font = e.font), i.textAlign != a && (i.textAlign = a, n.textAlign = a), i.textBaseline != e.textBaseline && (i.textBaseline = e.textBaseline, n.textBaseline = e.textBaseline)) : (n.font = e.font, n.textAlign = a, n.textBaseline = e.textBaseline, this.contextTextState_ = {
      font: e.font,
      textAlign: a,
      textBaseline: e.textBaseline
    });
  }
  /**
   * Set the fill and stroke style for subsequent draw operations.  To clear
   * either fill or stroke styles, pass null for the appropriate parameter.
   *
   * @param {import("../../style/Fill.js").default} fillStyle Fill style.
   * @param {import("../../style/Stroke.js").default} strokeStyle Stroke style.
   */
  setFillStrokeStyle(e, n) {
    if (!e)
      this.fillState_ = null;
    else {
      const i = e.getColor();
      this.fillState_ = {
        fillStyle: dn(
          i || bt
        )
      };
    }
    if (!n)
      this.strokeState_ = null;
    else {
      const i = n.getColor(), a = n.getLineCap(), o = n.getLineDash(), r = n.getLineDashOffset(), s = n.getLineJoin(), l = n.getWidth(), c = n.getMiterLimit(), u = o || Gn;
      this.strokeState_ = {
        lineCap: a !== void 0 ? a : ha,
        lineDash: this.pixelRatio_ === 1 ? u : u.map((d) => d * this.pixelRatio_),
        lineDashOffset: (r || Nn) * this.pixelRatio_,
        lineJoin: s !== void 0 ? s : fa,
        lineWidth: (l !== void 0 ? l : io) * this.pixelRatio_,
        miterLimit: c !== void 0 ? c : eo,
        strokeStyle: dn(
          i || to
        )
      };
    }
  }
  /**
   * Set the image style for subsequent draw operations.  Pass null to remove
   * the image style.
   *
   * @param {import("../../style/Image.js").default} imageStyle Image style.
   */
  setImageStyle(e) {
    let n;
    if (!e || !(n = e.getSize())) {
      this.image_ = null;
      return;
    }
    const i = e.getPixelRatio(this.pixelRatio_), a = e.getAnchor(), o = e.getOrigin();
    this.image_ = e.getImage(this.pixelRatio_), this.imageAnchorX_ = a[0] * i, this.imageAnchorY_ = a[1] * i, this.imageHeight_ = n[1] * i, this.imageOpacity_ = e.getOpacity(), this.imageOriginX_ = o[0], this.imageOriginY_ = o[1], this.imageRotateWithView_ = e.getRotateWithView(), this.imageRotation_ = e.getRotation();
    const r = e.getScaleArray();
    this.imageScale_ = [
      r[0] * this.pixelRatio_ / i,
      r[1] * this.pixelRatio_ / i
    ], this.imageWidth_ = n[0] * i;
  }
  /**
   * Set the text style for subsequent draw operations.  Pass null to
   * remove the text style.
   *
   * @param {import("../../style/Text.js").default} textStyle Text style.
   */
  setTextStyle(e) {
    if (!e)
      this.text_ = "";
    else {
      const n = e.getFill();
      if (!n)
        this.textFillState_ = null;
      else {
        const f = n.getColor();
        this.textFillState_ = {
          fillStyle: dn(
            f || bt
          )
        };
      }
      const i = e.getStroke();
      if (!i)
        this.textStrokeState_ = null;
      else {
        const f = i.getColor(), g = i.getLineCap(), m = i.getLineDash(), v = i.getLineDashOffset(), y = i.getLineJoin(), p = i.getWidth(), M = i.getMiterLimit();
        this.textStrokeState_ = {
          lineCap: g !== void 0 ? g : ha,
          lineDash: m || Gn,
          lineDashOffset: v || Nn,
          lineJoin: y !== void 0 ? y : fa,
          lineWidth: p !== void 0 ? p : io,
          miterLimit: M !== void 0 ? M : eo,
          strokeStyle: dn(
            f || to
          )
        };
      }
      const a = e.getFont(), o = e.getOffsetX(), r = e.getOffsetY(), s = e.getRotateWithView(), l = e.getRotation(), c = e.getScaleArray(), u = e.getText(), d = e.getTextAlign(), h = e.getTextBaseline();
      this.textState_ = {
        font: a !== void 0 ? a : hg,
        textAlign: d !== void 0 ? d : no,
        textBaseline: h !== void 0 ? h : fr
      }, this.text_ = u !== void 0 ? Array.isArray(u) ? u.reduce((f, g, m) => f += m % 2 ? " " : g, "") : u : "", this.textOffsetX_ = o !== void 0 ? this.pixelRatio_ * o : 0, this.textOffsetY_ = r !== void 0 ? this.pixelRatio_ * r : 0, this.textRotateWithView_ = s !== void 0 ? s : !1, this.textRotation_ = l !== void 0 ? l : 0, this.textScale_ = [
        this.pixelRatio_ * c[0],
        this.pixelRatio_ * c[1]
      ];
    }
  }
}
const KM = HM, ln = 0.5;
function qM(t, e, n, i, a, o, r, s, l) {
  const c = l ? Hl(a) : a, u = t[0] * ln, d = t[1] * ln, h = tt(u, d);
  h.imageSmoothingEnabled = !1;
  const f = h.canvas, g = new KM(
    h,
    ln,
    a,
    null,
    r,
    s,
    l ? Or(m_(), l) : null
  ), m = n.length, v = Math.floor((256 * 256 * 256 - 1) / m), y = {};
  for (let M = 1; M <= m; ++M) {
    const S = n[M - 1], b = S.getStyleFunction() || i;
    if (!b)
      continue;
    let T = b(S, o);
    if (!T)
      continue;
    Array.isArray(T) || (T = [T]);
    const P = (M * v).toString(16).padStart(7, "#00000");
    for (let w = 0, I = T.length; w < I; ++w) {
      const z = T[w], A = z.getGeometryFunction()(S);
      if (!A || !Mt(c, A.getExtent()))
        continue;
      const R = z.clone(), V = R.getFill();
      V && V.setColor(P);
      const N = R.getStroke();
      N && (N.setColor(P), N.setLineDash(null)), R.setText(void 0);
      const G = z.getImage();
      if (G) {
        const D = G.getImageSize();
        if (!D)
          continue;
        const k = tt(
          D[0],
          D[1],
          void 0,
          { alpha: !1 }
        ), W = k.canvas;
        k.fillStyle = P, k.fillRect(0, 0, W.width, W.height), R.setImage(
          new yc({
            img: W,
            anchor: G.getAnchor(),
            anchorXUnits: "pixels",
            anchorYUnits: "pixels",
            offset: G.getOrigin(),
            opacity: 1,
            size: G.getSize(),
            scale: G.getScale(),
            rotation: G.getRotation(),
            rotateWithView: G.getRotateWithView()
          })
        );
      }
      const X = R.getZIndex() || 0;
      let E = y[X];
      E || (E = {}, y[X] = E, E.Polygon = [], E.Circle = [], E.LineString = [], E.Point = []);
      const B = A.getType();
      if (B === "GeometryCollection") {
        const D = (
          /** @type {import("../../geom/GeometryCollection.js").default} */
          A.getGeometriesArrayRecursive()
        );
        for (let k = 0, W = D.length; k < W; ++k) {
          const U = D[k];
          E[U.getType().replace("Multi", "")].push(
            U,
            R
          );
        }
      } else
        E[B.replace("Multi", "")].push(A, R);
    }
  }
  const p = Object.keys(y).map(Number).sort(Dn);
  for (let M = 0, S = p.length; M < S; ++M) {
    const b = y[p[M]];
    for (const T in b) {
      const _ = b[T];
      for (let P = 0, w = _.length; P < w; P += 2) {
        g.setStyle(_[P + 1]);
        for (let I = 0, z = e.length; I < z; ++I)
          g.setTransform(e[I]), g.drawGeometry(_[P]);
      }
    }
  }
  return h.getImageData(0, 0, f.width, f.height);
}
function JM(t, e, n) {
  const i = [];
  if (n) {
    const a = Math.floor(Math.round(t[0]) * ln), o = Math.floor(Math.round(t[1]) * ln), r = (Ye(a, 0, n.width - 1) + Ye(o, 0, n.height - 1) * n.width) * 4, s = n.data[r], l = n.data[r + 1], u = n.data[r + 2] + 256 * (l + 256 * s), d = Math.floor((256 * 256 * 256 - 1) / e.length);
    u && u % d === 0 && i.push(e[u / d - 1]);
  }
  return i;
}
const QM = 0.5, jg = {
  Point: sx,
  LineString: ax,
  Polygon: cx,
  MultiPoint: lx,
  MultiLineString: ox,
  MultiPolygon: rx,
  GeometryCollection: ix,
  Circle: tx
};
function ex(t, e) {
  return parseInt(we(t), 10) - parseInt(we(e), 10);
}
function wd(t, e) {
  const n = Zg(t, e);
  return n * n;
}
function Zg(t, e) {
  return QM * t / e;
}
function tx(t, e, n, i, a) {
  const o = n.getFill(), r = n.getStroke();
  if (o || r) {
    const l = t.getBuilder(n.getZIndex(), "Circle");
    l.setFillStrokeStyle(o, r), l.drawCircle(e, i, a);
  }
  const s = n.getText();
  if (s && s.getText()) {
    const l = t.getBuilder(n.getZIndex(), "Text");
    l.setTextStyle(s), l.drawText(e, i);
  }
}
function Ed(t, e, n, i, a, o, r, s) {
  const l = [], c = n.getImage();
  if (c) {
    let h = !0;
    const f = c.getImageState();
    f == Ce.LOADED || f == Ce.ERROR ? h = !1 : f == Ce.IDLE && c.load(), h && l.push(c.ready());
  }
  const u = n.getFill();
  u && u.loading() && l.push(u.ready());
  const d = l.length > 0;
  return d && Promise.all(l).then(() => a(null)), nx(
    t,
    e,
    n,
    i,
    o,
    r,
    s
  ), d;
}
function nx(t, e, n, i, a, o, r) {
  const s = n.getGeometryFunction()(e);
  if (!s)
    return;
  const l = s.simplifyTransformed(
    i,
    a
  );
  if (n.getRenderer())
    Hg(t, l, n, e, r);
  else {
    const u = jg[l.getType()];
    u(
      t,
      l,
      n,
      e,
      r,
      o
    );
  }
}
function Hg(t, e, n, i, a) {
  if (e.getType() == "GeometryCollection") {
    const r = (
      /** @type {import("../geom/GeometryCollection.js").default} */
      e.getGeometries()
    );
    for (let s = 0, l = r.length; s < l; ++s)
      Hg(t, r[s], n, i, a);
    return;
  }
  t.getBuilder(n.getZIndex(), "Default").drawCustom(
    /** @type {import("../geom/SimpleGeometry.js").default} */
    e,
    i,
    n.getRenderer(),
    n.getHitDetectionRenderer(),
    a
  );
}
function ix(t, e, n, i, a, o) {
  const r = e.getGeometriesArray();
  let s, l;
  for (s = 0, l = r.length; s < l; ++s) {
    const c = jg[r[s].getType()];
    c(
      t,
      r[s],
      n,
      i,
      a,
      o
    );
  }
}
function ax(t, e, n, i, a) {
  const o = n.getStroke();
  if (o) {
    const s = t.getBuilder(
      n.getZIndex(),
      "LineString"
    );
    s.setFillStrokeStyle(null, o), s.drawLineString(e, i, a);
  }
  const r = n.getText();
  if (r && r.getText()) {
    const s = t.getBuilder(n.getZIndex(), "Text");
    s.setTextStyle(r), s.drawText(e, i, a);
  }
}
function ox(t, e, n, i, a) {
  const o = n.getStroke();
  if (o) {
    const s = t.getBuilder(
      n.getZIndex(),
      "LineString"
    );
    s.setFillStrokeStyle(null, o), s.drawMultiLineString(e, i, a);
  }
  const r = n.getText();
  if (r && r.getText()) {
    const s = t.getBuilder(n.getZIndex(), "Text");
    s.setTextStyle(r), s.drawText(e, i, a);
  }
}
function rx(t, e, n, i, a) {
  const o = n.getFill(), r = n.getStroke();
  if (r || o) {
    const l = t.getBuilder(n.getZIndex(), "Polygon");
    l.setFillStrokeStyle(o, r), l.drawMultiPolygon(e, i, a);
  }
  const s = n.getText();
  if (s && s.getText()) {
    const l = t.getBuilder(n.getZIndex(), "Text");
    l.setTextStyle(s), l.drawText(e, i, a);
  }
}
function sx(t, e, n, i, a, o) {
  const r = n.getImage(), s = n.getText(), l = s && s.getText(), c = o && r && l ? {} : void 0;
  if (r) {
    if (r.getImageState() != Ce.LOADED)
      return;
    const u = t.getBuilder(n.getZIndex(), "Image");
    u.setImageStyle(r, c), u.drawPoint(e, i, a);
  }
  if (l) {
    const u = t.getBuilder(n.getZIndex(), "Text");
    u.setTextStyle(s, c), u.drawText(e, i, a);
  }
}
function lx(t, e, n, i, a, o) {
  const r = n.getImage(), s = r && r.getOpacity() !== 0, l = n.getText(), c = l && l.getText(), u = o && s && c ? {} : void 0;
  if (s) {
    if (r.getImageState() != Ce.LOADED)
      return;
    const d = t.getBuilder(n.getZIndex(), "Image");
    d.setImageStyle(r, u), d.drawMultiPoint(e, i, a);
  }
  if (c) {
    const d = t.getBuilder(n.getZIndex(), "Text");
    d.setTextStyle(l, u), d.drawText(e, i, a);
  }
}
function cx(t, e, n, i, a) {
  const o = n.getFill(), r = n.getStroke();
  if (o || r) {
    const l = t.getBuilder(n.getZIndex(), "Polygon");
    l.setFillStrokeStyle(o, r), l.drawPolygon(e, i, a);
  }
  const s = n.getText();
  if (s && s.getText()) {
    const l = t.getBuilder(n.getZIndex(), "Text");
    l.setTextStyle(s), l.drawText(e, i, a);
  }
}
class ux extends Ug {
  /**
   * @param {import("../../layer/BaseVector.js").default} vectorLayer Vector layer.
   */
  constructor(e) {
    super(e), this.boundHandleStyleImageChange_ = this.handleStyleImageChange_.bind(this), this.animatingOrInteracting_, this.hitDetectionImageData_ = null, this.renderedFeatures_ = null, this.renderedRevision_ = -1, this.renderedResolution_ = NaN, this.renderedExtent_ = Gt(), this.wrappedRenderedExtent_ = Gt(), this.renderedRotation_, this.renderedCenter_ = null, this.renderedProjection_ = null, this.renderedPixelRatio_ = 1, this.renderedRenderOrder_ = null, this.replayGroup_ = null, this.replayGroupChanged = !0, this.clipping = !0, this.targetContext_ = null, this.opacity_ = 1;
  }
  /**
   * @param {ExecutorGroup} executorGroup Executor group.
   * @param {import("../../Map.js").FrameState} frameState Frame state.
   * @param {boolean} [declutterable] `true` to only render declutterable items,
   *     `false` to only render non-declutterable items, `undefined` to render all.
   */
  renderWorlds(e, n, i) {
    const a = n.extent, o = n.viewState, r = o.center, s = o.resolution, l = o.projection, c = o.rotation, u = l.getExtent(), d = this.getLayer().getSource(), h = this.getLayer().getDeclutter(), f = n.pixelRatio, g = n.viewHints, m = !(g[lt.ANIMATING] || g[lt.INTERACTING]), v = this.context, y = Math.round(Re(a) / s * f), p = Math.round(ut(a) / s * f), M = d.getWrapX() && l.canWrapX(), S = M ? Re(u) : null, b = M ? Math.ceil((a[2] - u[2]) / S) + 1 : 1;
    let T = M ? Math.floor((a[0] - u[0]) / S) : 0;
    do {
      const _ = this.getRenderTransform(
        r,
        s,
        c,
        f,
        y,
        p,
        T * S
      );
      e.execute(
        v,
        [v.canvas.width, v.canvas.height],
        _,
        c,
        m,
        i === void 0 ? $a : i ? Yg : XM,
        i ? h && n.declutter[h] : void 0
      );
    } while (++T < b);
  }
  /**
   * @private
   */
  setDrawContext_() {
    this.opacity_ !== 1 && (this.targetContext_ = this.context, this.context = tt(
      this.context.canvas.width,
      this.context.canvas.height,
      bd
    ));
  }
  /**
   * @private
   */
  resetDrawContext_() {
    if (this.opacity_ !== 1) {
      const e = this.targetContext_.globalAlpha;
      this.targetContext_.globalAlpha = this.opacity_, this.targetContext_.drawImage(this.context.canvas, 0, 0), this.targetContext_.globalAlpha = e, Gr(this.context), bd.push(this.context.canvas), this.context = this.targetContext_, this.targetContext_ = null;
    }
  }
  /**
   * Render declutter items for this layer
   * @param {import("../../Map.js").FrameState} frameState Frame state.
   */
  renderDeclutter(e) {
    !this.replayGroup_ || !this.getLayer().getDeclutter() || this.renderWorlds(this.replayGroup_, e, !0);
  }
  /**
   * Render deferred instructions.
   * @param {import("../../Map.js").FrameState} frameState Frame state.
   */
  renderDeferredInternal(e) {
    this.replayGroup_ && (this.replayGroup_.renderDeferred(), this.resetDrawContext_());
  }
  /**
   * Render the layer.
   * @param {import("../../Map.js").FrameState} frameState Frame state.
   * @param {HTMLElement|null} target Target that may be used to render content to.
   * @return {HTMLElement|null} The rendered element.
   */
  renderFrame(e, n) {
    const i = e.pixelRatio, a = e.layerStatesArray[e.layerIndex];
    this.opacity_ = a.opacity;
    const o = e.extent, r = e.viewState.resolution, s = Math.round(Re(o) / r * i), l = Math.round(ut(o) / r * i);
    Cn(
      this.pixelTransform,
      e.size[0] / 2,
      e.size[1] / 2,
      1 / i,
      1 / i,
      0,
      -s / 2,
      -l / 2
    ), Ql(this.inversePixelTransform, this.pixelTransform);
    const c = Uf(this.pixelTransform);
    this.useContainer(n, c, this.getBackground(e));
    const u = this.context, d = u.canvas, h = this.replayGroup_;
    let f = h && !h.isEmpty();
    if (!f && !(this.getLayer().hasListener(Ot.PRERENDER) || this.getLayer().hasListener(Ot.POSTRENDER)))
      return null;
    d.width != s || d.height != l ? (d.width = s, d.height = l, d.style.transform !== c && (d.style.transform = c)) : this.containerReused || u.clearRect(0, 0, s, l), this.setDrawContext_(), this.preRender(u, e);
    const g = e.viewState;
    g.projection;
    let m = !1;
    if (f && a.extent && this.clipping) {
      const v = xi(a.extent);
      f = Mt(v, e.extent), m = f && !ea(v, e.extent), m && this.clipUnrotated(u, e, v);
    }
    return f && this.renderWorlds(
      h,
      e,
      this.getLayer().getDeclutter() ? !1 : void 0
    ), m && u.restore(), this.postRender(u, e), this.renderedRotation_ !== g.rotation && (this.renderedRotation_ = g.rotation, this.hitDetectionImageData_ = null), e.declutter || this.resetDrawContext_(), this.container;
  }
  /**
   * Asynchronous layer level hit detection.
   * @param {import("../../pixel.js").Pixel} pixel Pixel.
   * @return {Promise<Array<import("../../Feature").default>>} Promise
   * that resolves with an array of features.
   */
  getFeatures(e) {
    return new Promise((n) => {
      if (!this.hitDetectionImageData_ && !this.animatingOrInteracting_) {
        const i = [this.context.canvas.width, this.context.canvas.height];
        Je(this.pixelTransform, i);
        const a = this.renderedCenter_, o = this.renderedResolution_, r = this.renderedRotation_, s = this.renderedProjection_, l = this.wrappedRenderedExtent_, c = this.getLayer(), u = [], d = i[0] * ln, h = i[1] * ln;
        u.push(
          this.getRenderTransform(
            a,
            o,
            r,
            ln,
            d,
            h,
            0
          ).slice()
        );
        const f = c.getSource(), g = s.getExtent();
        if (f.getWrapX() && s.canWrapX() && !ea(g, l)) {
          let m = l[0];
          const v = Re(g);
          let y = 0, p;
          for (; m < g[0]; )
            --y, p = v * y, u.push(
              this.getRenderTransform(
                a,
                o,
                r,
                ln,
                d,
                h,
                p
              ).slice()
            ), m += v;
          for (y = 0, m = l[2]; m > g[2]; )
            ++y, p = v * y, u.push(
              this.getRenderTransform(
                a,
                o,
                r,
                ln,
                d,
                h,
                p
              ).slice()
            ), m -= v;
        }
        this.hitDetectionImageData_ = qM(
          i,
          u,
          this.renderedFeatures_,
          c.getStyleFunction(),
          l,
          o,
          r,
          wd(o, this.renderedPixelRatio_),
          null
        );
      }
      n(
        JM(e, this.renderedFeatures_, this.hitDetectionImageData_)
      );
    });
  }
  /**
   * @param {import("../../coordinate.js").Coordinate} coordinate Coordinate.
   * @param {import("../../Map.js").FrameState} frameState Frame state.
   * @param {number} hitTolerance Hit tolerance in pixels.
   * @param {import("../vector.js").FeatureCallback<T>} callback Feature callback.
   * @param {Array<import("../Map.js").HitMatch<T>>} matches The hit detected matches with tolerance.
   * @return {T|undefined} Callback result.
   * @template T
   */
  forEachFeatureAtCoordinate(e, n, i, a, o) {
    if (!this.replayGroup_)
      return;
    const r = n.viewState.resolution, s = n.viewState.rotation, l = this.getLayer(), c = {}, u = function(g, m, v) {
      const y = we(g), p = c[y];
      if (p) {
        if (p !== !0 && v < p.distanceSq) {
          if (v === 0)
            return c[y] = !0, o.splice(o.lastIndexOf(p), 1), a(g, l, m);
          p.geometry = m, p.distanceSq = v;
        }
      } else {
        if (v === 0)
          return c[y] = !0, a(g, l, m);
        o.push(
          c[y] = {
            feature: g,
            layer: l,
            geometry: m,
            distanceSq: v,
            callback: a
          }
        );
      }
    };
    let d;
    const h = [this.replayGroup_], f = this.getLayer().getDeclutter();
    return h.some((g) => d = g.forEachFeatureAtCoordinate(
      e,
      r,
      s,
      i,
      u,
      f && n.declutter[f] ? n.declutter[f].all().map((m) => m.value) : null
    )), d;
  }
  /**
   * Perform action necessary to get the layer rendered after new fonts have loaded
   */
  handleFontsChanged() {
    const e = this.getLayer();
    e.getVisible() && this.replayGroup_ && e.changed();
  }
  /**
   * Handle changes in image style state.
   * @param {import("../../events/Event.js").default} event Image style change event.
   * @private
   */
  handleStyleImageChange_(e) {
    this.renderIfReadyAndVisible();
  }
  /**
   * Determine whether render should be called.
   * @param {import("../../Map.js").FrameState} frameState Frame state.
   * @return {boolean} Layer is ready to be rendered.
   */
  prepareFrame(e) {
    const n = this.getLayer(), i = n.getSource();
    if (!i)
      return !1;
    const a = e.viewHints[lt.ANIMATING], o = e.viewHints[lt.INTERACTING], r = n.getUpdateWhileAnimating(), s = n.getUpdateWhileInteracting();
    if (this.ready && !r && a || !s && o)
      return this.animatingOrInteracting_ = !0, !0;
    this.animatingOrInteracting_ = !1;
    const l = e.extent, c = e.viewState, u = c.projection, d = c.resolution, h = e.pixelRatio, f = n.getRevision(), g = n.getRenderBuffer();
    let m = n.getRenderOrder();
    m === void 0 && (m = ex);
    const v = c.center.slice(), y = Ul(
      l,
      g * d
    ), p = y.slice(), M = [y.slice()], S = u.getExtent();
    if (i.getWrapX() && u.canWrapX() && !ea(S, e.extent)) {
      const V = Re(S), N = Math.max(Re(y) / 2, V);
      y[0] = S[0] - N, y[2] = S[2] + N, kf(v, u);
      const G = Ff(M[0], u);
      G[0] < S[0] && G[2] < S[2] ? M.push([
        G[0] + V,
        G[1],
        G[2] + V,
        G[3]
      ]) : G[0] > S[0] && G[2] > S[2] && M.push([
        G[0] - V,
        G[1],
        G[2] - V,
        G[3]
      ]);
    }
    if (this.ready && this.renderedResolution_ == d && this.renderedRevision_ == f && this.renderedRenderOrder_ == m && ea(this.wrappedRenderedExtent_, y))
      return vi(this.renderedExtent_, p) || (this.hitDetectionImageData_ = null, this.renderedExtent_ = p), this.renderedCenter_ = v, this.replayGroupChanged = !1, !0;
    this.replayGroup_ = null;
    const b = new DM(
      Zg(d, h),
      y,
      d,
      h
    );
    let T;
    for (let V = 0, N = M.length; V < N; ++V)
      i.loadFeatures(M[V], d, u);
    const _ = wd(d, h);
    let P = !0;
    const w = (
      /**
       * @param {import("../../Feature.js").default} feature Feature.
       * @param {number} index Index.
       */
      (V, N) => {
        let G;
        const X = V.getStyleFunction() || n.getStyleFunction();
        if (X && (G = X(V, d)), G) {
          const E = this.renderFeature(
            V,
            _,
            G,
            b,
            T,
            this.getLayer().getDeclutter(),
            N
          );
          P = P && !E;
        }
      }
    ), I = Hl(y), z = i.getFeaturesInExtent(I);
    m && z.sort(m);
    for (let V = 0, N = z.length; V < N; ++V)
      w(z[V], V);
    this.renderedFeatures_ = z, this.ready = P;
    const A = b.finish(), R = new ZM(
      y,
      d,
      h,
      i.getOverlaps(),
      A,
      n.getRenderBuffer(),
      !!e.declutter
    );
    return this.renderedResolution_ = d, this.renderedRevision_ = f, this.renderedRenderOrder_ = m, this.renderedExtent_ = p, this.wrappedRenderedExtent_ = y, this.renderedCenter_ = v, this.renderedProjection_ = u, this.renderedPixelRatio_ = h, this.replayGroup_ = R, this.hitDetectionImageData_ = null, this.replayGroupChanged = !0, !0;
  }
  /**
   * @param {import("../../Feature.js").default} feature Feature.
   * @param {number} squaredTolerance Squared render tolerance.
   * @param {import("../../style/Style.js").default|Array<import("../../style/Style.js").default>} styles The style or array of styles.
   * @param {import("../../render/canvas/BuilderGroup.js").default} builderGroup Builder group.
   * @param {import("../../proj.js").TransformFunction} [transform] Transform from user to view projection.
   * @param {boolean} [declutter] Enable decluttering.
   * @param {number} [index] Render order index.
   * @return {boolean} `true` if an image is loading.
   */
  renderFeature(e, n, i, a, o, r, s) {
    if (!i)
      return !1;
    let l = !1;
    if (Array.isArray(i))
      for (let c = 0, u = i.length; c < u; ++c)
        l = Ed(
          a,
          e,
          i[c],
          n,
          this.boundHandleStyleImageChange_,
          o,
          r,
          s
        ) || l;
    else
      l = Ed(
        a,
        e,
        i,
        n,
        this.boundHandleStyleImageChange_,
        o,
        r,
        s
      );
    return l;
  }
}
const dx = ux;
class hx extends Pg {
  /**
   * @param {import("./BaseVector.js").Options<VectorSourceType>} [options] Options.
   */
  constructor(e) {
    super(e);
  }
  createRenderer() {
    return new dx(this);
  }
}
const fx = hx;
class gx {
  /**
   * @param {number} [maxEntries] Max entries.
   */
  constructor(e) {
    this.rbush_ = new ng(e), this.items_ = {};
  }
  /**
   * Insert a value into the RBush.
   * @param {import("../extent.js").Extent} extent Extent.
   * @param {T} value Value.
   */
  insert(e, n) {
    const i = {
      minX: e[0],
      minY: e[1],
      maxX: e[2],
      maxY: e[3],
      value: n
    };
    this.rbush_.insert(i), this.items_[we(n)] = i;
  }
  /**
   * Bulk-insert values into the RBush.
   * @param {Array<import("../extent.js").Extent>} extents Extents.
   * @param {Array<T>} values Values.
   */
  load(e, n) {
    const i = new Array(n.length);
    for (let a = 0, o = n.length; a < o; a++) {
      const r = e[a], s = n[a], l = {
        minX: r[0],
        minY: r[1],
        maxX: r[2],
        maxY: r[3],
        value: s
      };
      i[a] = l, this.items_[we(s)] = l;
    }
    this.rbush_.load(i);
  }
  /**
   * Remove a value from the RBush.
   * @param {T} value Value.
   * @return {boolean} Removed.
   */
  remove(e) {
    const n = we(e), i = this.items_[n];
    return delete this.items_[n], this.rbush_.remove(i) !== null;
  }
  /**
   * Update the extent of a value in the RBush.
   * @param {import("../extent.js").Extent} extent Extent.
   * @param {T} value Value.
   */
  update(e, n) {
    const i = this.items_[we(n)], a = [i.minX, i.minY, i.maxX, i.maxY];
    Ka(a, e) || (this.remove(n), this.insert(e, n));
  }
  /**
   * Return all values in the RBush.
   * @return {Array<T>} All.
   */
  getAll() {
    return this.rbush_.all().map(function(n) {
      return n.value;
    });
  }
  /**
   * Return all values in the given extent.
   * @param {import("../extent.js").Extent} extent Extent.
   * @return {Array<T>} All in extent.
   */
  getInExtent(e) {
    const n = {
      minX: e[0],
      minY: e[1],
      maxX: e[2],
      maxY: e[3]
    };
    return this.rbush_.search(n).map(function(a) {
      return a.value;
    });
  }
  /**
   * Calls a callback function with each value in the tree.
   * If the callback returns a truthy value, this value is returned without
   * checking the rest of the tree.
   * @param {function(T): *} callback Callback.
   * @return {*} Callback return value.
   */
  forEach(e) {
    return this.forEach_(this.getAll(), e);
  }
  /**
   * Calls a callback function with each value in the provided extent.
   * @param {import("../extent.js").Extent} extent Extent.
   * @param {function(T): *} callback Callback.
   * @return {*} Callback return value.
   */
  forEachInExtent(e, n) {
    return this.forEach_(this.getInExtent(e), n);
  }
  /**
   * @param {Array<T>} values Values.
   * @param {function(T): *} callback Callback.
   * @private
   * @return {*} Callback return value.
   */
  forEach_(e, n) {
    let i;
    for (let a = 0, o = e.length; a < o; a++)
      if (i = n(e[a]), i)
        return i;
    return i;
  }
  /**
   * @return {boolean} Is empty.
   */
  isEmpty() {
    return ua(this.items_);
  }
  /**
   * Remove all values from the RBush.
   */
  clear() {
    this.rbush_.clear(), this.items_ = {};
  }
  /**
   * @param {import("../extent.js").Extent} [extent] Extent.
   * @return {import("../extent.js").Extent} Extent.
   */
  getExtent(e) {
    const n = this.rbush_.toJSON();
    return li(n.minX, n.minY, n.maxX, n.maxY, e);
  }
  /**
   * @param {RBush} rbush R-Tree.
   */
  concat(e) {
    this.rbush_.load(e.rbush_.all());
    for (const n in e.items_)
      this.items_[n] = e.items_[n];
  }
}
const Ad = gx;
function Rd(t, e, n, i, a, o, r) {
  let s, l;
  const c = (n - e) / i;
  if (c === 1)
    s = e;
  else if (c === 2)
    s = e, l = a;
  else if (c !== 0) {
    let u = t[e], d = t[e + 1], h = 0;
    const f = [0];
    for (let v = e + i; v < n; v += i) {
      const y = t[v], p = t[v + 1];
      h += Math.sqrt((y - u) * (y - u) + (p - d) * (p - d)), f.push(h), u = y, d = p;
    }
    const g = a * h, m = Ip(f, g);
    m < 0 ? (l = (g - f[-m - 2]) / (f[-m - 1] - f[-m - 2]), s = e + (-m - 2) * i) : s = e + m * i;
  }
  r = r > 1 ? r : 2, o = o || new Array(r);
  for (let u = 0; u < r; ++u)
    o[u] = s === void 0 ? NaN : l === void 0 ? t[s + u] : kt(t[s + u], t[s + i + u], l);
  return o;
}
function mx(t, e, n, i) {
  const a = [];
  let o = Gt();
  for (let r = 0, s = n.length; r < s; ++r) {
    const l = n[r];
    o = Xl(
      t,
      e,
      l[0],
      i
    ), a.push((o[0] + o[2]) / 2, (o[1] + o[3]) / 2), e = l[l.length - 1];
  }
  return a;
}
const Id = Zt();
class ga {
  /**
   * @param {Type} type Geometry type.
   * @param {Array<number>} flatCoordinates Flat coordinates. These always need
   *     to be right-handed for polygons.
   * @param {Array<number>} ends Ends.
   * @param {number} stride Stride.
   * @param {Object<string, *>} properties Properties.
   * @param {number|string|undefined} id Feature id.
   */
  constructor(e, n, i, a, o, r) {
    this.styleFunction, this.extent_, this.id_ = r, this.type_ = e, this.flatCoordinates_ = n, this.flatInteriorPoints_ = null, this.flatMidpoints_ = null, this.ends_ = i || null, this.properties_ = o, this.squaredTolerance_, this.stride_ = a, this.simplifiedGeometry_;
  }
  /**
   * Get a feature property by its key.
   * @param {string} key Key
   * @return {*} Value for the requested key.
   * @api
   */
  get(e) {
    return this.properties_[e];
  }
  /**
   * Get the extent of this feature's geometry.
   * @return {import("../extent.js").Extent} Extent.
   * @api
   */
  getExtent() {
    return this.extent_ || (this.extent_ = this.type_ === "Point" ? Lf(this.flatCoordinates_) : Xl(
      this.flatCoordinates_,
      0,
      this.flatCoordinates_.length,
      2
    )), this.extent_;
  }
  /**
   * @return {Array<number>} Flat interior points.
   */
  getFlatInteriorPoint() {
    if (!this.flatInteriorPoints_) {
      const e = zi(this.getExtent());
      this.flatInteriorPoints_ = ic(
        this.flatCoordinates_,
        0,
        this.ends_,
        2,
        e,
        0
      );
    }
    return this.flatInteriorPoints_;
  }
  /**
   * @return {Array<number>} Flat interior points.
   */
  getFlatInteriorPoints() {
    if (!this.flatInteriorPoints_) {
      const e = Y_(this.flatCoordinates_, this.ends_), n = mx(this.flatCoordinates_, 0, e, 2);
      this.flatInteriorPoints_ = N_(
        this.flatCoordinates_,
        0,
        e,
        2,
        n
      );
    }
    return this.flatInteriorPoints_;
  }
  /**
   * @return {Array<number>} Flat midpoint.
   */
  getFlatMidpoint() {
    return this.flatMidpoints_ || (this.flatMidpoints_ = Rd(
      this.flatCoordinates_,
      0,
      this.flatCoordinates_.length,
      2,
      0.5
    )), this.flatMidpoints_;
  }
  /**
   * @return {Array<number>} Flat midpoints.
   */
  getFlatMidpoints() {
    if (!this.flatMidpoints_) {
      this.flatMidpoints_ = [];
      const e = this.flatCoordinates_;
      let n = 0;
      const i = (
        /** @type {Array<number>} */
        this.ends_
      );
      for (let a = 0, o = i.length; a < o; ++a) {
        const r = i[a], s = Rd(e, n, r, 2, 0.5);
        Nl(this.flatMidpoints_, s), n = r;
      }
    }
    return this.flatMidpoints_;
  }
  /**
   * Get the feature identifier.  This is a stable identifier for the feature and
   * is set when reading data from a remote source.
   * @return {number|string|undefined} Id.
   * @api
   */
  getId() {
    return this.id_;
  }
  /**
   * @return {Array<number>} Flat coordinates.
   */
  getOrientedFlatCoordinates() {
    return this.flatCoordinates_;
  }
  /**
   * For API compatibility with {@link module:ol/Feature~Feature}, this method is useful when
   * determining the geometry type in style function (see {@link #getType}).
   * @return {RenderFeature} Feature.
   * @api
   */
  getGeometry() {
    return this;
  }
  /**
   * @param {number} squaredTolerance Squared tolerance.
   * @return {RenderFeature} Simplified geometry.
   */
  getSimplifiedGeometry(e) {
    return this;
  }
  /**
   * Get a transformed and simplified version of the geometry.
   * @param {number} squaredTolerance Squared tolerance.
   * @param {import("../proj.js").TransformFunction} [transform] Optional transform function.
   * @return {RenderFeature} Simplified geometry.
   */
  simplifyTransformed(e, n) {
    return this;
  }
  /**
   * Get the feature properties.
   * @return {Object<string, *>} Feature properties.
   * @api
   */
  getProperties() {
    return this.properties_;
  }
  /**
   * Get an object of all property names and values.  This has the same behavior as getProperties,
   * but is here to conform with the {@link module:ol/Feature~Feature} interface.
   * @return {Object<string, *>?} Object.
   */
  getPropertiesInternal() {
    return this.properties_;
  }
  /**
   * @return {number} Stride.
   */
  getStride() {
    return this.stride_;
  }
  /**
   * @return {import('../style/Style.js').StyleFunction|undefined} Style
   */
  getStyleFunction() {
    return this.styleFunction;
  }
  /**
   * Get the type of this feature's geometry.
   * @return {Type} Geometry type.
   * @api
   */
  getType() {
    return this.type_;
  }
  /**
   * Transform geometry coordinates from tile pixel space to projected.
   *
   * @param {import("../proj.js").ProjectionLike} projection The data projection
   */
  transform(e) {
    e = Nt(e);
    const n = e.getExtent(), i = e.getWorldExtent();
    if (n && i) {
      const a = ut(i) / ut(n);
      Cn(
        Id,
        i[0],
        i[3],
        a,
        -a,
        0,
        0,
        0
      ), oi(
        this.flatCoordinates_,
        0,
        this.flatCoordinates_.length,
        2,
        Id,
        this.flatCoordinates_
      );
    }
  }
  /**
   * Apply a transform function to the coordinates of the geometry.
   * The geometry is modified in place.
   * If you do not want the geometry modified in place, first `clone()` it and
   * then use this function on the clone.
   * @param {import("../proj.js").TransformFunction} transformFn Transform function.
   */
  applyTransform(e) {
    e(this.flatCoordinates_, this.flatCoordinates_, this.stride_);
  }
  /**
   * @return {RenderFeature} A cloned render feature.
   */
  clone() {
    var e;
    return new ga(
      this.type_,
      this.flatCoordinates_.slice(),
      (e = this.ends_) == null ? void 0 : e.slice(),
      this.stride_,
      Object.assign({}, this.properties_),
      this.id_
    );
  }
  /**
   * @return {Array<number>|null} Ends.
   */
  getEnds() {
    return this.ends_;
  }
  /**
   * Add transform and resolution based geometry simplification to this instance.
   * @return {RenderFeature} This render feature.
   */
  enableSimplifyTransformed() {
    return this.simplifyTransformed = Tf((e, n) => {
      if (e === this.squaredTolerance_)
        return this.simplifiedGeometry_;
      this.simplifiedGeometry_ = this.clone(), n && this.simplifiedGeometry_.applyTransform(n);
      const i = this.simplifiedGeometry_.getFlatCoordinates();
      let a;
      switch (this.type_) {
        case "LineString":
          i.length = tc(
            i,
            0,
            this.simplifiedGeometry_.flatCoordinates_.length,
            this.simplifiedGeometry_.stride_,
            e,
            i,
            0
          ), a = [i.length];
          break;
        case "MultiLineString":
          a = [], i.length = k_(
            i,
            0,
            this.simplifiedGeometry_.ends_,
            this.simplifiedGeometry_.stride_,
            e,
            i,
            0,
            a
          );
          break;
        case "Polygon":
          a = [], i.length = Hf(
            i,
            0,
            this.simplifiedGeometry_.ends_,
            this.simplifiedGeometry_.stride_,
            Math.sqrt(e),
            i,
            0,
            a
          );
          break;
      }
      return a && (this.simplifiedGeometry_ = new ga(
        this.type_,
        i,
        a,
        2,
        this.properties_,
        this.id_
      )), this.squaredTolerance_ = e, this.simplifiedGeometry_;
    }), this;
  }
}
ga.prototype.getFlatCoordinates = ga.prototype.getOrientedFlatCoordinates;
const bi = ga, Ft = {
  /**
   * Triggered when a feature is added to the source.
   * @event module:ol/source/Vector.VectorSourceEvent#addfeature
   * @api
   */
  ADDFEATURE: "addfeature",
  /**
   * Triggered when a feature is updated.
   * @event module:ol/source/Vector.VectorSourceEvent#changefeature
   * @api
   */
  CHANGEFEATURE: "changefeature",
  /**
   * Triggered when the clear method is called on the source.
   * @event module:ol/source/Vector.VectorSourceEvent#clear
   * @api
   */
  CLEAR: "clear",
  /**
   * Triggered when a feature is removed from the source.
   * See {@link module:ol/source/Vector~VectorSource#clear source.clear()} for exceptions.
   * @event module:ol/source/Vector.VectorSourceEvent#removefeature
   * @api
   */
  REMOVEFEATURE: "removefeature",
  /**
   * Triggered when features starts loading.
   * @event module:ol/source/Vector.VectorSourceEvent#featuresloadstart
   * @api
   */
  FEATURESLOADSTART: "featuresloadstart",
  /**
   * Triggered when features finishes loading.
   * @event module:ol/source/Vector.VectorSourceEvent#featuresloadend
   * @api
   */
  FEATURESLOADEND: "featuresloadend",
  /**
   * Triggered if feature loading results in an error.
   * @event module:ol/source/Vector.VectorSourceEvent#featuresloaderror
   * @api
   */
  FEATURESLOADERROR: "featuresloaderror"
};
function vx(t, e) {
  return [[-1 / 0, -1 / 0, 1 / 0, 1 / 0]];
}
let Cx = !1;
function yx(t, e, n, i, a, o, r) {
  const s = new XMLHttpRequest();
  s.open(
    "GET",
    typeof t == "function" ? t(n, i, a) : t,
    !0
  ), e.getType() == "arraybuffer" && (s.responseType = "arraybuffer"), s.withCredentials = Cx, s.onload = function(l) {
    if (!s.status || s.status >= 200 && s.status < 300) {
      const c = e.getType();
      let u;
      c == "json" ? u = JSON.parse(s.responseText) : c == "text" ? u = s.responseText : c == "xml" ? (u = s.responseXML, u || (u = new DOMParser().parseFromString(
        s.responseText,
        "application/xml"
      ))) : c == "arraybuffer" && (u = /** @type {ArrayBuffer} */
      s.response), u ? o(
        /** @type {Array<import("./Feature.js").default>} */
        e.readFeatures(u, {
          extent: n,
          featureProjection: a
        }),
        e.readProjection(u)
      ) : r();
    } else
      r();
  }, s.onerror = r, s.send();
}
function zd(t, e) {
  return function(n, i, a, o, r) {
    const s = (
      /** @type {import("./source/Vector").default} */
      this
    );
    yx(
      t,
      e,
      n,
      i,
      a,
      /**
       * @param {Array<import("./Feature.js").default>} features The loaded features.
       * @param {import("./proj/Projection.js").default} dataProjection Data
       * projection.
       */
      function(l, c) {
        s.addFeatures(l), o !== void 0 && o(l);
      },
      /* FIXME handle error */
      r || ca
    );
  };
}
class Jn extends Xn {
  /**
   * @param {string} type Type.
   * @param {FeatureClass} [feature] Feature.
   * @param {Array<FeatureClass>} [features] Features.
   */
  constructor(e, n, i) {
    super(e), this.feature = n, this.features = i;
  }
}
class px extends kg {
  /**
   * @param {Options<FeatureType>} [options] Vector source options.
   */
  constructor(e) {
    e = e || {}, super({
      attributions: e.attributions,
      interpolate: !0,
      projection: void 0,
      state: "ready",
      wrapX: e.wrapX !== void 0 ? e.wrapX : !0
    }), this.on, this.once, this.un, this.loader_ = ca, this.format_ = e.format, this.overlaps_ = e.overlaps === void 0 ? !0 : e.overlaps, this.url_ = e.url, e.loader !== void 0 ? this.loader_ = e.loader : this.url_ !== void 0 && (Se(this.format_, "`format` must be set when `url` is set"), this.loader_ = zd(
      this.url_,
      /** @type {import("../format/Feature.js").default} */
      this.format_
    )), this.strategy_ = e.strategy !== void 0 ? e.strategy : vx;
    const n = e.useSpatialIndex !== void 0 ? e.useSpatialIndex : !0;
    this.featuresRtree_ = n ? new Ad() : null, this.loadedExtentsRtree_ = new Ad(), this.loadingExtentsCount_ = 0, this.nullGeometryFeatures_ = {}, this.idIndex_ = {}, this.uidIndex_ = {}, this.featureChangeKeys_ = {}, this.featuresCollection_ = null;
    let i, a;
    Array.isArray(e.features) ? a = e.features : e.features && (i = e.features, a = i.getArray()), !n && i === void 0 && (i = new cn(a)), a !== void 0 && this.addFeaturesInternal(a), i !== void 0 && this.bindFeaturesCollection_(i);
  }
  /**
   * Add a single feature to the source.  If you want to add a batch of features
   * at once, call {@link module:ol/source/Vector~VectorSource#addFeatures #addFeatures()}
   * instead. A feature will not be added to the source if feature with
   * the same id is already there. The reason for this behavior is to avoid
   * feature duplication when using bbox or tile loading strategies.
   * Note: this also applies if an {@link module:ol/Collection~Collection} is used for features,
   * meaning that if a feature with a duplicate id is added in the collection, it will
   * be removed from it right away.
   * @param {FeatureType} feature Feature to add.
   * @api
   */
  addFeature(e) {
    this.addFeatureInternal(e), this.changed();
  }
  /**
   * Add a feature without firing a `change` event.
   * @param {FeatureType} feature Feature.
   * @protected
   */
  addFeatureInternal(e) {
    const n = we(e);
    if (!this.addToIndex_(n, e)) {
      this.featuresCollection_ && this.featuresCollection_.remove(e);
      return;
    }
    this.setupChangeEvents_(n, e);
    const i = e.getGeometry();
    if (i) {
      const a = i.getExtent();
      this.featuresRtree_ && this.featuresRtree_.insert(a, e);
    } else
      this.nullGeometryFeatures_[n] = e;
    this.dispatchEvent(
      new Jn(Ft.ADDFEATURE, e)
    );
  }
  /**
   * @param {string} featureKey Unique identifier for the feature.
   * @param {FeatureType} feature The feature.
   * @private
   */
  setupChangeEvents_(e, n) {
    n instanceof bi || (this.featureChangeKeys_[e] = [
      Me(n, ge.CHANGE, this.handleFeatureChange_, this),
      Me(
        n,
        la.PROPERTYCHANGE,
        this.handleFeatureChange_,
        this
      )
    ]);
  }
  /**
   * @param {string} featureKey Unique identifier for the feature.
   * @param {FeatureType} feature The feature.
   * @return {boolean} The feature is "valid", in the sense that it is also a
   *     candidate for insertion into the Rtree.
   * @private
   */
  addToIndex_(e, n) {
    let i = !0;
    if (n.getId() !== void 0) {
      const a = String(n.getId());
      if (!(a in this.idIndex_))
        this.idIndex_[a] = n;
      else if (n instanceof bi) {
        const o = this.idIndex_[a];
        o instanceof bi ? Array.isArray(o) ? o.push(n) : this.idIndex_[a] = [o, n] : i = !1;
      } else
        i = !1;
    }
    return i && (Se(
      !(e in this.uidIndex_),
      "The passed `feature` was already added to the source"
    ), this.uidIndex_[e] = n), i;
  }
  /**
   * Add a batch of features to the source.
   * @param {Array<FeatureType>} features Features to add.
   * @api
   */
  addFeatures(e) {
    this.addFeaturesInternal(e), this.changed();
  }
  /**
   * Add features without firing a `change` event.
   * @param {Array<FeatureType>} features Features.
   * @protected
   */
  addFeaturesInternal(e) {
    const n = [], i = [], a = [];
    for (let o = 0, r = e.length; o < r; o++) {
      const s = e[o], l = we(s);
      this.addToIndex_(l, s) && i.push(s);
    }
    for (let o = 0, r = i.length; o < r; o++) {
      const s = i[o], l = we(s);
      this.setupChangeEvents_(l, s);
      const c = s.getGeometry();
      if (c) {
        const u = c.getExtent();
        n.push(u), a.push(s);
      } else
        this.nullGeometryFeatures_[l] = s;
    }
    if (this.featuresRtree_ && this.featuresRtree_.load(n, a), this.hasListener(Ft.ADDFEATURE))
      for (let o = 0, r = i.length; o < r; o++)
        this.dispatchEvent(
          new Jn(Ft.ADDFEATURE, i[o])
        );
  }
  /**
   * @param {!Collection<FeatureType>} collection Collection.
   * @private
   */
  bindFeaturesCollection_(e) {
    let n = !1;
    this.addEventListener(
      Ft.ADDFEATURE,
      /**
       * @param {VectorSourceEvent<FeatureType>} evt The vector source event
       */
      function(i) {
        n || (n = !0, e.push(i.feature), n = !1);
      }
    ), this.addEventListener(
      Ft.REMOVEFEATURE,
      /**
       * @param {VectorSourceEvent<FeatureType>} evt The vector source event
       */
      function(i) {
        n || (n = !0, e.remove(i.feature), n = !1);
      }
    ), e.addEventListener(
      St.ADD,
      /**
       * @param {import("../Collection.js").CollectionEvent<FeatureType>} evt The collection event
       */
      (i) => {
        n || (n = !0, this.addFeature(i.element), n = !1);
      }
    ), e.addEventListener(
      St.REMOVE,
      /**
       * @param {import("../Collection.js").CollectionEvent<FeatureType>} evt The collection event
       */
      (i) => {
        n || (n = !0, this.removeFeature(i.element), n = !1);
      }
    ), this.featuresCollection_ = e;
  }
  /**
   * Remove all features from the source.
   * @param {boolean} [fast] Skip dispatching of {@link module:ol/source/Vector.VectorSourceEvent#event:removefeature} events.
   * @api
   */
  clear(e) {
    if (e) {
      for (const i in this.featureChangeKeys_)
        this.featureChangeKeys_[i].forEach(Ve);
      this.featuresCollection_ || (this.featureChangeKeys_ = {}, this.idIndex_ = {}, this.uidIndex_ = {});
    } else if (this.featuresRtree_) {
      const i = (a) => {
        this.removeFeatureInternal(a);
      };
      this.featuresRtree_.forEach(i);
      for (const a in this.nullGeometryFeatures_)
        this.removeFeatureInternal(this.nullGeometryFeatures_[a]);
    }
    this.featuresCollection_ && this.featuresCollection_.clear(), this.featuresRtree_ && this.featuresRtree_.clear(), this.nullGeometryFeatures_ = {};
    const n = new Jn(Ft.CLEAR);
    this.dispatchEvent(n), this.changed();
  }
  /**
   * Iterate through all features on the source, calling the provided callback
   * with each one.  If the callback returns any "truthy" value, iteration will
   * stop and the function will return the same value.
   * Note: this function only iterate through the feature that have a defined geometry.
   *
   * @param {function(FeatureType): T} callback Called with each feature
   *     on the source.  Return a truthy value to stop iteration.
   * @return {T|undefined} The return value from the last call to the callback.
   * @template T
   * @api
   */
  forEachFeature(e) {
    if (this.featuresRtree_)
      return this.featuresRtree_.forEach(e);
    this.featuresCollection_ && this.featuresCollection_.forEach(e);
  }
  /**
   * Iterate through all features whose geometries contain the provided
   * coordinate, calling the callback with each feature.  If the callback returns
   * a "truthy" value, iteration will stop and the function will return the same
   * value.
   *
   * For {@link module:ol/render/Feature~RenderFeature} features, the callback will be
   * called for all features.
   *
   * @param {import("../coordinate.js").Coordinate} coordinate Coordinate.
   * @param {function(FeatureType): T} callback Called with each feature
   *     whose goemetry contains the provided coordinate.
   * @return {T|undefined} The return value from the last call to the callback.
   * @template T
   */
  forEachFeatureAtCoordinateDirect(e, n) {
    const i = [e[0], e[1], e[0], e[1]];
    return this.forEachFeatureInExtent(i, function(a) {
      const o = a.getGeometry();
      if (o instanceof bi || o.intersectsCoordinate(e))
        return n(a);
    });
  }
  /**
   * Iterate through all features whose bounding box intersects the provided
   * extent (note that the feature's geometry may not intersect the extent),
   * calling the callback with each feature.  If the callback returns a "truthy"
   * value, iteration will stop and the function will return the same value.
   *
   * If you are interested in features whose geometry intersects an extent, call
   * the {@link module:ol/source/Vector~VectorSource#forEachFeatureIntersectingExtent #forEachFeatureIntersectingExtent()} method instead.
   *
   * When `useSpatialIndex` is set to false, this method will loop through all
   * features, equivalent to {@link module:ol/source/Vector~VectorSource#forEachFeature #forEachFeature()}.
   *
   * @param {import("../extent.js").Extent} extent Extent.
   * @param {function(FeatureType): T} callback Called with each feature
   *     whose bounding box intersects the provided extent.
   * @return {T|undefined} The return value from the last call to the callback.
   * @template T
   * @api
   */
  forEachFeatureInExtent(e, n) {
    if (this.featuresRtree_)
      return this.featuresRtree_.forEachInExtent(e, n);
    this.featuresCollection_ && this.featuresCollection_.forEach(n);
  }
  /**
   * Iterate through all features whose geometry intersects the provided extent,
   * calling the callback with each feature.  If the callback returns a "truthy"
   * value, iteration will stop and the function will return the same value.
   *
   * If you only want to test for bounding box intersection, call the
   * {@link module:ol/source/Vector~VectorSource#forEachFeatureInExtent #forEachFeatureInExtent()} method instead.
   *
   * @param {import("../extent.js").Extent} extent Extent.
   * @param {function(FeatureType): T} callback Called with each feature
   *     whose geometry intersects the provided extent.
   * @return {T|undefined} The return value from the last call to the callback.
   * @template T
   * @api
   */
  forEachFeatureIntersectingExtent(e, n) {
    return this.forEachFeatureInExtent(
      e,
      /**
       * @param {FeatureType} feature Feature.
       * @return {T|undefined} The return value from the last call to the callback.
       */
      function(i) {
        const a = i.getGeometry();
        if (a instanceof bi || a.intersectsExtent(e)) {
          const o = n(i);
          if (o)
            return o;
        }
      }
    );
  }
  /**
   * Get the features collection associated with this source. Will be `null`
   * unless the source was configured with `useSpatialIndex` set to `false`, or
   * with an {@link module:ol/Collection~Collection} as `features`.
   * @return {Collection<FeatureType>|null} The collection of features.
   * @api
   */
  getFeaturesCollection() {
    return this.featuresCollection_;
  }
  /**
   * Get a snapshot of the features currently on the source in random order. The returned array
   * is a copy, the features are references to the features in the source.
   * @return {Array<FeatureType>} Features.
   * @api
   */
  getFeatures() {
    let e;
    return this.featuresCollection_ ? e = this.featuresCollection_.getArray().slice(0) : this.featuresRtree_ && (e = this.featuresRtree_.getAll(), ua(this.nullGeometryFeatures_) || Nl(e, Object.values(this.nullGeometryFeatures_))), e;
  }
  /**
   * Get all features whose geometry intersects the provided coordinate.
   * @param {import("../coordinate.js").Coordinate} coordinate Coordinate.
   * @return {Array<import("../Feature.js").default>} Features.
   * @api
   */
  getFeaturesAtCoordinate(e) {
    const n = [];
    return this.forEachFeatureAtCoordinateDirect(e, function(i) {
      n.push(i);
    }), n;
  }
  /**
   * Get all features whose bounding box intersects the provided extent.  Note that this returns an array of
   * all features intersecting the given extent in random order (so it may include
   * features whose geometries do not intersect the extent).
   *
   * When `useSpatialIndex` is set to false, this method will return all
   * features.
   *
   * @param {import("../extent.js").Extent} extent Extent.
   * @param {import("../proj/Projection.js").default} [projection] Include features
   * where `extent` exceeds the x-axis bounds of `projection` and wraps around the world.
   * @return {Array<FeatureType>} Features.
   * @api
   */
  getFeaturesInExtent(e, n) {
    if (this.featuresRtree_) {
      if (!(n && n.canWrapX() && this.getWrapX()))
        return this.featuresRtree_.getInExtent(e);
      const a = o_(e, n);
      return [].concat(
        ...a.map((o) => this.featuresRtree_.getInExtent(o))
      );
    }
    return this.featuresCollection_ ? this.featuresCollection_.getArray().slice(0) : [];
  }
  /**
   * Get the closest feature to the provided coordinate.
   *
   * This method is not available when the source is configured with
   * `useSpatialIndex` set to `false` and the features in this source are of type
   * {@link module:ol/Feature~Feature}.
   * @param {import("../coordinate.js").Coordinate} coordinate Coordinate.
   * @param {function(FeatureType):boolean} [filter] Feature filter function.
   *     The filter function will receive one argument, the {@link module:ol/Feature~Feature feature}
   *     and it should return a boolean value. By default, no filtering is made.
   * @return {FeatureType} Closest feature.
   * @api
   */
  getClosestFeatureToCoordinate(e, n) {
    const i = e[0], a = e[1];
    let o = null;
    const r = [NaN, NaN];
    let s = 1 / 0;
    const l = [-1 / 0, -1 / 0, 1 / 0, 1 / 0];
    return n = n || Za, this.featuresRtree_.forEachInExtent(
      l,
      /**
       * @param {FeatureType} feature Feature.
       */
      function(c) {
        if (n(c)) {
          const u = c.getGeometry(), d = s;
          if (s = u instanceof bi ? 0 : u.closestPointXY(i, a, r, s), s < d) {
            o = c;
            const h = Math.sqrt(s);
            l[0] = i - h, l[1] = a - h, l[2] = i + h, l[3] = a + h;
          }
        }
      }
    ), o;
  }
  /**
   * Get the extent of the features currently in the source.
   *
   * This method is not available when the source is configured with
   * `useSpatialIndex` set to `false`.
   * @param {import("../extent.js").Extent} [extent] Destination extent. If provided, no new extent
   *     will be created. Instead, that extent's coordinates will be overwritten.
   * @return {import("../extent.js").Extent} Extent.
   * @api
   */
  getExtent(e) {
    return this.featuresRtree_.getExtent(e);
  }
  /**
   * Get a feature by its identifier (the value returned by feature.getId()). When `RenderFeature`s
   * are used, `getFeatureById()` can return an array of `RenderFeature`s. This allows for handling
   * of `GeometryCollection` geometries, where format readers create one `RenderFeature` per
   * `GeometryCollection` member.
   * Note that the index treats string and numeric identifiers as the same.  So
   * `source.getFeatureById(2)` will return a feature with id `'2'` or `2`.
   *
   * @param {string|number} id Feature identifier.
   * @return {FeatureClassOrArrayOfRenderFeatures<FeatureType>|null} The feature (or `null` if not found).
   * @api
   */
  getFeatureById(e) {
    const n = this.idIndex_[e.toString()];
    return n !== void 0 ? (
      /** @type {FeatureClassOrArrayOfRenderFeatures<FeatureType>} */
      n
    ) : null;
  }
  /**
   * Get a feature by its internal unique identifier (using `getUid`).
   *
   * @param {string} uid Feature identifier.
   * @return {FeatureType|null} The feature (or `null` if not found).
   */
  getFeatureByUid(e) {
    const n = this.uidIndex_[e];
    return n !== void 0 ? n : null;
  }
  /**
   * Get the format associated with this source.
   *
   * @return {import("../format/Feature.js").default<import('../format/Feature.js').FeatureToFeatureClass<FeatureType>>|undefined} The feature format.
   * @api
   */
  getFormat() {
    return this.format_;
  }
  /**
   * @return {boolean} The source can have overlapping geometries.
   */
  getOverlaps() {
    return this.overlaps_;
  }
  /**
   * Get the url associated with this source.
   *
   * @return {string|import("../featureloader.js").FeatureUrlFunction|undefined} The url.
   * @api
   */
  getUrl() {
    return this.url_;
  }
  /**
   * @param {Event} event Event.
   * @private
   */
  handleFeatureChange_(e) {
    const n = (
      /** @type {FeatureType} */
      e.target
    ), i = we(n), a = n.getGeometry();
    if (!a)
      i in this.nullGeometryFeatures_ || (this.featuresRtree_ && this.featuresRtree_.remove(n), this.nullGeometryFeatures_[i] = n);
    else {
      const r = a.getExtent();
      i in this.nullGeometryFeatures_ ? (delete this.nullGeometryFeatures_[i], this.featuresRtree_ && this.featuresRtree_.insert(r, n)) : this.featuresRtree_ && this.featuresRtree_.update(r, n);
    }
    const o = n.getId();
    if (o !== void 0) {
      const r = o.toString();
      this.idIndex_[r] !== n && (this.removeFromIdIndex_(n), this.idIndex_[r] = n);
    } else
      this.removeFromIdIndex_(n), this.uidIndex_[i] = n;
    this.changed(), this.dispatchEvent(
      new Jn(Ft.CHANGEFEATURE, n)
    );
  }
  /**
   * Returns true if the feature is contained within the source.
   * @param {FeatureType} feature Feature.
   * @return {boolean} Has feature.
   * @api
   */
  hasFeature(e) {
    const n = e.getId();
    return n !== void 0 ? n in this.idIndex_ : we(e) in this.uidIndex_;
  }
  /**
   * @return {boolean} Is empty.
   */
  isEmpty() {
    return this.featuresRtree_ ? this.featuresRtree_.isEmpty() && ua(this.nullGeometryFeatures_) : this.featuresCollection_ ? this.featuresCollection_.getLength() === 0 : !0;
  }
  /**
   * @param {import("../extent.js").Extent} extent Extent.
   * @param {number} resolution Resolution.
   * @param {import("../proj/Projection.js").default} projection Projection.
   */
  loadFeatures(e, n, i) {
    const a = this.loadedExtentsRtree_, o = this.strategy_(e, n, i);
    for (let r = 0, s = o.length; r < s; ++r) {
      const l = o[r];
      a.forEachInExtent(
        l,
        /**
         * @param {{extent: import("../extent.js").Extent}} object Object.
         * @return {boolean} Contains.
         */
        function(u) {
          return ea(u.extent, l);
        }
      ) || (++this.loadingExtentsCount_, this.dispatchEvent(
        new Jn(Ft.FEATURESLOADSTART)
      ), this.loader_.call(
        this,
        l,
        n,
        i,
        (u) => {
          --this.loadingExtentsCount_, this.dispatchEvent(
            new Jn(
              Ft.FEATURESLOADEND,
              void 0,
              u
            )
          );
        },
        () => {
          --this.loadingExtentsCount_, this.dispatchEvent(
            new Jn(Ft.FEATURESLOADERROR)
          );
        }
      ), a.insert(l, { extent: l.slice() }));
    }
    this.loading = this.loader_.length < 4 ? !1 : this.loadingExtentsCount_ > 0;
  }
  refresh() {
    this.clear(!0), this.loadedExtentsRtree_.clear(), super.refresh();
  }
  /**
   * Remove an extent from the list of loaded extents.
   * @param {import("../extent.js").Extent} extent Extent.
   * @api
   */
  removeLoadedExtent(e) {
    const n = this.loadedExtentsRtree_;
    let i;
    n.forEachInExtent(e, function(a) {
      if (Ka(a.extent, e))
        return i = a, !0;
    }), i && n.remove(i);
  }
  /**
   * Batch remove features from the source.  If you want to remove all features
   * at once, use the {@link module:ol/source/Vector~VectorSource#clear #clear()} method
   * instead.
   * @param {Array<FeatureType>} features Features to remove.
   */
  removeFeatures(e) {
    const n = [];
    for (let i = 0, a = e.length; i < a; ++i) {
      const o = e[i], r = this.removeFeatureInternal(o);
      r && n.push(r);
    }
    n.length > 0 && this.changed();
  }
  /**
   * Remove a single feature from the source. If you want to batch remove
   * features, use the {@link module:ol/source/Vector~VectorSource#removeFeatures #removeFeatures()} method
   * instead.
   * @param {FeatureType} feature Feature to remove.
   * @api
   */
  removeFeature(e) {
    if (!e)
      return;
    this.removeFeatureInternal(e) && this.changed();
  }
  /**
   * Remove feature without firing a `change` event.
   * @param {FeatureType} feature Feature.
   * @return {FeatureType|undefined} The removed feature
   *     (or undefined if the feature was not found).
   * @protected
   */
  removeFeatureInternal(e) {
    const n = we(e);
    n in this.nullGeometryFeatures_ ? delete this.nullGeometryFeatures_[n] : this.featuresRtree_ && this.featuresRtree_.remove(e);
    const i = this.featureChangeKeys_[n];
    if (!i)
      return;
    i.forEach(Ve), delete this.featureChangeKeys_[n];
    const a = e.getId();
    return a !== void 0 && delete this.idIndex_[a.toString()], delete this.uidIndex_[n], this.hasListener(Ft.REMOVEFEATURE) && this.dispatchEvent(
      new Jn(Ft.REMOVEFEATURE, e)
    ), e;
  }
  /**
   * Remove a feature from the id index.  Called internally when the feature id
   * may have changed.
   * @param {FeatureType} feature The feature.
   * @return {boolean} Removed the feature from the index.
   * @private
   */
  removeFromIdIndex_(e) {
    let n = !1;
    for (const i in this.idIndex_) {
      const a = this.idIndex_[i];
      if (e instanceof bi && Array.isArray(a) && a.includes(e))
        a.splice(a.indexOf(e), 1);
      else if (this.idIndex_[i] === e) {
        delete this.idIndex_[i], n = !0;
        break;
      }
    }
    return n;
  }
  /**
   * Set the new loader of the source. The next render cycle will use the
   * new loader.
   * @param {import("../featureloader.js").FeatureLoader} loader The loader to set.
   * @api
   */
  setLoader(e) {
    this.loader_ = e;
  }
  /**
   * Points the source to a new url. The next render cycle will use the new url.
   * @param {string|import("../featureloader.js").FeatureUrlFunction} url Url.
   * @api
   */
  setUrl(e) {
    Se(this.format_, "`format` must be set when `url` is set"), this.url_ = e, this.setLoader(zd(e, this.format_));
  }
}
const _x = px, Sx = ["innerHTML"], bx = {
  __name: "Map",
  props: ["content", "info"],
  setup(t) {
    const { getText: e } = mi();
    let n = Z(null);
    return nt(() => {
      const i = new mM({
        geometry: new qf(Nu(t.content.coordinates))
      }), a = new Na({
        image: new yc({
          anchor: [0.5, 46],
          anchorXUnits: "fraction",
          anchorYUnits: "pixels",
          src: `https://generic-be-test.replit.app//colorize-image?color=%23${t.info.primaryColor.substring(1)}`
        })
      });
      i.setStyle(a);
      const o = new _x({
        features: [i]
      }), r = new fx({
        source: o
      });
      new Eb({
        target: n.value,
        layers: [
          new TM({
            source: new fM()
          }),
          r
        ],
        view: new sn({
          center: Nu(t.content.coordinates),
          zoom: t.content.zoom
        })
      });
    }), (i, a) => (H(), fe(vn, null, {
      default: Y(() => [
        C(Mo, { elevation: "20" }, {
          default: Y(() => [
            C(vn, null, {
              default: Y(() => [
                ve("h3", {
                  style: mt({ color: t.info.primaryColor }),
                  innerHTML: O(e)(t.content.title) || "Puoi venirci a conoscere qui"
                }, null, 12, Sx),
                ve("div", {
                  ref_key: "mapContainer",
                  ref: n,
                  style: { width: "100%", height: "400px" }
                }, null, 512)
              ]),
              _: 1
            })
          ]),
          _: 1
        })
      ]),
      _: 1
    }));
  }
}, Mx = {
  __name: "Line",
  props: ["info"],
  setup(t) {
    return (e, n) => (H(), fe(vn, null, {
      default: Y(() => [
        ve("hr", {
          style: mt({ height: "5px", backgroundColor: t.info.primaryColor })
        }, null, 4)
      ]),
      _: 1
    }));
  }
};
const xx = (t) => {
  const {
    touchstartX: e,
    touchendX: n,
    touchstartY: i,
    touchendY: a
  } = t, o = 0.5, r = 16;
  t.offsetX = n - e, t.offsetY = a - i, Math.abs(t.offsetY) < o * Math.abs(t.offsetX) && (t.left && n < e - r && t.left(t), t.right && n > e + r && t.right(t)), Math.abs(t.offsetX) < o * Math.abs(t.offsetY) && (t.up && a < i - r && t.up(t), t.down && a > i + r && t.down(t));
};
function Px(t, e) {
  var i;
  const n = t.changedTouches[0];
  e.touchstartX = n.clientX, e.touchstartY = n.clientY, (i = e.start) == null || i.call(e, {
    originalEvent: t,
    ...e
  });
}
function Tx(t, e) {
  var i;
  const n = t.changedTouches[0];
  e.touchendX = n.clientX, e.touchendY = n.clientY, (i = e.end) == null || i.call(e, {
    originalEvent: t,
    ...e
  }), xx(e);
}
function wx(t, e) {
  var i;
  const n = t.changedTouches[0];
  e.touchmoveX = n.clientX, e.touchmoveY = n.clientY, (i = e.move) == null || i.call(e, {
    originalEvent: t,
    ...e
  });
}
function Ex() {
  let t = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
  const e = {
    touchstartX: 0,
    touchstartY: 0,
    touchendX: 0,
    touchendY: 0,
    touchmoveX: 0,
    touchmoveY: 0,
    offsetX: 0,
    offsetY: 0,
    left: t.left,
    right: t.right,
    up: t.up,
    down: t.down,
    start: t.start,
    move: t.move,
    end: t.end
  };
  return {
    touchstart: (n) => Px(n, e),
    touchend: (n) => Tx(n, e),
    touchmove: (n) => wx(n, e)
  };
}
function Ax(t, e) {
  var s;
  const n = e.value, i = n != null && n.parent ? t.parentElement : t, a = (n == null ? void 0 : n.options) ?? {
    passive: !0
  }, o = (s = e.instance) == null ? void 0 : s.$.uid;
  if (!i || !o)
    return;
  const r = Ex(e.value);
  i._touchHandlers = i._touchHandlers ?? /* @__PURE__ */ Object.create(null), i._touchHandlers[o] = r, Wd(r).forEach((l) => {
    i.addEventListener(l, r[l], a);
  });
}
function Rx(t, e) {
  var o, r;
  const n = (o = e.value) != null && o.parent ? t.parentElement : t, i = (r = e.instance) == null ? void 0 : r.$.uid;
  if (!(n != null && n._touchHandlers) || !i)
    return;
  const a = n._touchHandlers[i];
  Wd(a).forEach((s) => {
    n.removeEventListener(s, a[s]);
  }), delete n._touchHandlers[i];
}
const Kg = {
  mounted: Ax,
  unmounted: Rx
}, Ix = Kg, qg = Symbol.for("vuetify:v-window"), Jg = Symbol.for("vuetify:v-window-group"), Qg = $({
  continuous: Boolean,
  nextIcon: {
    type: [Boolean, String, Function, Object],
    default: "$next"
  },
  prevIcon: {
    type: [Boolean, String, Function, Object],
    default: "$prev"
  },
  reverse: Boolean,
  showArrows: {
    type: [Boolean, String],
    validator: (t) => typeof t == "boolean" || t === "hover"
  },
  touch: {
    type: [Object, Boolean],
    default: void 0
  },
  direction: {
    type: String,
    default: "horizontal"
  },
  modelValue: null,
  disabled: Boolean,
  selectedClass: {
    type: String,
    default: "v-window-item--active"
  },
  // TODO: mandatory should probably not be exposed but do this for now
  mandatory: {
    type: [Boolean, String],
    default: "force"
  },
  ...ue(),
  ...Le(),
  ...ke()
}, "VWindow"), Ld = K()({
  name: "VWindow",
  directives: {
    Touch: Kg
  },
  props: Qg(),
  emits: {
    "update:modelValue": (t) => !0
  },
  setup(t, e) {
    let {
      slots: n
    } = e;
    const {
      themeClasses: i
    } = $e(t), {
      isRtl: a
    } = Qt(), {
      t: o
    } = _a(), r = So(t, Jg), s = Z(), l = x(() => a.value ? !t.reverse : t.reverse), c = q(!1), u = x(() => {
      const S = t.direction === "vertical" ? "y" : "x", T = (l.value ? !c.value : c.value) ? "-reverse" : "";
      return `v-window-${S}${T}-transition`;
    }), d = q(0), h = Z(void 0), f = x(() => r.items.value.findIndex((S) => r.selected.value.includes(S.id)));
    Q(f, (S, b) => {
      const T = r.items.value.length, _ = T - 1;
      T <= 2 ? c.value = S < b : S === _ && b === 0 ? c.value = !0 : S === 0 && b === _ ? c.value = !1 : c.value = S < b;
    }), it(qg, {
      transition: u,
      isReversed: c,
      transitionCount: d,
      transitionHeight: h,
      rootRef: s
    });
    const g = x(() => t.continuous || f.value !== 0), m = x(() => t.continuous || f.value !== r.items.value.length - 1);
    function v() {
      g.value && r.prev();
    }
    function y() {
      m.value && r.next();
    }
    const p = x(() => {
      const S = [], b = {
        icon: a.value ? t.nextIcon : t.prevIcon,
        class: `v-window__${l.value ? "right" : "left"}`,
        onClick: r.prev,
        "aria-label": o("$vuetify.carousel.prev")
      };
      S.push(g.value ? n.prev ? n.prev({
        props: b
      }) : C(_t, b, null) : C("div", null, null));
      const T = {
        icon: a.value ? t.prevIcon : t.nextIcon,
        class: `v-window__${l.value ? "left" : "right"}`,
        onClick: r.next,
        "aria-label": o("$vuetify.carousel.next")
      };
      return S.push(m.value ? n.next ? n.next({
        props: T
      }) : C(_t, T, null) : C("div", null, null)), S;
    }), M = x(() => t.touch === !1 ? t.touch : {
      ...{
        left: () => {
          l.value ? v() : y();
        },
        right: () => {
          l.value ? y() : v();
        },
        start: (b) => {
          let {
            originalEvent: T
          } = b;
          T.stopPropagation();
        }
      },
      ...t.touch === !0 ? {} : t.touch
    });
    return ie(() => Ze(C(t.tag, {
      ref: s,
      class: ["v-window", {
        "v-window--show-arrows-on-hover": t.showArrows === "hover"
      }, i.value, t.class],
      style: t.style
    }, {
      default: () => {
        var S, b;
        return [C("div", {
          class: "v-window__container",
          style: {
            height: h.value
          }
        }, [(S = n.default) == null ? void 0 : S.call(n, {
          group: r
        }), t.showArrows !== !1 && C("div", {
          class: "v-window__controls"
        }, [p.value])]), (b = n.additional) == null ? void 0 : b.call(n, {
          group: r
        })];
      }
    }), [[Jt("touch"), M.value]])), {
      group: r
    };
  }
}), zx = $({
  color: String,
  cycle: Boolean,
  delimiterIcon: {
    type: xe,
    default: "$delimiter"
  },
  height: {
    type: [Number, String],
    default: 500
  },
  hideDelimiters: Boolean,
  hideDelimiterBackground: Boolean,
  interval: {
    type: [Number, String],
    default: 6e3,
    validator: (t) => Number(t) > 0
  },
  progress: [Boolean, String],
  verticalDelimiters: [Boolean, String],
  ...Qg({
    continuous: !0,
    mandatory: "force",
    showArrows: !0
  })
}, "VCarousel"), el = K()({
  name: "VCarousel",
  props: zx(),
  emits: {
    "update:modelValue": (t) => !0
  },
  setup(t, e) {
    let {
      slots: n
    } = e;
    const i = Be(t, "modelValue"), {
      t: a
    } = _a(), o = Z();
    let r = -1;
    Q(i, l), Q(() => t.interval, l), Q(() => t.cycle, (c) => {
      c ? l() : window.clearTimeout(r);
    }), nt(s);
    function s() {
      !t.cycle || !o.value || (r = window.setTimeout(o.value.group.next, +t.interval > 0 ? +t.interval : 6e3));
    }
    function l() {
      window.clearTimeout(r), window.requestAnimationFrame(s);
    }
    return ie(() => {
      const c = Ld.filterProps(t);
      return C(Ld, se({
        ref: o
      }, c, {
        modelValue: i.value,
        "onUpdate:modelValue": (u) => i.value = u,
        class: ["v-carousel", {
          "v-carousel--hide-delimiter-background": t.hideDelimiterBackground,
          "v-carousel--vertical-delimiters": t.verticalDelimiters
        }, t.class],
        style: [{
          height: oe(t.height)
        }, t.style]
      }), {
        default: n.default,
        additional: (u) => {
          let {
            group: d
          } = u;
          return C(de, null, [!t.hideDelimiters && C("div", {
            class: "v-carousel__controls",
            style: {
              left: t.verticalDelimiters === "left" && t.verticalDelimiters ? 0 : "auto",
              right: t.verticalDelimiters === "right" ? 0 : "auto"
            }
          }, [d.items.value.length > 0 && C(Xe, {
            defaults: {
              VBtn: {
                color: t.color,
                icon: t.delimiterIcon,
                size: "x-small",
                variant: "text"
              }
            },
            scoped: !0
          }, {
            default: () => [d.items.value.map((h, f) => {
              const g = {
                id: `carousel-item-${h.id}`,
                "aria-label": a("$vuetify.carousel.ariaLabel.delimiter", f + 1, d.items.value.length),
                class: ["v-carousel__controls__item", d.isSelected(h.id) && "v-btn--active"],
                onClick: () => d.select(h.id, !0)
              };
              return n.item ? n.item({
                props: g,
                item: h
              }) : C(_t, se(h, g), null);
            })]
          })]), t.progress && C(ef, {
            class: "v-carousel__progress",
            color: typeof t.progress == "string" ? t.progress : void 0,
            modelValue: (d.getItemIndex(i.value) + 1) / d.items.value.length * 100
          }, null)]);
        },
        prev: n.prev,
        next: n.next
      });
    }), {};
  }
}), em = $({
  reverseTransition: {
    type: [Boolean, String],
    default: void 0
  },
  transition: {
    type: [Boolean, String],
    default: void 0
  },
  ...ue(),
  ...po(),
  ...Tr()
}, "VWindowItem"), Vd = K()({
  name: "VWindowItem",
  directives: {
    Touch: Ix
  },
  props: em(),
  emits: {
    "group:selected": (t) => !0
  },
  setup(t, e) {
    let {
      slots: n
    } = e;
    const i = Ne(qg), a = _o(t, Jg), {
      isBooted: o
    } = bo();
    if (!i || !a)
      throw new Error("[Vuetify] VWindowItem must be used inside VWindow");
    const r = q(!1), s = x(() => o.value && (i.isReversed.value ? t.reverseTransition !== !1 : t.transition !== !1));
    function l() {
      !r.value || !i || (r.value = !1, i.transitionCount.value > 0 && (i.transitionCount.value -= 1, i.transitionCount.value === 0 && (i.transitionHeight.value = void 0)));
    }
    function c() {
      var g;
      r.value || !i || (r.value = !0, i.transitionCount.value === 0 && (i.transitionHeight.value = oe((g = i.rootRef.value) == null ? void 0 : g.clientHeight)), i.transitionCount.value += 1);
    }
    function u() {
      l();
    }
    function d(g) {
      r.value && je(() => {
        !s.value || !r.value || !i || (i.transitionHeight.value = oe(g.clientHeight));
      });
    }
    const h = x(() => {
      const g = i.isReversed.value ? t.reverseTransition : t.transition;
      return s.value ? {
        name: typeof g != "string" ? i.transition.value : g,
        onBeforeEnter: c,
        onAfterEnter: l,
        onEnterCancelled: u,
        onBeforeLeave: c,
        onAfterLeave: l,
        onLeaveCancelled: u,
        onEnter: d
      } : !1;
    }), {
      hasContent: f
    } = xl(t, a.isSelected);
    return ie(() => C(kn, {
      transition: h.value,
      disabled: !o.value
    }, {
      default: () => {
        var g;
        return [Ze(C("div", {
          class: ["v-window-item", a.selectedClass.value, t.class],
          style: t.style
        }, [f.value && ((g = n.default) == null ? void 0 : g.call(n))]), [[ui, a.isSelected.value]])];
      }
    })), {
      groupItem: a
    };
  }
}), Lx = $({
  ...ah(),
  ...em()
}, "VCarouselItem"), tl = K()({
  name: "VCarouselItem",
  inheritAttrs: !1,
  props: Lx(),
  setup(t, e) {
    let {
      slots: n,
      attrs: i
    } = e;
    ie(() => {
      const a = gn.filterProps(t), o = Vd.filterProps(t);
      return C(Vd, se({
        class: "v-carousel-item"
      }, o), {
        default: () => [C(gn, se(i, a), n)]
      });
    });
  }
}), Vx = {
  __name: "Gallery",
  props: ["id", "content", "info"],
  setup(t) {
    const { isMobile: e, resolveImg: n } = va(), i = Z(0), a = Z(null), o = () => {
      i.value = (i.value + t.content.images.length - 1) % t.content.images.length;
    }, r = () => {
      i.value = (i.value + 1) % t.content.images.length;
    }, s = () => {
      a.value = setInterval(() => {
        r();
      }, 4e3);
    }, l = () => {
      a.value ? (clearInterval(a.value), a.value = null) : s();
    }, c = (u) => {
      u.key === "ArrowLeft" ? (o(), l()) : u.key === "ArrowRight" && (r(), l());
    };
    return nt(() => {
      window.addEventListener("keydown", c), s();
    }), Bd(() => {
      window.removeEventListener("keydown", c), clearInterval(a.value);
    }), (u, d) => (H(), Te(de, null, [
      t.content.type === "manual" ? (H(), fe(el, {
        key: 0,
        id: t.id,
        height: O(e) ? 400 : 600,
        "delimiter-icon": "mdi-square"
      }, {
        default: Y(() => [
          (H(!0), Te(de, null, Rt(t.content.images, (h, f) => (H(), fe(tl, { key: f }, {
            default: Y(() => [
              C(gn, {
                src: O(n)(h),
                cover: ""
              }, null, 8, ["src"])
            ]),
            _: 2
          }, 1024))), 128))
        ]),
        _: 1
      }, 8, ["id", "height"])) : Ae("", !0),
      t.content.type === "automatic" ? (H(), fe(el, {
        key: 1,
        id: t.id,
        style: { height: "96vh" },
        onClick: l,
        modelValue: i.value,
        "onUpdate:modelValue": d[0] || (d[0] = (h) => i.value = h),
        "hide-delimiters": ""
      }, {
        prev: Y(() => d[1] || (d[1] = [])),
        next: Y(() => d[2] || (d[2] = [])),
        default: Y(() => [
          (H(!0), Te(de, null, Rt(t.content.images, (h) => (H(), fe(tl, {
            src: O(n)(h),
            cover: ""
          }, null, 8, ["src"]))), 256))
        ]),
        _: 1
      }, 8, ["id", "modelValue"])) : Ae("", !0)
    ], 64));
  }
}, Bx = /* @__PURE__ */ ho(Vx, [["__scopeId", "data-v-cbbc1f30"]]);
const so = Symbol.for("vuetify:v-expansion-panel"), Fx = ["default", "accordion", "inset", "popout"], kx = $({
  color: String,
  static: Boolean,
  variant: {
    type: String,
    default: "default",
    validator: (t) => Fx.includes(t)
  },
  readonly: Boolean,
  ...ue(),
  ...Mr(),
  ...Le(),
  ...ke()
}, "VExpansionPanels"), Ox = K()({
  name: "VExpansionPanels",
  props: kx(),
  emits: {
    "update:modelValue": (t) => !0
  },
  setup(t, e) {
    let {
      slots: n
    } = e;
    So(t, so);
    const {
      themeClasses: i
    } = $e(t), a = x(() => t.variant && `v-expansion-panels--variant-${t.variant}`);
    return yn({
      VExpansionPanel: {
        color: te(t, "color"),
        readonly: te(t, "readonly"),
        static: te(t, "static")
      }
    }), ie(() => C(t.tag, {
      class: ["v-expansion-panels", i.value, a.value, t.class],
      style: t.style
    }, n)), {};
  }
}), Dx = $({
  ...ue(),
  ...Tr()
}, "VExpansionPanelText"), tm = K()({
  name: "VExpansionPanelText",
  props: Dx(),
  setup(t, e) {
    let {
      slots: n
    } = e;
    const i = Ne(so);
    if (!i)
      throw new Error("[Vuetify] v-expansion-panel-text needs to be placed inside v-expansion-panel");
    const {
      hasContent: a,
      onAfterLeave: o
    } = xl(t, i.isSelected);
    return ie(() => C(pl, {
      onAfterLeave: o
    }, {
      default: () => {
        var r;
        return [Ze(C("div", {
          class: ["v-expansion-panel-text", t.class],
          style: t.style
        }, [n.default && a.value && C("div", {
          class: "v-expansion-panel-text__wrapper"
        }, [(r = n.default) == null ? void 0 : r.call(n)])]), [[ui, i.isSelected.value]])];
      }
    })), {};
  }
}), nm = $({
  color: String,
  expandIcon: {
    type: xe,
    default: "$expand"
  },
  collapseIcon: {
    type: xe,
    default: "$collapse"
  },
  hideActions: Boolean,
  static: Boolean,
  ripple: {
    type: [Boolean, Object],
    default: !1
  },
  readonly: Boolean,
  ...ue()
}, "VExpansionPanelTitle"), im = K()({
  name: "VExpansionPanelTitle",
  directives: {
    Ripple: pa
  },
  props: nm(),
  setup(t, e) {
    let {
      slots: n
    } = e;
    const i = Ne(so);
    if (!i)
      throw new Error("[Vuetify] v-expansion-panel-title needs to be placed inside v-expansion-panel");
    const {
      backgroundColorClasses: a,
      backgroundColorStyles: o
    } = Pt(t, "color"), r = x(() => ({
      collapseIcon: t.collapseIcon,
      disabled: i.disabled.value,
      expanded: i.isSelected.value,
      expandIcon: t.expandIcon,
      readonly: t.readonly
    }));
    return ie(() => {
      var s;
      return Ze(C("button", {
        class: ["v-expansion-panel-title", {
          "v-expansion-panel-title--active": i.isSelected.value,
          "v-expansion-panel-title--static": t.static
        }, a.value, t.class],
        style: [o.value, t.style],
        type: "button",
        tabindex: i.disabled.value ? -1 : void 0,
        disabled: i.disabled.value,
        "aria-expanded": i.isSelected.value,
        onClick: t.readonly ? void 0 : i.toggle
      }, [C("span", {
        class: "v-expansion-panel-title__overlay"
      }, null), (s = n.default) == null ? void 0 : s.call(n, r.value), !t.hideActions && C("span", {
        class: "v-expansion-panel-title__icon"
      }, [n.actions ? n.actions(r.value) : C(Ie, {
        icon: i.isSelected.value ? t.collapseIcon : t.expandIcon
      }, null)])]), [[Jt("ripple"), t.ripple]]);
    }), {};
  }
}), Gx = $({
  title: String,
  text: String,
  bgColor: String,
  ...ue(),
  ...en(),
  ...po(),
  ...Tr(),
  ...Ct(),
  ...Le(),
  ...nm()
}, "VExpansionPanel"), Nx = K()({
  name: "VExpansionPanel",
  props: Gx(),
  emits: {
    "group:selected": (t) => !0
  },
  setup(t, e) {
    let {
      slots: n
    } = e;
    const i = _o(t, so), {
      backgroundColorClasses: a,
      backgroundColorStyles: o
    } = Pt(t, "bgColor"), {
      elevationClasses: r
    } = tn(t), {
      roundedClasses: s
    } = yt(t), l = x(() => (i == null ? void 0 : i.disabled.value) || t.disabled), c = x(() => i.group.items.value.reduce((h, f, g) => (i.group.selected.value.includes(f.id) && h.push(g), h), [])), u = x(() => {
      const h = i.group.items.value.findIndex((f) => f.id === i.id);
      return !i.isSelected.value && c.value.some((f) => f - h === 1);
    }), d = x(() => {
      const h = i.group.items.value.findIndex((f) => f.id === i.id);
      return !i.isSelected.value && c.value.some((f) => f - h === -1);
    });
    return it(so, i), yn({
      VExpansionPanelText: {
        eager: te(t, "eager")
      },
      VExpansionPanelTitle: {
        readonly: te(t, "readonly")
      }
    }), ie(() => {
      const h = !!(n.text || t.text), f = !!(n.title || t.title);
      return C(t.tag, {
        class: ["v-expansion-panel", {
          "v-expansion-panel--active": i.isSelected.value,
          "v-expansion-panel--before-active": u.value,
          "v-expansion-panel--after-active": d.value,
          "v-expansion-panel--disabled": l.value
        }, s.value, a.value, t.class],
        style: [o.value, t.style]
      }, {
        default: () => {
          var g;
          return [C("div", {
            class: ["v-expansion-panel__shadow", ...r.value]
          }, null), f && C(im, {
            key: "title",
            collapseIcon: t.collapseIcon,
            color: t.color,
            expandIcon: t.expandIcon,
            hideActions: t.hideActions,
            ripple: t.ripple
          }, {
            default: () => [n.title ? n.title() : t.title]
          }), h && C(tm, {
            key: "text"
          }, {
            default: () => [n.text ? n.text() : t.text]
          }), (g = n.default) == null ? void 0 : g.call(n)];
        }
      });
    }), {};
  }
}), $x = ["innerHTML"], Wx = ["innerHTML"], Ux = ["innerHTML"], Xx = {
  __name: "Services",
  props: ["content", "info"],
  setup(t) {
    const { getText: e } = mi();
    return (n, i) => (H(), fe(vn, null, {
      default: Y(() => [
        ve("h1", {
          style: mt({ color: t.info.primaryColor }),
          innerHTML: O(e)(t.content.title) || "I nostri servizi"
        }, null, 12, $x),
        C(Ox, { multiple: "" }, {
          default: Y(() => [
            (H(!0), Te(de, null, Rt(t.content.services, (a) => (H(), fe(Nx, {
              elevation: "20",
              class: "margin_top__default"
            }, {
              default: Y(() => [
                C(im, null, {
                  default: Y(() => [
                    ve("b", {
                      innerHTML: O(e)(a.name)
                    }, null, 8, Wx)
                  ]),
                  _: 2
                }, 1024),
                C(tm, null, {
                  default: Y(() => [
                    ve("div", {
                      innerHTML: O(e)(a.description)
                    }, null, 8, Ux)
                  ]),
                  _: 2
                }, 1024)
              ]),
              _: 2
            }, 1024))), 256))
          ]),
          _: 1
        })
      ]),
      _: 1
    }));
  }
}, Zr = [
  (t) => t ? !0 : "Campo obbligatorio"
], Yx = Zr.concat([
  (t) => /.+@.+\..+/.test(t) ? !0 : "E-mail non valida."
]), jx = Zr.concat([
  (t) => /^(https?:\/\/)?([\w-]+\.)+([a-z]{2,})+(\/[\w-]*)*(\?[a-z0-9-]+=[a-z0-9-%]+(&[a-z0-9-]+=[a-z0-9-%]+)*)?$/i.test(t) ? !0 : "Sito non valido."
]), Zx = Zr.concat([
  (t) => /[A-Z]/.test(t) ? !0 : "La password deve contenere almeno una lettera maiscola.",
  (t) => /[a-z]/.test(t) ? !0 : "La password deve contenere almeno una lettera minuscola.",
  (t) => /\d/.test(t) ? !0 : "La password deve contenere almeno un numero.",
  (t) => t.length >= 8 ? !0 : "La password deve contenere almeno 8 caratteri."
]), Hx = (t, e) => {
  const n = [];
  for (const i of e) {
    const a = i(t);
    a !== !0 && n.push(a);
  }
  return n.length === 0 ? null : n;
}, zn = {
  validateInput: Hx,
  requiredRules: Zr,
  emailRules: Yx,
  siteRules: jx,
  passwordRules: Zx
}, Kx = $({
  ...ue(),
  ...Qv()
}, "VForm"), qx = K()({
  name: "VForm",
  props: Kx(),
  emits: {
    "update:modelValue": (t) => !0,
    submit: (t) => !0
  },
  setup(t, e) {
    let {
      slots: n,
      emit: i
    } = e;
    const a = eC(t), o = Z();
    function r(l) {
      l.preventDefault(), a.reset();
    }
    function s(l) {
      const c = l, u = a.validate();
      c.then = u.then.bind(u), c.catch = u.catch.bind(u), c.finally = u.finally.bind(u), i("submit", c), c.defaultPrevented || u.then((d) => {
        var f;
        let {
          valid: h
        } = d;
        h && ((f = o.value) == null || f.submit());
      }), c.preventDefault();
    }
    return ie(() => {
      var l;
      return C("form", {
        ref: o,
        class: ["v-form", t.class],
        style: t.style,
        novalidate: !0,
        onReset: r,
        onSubmit: s
      }, [(l = n.default) == null ? void 0 : l.call(n, a)]);
    }), ba(a, o);
  }
});
const Jx = $({
  autoGrow: Boolean,
  autofocus: Boolean,
  counter: [Boolean, Number, String],
  counterValue: Function,
  prefix: String,
  placeholder: String,
  persistentPlaceholder: Boolean,
  persistentCounter: Boolean,
  noResize: Boolean,
  rows: {
    type: [Number, String],
    default: 5,
    validator: (t) => !isNaN(parseFloat(t))
  },
  maxRows: {
    type: [Number, String],
    validator: (t) => !isNaN(parseFloat(t))
  },
  suffix: String,
  modelModifiers: Object,
  ...bl(),
  ...El()
}, "VTextarea"), Qx = K()({
  name: "VTextarea",
  directives: {
    Intersect: yl
  },
  inheritAttrs: !1,
  props: Jx(),
  emits: {
    "click:control": (t) => !0,
    "mousedown:control": (t) => !0,
    "update:focused": (t) => !0,
    "update:modelValue": (t) => !0
  },
  setup(t, e) {
    let {
      attrs: n,
      emit: i,
      slots: a
    } = e;
    const o = Be(t, "modelValue"), {
      isFocused: r,
      focus: s,
      blur: l
    } = _l(t), c = x(() => typeof t.counterValue == "function" ? t.counterValue(o.value) : (o.value || "").toString().length), u = x(() => {
      if (n.maxlength)
        return n.maxlength;
      if (!(!t.counter || typeof t.counter != "number" && typeof t.counter != "string"))
        return t.counter;
    });
    function d(z, A) {
      var R, V;
      !t.autofocus || !z || (V = (R = A[0].target) == null ? void 0 : R.focus) == null || V.call(R);
    }
    const h = Z(), f = Z(), g = q(""), m = Z(), v = x(() => t.persistentPlaceholder || r.value || t.active);
    function y() {
      var z;
      m.value !== document.activeElement && ((z = m.value) == null || z.focus()), r.value || s();
    }
    function p(z) {
      y(), i("click:control", z);
    }
    function M(z) {
      i("mousedown:control", z);
    }
    function S(z) {
      z.stopPropagation(), y(), je(() => {
        o.value = "", Zd(t["onClick:clear"], z);
      });
    }
    function b(z) {
      var R;
      const A = z.target;
      if (o.value = A.value, (R = t.modelModifiers) != null && R.trim) {
        const V = [A.selectionStart, A.selectionEnd];
        je(() => {
          A.selectionStart = V[0], A.selectionEnd = V[1];
        });
      }
    }
    const T = Z(), _ = Z(+t.rows), P = x(() => ["plain", "underlined"].includes(t.variant));
    Ht(() => {
      t.autoGrow || (_.value = +t.rows);
    });
    function w() {
      t.autoGrow && je(() => {
        if (!T.value || !f.value)
          return;
        const z = getComputedStyle(T.value), A = getComputedStyle(f.value.$el), R = parseFloat(z.getPropertyValue("--v-field-padding-top")) + parseFloat(z.getPropertyValue("--v-input-padding-top")) + parseFloat(z.getPropertyValue("--v-field-padding-bottom")), V = T.value.scrollHeight, N = parseFloat(z.lineHeight), G = Math.max(parseFloat(t.rows) * N + R, parseFloat(A.getPropertyValue("--v-input-control-height"))), X = parseFloat(t.maxRows) * N + R || 1 / 0, E = ai(V ?? 0, G, X);
        _.value = Math.floor((E - R) / N), g.value = oe(E);
      });
    }
    nt(w), Q(o, w), Q(() => t.rows, w), Q(() => t.maxRows, w), Q(() => t.density, w);
    let I;
    return Q(T, (z) => {
      z ? (I = new ResizeObserver(w), I.observe(T.value)) : I == null || I.disconnect();
    }), vt(() => {
      I == null || I.disconnect();
    }), ie(() => {
      const z = !!(a.counter || t.counter || t.counterValue), A = !!(z || a.details), [R, V] = dl(n), {
        modelValue: N,
        ...G
      } = ar.filterProps(t), X = nf(t);
      return C(ar, se({
        ref: h,
        modelValue: o.value,
        "onUpdate:modelValue": (E) => o.value = E,
        class: ["v-textarea v-text-field", {
          "v-textarea--prefixed": t.prefix,
          "v-textarea--suffixed": t.suffix,
          "v-text-field--prefixed": t.prefix,
          "v-text-field--suffixed": t.suffix,
          "v-textarea--auto-grow": t.autoGrow,
          "v-textarea--no-resize": t.noResize || t.autoGrow,
          "v-input--plain-underlined": P.value
        }, t.class],
        style: t.style
      }, R, G, {
        centerAffix: _.value === 1 && !P.value,
        focused: r.value
      }), {
        ...a,
        default: (E) => {
          let {
            id: B,
            isDisabled: D,
            isDirty: k,
            isReadonly: W,
            isValid: U
          } = E;
          return C(Al, se({
            ref: f,
            style: {
              "--v-textarea-control-height": g.value
            },
            onClick: p,
            onMousedown: M,
            "onClick:clear": S,
            "onClick:prependInner": t["onClick:prependInner"],
            "onClick:appendInner": t["onClick:appendInner"]
          }, X, {
            id: B.value,
            active: v.value || k.value,
            centerAffix: _.value === 1 && !P.value,
            dirty: k.value || t.dirty,
            disabled: D.value,
            focused: r.value,
            error: U.value === !1
          }), {
            ...a,
            default: (L) => {
              let {
                props: {
                  class: ee,
                  ...J
                }
              } = L;
              return C(de, null, [t.prefix && C("span", {
                class: "v-text-field__prefix"
              }, [t.prefix]), Ze(C("textarea", se({
                ref: m,
                class: ee,
                value: o.value,
                onInput: b,
                autofocus: t.autofocus,
                readonly: W.value,
                disabled: D.value,
                placeholder: t.placeholder,
                rows: t.rows,
                name: t.name,
                onFocus: y,
                onBlur: l
              }, J, V), null), [[Jt("intersect"), {
                handler: d
              }, null, {
                once: !0
              }]]), t.autoGrow && Ze(C("textarea", {
                class: [ee, "v-textarea__sizer"],
                id: `${J.id}-sizer`,
                "onUpdate:modelValue": (ae) => o.value = ae,
                ref: T,
                readonly: !0,
                "aria-hidden": "true"
              }, null), [[pm, o.value]]), t.suffix && C("span", {
                class: "v-text-field__suffix"
              }, [t.suffix])]);
            }
          });
        },
        details: A ? (E) => {
          var B;
          return C(de, null, [(B = a.details) == null ? void 0 : B.call(a, E), z && C(de, null, [C("span", null, null), C(Jh, {
            active: t.persistentCounter || r.value,
            value: c.value,
            max: u.value
          }, a.counter)])]);
        } : void 0
      });
    }), ba({}, h, f, m);
  }
}), eP = ["innerHTML"], tP = ["href", "innerHTML"], nP = ["innerHTML"], iP = {
  __name: "Contacts",
  props: ["content", "info"],
  setup(t) {
    const e = "", { getText: n } = mi(), i = Z(""), a = Z(""), o = Z(""), r = () => {
      !zn.validateInput(o.value, zn.emailRules) && !zn.validateInput(i.value, zn.requiredRules) && !zn.validateInput(a.value, zn.requiredRules) && ll.postRequestGenericBE("send-email", {
        email: e,
        subject: `Qualcuno ho usato il form del sito ${t.info.name}`,
        body: `Buongiorno,
Sono il tuo mailer, hai ricevuto il seguente messaggio:

Nominativo: ${i.value}
Mail: ${o.value}

Testo:
${a.value}`
      }, function() {
        alert(`Mail inviata
Ti ringraziamo per il contatto`);
      });
    };
    return (s, l) => (H(), fe(vn, null, {
      default: Y(() => [
        C(Mo, { elevation: "20" }, {
          default: Y(() => [
            C(vn, null, {
              default: Y(() => [
                ve("h2", {
                  style: mt({ color: t.info.primaryColor }),
                  innerHTML: O(n)(t.content.title) || "I nostri contatti"
                }, null, 12, eP),
                C(Sa, null, {
                  default: Y(() => [
                    (H(!0), Te(de, null, Rt(t.content.contacts, (c) => (H(), fe(mn, {
                      height: "20",
                      key: c
                    }, {
                      prepend: Y(() => [
                        C(Ie, {
                          icon: c.icon,
                          color: t.info.primaryColor
                        }, null, 8, ["icon", "color"])
                      ]),
                      default: Y(() => [
                        C(Gh, { style: { "white-space": "normal" } }, {
                          default: Y(() => [
                            ve("a", {
                              href: c.url,
                              target: "_blank",
                              style: { "text-decoration": "none", color: "inherit" },
                              innerHTML: O(n)(c.title)
                            }, null, 8, tP)
                          ]),
                          _: 2
                        }, 1024)
                      ]),
                      _: 2
                    }, 1024))), 128))
                  ]),
                  _: 1
                }),
                l[4] || (l[4] = ve("br", null, null, -1)),
                ve("hr", {
                  style: mt({ height: "5px", backgroundColor: t.info.primaryColor })
                }, null, 4),
                l[5] || (l[5] = ve("br", null, null, -1)),
                ve("b", {
                  innerHTML: O(n)(t.content.subtitle) || "Contattaci direttamente con questo form"
                }, null, 8, nP),
                l[6] || (l[6] = ve("br", null, null, -1)),
                l[7] || (l[7] = ve("br", null, null, -1)),
                C(qx, {
                  "fast-fail": "",
                  onSubmit: Wa(r, ["prevent"])
                }, {
                  default: Y(() => [
                    C(sa, null, {
                      default: Y(() => [
                        C(jt, {
                          cols: "12",
                          md: "6"
                        }, {
                          default: Y(() => [
                            C(On, {
                              modelValue: i.value,
                              "onUpdate:modelValue": l[0] || (l[0] = (c) => i.value = c),
                              rules: O(zn).requiredRules,
                              variant: "outlined",
                              label: "Name"
                            }, null, 8, ["modelValue", "rules"])
                          ]),
                          _: 1
                        }),
                        C(jt, {
                          cols: "12",
                          md: "6"
                        }, {
                          default: Y(() => [
                            C(On, {
                              modelValue: o.value,
                              "onUpdate:modelValue": l[1] || (l[1] = (c) => o.value = c),
                              rules: O(zn).emailRules,
                              variant: "outlined",
                              label: "Email"
                            }, null, 8, ["modelValue", "rules"])
                          ]),
                          _: 1
                        })
                      ]),
                      _: 1
                    }),
                    C(sa, null, {
                      default: Y(() => [
                        C(jt, {
                          cols: "12",
                          md: "12"
                        }, {
                          default: Y(() => [
                            C(Qx, {
                              label: "Body",
                              rows: "4",
                              modelValue: a.value,
                              "onUpdate:modelValue": l[2] || (l[2] = (c) => a.value = c),
                              rules: O(zn).requiredRules,
                              variant: "outlined"
                            }, null, 8, ["modelValue", "rules"])
                          ]),
                          _: 1
                        })
                      ]),
                      _: 1
                    }),
                    l[3] || (l[3] = ve("br", null, null, -1)),
                    C(_t, {
                      block: "",
                      text: "Send",
                      type: "submit",
                      color: t.info.primaryColor
                    }, null, 8, ["color"])
                  ]),
                  _: 1
                })
              ]),
              _: 1
            })
          ]),
          _: 1
        })
      ]),
      _: 1
    }));
  }
}, aP = K()({
  name: "VSlideGroupItem",
  props: po(),
  emits: {
    "group:selected": (t) => !0
  },
  setup(t, e) {
    let {
      slots: n
    } = e;
    const i = _o(t, Ah);
    return () => {
      var a;
      return (a = n.default) == null ? void 0 : a.call(n, {
        isSelected: i.isSelected.value,
        select: i.select,
        toggle: i.toggle,
        selectedClass: i.selectedClass.value
      });
    };
  }
}), oP = {
  __name: "BrandList",
  props: ["content", "info"],
  setup(t) {
    const { isMobile: e } = va();
    return (n, i) => (H(), fe(vn, null, {
      default: Y(() => [
        C(zs, { "show-arrows": "" }, {
          prev: Y(() => [
            C(Ie, null, {
              default: Y(() => i[0] || (i[0] = [
                ct("mdi-chevron-left")
              ])),
              _: 1
            })
          ]),
          next: Y(() => [
            C(Ie, null, {
              default: Y(() => i[1] || (i[1] = [
                ct("mdi-chevron-right")
              ])),
              _: 1
            })
          ]),
          default: Y(() => [
            (H(!0), Te(de, null, Rt(t.content.brands, (a, o) => (H(), fe(aP, { key: o }, {
              default: Y(() => [
                C(Mo, {
                  height: O(e) ? 150 : 300,
                  width: O(e) ? 150 : 300,
                  style: { "margin-right": "20px", border: "0px" }
                }, {
                  default: Y(() => [
                    C(gn, { src: a }, null, 8, ["src"])
                  ]),
                  _: 2
                }, 1032, ["height", "width"])
              ]),
              _: 2
            }, 1024))), 128))
          ]),
          _: 1
        })
      ]),
      _: 1
    }));
  }
}, rP = ["innerHTML"], sP = ["src"], lP = ["src"], cP = ["innerHTML"], uP = {
  __name: "Advantages",
  props: ["content", "info"],
  setup(t) {
    const { getText: e } = mi(), { isMobile: n, resolveImg: i } = va();
    return (a, o) => (H(), fe(vn, null, {
      default: Y(() => [
        ve("h1", {
          style: mt({ color: t.info.primaryColor }),
          innerHTML: O(e)(t.content.title) || "I nostri vantaggi"
        }, null, 12, rP),
        (H(!0), Te(de, null, Rt(t.content.advantages, (r, s) => (H(), fe(Mo, {
          key: s,
          class: Fc(["margin_top__default", { "carousel--mobile": O(n) }]),
          elevation: "20",
          style: {
            marginTop: "1rem"
          }
        }, {
          default: Y(() => [
            ve("div", {
              class: Fc(["img-wrapper", { "mobile-height": O(n) }]),
              style: mt({
                width: "100%",
                height: O(n) ? "400px" : "600px",
                overflow: "hidden",
                position: "relative"
              })
            }, [
              Array.isArray(r.image) ? (H(), fe(el, {
                key: 0,
                "show-arrows": "",
                "hide-delimiters": "",
                height: O(n) ? "400px" : "600px",
                style: mt(O(n) ? {
                  "--v-btn-width": "35px",
                  "--v-btn-height": "35px",
                  "--v-btn-font-size": "14px"
                } : {})
              }, {
                default: Y(() => [
                  (H(!0), Te(de, null, Rt(r.image, (l, c) => (H(), fe(tl, { key: c }, {
                    default: Y(() => [
                      ve("img", {
                        src: O(i)(l),
                        style: { width: "100%", height: "100%", "object-fit": "cover", display: "block" }
                      }, null, 8, sP)
                    ]),
                    _: 2
                  }, 1024))), 128))
                ]),
                _: 2
              }, 1032, ["height", "style"])) : (H(), Te("img", {
                key: 1,
                src: O(i)(r.image),
                style: { width: "100%", height: "100%", "object-fit": "cover", display: "block" }
              }, null, 8, lP))
            ], 6),
            C(Bl, {
              style: { "white-space": "normal" },
              innerHTML: O(e)(r.name)
            }, null, 8, ["innerHTML"]),
            r.description ? (H(), fe(Fl, { key: 0 }, {
              default: Y(() => [
                ve("div", {
                  innerHTML: O(e)(r.description)
                }, null, 8, cP)
              ]),
              _: 2
            }, 1024)) : Ae("", !0)
          ]),
          _: 2
        }, 1032, ["class"]))), 128))
      ]),
      _: 1
    }));
  }
};
const dP = $({
  color: String,
  ...bn(),
  ...ue(),
  ...hi(),
  ...en(),
  ...Er(),
  ...Ll(),
  ...Ct(),
  ...Le(),
  ...ke()
}, "VSheet"), hP = K()({
  name: "VSheet",
  props: dP(),
  setup(t, e) {
    let {
      slots: n
    } = e;
    const {
      themeClasses: i
    } = $e(t), {
      backgroundColorClasses: a,
      backgroundColorStyles: o
    } = Pt(te(t, "color")), {
      borderClasses: r
    } = Mn(t), {
      dimensionStyles: s
    } = fi(t), {
      elevationClasses: l
    } = tn(t), {
      locationStyles: c
    } = Ar(t), {
      positionClasses: u
    } = Vl(t), {
      roundedClasses: d
    } = yt(t);
    return ie(() => C(t.tag, {
      class: ["v-sheet", i.value, a.value, r.value, l.value, u.value, d.value, t.class],
      style: [o.value, s.value, c.value, t.style]
    }, n)), {};
  }
}), fP = ["innerHTML"], gP = ["innerHTML"], mP = ["innerHTML"], vP = ["href"], CP = "right", yP = "bottom", pP = {
  __name: "DualSection",
  props: ["content", "info"],
  setup(t) {
    const { isMobile: e, resolveImg: n } = va(), { getText: i } = mi(), a = x(() => (t.content.orientationDesktop || CP) === "left"), o = x(() => (t.content.orientationMobile || yP) === "top"), r = x(() => e.value ? o.value : a.value);
    return (s, l) => (H(), fe(vn, null, {
      default: Y(() => [
        C(sa, { align: "center" }, {
          default: Y(() => [
            r.value ? (H(), fe(jt, {
              key: 0,
              cols: "12",
              md: "6"
            }, {
              default: Y(() => [
                C(gn, {
                  src: O(n)(t.content.image),
                  cover: ""
                }, null, 8, ["src"])
              ]),
              _: 1
            })) : Ae("", !0),
            C(jt, {
              cols: "12",
              md: "6"
            }, {
              default: Y(() => [
                C(hP, { style: { "background-color": "transparent" } }, {
                  default: Y(() => [
                    t.content.title ? (H(), Te("p", {
                      key: 0,
                      class: "text-h3 font-weight-black",
                      style: mt({ color: t.info.primaryColor + " !important" }),
                      innerHTML: O(i)(t.content.title)
                    }, null, 12, fP)) : Ae("", !0),
                    l[0] || (l[0] = ve("br", null, null, -1)),
                    t.content.subtitle ? (H(), Te("p", {
                      key: 1,
                      class: "text-subtitle-1 font-weight-black",
                      innerHTML: O(i)(t.content.subtitle) + "<br>"
                    }, null, 8, gP)) : Ae("", !0),
                    t.content.description ? (H(), Te("p", {
                      key: 2,
                      innerHTML: O(i)(t.content.description)
                    }, null, 8, mP)) : Ae("", !0),
                    l[1] || (l[1] = ve("br", null, null, -1)),
                    t.content.url && t.content.button ? (H(), Te("a", {
                      key: 3,
                      href: t.content.url
                    }, [
                      C(_t, {
                        innerHTML: O(i)(t.content.button),
                        class: "text-none",
                        variant: "flat",
                        color: t.info.primaryColor,
                        style: { marginTop: "7px" }
                      }, null, 8, ["innerHTML", "color"])
                    ], 8, vP)) : Ae("", !0)
                  ]),
                  _: 1
                })
              ]),
              _: 1
            }),
            r.value ? Ae("", !0) : (H(), fe(jt, {
              key: 1,
              cols: "12",
              md: "6"
            }, {
              default: Y(() => [
                C(gn, {
                  src: O(n)(t.content.image),
                  cover: ""
                }, null, 8, ["src"])
              ]),
              _: 1
            }))
          ]),
          _: 1
        })
      ]),
      _: 1
    }));
  }
}, _P = {
  __name: "Home",
  setup(t) {
    const { getAncor: e } = mi(), n = Wn(), { data: i } = Kt(n), a = {
      map: bx,
      line: Mx,
      gallery: Bx,
      services: Xx,
      contacts: iP,
      brandlist: oP,
      advantages: uP,
      dualSection: pP
    }, o = i.value.info, r = i.value.components;
    return (s, l) => (H(!0), Te(de, null, Rt(O(r), (c) => (H(), fe(Od(a[c.type]), {
      id: O(e)(c.menu) ? O(e)(c.menu).toLowerCase() : null,
      content: c.content,
      info: O(o)
    }, null, 8, ["id", "content", "info"]))), 256));
  }
};
const SP = ["href"], bP = {
  __name: "SocialBubbles",
  props: {
    chattyActive: Boolean,
    info: {
      default: null
    },
    components: {
      default: null
    }
  },
  setup(t) {
    const e = Wn(), { data: n } = Kt(e), i = t, a = i.info ? i.info : n.value.info, o = a.socialBubbles;
    return (r, s) => (H(!0), Te(de, null, Rt(O(o), (l, c) => (H(), Te("div", {
      key: c,
      class: "social-container shadown",
      style: mt({
        bottom: `${(i.chattyActive ? 100 : 20) + c * 70}px`,
        backgroundColor: "transparent"
      })
    }, [
      ve("a", {
        href: l.url,
        target: "_blank",
        rel: "noopener noreferrer"
      }, [
        C(_t, {
          icon: l.icon,
          style: mt({ backgroundColor: O(a).primaryColor, color: "#fff" }),
          size: "x-large"
        }, null, 8, ["icon", "style"])
      ], 8, SP)
    ], 4))), 128));
  }
}, MP = /* @__PURE__ */ ho(bP, [["__scopeId", "data-v-3f5f4aa7"]]);
const xP = $({
  ...ue(),
  ...tp({
    fullHeight: !0
  }),
  ...ke()
}, "VApp"), PP = K()({
  name: "VApp",
  props: xP(),
  setup(t, e) {
    let {
      slots: n
    } = e;
    const i = $e(t), {
      layoutClasses: a,
      getLayoutItem: o,
      items: r,
      layoutRef: s
    } = ap(t), {
      rtlClasses: l
    } = Qt();
    return ie(() => {
      var c;
      return C("div", {
        ref: s,
        class: ["v-application", i.themeClasses.value, a.value, l.value, t.class],
        style: [t.style]
      }, [C("div", {
        class: "v-application__wrap"
      }, [(c = n.default) == null ? void 0 : c.call(n)])]);
    }), {
      getLayoutItem: o,
      items: r,
      theme: i
    };
  }
});
const TP = $({
  scrollable: Boolean,
  ...ue(),
  ...Le({
    tag: "main"
  })
}, "VMain"), wP = K()({
  name: "VMain",
  props: TP(),
  setup(t, e) {
    let {
      slots: n
    } = e;
    const {
      mainStyles: i
    } = np(), {
      ssrBootStyles: a
    } = bo();
    return ie(() => C(t.tag, {
      class: ["v-main", {
        "v-main--scrollable": t.scrollable
      }, t.class],
      style: [i.value, a.value, t.style]
    }, {
      default: () => {
        var o, r;
        return [t.scrollable ? C("div", {
          class: "v-main__scroller"
        }, [(o = n.default) == null ? void 0 : o.call(n)]) : (r = n.default) == null ? void 0 : r.call(n)];
      }
    })), {};
  }
}), LP = {
  __name: "DemoLayout",
  props: {
    json: Object
  },
  setup(t) {
    const e = Z(!1), n = Z(!1), i = Wn(), { data: a, ready: o } = Kt(i), r = t, s = x(() => a.value.info.backgroundImage ? {
      backgroundImage: `url(${a.value.info.backgroundImage})`,
      backgroundSize: "cover",
      backgroundPosition: "center",
      backgroundRepeat: "no-repeat"
    } : {
      backgroundColor: a.value.info.secondaryColor
    });
    return nt(() => {
      i.initDataByJson(r.json);
    }), Q(o, (l) => {
      if (!l)
        return;
      const c = a.value.addOn;
      if (c && c.includes("Chatty")) {
        const u = document.createElement("script");
        u.type = "module", u.src = `https://chatty-be.replit.app/chat-file/js?file=inject&user_id=${a.value.info.chattyId}`, document.body.appendChild(u), u.onload = () => {
          e.value = !0;
        }, u.onerror = () => {
          e.value = !1;
        };
      }
      a.value.info.socialBubbles && (n.value = !0);
    }), (l, c) => O(o) ? (H(), fe(PP, { key: 0 }, {
      default: Y(() => [
        C(xp),
        n.value ? Ae("", !0) : (H(), fe(Im, {
          key: 0,
          bottomOffset: e.value ? 100 : 20
        }, null, 8, ["bottomOffset"])),
        n.value ? (H(), fe(MP, {
          key: 1,
          chattyActive: e.value
        }, null, 8, ["chattyActive"])) : Ae("", !0),
        C(wP, {
          style: mt(s.value)
        }, {
          default: Y(() => [
            C(_P)
          ]),
          _: 1
        }, 8, ["style"]),
        C(Ep)
      ]),
      _: 1
    })) : Ae("", !0);
  }
};
export {
  LP as DemoLayout
};
